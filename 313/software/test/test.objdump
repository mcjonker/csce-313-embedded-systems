
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000071c memsz 0x0000071c flags r-x
    LOAD off    0x0000173c vaddr 0x0001073c paddr 0x00010740 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001744 vaddr 0x00010744 paddr 0x00010744 align 2**12
         filesz 0x00000000 memsz 0x00000014 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00001740  2**0
                  CONTENTS
  2 .text         000006a0  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000007c  000106c0  000106c0  000016c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  0001073c  00010740  0000173c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000014  00010744  00010744  00001744  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00010758  00010758  00001740  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000230  00000000  00000000  00001768  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000197a  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000c2f  00000000  00000000  00003312  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000e11  00000000  00000000  00003f41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000002c0  00000000  00000000  00004d54  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000b97  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000929  00000000  00000000  00005bab  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000064d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000128  00000000  00000000  00006538  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000759a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000759d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000075a9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000075aa  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000075ab  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000075b6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000075c1  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000075cc  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000011  00000000  00000000  000075d7  2**0
                  CONTENTS, READONLY
 26 .jdi          00005173  00000000  00000000  000075e8  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003e316  00000000  00000000  0000c75b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
000106c0 l    d  .rodata	00000000 .rodata
0001073c l    d  .rwdata	00000000 .rwdata
00010744 l    d  .bss	00000000 .bss
00010758 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
00010068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 rand.c
00010744 l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00010354 g     F .text	0000002c alt_main
00010740 g       *ABS*	00000000 __flash_rwdata_start
00010380 g     F .text	00000038 alt_putstr
000104b0 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010750 g     O .bss	00000004 alt_argv
0001873c g       *ABS*	00000000 _gp
000103b8 g     F .text	00000004 usleep
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00010604 g     F .text	00000064 .hidden __udivsi3
000104b8 g     F .text	00000038 alt_icache_flush
00010758 g       *ABS*	00000000 __bss_end
0001048c g     F .text	00000018 alt_dcache_flush_all
00010740 g       *ABS*	00000000 __ram_rwdata_end
0001073c g       *ABS*	00000000 __ram_rodata_end
0001073c g     O .rwdata	00000004 jtag_uart_0
00010668 g     F .text	00000058 .hidden __umodsi3
00010758 g       *ABS*	00000000 end
00020000 g       *ABS*	00000000 __alt_stack_pointer
000103e0 g     F .text	00000034 altera_avalon_jtag_uart_write
00010020 g     F .text	0000004c _start
000101b4 g     F .text	00000060 rand
000103dc g     F .text	00000004 alt_sys_init
0001073c g       *ABS*	00000000 __ram_rwdata_start
000106c0 g       *ABS*	00000000 __ram_rodata_start
00010414 g     F .text	00000078 alt_busy_sleep
00010758 g       *ABS*	00000000 __alt_stack_base
00010744 g       *ABS*	00000000 __bss_start
0001006c g     F .text	00000134 main
0001074c g     O .bss	00000004 alt_envp
000101a0 g     F .text	00000014 srand
0001050c g     F .text	00000084 .hidden __divsi3
000106c0 g       *ABS*	00000000 __flash_rodata_start
000103bc g     F .text	00000020 alt_irq_init
00010754 g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010740 g       *ABS*	00000000 _edata
00010758 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00010590 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
0001001c g       .entry	00000000 _exit
00010214 g     F .text	00000060 .hidden __muldi3
000104f0 g     F .text	0000001c strlen
000104a4 g     F .text	0000000c alt_icache_flush_all
00010274 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08400814 	ori	at,at,32
    jmp r1
   10018:	0800683a 	jmp	at

0001001c <_exit>:
   1001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>

Disassembly of section .text:

00010020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10020:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
   10024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   10028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   1002c:	00bffd16 	blt	zero,r2,10024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10030:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10034:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10038:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1003c:	d6a1cf14 	ori	gp,gp,34620
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10040:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10044:	1081d114 	ori	r2,r2,1860

    movhi r3, %hi(__bss_end)
   10048:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1004c:	18c1d614 	ori	r3,r3,1880

    beq r2, r3, 1f
   10050:	10c00326 	beq	r2,r3,10060 <_start+0x40>

0:
    stw zero, (r2)
   10054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1005c:	10fffd36 	bltu	r2,r3,10054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10060:	00102740 	call	10274 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10064:	00103540 	call	10354 <alt_main>

00010068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10068:	003fff06 	br	10068 <alt_after_alt_main>

0001006c <main>:
// recording in BB if needed
// alt_putstr(""); -> altera push string



int main() {
   1006c:	defff704 	addi	sp,sp,-36
  alt_putstr("Hunter Frady and Mitchell Jonker - Project2 - CSCE 313\n");
   10070:	01000074 	movhi	r4,1
// recording in BB if needed
// alt_putstr(""); -> altera push string



int main() {
   10074:	dd000415 	stw	r20,16(sp)
   10078:	dcc00315 	stw	r19,12(sp)
   1007c:	dc800215 	stw	r18,8(sp)
  alt_putstr("Hunter Frady and Mitchell Jonker - Project2 - CSCE 313\n");
   10080:	2101b004 	addi	r4,r4,1728

  /* Event loop never exits. */
  while (1) {

    // read the mode values from system_modes using the function:
    mode = IORD_ALTERA_AVALON_PIO_DATA(SYSTEM_MODES_BASE);
   10084:	050000b4 	movhi	r20,2
    // and the value is displayed on Green LED [7:0].
	if (mode == 0x2) {
		alt_putstr("System Counter Mode\n");

      // First, reset all LEDs as shown in the example below
	  IOWR_ALTERA_AVALON_PIO_DATA(RANDOM_PATTERN_BASE , 0x00000);
   10088:	048000b4 	movhi	r18,2
	  IOWR_ALTERA_AVALON_PIO_DATA(SYSTEM_COUNTER_BASE , 0x00);
   1008c:	04c000b4 	movhi	r19,2
// recording in BB if needed
// alt_putstr(""); -> altera push string



int main() {
   10090:	dfc00815 	stw	ra,32(sp)
   10094:	ddc00715 	stw	r23,28(sp)
   10098:	dd800615 	stw	r22,24(sp)
   1009c:	dd400515 	stw	r21,20(sp)
   100a0:	dc400115 	stw	r17,4(sp)
   100a4:	dc000015 	stw	r16,0(sp)

  /* Event loop never exits. */
  while (1) {

    // read the mode values from system_modes using the function:
    mode = IORD_ALTERA_AVALON_PIO_DATA(SYSTEM_MODES_BASE);
   100a8:	a5040804 	addi	r20,r20,4128
// alt_putstr(""); -> altera push string



int main() {
  alt_putstr("Hunter Frady and Mitchell Jonker - Project2 - CSCE 313\n");
   100ac:	00103800 	call	10380 <alt_putstr>
    // and the value is displayed on Green LED [7:0].
	if (mode == 0x2) {
		alt_putstr("System Counter Mode\n");

      // First, reset all LEDs as shown in the example below
	  IOWR_ALTERA_AVALON_PIO_DATA(RANDOM_PATTERN_BASE , 0x00000);
   100b0:	94840004 	addi	r18,r18,4096
	  IOWR_ALTERA_AVALON_PIO_DATA(SYSTEM_COUNTER_BASE , 0x00);
   100b4:	9cc40404 	addi	r19,r19,4112

  /* Event loop never exits. */
  while (1) {

    // read the mode values from system_modes using the function:
    mode = IORD_ALTERA_AVALON_PIO_DATA(SYSTEM_MODES_BASE);
   100b8:	a4000037 	ldwio	r16,0(r20)
   100bc:	054000b4 	movhi	r21,2
   100c0:	8005883a 	mov	r2,r16

    // check if the mode is 1 so all LEDs must light up:
    // Both red and green LEDs light up
    if (mode == 0x1) {
   100c4:	00c00044 	movi	r3,1
   100c8:	84003fcc 	andi	r16,r16,255
   100cc:	ad440804 	addi	r21,r21,4128
   100d0:	80c0091e 	bne	r16,r3,100f8 <main+0x8c>
      alt_putstr("All LEDs Light Up\n");
   100d4:	01000074 	movhi	r4,1
   100d8:	2101be04 	addi	r4,r4,1784
   100dc:	00103800 	call	10380 <alt_putstr>
      // Example to how light Decoder_output LEDs. Do the same to light other leds
      IOWR_ALTERA_AVALON_PIO_DATA(SYSTEM_COUNTER_BASE, 0xFF);
   100e0:	00803fc4 	movi	r2,255
   100e4:	98800035 	stwio	r2,0(r19)
      IOWR_ALTERA_AVALON_PIO_DATA(RANDOM_PATTERN_BASE, 0xFFFFF);
   100e8:	00800434 	movhi	r2,16
   100ec:	10bfffc4 	addi	r2,r2,-1
   100f0:	90800035 	stwio	r2,0(r18)
   100f4:	003ff006 	br	100b8 <main+0x4c>
    } // end mode 0x1

    // check if the mode is 2 so system counter starts counting:
    // A counter starts incrementing from 0 to 255
    // and the value is displayed on Green LED [7:0].
	if (mode == 0x2) {
   100f8:	00c00084 	movi	r3,2
   100fc:	80c0141e 	bne	r16,r3,10150 <main+0xe4>
		alt_putstr("System Counter Mode\n");
   10100:	01000074 	movhi	r4,1
   10104:	2101c304 	addi	r4,r4,1804
   10108:	00103800 	call	10380 <alt_putstr>

      // First, reset all LEDs as shown in the example below
	  IOWR_ALTERA_AVALON_PIO_DATA(RANDOM_PATTERN_BASE , 0x00000);
   1010c:	90000035 	stwio	zero,0(r18)
	  IOWR_ALTERA_AVALON_PIO_DATA(SYSTEM_COUNTER_BASE , 0x00);
   10110:	98000035 	stwio	zero,0(r19)
   10114:	05c000b4 	movhi	r23,2


      // Counter starts counting from 0 (0x00) to 255 (0xFF)
      for (int i=0; i<256; i++) {
   10118:	0023883a 	mov	r17,zero
   1011c:	bdc40404 	addi	r23,r23,4112
   10120:	05804004 	movi	r22,256

        // always keep checking If the mode values changed. If mode changes, break the loop. See the below code
        mode = IORD_ALTERA_AVALON_PIO_DATA(SYSTEM_MODES_BASE);
   10124:	a8c00037 	ldwio	r3,0(r21)
   10128:	1805883a 	mov	r2,r3
        if (mode != 0x2) {
   1012c:	18c03fcc 	andi	r3,r3,255
   10130:	1c00071e 	bne	r3,r16,10150 <main+0xe4>
          break;
        }
        // IOWR - IO Write Register
        // IORD - IO Read Data
        // display the counter value onto the system-counter LEDs using IOWR_ALTERA_AVALON_PIO_DATA:
        IOWR_ALTERA_AVALON_PIO_DATA(SYSTEM_COUNTER_BASE, counter);
   10134:	bc400035 	stwio	r17,0(r23)
        // increment counter by 1:
        counter = counter + 0x1;
        // time the display period of each counter value using usleep()
        // sleep time for 1 million micro seconds
        // adjust as necessary
        usleep(1000000);
   10138:	010003f4 	movhi	r4,15
   1013c:	21109004 	addi	r4,r4,16960
	  IOWR_ALTERA_AVALON_PIO_DATA(RANDOM_PATTERN_BASE , 0x00000);
	  IOWR_ALTERA_AVALON_PIO_DATA(SYSTEM_COUNTER_BASE , 0x00);


      // Counter starts counting from 0 (0x00) to 255 (0xFF)
      for (int i=0; i<256; i++) {
   10140:	8c400044 	addi	r17,r17,1
        // increment counter by 1:
        counter = counter + 0x1;
        // time the display period of each counter value using usleep()
        // sleep time for 1 million micro seconds
        // adjust as necessary
        usleep(1000000);
   10144:	00103b80 	call	103b8 <usleep>
	  IOWR_ALTERA_AVALON_PIO_DATA(RANDOM_PATTERN_BASE , 0x00000);
	  IOWR_ALTERA_AVALON_PIO_DATA(SYSTEM_COUNTER_BASE , 0x00);


      // Counter starts counting from 0 (0x00) to 255 (0xFF)
      for (int i=0; i<256; i++) {
   10148:	8dbff61e 	bne	r17,r22,10124 <main+0xb8>
   1014c:	003fda06 	br	100b8 <main+0x4c>
	} // end mode 0x2

    // check if the mode is 3 so random pattern starts:
    // A random pattern starts is displayed on Red LED [17:0].
    // If the mode changes, the pattern stops on latest value.
    if (mode == 0x3) {
   10150:	10803fcc 	andi	r2,r2,255
   10154:	00c000c4 	movi	r3,3
   10158:	10ffd71e 	bne	r2,r3,100b8 <main+0x4c>
      alt_putstr("Random Pattern Mode\n");
   1015c:	01000074 	movhi	r4,1
   10160:	2101c904 	addi	r4,r4,1828
   10164:	00103800 	call	10380 <alt_putstr>

      // First, reset all LEDs as shown in the example below:
      IOWR_ALTERA_AVALON_PIO_DATA(RANDOM_PATTERN_BASE , 0x00000);
   10168:	90000035 	stwio	zero,0(r18)
      IOWR_ALTERA_AVALON_PIO_DATA(SYSTEM_COUNTER_BASE , 0x00);
   1016c:	98000035 	stwio	zero,0(r19)
   10170:	044000b4 	movhi	r17,2
   10174:	04000144 	movi	r16,5
   10178:	8c440004 	addi	r17,r17,4096
        // always keep checking If the mode values changed. If mode changes, break the loop. (as code shown in mode=1 code):
        if (mode != 3) {
          break;
        }
        // generate random pattern using rand() function:
        rand_var = rand();
   1017c:	00101b40 	call	101b4 <rand>
        // display the random value onto the random-pattern LEDs using IOWR_ALTERA_AVALON_PIO_DATA:
        IOWR_ALTERA_AVALON_PIO_DATA(RANDOM_PATTERN_BASE, rand_var);//green LEDS
   10180:	10803fcc 	andi	r2,r2,255
   10184:	88800035 	stwio	r2,0(r17)
        // time the display period of each counter value using usleep()
        usleep(1000000); // time for 1 million micro seconds
   10188:	010003f4 	movhi	r4,15
   1018c:	21109004 	addi	r4,r4,16960
   10190:	843fffc4 	addi	r16,r16,-1
   10194:	00103b80 	call	103b8 <usleep>
      // First, reset all LEDs as shown in the example below:
      IOWR_ALTERA_AVALON_PIO_DATA(RANDOM_PATTERN_BASE , 0x00000);
      IOWR_ALTERA_AVALON_PIO_DATA(SYSTEM_COUNTER_BASE , 0x00);


      for (int i=0; i<num_pattern; i++) {
   10198:	803ff81e 	bne	r16,zero,1017c <main+0x110>
   1019c:	003fc606 	br	100b8 <main+0x4c>

000101a0 <srand>:
   101a0:	00800074 	movhi	r2,1
   101a4:	1081d104 	addi	r2,r2,1860
   101a8:	11000015 	stw	r4,0(r2)
   101ac:	10000115 	stw	zero,4(r2)
   101b0:	f800283a 	ret

000101b4 <rand>:
   101b4:	defffe04 	addi	sp,sp,-8
   101b8:	dc000015 	stw	r16,0(sp)
   101bc:	04000074 	movhi	r16,1
   101c0:	8401d104 	addi	r16,r16,1860
   101c4:	81000017 	ldw	r4,0(r16)
   101c8:	81400117 	ldw	r5,4(r16)
   101cc:	01932574 	movhi	r6,19605
   101d0:	01d614b4 	movhi	r7,22610
   101d4:	319fcb44 	addi	r6,r6,32557
   101d8:	39fd0b44 	addi	r7,r7,-3027
   101dc:	dfc00115 	stw	ra,4(sp)
   101e0:	00102140 	call	10214 <__muldi3>
   101e4:	11000044 	addi	r4,r2,1
   101e8:	2085803a 	cmpltu	r2,r4,r2
   101ec:	10c7883a 	add	r3,r2,r3
   101f0:	00a00034 	movhi	r2,32768
   101f4:	10bfffc4 	addi	r2,r2,-1
   101f8:	1884703a 	and	r2,r3,r2
   101fc:	81000015 	stw	r4,0(r16)
   10200:	80c00115 	stw	r3,4(r16)
   10204:	dfc00117 	ldw	ra,4(sp)
   10208:	dc000017 	ldw	r16,0(sp)
   1020c:	dec00204 	addi	sp,sp,8
   10210:	f800283a 	ret

00010214 <__muldi3>:
   10214:	223fffcc 	andi	r8,r4,65535
   10218:	2006d43a 	srli	r3,r4,16
   1021c:	32bfffcc 	andi	r10,r6,65535
   10220:	3012d43a 	srli	r9,r6,16
   10224:	4297383a 	mul	r11,r8,r10
   10228:	1a95383a 	mul	r10,r3,r10
   1022c:	4251383a 	mul	r8,r8,r9
   10230:	5804d43a 	srli	r2,r11,16
   10234:	4291883a 	add	r8,r8,r10
   10238:	1205883a 	add	r2,r2,r8
   1023c:	1a51383a 	mul	r8,r3,r9
   10240:	1280022e 	bgeu	r2,r10,1024c <__muldi3+0x38>
   10244:	00c00074 	movhi	r3,1
   10248:	40d1883a 	add	r8,r8,r3
   1024c:	1006d43a 	srli	r3,r2,16
   10250:	21cf383a 	mul	r7,r4,r7
   10254:	314b383a 	mul	r5,r6,r5
   10258:	1004943a 	slli	r2,r2,16
   1025c:	1a11883a 	add	r8,r3,r8
   10260:	5affffcc 	andi	r11,r11,65535
   10264:	3947883a 	add	r3,r7,r5
   10268:	12c5883a 	add	r2,r2,r11
   1026c:	1a07883a 	add	r3,r3,r8
   10270:	f800283a 	ret

00010274 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10274:	deffff04 	addi	sp,sp,-4
   10278:	01000074 	movhi	r4,1
   1027c:	01400074 	movhi	r5,1
   10280:	dfc00015 	stw	ra,0(sp)
   10284:	2101cf04 	addi	r4,r4,1852
   10288:	2941d004 	addi	r5,r5,1856

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1028c:	2140061e 	bne	r4,r5,102a8 <alt_load+0x34>
   10290:	01000074 	movhi	r4,1
   10294:	01400074 	movhi	r5,1
   10298:	21000804 	addi	r4,r4,32
   1029c:	29400804 	addi	r5,r5,32
   102a0:	2140121e 	bne	r4,r5,102ec <alt_load+0x78>
   102a4:	00000b06 	br	102d4 <alt_load+0x60>
   102a8:	00c00074 	movhi	r3,1
   102ac:	18c1d004 	addi	r3,r3,1856
   102b0:	1907c83a 	sub	r3,r3,r4
   102b4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   102b8:	10fff526 	beq	r2,r3,10290 <alt_load+0x1c>
    {
      *to++ = *from++;
   102bc:	114f883a 	add	r7,r2,r5
   102c0:	39c00017 	ldw	r7,0(r7)
   102c4:	110d883a 	add	r6,r2,r4
   102c8:	10800104 	addi	r2,r2,4
   102cc:	31c00015 	stw	r7,0(r6)
   102d0:	003ff906 	br	102b8 <alt_load+0x44>
   102d4:	01000074 	movhi	r4,1
   102d8:	01400074 	movhi	r5,1
   102dc:	2101b004 	addi	r4,r4,1728
   102e0:	2941b004 	addi	r5,r5,1728

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   102e4:	2140101e 	bne	r4,r5,10328 <alt_load+0xb4>
   102e8:	00000b06 	br	10318 <alt_load+0xa4>
   102ec:	00c00074 	movhi	r3,1
   102f0:	18c00804 	addi	r3,r3,32
   102f4:	1907c83a 	sub	r3,r3,r4
   102f8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   102fc:	10fff526 	beq	r2,r3,102d4 <alt_load+0x60>
    {
      *to++ = *from++;
   10300:	114f883a 	add	r7,r2,r5
   10304:	39c00017 	ldw	r7,0(r7)
   10308:	110d883a 	add	r6,r2,r4
   1030c:	10800104 	addi	r2,r2,4
   10310:	31c00015 	stw	r7,0(r6)
   10314:	003ff906 	br	102fc <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10318:	001048c0 	call	1048c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   1031c:	dfc00017 	ldw	ra,0(sp)
   10320:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10324:	00104a41 	jmpi	104a4 <alt_icache_flush_all>
   10328:	00c00074 	movhi	r3,1
   1032c:	18c1cf04 	addi	r3,r3,1852
   10330:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10334:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10338:	18bff726 	beq	r3,r2,10318 <alt_load+0xa4>
    {
      *to++ = *from++;
   1033c:	114f883a 	add	r7,r2,r5
   10340:	39c00017 	ldw	r7,0(r7)
   10344:	110d883a 	add	r6,r2,r4
   10348:	10800104 	addi	r2,r2,4
   1034c:	31c00015 	stw	r7,0(r6)
   10350:	003ff906 	br	10338 <alt_load+0xc4>

00010354 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10354:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10358:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1035c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10360:	00103bc0 	call	103bc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10364:	00103dc0 	call	103dc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10368:	d1a00417 	ldw	r6,-32752(gp)
   1036c:	d1600517 	ldw	r5,-32748(gp)
   10370:	d1200617 	ldw	r4,-32744(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10374:	dfc00017 	ldw	ra,0(sp)
   10378:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   1037c:	001006c1 	jmpi	1006c <main>

00010380 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   10380:	defffe04 	addi	sp,sp,-8
   10384:	dc000015 	stw	r16,0(sp)
   10388:	dfc00115 	stw	ra,4(sp)
   1038c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10390:	00104f00 	call	104f0 <strlen>
   10394:	01000074 	movhi	r4,1
   10398:	000f883a 	mov	r7,zero
   1039c:	100d883a 	mov	r6,r2
   103a0:	800b883a 	mov	r5,r16
   103a4:	2101cf04 	addi	r4,r4,1852
#else
    return fputs(str, stdout);
#endif
#endif
}
   103a8:	dfc00117 	ldw	ra,4(sp)
   103ac:	dc000017 	ldw	r16,0(sp)
   103b0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   103b4:	00103e01 	jmpi	103e0 <altera_avalon_jtag_uart_write>

000103b8 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   103b8:	00104141 	jmpi	10414 <alt_busy_sleep>

000103bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   103bc:	deffff04 	addi	sp,sp,-4
   103c0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   103c4:	00104b00 	call	104b0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   103c8:	00800044 	movi	r2,1
   103cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   103d0:	dfc00017 	ldw	ra,0(sp)
   103d4:	dec00104 	addi	sp,sp,4
   103d8:	f800283a 	ret

000103dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   103dc:	f800283a 	ret

000103e0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   103e0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   103e4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   103e8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   103ec:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   103f0:	2980072e 	bgeu	r5,r6,10410 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   103f4:	38c00037 	ldwio	r3,0(r7)
   103f8:	18ffffec 	andhi	r3,r3,65535
   103fc:	183ffc26 	beq	r3,zero,103f0 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10400:	28c00007 	ldb	r3,0(r5)
   10404:	20c00035 	stwio	r3,0(r4)
   10408:	29400044 	addi	r5,r5,1
   1040c:	003ff806 	br	103f0 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
   10410:	f800283a 	ret

00010414 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10414:	01420034 	movhi	r5,2048
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10418:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1041c:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10420:	dc000015 	stw	r16,0(sp)
   10424:	dfc00115 	stw	ra,4(sp)
   10428:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1042c:	00106040 	call	10604 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10430:	10000e26 	beq	r2,zero,1046c <alt_busy_sleep+0x58>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10434:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10438:	013e0034 	movhi	r4,63488
   1043c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10440:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10444:	21000044 	addi	r4,r4,1
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10448:	297fffc4 	addi	r5,r5,-1
   1044c:	283ffe1e 	bne	r5,zero,10448 <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10450:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10454:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10458:	18bffb16 	blt	r3,r2,10448 <alt_busy_sleep+0x34>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1045c:	8020913a 	slli	r16,r16,4
   10460:	843fffc4 	addi	r16,r16,-1
   10464:	803ffe1e 	bne	r16,zero,10460 <alt_busy_sleep+0x4c>
   10468:	00000306 	br	10478 <alt_busy_sleep+0x64>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1046c:	8020913a 	slli	r16,r16,4
   10470:	843fffc4 	addi	r16,r16,-1
   10474:	043ffe16 	blt	zero,r16,10470 <alt_busy_sleep+0x5c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   10478:	0005883a 	mov	r2,zero
   1047c:	dfc00117 	ldw	ra,4(sp)
   10480:	dc000017 	ldw	r16,0(sp)
   10484:	dec00204 	addi	sp,sp,8
   10488:	f800283a 	ret

0001048c <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1048c:	0005883a 	mov	r2,zero
   10490:	00c40004 	movi	r3,4096
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   10494:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10498:	10800804 	addi	r2,r2,32
   1049c:	10fffd1e 	bne	r2,r3,10494 <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   104a0:	f800283a 	ret

000104a4 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   104a4:	01440004 	movi	r5,4096
   104a8:	0009883a 	mov	r4,zero
   104ac:	00104b81 	jmpi	104b8 <alt_icache_flush>

000104b0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   104b0:	000170fa 	wrctl	ienable,zero
   104b4:	f800283a 	ret

000104b8 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   104b8:	00840004 	movi	r2,4096
   104bc:	1140012e 	bgeu	r2,r5,104c4 <alt_icache_flush+0xc>
   104c0:	100b883a 	mov	r5,r2
   104c4:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   104c8:	2005883a 	mov	r2,r4
   104cc:	1140032e 	bgeu	r2,r5,104dc <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   104d0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   104d4:	10800804 	addi	r2,r2,32
   104d8:	003ffc06 	br	104cc <alt_icache_flush+0x14>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   104dc:	210007cc 	andi	r4,r4,31
   104e0:	20000126 	beq	r4,zero,104e8 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   104e4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   104e8:	0000203a 	flushp
   104ec:	f800283a 	ret

000104f0 <strlen>:
   104f0:	2005883a 	mov	r2,r4
   104f4:	10c00007 	ldb	r3,0(r2)
   104f8:	18000226 	beq	r3,zero,10504 <strlen+0x14>
   104fc:	10800044 	addi	r2,r2,1
   10500:	003ffc06 	br	104f4 <strlen+0x4>
   10504:	1105c83a 	sub	r2,r2,r4
   10508:	f800283a 	ret

0001050c <__divsi3>:
   1050c:	20001b16 	blt	r4,zero,1057c <__divsi3+0x70>
   10510:	000f883a 	mov	r7,zero
   10514:	28001616 	blt	r5,zero,10570 <__divsi3+0x64>
   10518:	200d883a 	mov	r6,r4
   1051c:	29001a2e 	bgeu	r5,r4,10588 <__divsi3+0x7c>
   10520:	00800804 	movi	r2,32
   10524:	00c00044 	movi	r3,1
   10528:	00000106 	br	10530 <__divsi3+0x24>
   1052c:	10000d26 	beq	r2,zero,10564 <__divsi3+0x58>
   10530:	294b883a 	add	r5,r5,r5
   10534:	10bfffc4 	addi	r2,r2,-1
   10538:	18c7883a 	add	r3,r3,r3
   1053c:	293ffb36 	bltu	r5,r4,1052c <__divsi3+0x20>
   10540:	0005883a 	mov	r2,zero
   10544:	18000726 	beq	r3,zero,10564 <__divsi3+0x58>
   10548:	0005883a 	mov	r2,zero
   1054c:	31400236 	bltu	r6,r5,10558 <__divsi3+0x4c>
   10550:	314dc83a 	sub	r6,r6,r5
   10554:	10c4b03a 	or	r2,r2,r3
   10558:	1806d07a 	srli	r3,r3,1
   1055c:	280ad07a 	srli	r5,r5,1
   10560:	183ffa1e 	bne	r3,zero,1054c <__divsi3+0x40>
   10564:	38000126 	beq	r7,zero,1056c <__divsi3+0x60>
   10568:	0085c83a 	sub	r2,zero,r2
   1056c:	f800283a 	ret
   10570:	014bc83a 	sub	r5,zero,r5
   10574:	39c0005c 	xori	r7,r7,1
   10578:	003fe706 	br	10518 <__divsi3+0xc>
   1057c:	0109c83a 	sub	r4,zero,r4
   10580:	01c00044 	movi	r7,1
   10584:	003fe306 	br	10514 <__divsi3+0x8>
   10588:	00c00044 	movi	r3,1
   1058c:	003fee06 	br	10548 <__divsi3+0x3c>

00010590 <__modsi3>:
   10590:	20001716 	blt	r4,zero,105f0 <__modsi3+0x60>
   10594:	000f883a 	mov	r7,zero
   10598:	2005883a 	mov	r2,r4
   1059c:	28001216 	blt	r5,zero,105e8 <__modsi3+0x58>
   105a0:	2900162e 	bgeu	r5,r4,105fc <__modsi3+0x6c>
   105a4:	01800804 	movi	r6,32
   105a8:	00c00044 	movi	r3,1
   105ac:	00000106 	br	105b4 <__modsi3+0x24>
   105b0:	30000a26 	beq	r6,zero,105dc <__modsi3+0x4c>
   105b4:	294b883a 	add	r5,r5,r5
   105b8:	31bfffc4 	addi	r6,r6,-1
   105bc:	18c7883a 	add	r3,r3,r3
   105c0:	293ffb36 	bltu	r5,r4,105b0 <__modsi3+0x20>
   105c4:	18000526 	beq	r3,zero,105dc <__modsi3+0x4c>
   105c8:	1806d07a 	srli	r3,r3,1
   105cc:	11400136 	bltu	r2,r5,105d4 <__modsi3+0x44>
   105d0:	1145c83a 	sub	r2,r2,r5
   105d4:	280ad07a 	srli	r5,r5,1
   105d8:	183ffb1e 	bne	r3,zero,105c8 <__modsi3+0x38>
   105dc:	38000126 	beq	r7,zero,105e4 <__modsi3+0x54>
   105e0:	0085c83a 	sub	r2,zero,r2
   105e4:	f800283a 	ret
   105e8:	014bc83a 	sub	r5,zero,r5
   105ec:	003fec06 	br	105a0 <__modsi3+0x10>
   105f0:	0109c83a 	sub	r4,zero,r4
   105f4:	01c00044 	movi	r7,1
   105f8:	003fe706 	br	10598 <__modsi3+0x8>
   105fc:	00c00044 	movi	r3,1
   10600:	003ff106 	br	105c8 <__modsi3+0x38>

00010604 <__udivsi3>:
   10604:	200d883a 	mov	r6,r4
   10608:	2900152e 	bgeu	r5,r4,10660 <__udivsi3+0x5c>
   1060c:	28001416 	blt	r5,zero,10660 <__udivsi3+0x5c>
   10610:	00800804 	movi	r2,32
   10614:	00c00044 	movi	r3,1
   10618:	00000206 	br	10624 <__udivsi3+0x20>
   1061c:	10000e26 	beq	r2,zero,10658 <__udivsi3+0x54>
   10620:	28000516 	blt	r5,zero,10638 <__udivsi3+0x34>
   10624:	294b883a 	add	r5,r5,r5
   10628:	10bfffc4 	addi	r2,r2,-1
   1062c:	18c7883a 	add	r3,r3,r3
   10630:	293ffa36 	bltu	r5,r4,1061c <__udivsi3+0x18>
   10634:	18000826 	beq	r3,zero,10658 <__udivsi3+0x54>
   10638:	0005883a 	mov	r2,zero
   1063c:	31400236 	bltu	r6,r5,10648 <__udivsi3+0x44>
   10640:	314dc83a 	sub	r6,r6,r5
   10644:	10c4b03a 	or	r2,r2,r3
   10648:	1806d07a 	srli	r3,r3,1
   1064c:	280ad07a 	srli	r5,r5,1
   10650:	183ffa1e 	bne	r3,zero,1063c <__udivsi3+0x38>
   10654:	f800283a 	ret
   10658:	0005883a 	mov	r2,zero
   1065c:	f800283a 	ret
   10660:	00c00044 	movi	r3,1
   10664:	003ff406 	br	10638 <__udivsi3+0x34>

00010668 <__umodsi3>:
   10668:	2005883a 	mov	r2,r4
   1066c:	2900122e 	bgeu	r5,r4,106b8 <__umodsi3+0x50>
   10670:	28001116 	blt	r5,zero,106b8 <__umodsi3+0x50>
   10674:	01800804 	movi	r6,32
   10678:	00c00044 	movi	r3,1
   1067c:	00000206 	br	10688 <__umodsi3+0x20>
   10680:	30000c26 	beq	r6,zero,106b4 <__umodsi3+0x4c>
   10684:	28000516 	blt	r5,zero,1069c <__umodsi3+0x34>
   10688:	294b883a 	add	r5,r5,r5
   1068c:	31bfffc4 	addi	r6,r6,-1
   10690:	18c7883a 	add	r3,r3,r3
   10694:	293ffa36 	bltu	r5,r4,10680 <__umodsi3+0x18>
   10698:	18000626 	beq	r3,zero,106b4 <__umodsi3+0x4c>
   1069c:	1806d07a 	srli	r3,r3,1
   106a0:	11400136 	bltu	r2,r5,106a8 <__umodsi3+0x40>
   106a4:	1145c83a 	sub	r2,r2,r5
   106a8:	280ad07a 	srli	r5,r5,1
   106ac:	183ffb1e 	bne	r3,zero,1069c <__umodsi3+0x34>
   106b0:	f800283a 	ret
   106b4:	f800283a 	ret
   106b8:	00c00044 	movi	r3,1
   106bc:	003ff706 	br	1069c <__umodsi3+0x34>
