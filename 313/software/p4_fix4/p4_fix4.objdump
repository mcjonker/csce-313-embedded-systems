
p4_fix4.elf:     file format elf32-littlenios2
p4_fix4.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000244

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00006dcc memsz 0x00006dcc flags r-x
    LOAD off    0x00007dec vaddr 0x10006dec paddr 0x10008938 align 2**12
         filesz 0x00001b4c memsz 0x00001b4c flags rw-
    LOAD off    0x0000a484 vaddr 0x1000a484 paddr 0x1000a484 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006ae4  10000244  10000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000c4  10006d28  10006d28  00007d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b4c  10006dec  10008938  00007dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  1000a484  1000a484  0000a484  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  1000a5d8  1000a5d8  00009938  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00009938  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a90  00000000  00000000  00009960  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017ff5  00000000  00000000  0000a3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006479  00000000  00000000  000223e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000072a5  00000000  00000000  0002885e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000018c4  00000000  00000000  0002fb04  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002b74  00000000  00000000  000313c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004b21  00000000  00000000  00033f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00038a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000690  00000000  00000000  00038a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003ba1e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  0003ba21  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003ba2a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003ba2b  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0003ba2c  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0003ba30  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0003ba34  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0003ba38  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000011  00000000  00000000  0003ba43  2**0
                  CONTENTS, READONLY
 26 .jdi          00004c4e  00000000  00000000  0003ba54  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006bf83  00000000  00000000  000406a2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000244 l    d  .text	00000000 .text
10006d28 l    d  .rodata	00000000 .rodata
10006dec l    d  .rwdata	00000000 .rwdata
1000a484 l    d  .bss	00000000 .bss
1000a5d8 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../p4_fix4_bsp//obj/HAL/src/crt0.o
1000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
100002c0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
10000464 l     F .text	00000034 alt_dev_reg
10006dec l     O .rwdata	00001060 jtag
10007e4c l     O .rwdata	00000048 video_character_buffer_with_dma_0
10007e94 l     O .rwdata	00000054 dma_buffer
10007ee8 l     O .rwdata	00000044 rgb_resampler
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10000ab0 l     F .text	0000020c altera_avalon_jtag_uart_irq
10000cbc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
100025b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
10002708 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10002734 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10002c38 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10002d78 l     F .text	0000003c alt_get_errno
10002db4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
100080d4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000545c l     F .text	00000008 __fp_unlock
10005470 l     F .text	0000019c __sinit.part.1
1000560c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
100066e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
100067d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
100068b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10006a0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
10008934 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
10006bf4 l     F .text	0000003c alt_get_errno
1000a49c g     O .bss	00000004 alt_instruction_exception_handler
100063ec g     F .text	00000054 _isatty_r
100003ac g     F .text	0000007c alt_main
10001ea8 g     F .text	0000024c alt_up_pixel_buffer_dma_draw_vline
1000a4d8 g     O .bss	00000100 alt_irq
10006440 g     F .text	00000060 _lseek_r
10008938 g       *ABS*	00000000 __flash_rwdata_start
1000a5d8 g       *ABS*	00000000 __alt_heap_start
10006174 g     F .text	0000005c __sseek
100057ac g     F .text	00000010 __sinit
1000147c g     F .text	000000fc alt_up_char_buffer_string
10005614 g     F .text	00000068 __sfmoreglue
100069e8 g     F .text	00000024 __malloc_unlock
100013b0 g     F .text	000000cc alt_up_char_buffer_draw
10004540 g     F .text	0000015c memmove
10005794 g     F .text	00000018 _cleanup
10000428 g     F .text	0000003c alt_putstr
10001610 g     F .text	00000194 alt_up_pixel_buffer_dma_draw
100031d4 g     F .text	00000024 altera_nios2_gen2_irq_init
100015d4 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
10000000 g     F .entry	0000001c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10006390 g     F .text	0000005c _fstat_r
1000a4a0 g     O .bss	00000004 errno
100060f0 g     F .text	00000008 __seofread
10000000 g       *ABS*	00000000 __alt_mem_sdram_controller
1000a488 g     O .bss	00000004 alt_argv
10010900 g       *ABS*	00000000 _gp
100017a4 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
10007f54 g     O .rwdata	00000180 alt_fd_list
100028d4 g     F .text	00000090 alt_find_dev
100043f8 g     F .text	00000148 memcpy
10001578 g     F .text	0000005c alt_up_char_buffer_clear
10005464 g     F .text	0000000c _cleanup_r
10002cfc g     F .text	0000007c alt_io_redirect
10006d28 g       *ABS*	00000000 __DTOR_END__
10003434 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10001860 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
10000eb4 g     F .text	0000021c altera_avalon_jtag_uart_read
100065f8 g     F .text	00000064 .hidden __udivsi3
10006810 g     F .text	000000a4 isatty
10001c98 g     F .text	00000210 alt_up_pixel_buffer_dma_draw_hline
100033a4 g     F .text	00000090 alt_icache_flush
1000a4ac g     O .bss	00000004 __malloc_top_pad
100035d0 g     F .text	000004bc __sfvwrite_r
10004c00 g     F .text	00000054 _sbrk_r
100021bc g     F .text	00000084 helper_plot_pixel
100064a0 g     F .text	00000060 _read_r
10008910 g     O .rwdata	00000004 alt_max_fd
1000628c g     F .text	000000f0 _fclose_r
1000542c g     F .text	00000030 fflush
1000a4a8 g     O .bss	00000004 __malloc_max_sbrked_mem
10001894 g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
100068f0 g     F .text	000000d4 lseek
10008924 g     O .rwdata	00000004 _global_impure_ptr
1000469c g     F .text	00000564 _realloc_r
1000a5d8 g       *ABS*	00000000 __bss_end
10002b48 g     F .text	000000f0 alt_iic_isr_register
100019bc g     F .text	000002dc alt_up_pixel_buffer_dma_draw_box
100030cc g     F .text	00000108 alt_tick
100057cc g     F .text	00000018 __fp_lock_all
10002afc g     F .text	0000004c alt_ic_irq_enabled
10003030 g     F .text	0000009c alt_alarm_stop
1000a490 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10007f2c g     O .rwdata	00000028 alt_dev_null
100026c0 g     F .text	00000048 alt_dcache_flush_all
100020f4 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
10008938 g       *ABS*	00000000 __ram_rwdata_end
10008908 g     O .rwdata	00000008 alt_dev_list
10006c30 g     F .text	000000f8 write
10002240 g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
10006dec g       *ABS*	00000000 __ram_rodata_end
10006724 g     F .text	000000b0 fstat
1000665c g     F .text	00000058 .hidden __umodsi3
1000a5d8 g       *ABS*	00000000 end
100012f4 g     F .text	00000080 alt_up_char_buffer_init
100009f0 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
10006d28 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
100010d0 g     F .text	00000224 altera_avalon_jtag_uart_write
100057bc g     F .text	00000004 __sfp_lock_acquire
10004298 g     F .text	000000e4 memchr
10005920 g     F .text	00000310 _free_r
10005034 g     F .text	00000180 __call_exitprocs
1000892c g     O .rwdata	00000004 __malloc_sbrk_base
10000244 g     F .text	0000004c _start
1000a494 g     O .bss	00000004 _alt_tick_rate
1000a498 g     O .bss	00000004 _alt_nticks
10006a48 g     F .text	000000fc read
100004d0 g     F .text	000003bc alt_sys_init
10004f1c g     F .text	00000118 __register_exitproc
10000d5c g     F .text	00000068 altera_avalon_jtag_uart_close
10006dec g       *ABS*	00000000 __ram_rwdata_start
10006d28 g       *ABS*	00000000 __ram_rodata_start
1000a4b0 g     O .bss	00000028 __malloc_current_mallinfo
1000088c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10003300 g     F .text	000000a4 alt_get_fd
10006238 g     F .text	00000054 _close_r
1000437c g     F .text	0000007c memcmp
1000094c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1000a5d8 g       *ABS*	00000000 __alt_stack_base
1000099c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10004dc8 g     F .text	00000154 __swsetup_r
1000567c g     F .text	00000118 __sfp
100084f8 g     O .rwdata	00000408 __malloc_av_
100057c8 g     F .text	00000004 __sinit_lock_release
1000609c g     F .text	00000054 __sread
100031f8 g     F .text	00000108 alt_find_file
10002770 g     F .text	000000a4 alt_dev_llist_insert
100069c4 g     F .text	00000024 __malloc_lock
10006b44 g     F .text	000000b0 sbrk
100053d0 g     F .text	0000005c _fflush_r
1000a484 g       *ABS*	00000000 __bss_start
10005f74 g     F .text	00000128 memset
10000290 g     F .text	00000030 main
1000a48c g     O .bss	00000004 alt_envp
1000a4a4 g     O .bss	00000004 __malloc_max_total_mem
10001800 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
10001374 g     F .text	0000003c alt_up_char_buffer_open_dev
100008ec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100061d0 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000637c g     F .text	00000014 fclose
10003a8c g     F .text	0000080c _malloc_r
10008914 g     O .rwdata	00000004 alt_errno
10005c30 g     F .text	000000c4 _fwalk
10006500 g     F .text	00000084 .hidden __divsi3
100057fc g     F .text	00000124 _malloc_trim_r
10006d28 g       *ABS*	00000000 __CTOR_END__
10004c54 g     F .text	000000dc strcmp
10006d28 g       *ABS*	00000000 __flash_rodata_start
10006d28 g       *ABS*	00000000 __DTOR_LIST__
10000498 g     F .text	00000038 alt_irq_init
10002fcc g     F .text	00000064 alt_release_fd
100034d0 g     F .text	00000014 atexit
100061d8 g     F .text	00000060 _write_r
10008928 g     O .rwdata	00000004 _impure_ptr
1000a484 g     O .bss	00000004 alt_argc
100051b4 g     F .text	0000021c __sflush_r
10002874 g     F .text	00000060 _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
100057e4 g     F .text	00000018 __fp_unlock_all
10008900 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
10002998 g     F .text	00000050 alt_ic_isr_register
10008938 g       *ABS*	00000000 _edata
1000a5d8 g       *ABS*	00000000 _end
10000244 g       *ABS*	00000000 __ram_exceptions_end
10000dc4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
1000351c g     F .text	0000009c _fputs_r
10002a70 g     F .text	0000008c alt_ic_irq_disable
100060f8 g     F .text	0000007c __swrite
10008930 g     O .rwdata	00000004 __malloc_trim_threshold
100034e4 g     F .text	00000038 exit
10005cf4 g     F .text	000000c4 _fwalk_reent
10006584 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
100057c0 g     F .text	00000004 __sfp_lock_release
100066b4 g     F .text	00000034 _exit
10002488 g     F .text	0000012c alt_alarm_start
10005db8 g     F .text	000001bc __smakebuf_r
10004d30 g     F .text	00000098 strlen
10002e78 g     F .text	00000154 open
10002964 g     F .text	00000034 alt_icache_flush_all
100035b8 g     F .text	00000018 fputs
10008918 g     O .rwdata	00000004 alt_priority_mask
100029e8 g     F .text	00000088 alt_ic_irq_enable
1000891c g     O .rwdata	00000008 alt_alarm_list
10002814 g     F .text	00000060 _do_ctors
100025f0 g     F .text	000000d0 close
10000328 g     F .text	00000084 alt_load
100057c4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

10000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1000000c:	00bffd16 	blt	zero,r2,10000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000010:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000014:	08409114 	ori	at,at,580
    jmp r1
10000018:	0800683a 	jmp	at
1000001c:	00000000 	call	10000000 <__reset>

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10a93604 	addi	r2,r2,-23336
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10a93604 	addi	r2,r2,-23336
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
100001e4:	000531fa 	rdctl	r2,exception
100001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
100001ec:	e0bffd17 	ldw	r2,-12(fp)
100001f0:	10801f0c 	andi	r2,r2,124
100001f4:	1004d0ba 	srli	r2,r2,2
100001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
100001fc:	0005333a 	rdctl	r2,badaddr
10000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10000204:	d0a6e717 	ldw	r2,-25700(gp)
10000208:	10000726 	beq	r2,zero,10000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1000020c:	d0a6e717 	ldw	r2,-25700(gp)
10000210:	e0fffd17 	ldw	r3,-12(fp)
10000214:	e1bffe17 	ldw	r6,-8(fp)
10000218:	e17fff17 	ldw	r5,-4(fp)
1000021c:	1809883a 	mov	r4,r3
10000220:	103ee83a 	callr	r2
10000224:	00000206 	br	10000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1000022c:	0005883a 	mov	r2,zero
}
10000230:	e037883a 	mov	sp,fp
10000234:	dfc00117 	ldw	ra,4(sp)
10000238:	df000017 	ldw	fp,0(sp)
1000023c:	dec00204 	addi	sp,sp,8
10000240:	f800283a 	ret

Disassembly of section .text:

10000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10000244:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
10000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1000024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10000250:	00bffd16 	blt	zero,r2,10000248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000254:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1000025c:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000260:	d6824014 	ori	gp,gp,2304
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000264:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
10000268:	10a92114 	ori	r2,r2,42116

    movhi r3, %hi(__bss_end)
1000026c:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
10000270:	18e97614 	ori	r3,r3,42456

    beq r2, r3, 1f
10000274:	10c00326 	beq	r2,r3,10000284 <_start+0x40>

0:
    stw zero, (r2)
10000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1000027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000280:	10fffd36 	bltu	r2,r3,10000278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000284:	00003280 	call	10000328 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000288:	00003ac0 	call	100003ac <alt_main>

1000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1000028c:	003fff06 	br	1000028c <alt_after_alt_main>

10000290 <main>:
//#include "altera_up_avalon_video_pixel_buffer_dma.h" // pixel buffer dma

// TODO -
// if mode changes, clear the screen.

int main() {
10000290:	defffd04 	addi	sp,sp,-12
10000294:	dfc00215 	stw	ra,8(sp)
10000298:	df000115 	stw	fp,4(sp)
1000029c:	df000104 	addi	fp,sp,4
	alt_up_pixel_buffer_dma_dev *my_pixel_buffer;
	my_pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/dma_buffer");
100002a0:	01040034 	movhi	r4,4096
100002a4:	211b4a04 	addi	r4,r4,27944
100002a8:	00015d40 	call	100015d4 <alt_up_pixel_buffer_dma_open_dev>
100002ac:	e0bfff15 	stw	r2,-4(fp)
	//alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer, 0);
	while(1) {
		alt_putstr("aadfdad\n");
100002b0:	01040034 	movhi	r4,4096
100002b4:	211b4e04 	addi	r4,r4,27960
100002b8:	00004280 	call	10000428 <alt_putstr>
		//alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer, 0);
	}
100002bc:	003ffc06 	br	100002b0 <main+0x20>

100002c0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
100002c0:	defffc04 	addi	sp,sp,-16
100002c4:	df000315 	stw	fp,12(sp)
100002c8:	df000304 	addi	fp,sp,12
100002cc:	e13ffd15 	stw	r4,-12(fp)
100002d0:	e17ffe15 	stw	r5,-8(fp)
100002d4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
100002d8:	e0fffe17 	ldw	r3,-8(fp)
100002dc:	e0bffd17 	ldw	r2,-12(fp)
100002e0:	18800c26 	beq	r3,r2,10000314 <alt_load_section+0x54>
  {
    while( to != end )
100002e4:	00000806 	br	10000308 <alt_load_section+0x48>
    {
      *to++ = *from++;
100002e8:	e0bffe17 	ldw	r2,-8(fp)
100002ec:	10c00104 	addi	r3,r2,4
100002f0:	e0fffe15 	stw	r3,-8(fp)
100002f4:	e0fffd17 	ldw	r3,-12(fp)
100002f8:	19000104 	addi	r4,r3,4
100002fc:	e13ffd15 	stw	r4,-12(fp)
10000300:	18c00017 	ldw	r3,0(r3)
10000304:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10000308:	e0fffe17 	ldw	r3,-8(fp)
1000030c:	e0bfff17 	ldw	r2,-4(fp)
10000310:	18bff51e 	bne	r3,r2,100002e8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
10000314:	0001883a 	nop
10000318:	e037883a 	mov	sp,fp
1000031c:	df000017 	ldw	fp,0(sp)
10000320:	dec00104 	addi	sp,sp,4
10000324:	f800283a 	ret

10000328 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10000328:	defffe04 	addi	sp,sp,-8
1000032c:	dfc00115 	stw	ra,4(sp)
10000330:	df000015 	stw	fp,0(sp)
10000334:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10000338:	01840074 	movhi	r6,4097
1000033c:	31a24e04 	addi	r6,r6,-30408
10000340:	01440034 	movhi	r5,4096
10000344:	295b7b04 	addi	r5,r5,28140
10000348:	01040074 	movhi	r4,4097
1000034c:	21224e04 	addi	r4,r4,-30408
10000350:	00002c00 	call	100002c0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10000354:	01840034 	movhi	r6,4096
10000358:	31809104 	addi	r6,r6,580
1000035c:	01440034 	movhi	r5,4096
10000360:	29400804 	addi	r5,r5,32
10000364:	01040034 	movhi	r4,4096
10000368:	21000804 	addi	r4,r4,32
1000036c:	00002c00 	call	100002c0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10000370:	01840034 	movhi	r6,4096
10000374:	319b7b04 	addi	r6,r6,28140
10000378:	01440034 	movhi	r5,4096
1000037c:	295b4a04 	addi	r5,r5,27944
10000380:	01040034 	movhi	r4,4096
10000384:	211b4a04 	addi	r4,r4,27944
10000388:	00002c00 	call	100002c0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000038c:	00026c00 	call	100026c0 <alt_dcache_flush_all>
  alt_icache_flush_all();
10000390:	00029640 	call	10002964 <alt_icache_flush_all>
}
10000394:	0001883a 	nop
10000398:	e037883a 	mov	sp,fp
1000039c:	dfc00117 	ldw	ra,4(sp)
100003a0:	df000017 	ldw	fp,0(sp)
100003a4:	dec00204 	addi	sp,sp,8
100003a8:	f800283a 	ret

100003ac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
100003ac:	defffd04 	addi	sp,sp,-12
100003b0:	dfc00215 	stw	ra,8(sp)
100003b4:	df000115 	stw	fp,4(sp)
100003b8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
100003bc:	0009883a 	mov	r4,zero
100003c0:	00004980 	call	10000498 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
100003c4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
100003c8:	00004d00 	call	100004d0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
100003cc:	01840034 	movhi	r6,4096
100003d0:	319b5104 	addi	r6,r6,27972
100003d4:	01440034 	movhi	r5,4096
100003d8:	295b5104 	addi	r5,r5,27972
100003dc:	01040034 	movhi	r4,4096
100003e0:	211b5104 	addi	r4,r4,27972
100003e4:	0002cfc0 	call	10002cfc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
100003e8:	00028140 	call	10002814 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
100003ec:	01040034 	movhi	r4,4096
100003f0:	210a1d04 	addi	r4,r4,10356
100003f4:	00034d00 	call	100034d0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
100003f8:	d0a6e117 	ldw	r2,-25724(gp)
100003fc:	d0e6e217 	ldw	r3,-25720(gp)
10000400:	d126e317 	ldw	r4,-25716(gp)
10000404:	200d883a 	mov	r6,r4
10000408:	180b883a 	mov	r5,r3
1000040c:	1009883a 	mov	r4,r2
10000410:	00002900 	call	10000290 <main>
10000414:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10000418:	01000044 	movi	r4,1
1000041c:	00025f00 	call	100025f0 <close>
  exit (result);
10000420:	e13fff17 	ldw	r4,-4(fp)
10000424:	00034e40 	call	100034e4 <exit>

10000428 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
10000428:	defffd04 	addi	sp,sp,-12
1000042c:	dfc00215 	stw	ra,8(sp)
10000430:	df000115 	stw	fp,4(sp)
10000434:	df000104 	addi	fp,sp,4
10000438:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
1000043c:	d0a00a17 	ldw	r2,-32728(gp)
10000440:	10800217 	ldw	r2,8(r2)
10000444:	100b883a 	mov	r5,r2
10000448:	e13fff17 	ldw	r4,-4(fp)
1000044c:	00035b80 	call	100035b8 <fputs>
#endif
#endif
}
10000450:	e037883a 	mov	sp,fp
10000454:	dfc00117 	ldw	ra,4(sp)
10000458:	df000017 	ldw	fp,0(sp)
1000045c:	dec00204 	addi	sp,sp,8
10000460:	f800283a 	ret

10000464 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10000464:	defffd04 	addi	sp,sp,-12
10000468:	dfc00215 	stw	ra,8(sp)
1000046c:	df000115 	stw	fp,4(sp)
10000470:	df000104 	addi	fp,sp,4
10000474:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10000478:	d1600204 	addi	r5,gp,-32760
1000047c:	e13fff17 	ldw	r4,-4(fp)
10000480:	00027700 	call	10002770 <alt_dev_llist_insert>
}
10000484:	e037883a 	mov	sp,fp
10000488:	dfc00117 	ldw	ra,4(sp)
1000048c:	df000017 	ldw	fp,0(sp)
10000490:	dec00204 	addi	sp,sp,8
10000494:	f800283a 	ret

10000498 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10000498:	defffd04 	addi	sp,sp,-12
1000049c:	dfc00215 	stw	ra,8(sp)
100004a0:	df000115 	stw	fp,4(sp)
100004a4:	df000104 	addi	fp,sp,4
100004a8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( PROCESSOR, processor);
100004ac:	00031d40 	call	100031d4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
100004b0:	00800044 	movi	r2,1
100004b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
100004b8:	0001883a 	nop
100004bc:	e037883a 	mov	sp,fp
100004c0:	dfc00117 	ldw	ra,4(sp)
100004c4:	df000017 	ldw	fp,0(sp)
100004c8:	dec00204 	addi	sp,sp,8
100004cc:	f800283a 	ret

100004d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
100004d0:	defffd04 	addi	sp,sp,-12
100004d4:	dfc00215 	stw	ra,8(sp)
100004d8:	df000115 	stw	fp,4(sp)
100004dc:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
100004e0:	000d883a 	mov	r6,zero
100004e4:	000b883a 	mov	r5,zero
100004e8:	01040034 	movhi	r4,4096
100004ec:	211b8504 	addi	r4,r4,28180
100004f0:	00009f00 	call	100009f0 <altera_avalon_jtag_uart_init>
100004f4:	01040034 	movhi	r4,4096
100004f8:	211b7b04 	addi	r4,r4,28140
100004fc:	00004640 	call	10000464 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA_0, video_character_buffer_with_dma_0);
10000500:	00840034 	movhi	r2,4096
10000504:	109f9304 	addi	r2,r2,32332
10000508:	10800a17 	ldw	r2,40(r2)
1000050c:	10800104 	addi	r2,r2,4
10000510:	10800017 	ldw	r2,0(r2)
10000514:	10ffffcc 	andi	r3,r2,65535
10000518:	00840034 	movhi	r2,4096
1000051c:	109f9304 	addi	r2,r2,32332
10000520:	10c00c15 	stw	r3,48(r2)
10000524:	00840034 	movhi	r2,4096
10000528:	109f9304 	addi	r2,r2,32332
1000052c:	10800a17 	ldw	r2,40(r2)
10000530:	10800104 	addi	r2,r2,4
10000534:	10800017 	ldw	r2,0(r2)
10000538:	1006d43a 	srli	r3,r2,16
1000053c:	00840034 	movhi	r2,4096
10000540:	109f9304 	addi	r2,r2,32332
10000544:	10c00d15 	stw	r3,52(r2)
10000548:	00840034 	movhi	r2,4096
1000054c:	109f9304 	addi	r2,r2,32332
10000550:	10800c17 	ldw	r2,48(r2)
10000554:	10801068 	cmpgeui	r2,r2,65
10000558:	1000081e 	bne	r2,zero,1000057c <alt_sys_init+0xac>
1000055c:	00840034 	movhi	r2,4096
10000560:	109f9304 	addi	r2,r2,32332
10000564:	00c00fc4 	movi	r3,63
10000568:	10c00f15 	stw	r3,60(r2)
1000056c:	00840034 	movhi	r2,4096
10000570:	109f9304 	addi	r2,r2,32332
10000574:	00c00184 	movi	r3,6
10000578:	10c01015 	stw	r3,64(r2)
1000057c:	00840034 	movhi	r2,4096
10000580:	109f9304 	addi	r2,r2,32332
10000584:	10800d17 	ldw	r2,52(r2)
10000588:	10800868 	cmpgeui	r2,r2,33
1000058c:	1000041e 	bne	r2,zero,100005a0 <alt_sys_init+0xd0>
10000590:	00840034 	movhi	r2,4096
10000594:	109f9304 	addi	r2,r2,32332
10000598:	00c007c4 	movi	r3,31
1000059c:	10c01115 	stw	r3,68(r2)
100005a0:	01040034 	movhi	r4,4096
100005a4:	211f9304 	addi	r4,r4,32332
100005a8:	00012f40 	call	100012f4 <alt_up_char_buffer_init>
100005ac:	01040034 	movhi	r4,4096
100005b0:	211f9304 	addi	r4,r4,32332
100005b4:	00004640 	call	10000464 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( DMA_BUFFER, dma_buffer);
100005b8:	00840034 	movhi	r2,4096
100005bc:	109fa504 	addi	r2,r2,32404
100005c0:	10800a17 	ldw	r2,40(r2)
100005c4:	10800017 	ldw	r2,0(r2)
100005c8:	1007883a 	mov	r3,r2
100005cc:	00840034 	movhi	r2,4096
100005d0:	109fa504 	addi	r2,r2,32404
100005d4:	10c00b15 	stw	r3,44(r2)
100005d8:	00840034 	movhi	r2,4096
100005dc:	109fa504 	addi	r2,r2,32404
100005e0:	10800a17 	ldw	r2,40(r2)
100005e4:	10800104 	addi	r2,r2,4
100005e8:	10800017 	ldw	r2,0(r2)
100005ec:	1007883a 	mov	r3,r2
100005f0:	00840034 	movhi	r2,4096
100005f4:	109fa504 	addi	r2,r2,32404
100005f8:	10c00c15 	stw	r3,48(r2)
100005fc:	00840034 	movhi	r2,4096
10000600:	109fa504 	addi	r2,r2,32404
10000604:	10800a17 	ldw	r2,40(r2)
10000608:	10800204 	addi	r2,r2,8
1000060c:	10800017 	ldw	r2,0(r2)
10000610:	10ffffcc 	andi	r3,r2,65535
10000614:	00840034 	movhi	r2,4096
10000618:	109fa504 	addi	r2,r2,32404
1000061c:	10c00f15 	stw	r3,60(r2)
10000620:	00840034 	movhi	r2,4096
10000624:	109fa504 	addi	r2,r2,32404
10000628:	10800a17 	ldw	r2,40(r2)
1000062c:	10800204 	addi	r2,r2,8
10000630:	10800017 	ldw	r2,0(r2)
10000634:	1006d43a 	srli	r3,r2,16
10000638:	00840034 	movhi	r2,4096
1000063c:	109fa504 	addi	r2,r2,32404
10000640:	10c01015 	stw	r3,64(r2)
10000644:	00840034 	movhi	r2,4096
10000648:	109fa504 	addi	r2,r2,32404
1000064c:	10800a17 	ldw	r2,40(r2)
10000650:	10800304 	addi	r2,r2,12
10000654:	10800017 	ldw	r2,0(r2)
10000658:	1005d07a 	srai	r2,r2,1
1000065c:	10c0004c 	andi	r3,r2,1
10000660:	00840034 	movhi	r2,4096
10000664:	109fa504 	addi	r2,r2,32404
10000668:	10c00d15 	stw	r3,52(r2)
1000066c:	00840034 	movhi	r2,4096
10000670:	109fa504 	addi	r2,r2,32404
10000674:	10800a17 	ldw	r2,40(r2)
10000678:	10800304 	addi	r2,r2,12
1000067c:	10800017 	ldw	r2,0(r2)
10000680:	1005d13a 	srai	r2,r2,4
10000684:	10c003cc 	andi	r3,r2,15
10000688:	00840034 	movhi	r2,4096
1000068c:	109fa504 	addi	r2,r2,32404
10000690:	10c00e15 	stw	r3,56(r2)
10000694:	00840034 	movhi	r2,4096
10000698:	109fa504 	addi	r2,r2,32404
1000069c:	10800a17 	ldw	r2,40(r2)
100006a0:	10800304 	addi	r2,r2,12
100006a4:	10800017 	ldw	r2,0(r2)
100006a8:	1005d43a 	srai	r2,r2,16
100006ac:	e0bfff05 	stb	r2,-4(fp)
100006b0:	00840034 	movhi	r2,4096
100006b4:	109fa504 	addi	r2,r2,32404
100006b8:	10800a17 	ldw	r2,40(r2)
100006bc:	10800304 	addi	r2,r2,12
100006c0:	10800017 	ldw	r2,0(r2)
100006c4:	1004d63a 	srli	r2,r2,24
100006c8:	e0bfff45 	stb	r2,-3(fp)
100006cc:	00840034 	movhi	r2,4096
100006d0:	109fa504 	addi	r2,r2,32404
100006d4:	10800e17 	ldw	r2,56(r2)
100006d8:	10800058 	cmpnei	r2,r2,1
100006dc:	1000041e 	bne	r2,zero,100006f0 <alt_sys_init+0x220>
100006e0:	00840034 	movhi	r2,4096
100006e4:	109fa504 	addi	r2,r2,32404
100006e8:	10001115 	stw	zero,68(r2)
100006ec:	00000e06 	br	10000728 <alt_sys_init+0x258>
100006f0:	00840034 	movhi	r2,4096
100006f4:	109fa504 	addi	r2,r2,32404
100006f8:	10800e17 	ldw	r2,56(r2)
100006fc:	10800098 	cmpnei	r2,r2,2
10000700:	1000051e 	bne	r2,zero,10000718 <alt_sys_init+0x248>
10000704:	00840034 	movhi	r2,4096
10000708:	109fa504 	addi	r2,r2,32404
1000070c:	00c00044 	movi	r3,1
10000710:	10c01115 	stw	r3,68(r2)
10000714:	00000406 	br	10000728 <alt_sys_init+0x258>
10000718:	00840034 	movhi	r2,4096
1000071c:	109fa504 	addi	r2,r2,32404
10000720:	00c00084 	movi	r3,2
10000724:	10c01115 	stw	r3,68(r2)
10000728:	e0bfff03 	ldbu	r2,-4(fp)
1000072c:	00c00804 	movi	r3,32
10000730:	1885c83a 	sub	r2,r3,r2
10000734:	00ffffc4 	movi	r3,-1
10000738:	1886d83a 	srl	r3,r3,r2
1000073c:	00840034 	movhi	r2,4096
10000740:	109fa504 	addi	r2,r2,32404
10000744:	10c01215 	stw	r3,72(r2)
10000748:	e0ffff03 	ldbu	r3,-4(fp)
1000074c:	00840034 	movhi	r2,4096
10000750:	109fa504 	addi	r2,r2,32404
10000754:	10801117 	ldw	r2,68(r2)
10000758:	1887883a 	add	r3,r3,r2
1000075c:	00840034 	movhi	r2,4096
10000760:	109fa504 	addi	r2,r2,32404
10000764:	10c01315 	stw	r3,76(r2)
10000768:	e0bfff43 	ldbu	r2,-3(fp)
1000076c:	00c00804 	movi	r3,32
10000770:	1885c83a 	sub	r2,r3,r2
10000774:	00ffffc4 	movi	r3,-1
10000778:	1886d83a 	srl	r3,r3,r2
1000077c:	00840034 	movhi	r2,4096
10000780:	109fa504 	addi	r2,r2,32404
10000784:	10c01415 	stw	r3,80(r2)
10000788:	01040034 	movhi	r4,4096
1000078c:	211fa504 	addi	r4,r4,32404
10000790:	00004640 	call	10000464 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( RGB_RESAMPLER, rgb_resampler);
10000794:	00840034 	movhi	r2,4096
10000798:	109fba04 	addi	r2,r2,32488
1000079c:	10800a17 	ldw	r2,40(r2)
100007a0:	10800017 	ldw	r2,0(r2)
100007a4:	10c003cc 	andi	r3,r2,15
100007a8:	00840034 	movhi	r2,4096
100007ac:	109fba04 	addi	r2,r2,32488
100007b0:	10c00b15 	stw	r3,44(r2)
100007b4:	00840034 	movhi	r2,4096
100007b8:	109fba04 	addi	r2,r2,32488
100007bc:	10800a17 	ldw	r2,40(r2)
100007c0:	10800017 	ldw	r2,0(r2)
100007c4:	1005d13a 	srai	r2,r2,4
100007c8:	10c0004c 	andi	r3,r2,1
100007cc:	00840034 	movhi	r2,4096
100007d0:	109fba04 	addi	r2,r2,32488
100007d4:	10c00c15 	stw	r3,48(r2)
100007d8:	00840034 	movhi	r2,4096
100007dc:	109fba04 	addi	r2,r2,32488
100007e0:	10800a17 	ldw	r2,40(r2)
100007e4:	10800017 	ldw	r2,0(r2)
100007e8:	1005d17a 	srai	r2,r2,5
100007ec:	10c0004c 	andi	r3,r2,1
100007f0:	00840034 	movhi	r2,4096
100007f4:	109fba04 	addi	r2,r2,32488
100007f8:	10c00d15 	stw	r3,52(r2)
100007fc:	00840034 	movhi	r2,4096
10000800:	109fba04 	addi	r2,r2,32488
10000804:	10800a17 	ldw	r2,40(r2)
10000808:	10800017 	ldw	r2,0(r2)
1000080c:	1005d43a 	srai	r2,r2,16
10000810:	10c003cc 	andi	r3,r2,15
10000814:	00840034 	movhi	r2,4096
10000818:	109fba04 	addi	r2,r2,32488
1000081c:	10c00e15 	stw	r3,56(r2)
10000820:	00840034 	movhi	r2,4096
10000824:	109fba04 	addi	r2,r2,32488
10000828:	10800a17 	ldw	r2,40(r2)
1000082c:	10800017 	ldw	r2,0(r2)
10000830:	1005d53a 	srai	r2,r2,20
10000834:	10c0004c 	andi	r3,r2,1
10000838:	00840034 	movhi	r2,4096
1000083c:	109fba04 	addi	r2,r2,32488
10000840:	10c00f15 	stw	r3,60(r2)
10000844:	00840034 	movhi	r2,4096
10000848:	109fba04 	addi	r2,r2,32488
1000084c:	10800a17 	ldw	r2,40(r2)
10000850:	10800017 	ldw	r2,0(r2)
10000854:	1005d57a 	srai	r2,r2,21
10000858:	10c0004c 	andi	r3,r2,1
1000085c:	00840034 	movhi	r2,4096
10000860:	109fba04 	addi	r2,r2,32488
10000864:	10c01015 	stw	r3,64(r2)
10000868:	01040034 	movhi	r4,4096
1000086c:	211fba04 	addi	r4,r4,32488
10000870:	00004640 	call	10000464 <alt_dev_reg>
}
10000874:	0001883a 	nop
10000878:	e037883a 	mov	sp,fp
1000087c:	dfc00117 	ldw	ra,4(sp)
10000880:	df000017 	ldw	fp,0(sp)
10000884:	dec00204 	addi	sp,sp,8
10000888:	f800283a 	ret

1000088c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000088c:	defffa04 	addi	sp,sp,-24
10000890:	dfc00515 	stw	ra,20(sp)
10000894:	df000415 	stw	fp,16(sp)
10000898:	df000404 	addi	fp,sp,16
1000089c:	e13ffd15 	stw	r4,-12(fp)
100008a0:	e17ffe15 	stw	r5,-8(fp)
100008a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100008a8:	e0bffd17 	ldw	r2,-12(fp)
100008ac:	10800017 	ldw	r2,0(r2)
100008b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
100008b4:	e0bffc17 	ldw	r2,-16(fp)
100008b8:	10c00a04 	addi	r3,r2,40
100008bc:	e0bffd17 	ldw	r2,-12(fp)
100008c0:	10800217 	ldw	r2,8(r2)
100008c4:	100f883a 	mov	r7,r2
100008c8:	e1bfff17 	ldw	r6,-4(fp)
100008cc:	e17ffe17 	ldw	r5,-8(fp)
100008d0:	1809883a 	mov	r4,r3
100008d4:	0000eb40 	call	10000eb4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
100008d8:	e037883a 	mov	sp,fp
100008dc:	dfc00117 	ldw	ra,4(sp)
100008e0:	df000017 	ldw	fp,0(sp)
100008e4:	dec00204 	addi	sp,sp,8
100008e8:	f800283a 	ret

100008ec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
100008ec:	defffa04 	addi	sp,sp,-24
100008f0:	dfc00515 	stw	ra,20(sp)
100008f4:	df000415 	stw	fp,16(sp)
100008f8:	df000404 	addi	fp,sp,16
100008fc:	e13ffd15 	stw	r4,-12(fp)
10000900:	e17ffe15 	stw	r5,-8(fp)
10000904:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10000908:	e0bffd17 	ldw	r2,-12(fp)
1000090c:	10800017 	ldw	r2,0(r2)
10000910:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10000914:	e0bffc17 	ldw	r2,-16(fp)
10000918:	10c00a04 	addi	r3,r2,40
1000091c:	e0bffd17 	ldw	r2,-12(fp)
10000920:	10800217 	ldw	r2,8(r2)
10000924:	100f883a 	mov	r7,r2
10000928:	e1bfff17 	ldw	r6,-4(fp)
1000092c:	e17ffe17 	ldw	r5,-8(fp)
10000930:	1809883a 	mov	r4,r3
10000934:	00010d00 	call	100010d0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10000938:	e037883a 	mov	sp,fp
1000093c:	dfc00117 	ldw	ra,4(sp)
10000940:	df000017 	ldw	fp,0(sp)
10000944:	dec00204 	addi	sp,sp,8
10000948:	f800283a 	ret

1000094c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000094c:	defffc04 	addi	sp,sp,-16
10000950:	dfc00315 	stw	ra,12(sp)
10000954:	df000215 	stw	fp,8(sp)
10000958:	df000204 	addi	fp,sp,8
1000095c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10000960:	e0bfff17 	ldw	r2,-4(fp)
10000964:	10800017 	ldw	r2,0(r2)
10000968:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000096c:	e0bffe17 	ldw	r2,-8(fp)
10000970:	10c00a04 	addi	r3,r2,40
10000974:	e0bfff17 	ldw	r2,-4(fp)
10000978:	10800217 	ldw	r2,8(r2)
1000097c:	100b883a 	mov	r5,r2
10000980:	1809883a 	mov	r4,r3
10000984:	0000d5c0 	call	10000d5c <altera_avalon_jtag_uart_close>
}
10000988:	e037883a 	mov	sp,fp
1000098c:	dfc00117 	ldw	ra,4(sp)
10000990:	df000017 	ldw	fp,0(sp)
10000994:	dec00204 	addi	sp,sp,8
10000998:	f800283a 	ret

1000099c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000099c:	defffa04 	addi	sp,sp,-24
100009a0:	dfc00515 	stw	ra,20(sp)
100009a4:	df000415 	stw	fp,16(sp)
100009a8:	df000404 	addi	fp,sp,16
100009ac:	e13ffd15 	stw	r4,-12(fp)
100009b0:	e17ffe15 	stw	r5,-8(fp)
100009b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
100009b8:	e0bffd17 	ldw	r2,-12(fp)
100009bc:	10800017 	ldw	r2,0(r2)
100009c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
100009c4:	e0bffc17 	ldw	r2,-16(fp)
100009c8:	10800a04 	addi	r2,r2,40
100009cc:	e1bfff17 	ldw	r6,-4(fp)
100009d0:	e17ffe17 	ldw	r5,-8(fp)
100009d4:	1009883a 	mov	r4,r2
100009d8:	0000dc40 	call	10000dc4 <altera_avalon_jtag_uart_ioctl>
}
100009dc:	e037883a 	mov	sp,fp
100009e0:	dfc00117 	ldw	ra,4(sp)
100009e4:	df000017 	ldw	fp,0(sp)
100009e8:	dec00204 	addi	sp,sp,8
100009ec:	f800283a 	ret

100009f0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
100009f0:	defffa04 	addi	sp,sp,-24
100009f4:	dfc00515 	stw	ra,20(sp)
100009f8:	df000415 	stw	fp,16(sp)
100009fc:	df000404 	addi	fp,sp,16
10000a00:	e13ffd15 	stw	r4,-12(fp)
10000a04:	e17ffe15 	stw	r5,-8(fp)
10000a08:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10000a0c:	e0bffd17 	ldw	r2,-12(fp)
10000a10:	00c00044 	movi	r3,1
10000a14:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10000a18:	e0bffd17 	ldw	r2,-12(fp)
10000a1c:	10800017 	ldw	r2,0(r2)
10000a20:	10800104 	addi	r2,r2,4
10000a24:	1007883a 	mov	r3,r2
10000a28:	e0bffd17 	ldw	r2,-12(fp)
10000a2c:	10800817 	ldw	r2,32(r2)
10000a30:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10000a34:	e0bffe17 	ldw	r2,-8(fp)
10000a38:	e0ffff17 	ldw	r3,-4(fp)
10000a3c:	d8000015 	stw	zero,0(sp)
10000a40:	e1fffd17 	ldw	r7,-12(fp)
10000a44:	01840034 	movhi	r6,4096
10000a48:	3182ac04 	addi	r6,r6,2736
10000a4c:	180b883a 	mov	r5,r3
10000a50:	1009883a 	mov	r4,r2
10000a54:	00029980 	call	10002998 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10000a58:	e0bffd17 	ldw	r2,-12(fp)
10000a5c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10000a60:	e0bffd17 	ldw	r2,-12(fp)
10000a64:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10000a68:	d0e6e517 	ldw	r3,-25708(gp)
10000a6c:	e1fffd17 	ldw	r7,-12(fp)
10000a70:	01840034 	movhi	r6,4096
10000a74:	31832f04 	addi	r6,r6,3260
10000a78:	180b883a 	mov	r5,r3
10000a7c:	1009883a 	mov	r4,r2
10000a80:	00024880 	call	10002488 <alt_alarm_start>
10000a84:	1000040e 	bge	r2,zero,10000a98 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10000a88:	e0fffd17 	ldw	r3,-12(fp)
10000a8c:	00a00034 	movhi	r2,32768
10000a90:	10bfffc4 	addi	r2,r2,-1
10000a94:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10000a98:	0001883a 	nop
10000a9c:	e037883a 	mov	sp,fp
10000aa0:	dfc00117 	ldw	ra,4(sp)
10000aa4:	df000017 	ldw	fp,0(sp)
10000aa8:	dec00204 	addi	sp,sp,8
10000aac:	f800283a 	ret

10000ab0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10000ab0:	defff804 	addi	sp,sp,-32
10000ab4:	df000715 	stw	fp,28(sp)
10000ab8:	df000704 	addi	fp,sp,28
10000abc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10000ac0:	e0bfff17 	ldw	r2,-4(fp)
10000ac4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10000ac8:	e0bffb17 	ldw	r2,-20(fp)
10000acc:	10800017 	ldw	r2,0(r2)
10000ad0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10000ad4:	e0bffc17 	ldw	r2,-16(fp)
10000ad8:	10800104 	addi	r2,r2,4
10000adc:	10800037 	ldwio	r2,0(r2)
10000ae0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10000ae4:	e0bffd17 	ldw	r2,-12(fp)
10000ae8:	1080c00c 	andi	r2,r2,768
10000aec:	10006d26 	beq	r2,zero,10000ca4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10000af0:	e0bffd17 	ldw	r2,-12(fp)
10000af4:	1080400c 	andi	r2,r2,256
10000af8:	10003526 	beq	r2,zero,10000bd0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10000afc:	00800074 	movhi	r2,1
10000b00:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10000b04:	e0bffb17 	ldw	r2,-20(fp)
10000b08:	10800a17 	ldw	r2,40(r2)
10000b0c:	10800044 	addi	r2,r2,1
10000b10:	1081ffcc 	andi	r2,r2,2047
10000b14:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10000b18:	e0bffb17 	ldw	r2,-20(fp)
10000b1c:	10c00b17 	ldw	r3,44(r2)
10000b20:	e0bffe17 	ldw	r2,-8(fp)
10000b24:	18801526 	beq	r3,r2,10000b7c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10000b28:	e0bffc17 	ldw	r2,-16(fp)
10000b2c:	10800037 	ldwio	r2,0(r2)
10000b30:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10000b34:	e0bff917 	ldw	r2,-28(fp)
10000b38:	10a0000c 	andi	r2,r2,32768
10000b3c:	10001126 	beq	r2,zero,10000b84 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10000b40:	e0bffb17 	ldw	r2,-20(fp)
10000b44:	10800a17 	ldw	r2,40(r2)
10000b48:	e0fff917 	ldw	r3,-28(fp)
10000b4c:	1809883a 	mov	r4,r3
10000b50:	e0fffb17 	ldw	r3,-20(fp)
10000b54:	1885883a 	add	r2,r3,r2
10000b58:	10800e04 	addi	r2,r2,56
10000b5c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10000b60:	e0bffb17 	ldw	r2,-20(fp)
10000b64:	10800a17 	ldw	r2,40(r2)
10000b68:	10800044 	addi	r2,r2,1
10000b6c:	10c1ffcc 	andi	r3,r2,2047
10000b70:	e0bffb17 	ldw	r2,-20(fp)
10000b74:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10000b78:	003fe206 	br	10000b04 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10000b7c:	0001883a 	nop
10000b80:	00000106 	br	10000b88 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10000b84:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10000b88:	e0bff917 	ldw	r2,-28(fp)
10000b8c:	10bfffec 	andhi	r2,r2,65535
10000b90:	10000f26 	beq	r2,zero,10000bd0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10000b94:	e0bffb17 	ldw	r2,-20(fp)
10000b98:	10c00817 	ldw	r3,32(r2)
10000b9c:	00bfff84 	movi	r2,-2
10000ba0:	1886703a 	and	r3,r3,r2
10000ba4:	e0bffb17 	ldw	r2,-20(fp)
10000ba8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10000bac:	e0bffc17 	ldw	r2,-16(fp)
10000bb0:	10800104 	addi	r2,r2,4
10000bb4:	1007883a 	mov	r3,r2
10000bb8:	e0bffb17 	ldw	r2,-20(fp)
10000bbc:	10800817 	ldw	r2,32(r2)
10000bc0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10000bc4:	e0bffc17 	ldw	r2,-16(fp)
10000bc8:	10800104 	addi	r2,r2,4
10000bcc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10000bd0:	e0bffd17 	ldw	r2,-12(fp)
10000bd4:	1080800c 	andi	r2,r2,512
10000bd8:	103fbe26 	beq	r2,zero,10000ad4 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10000bdc:	e0bffd17 	ldw	r2,-12(fp)
10000be0:	1004d43a 	srli	r2,r2,16
10000be4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10000be8:	00001406 	br	10000c3c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10000bec:	e0bffc17 	ldw	r2,-16(fp)
10000bf0:	e0fffb17 	ldw	r3,-20(fp)
10000bf4:	18c00d17 	ldw	r3,52(r3)
10000bf8:	e13ffb17 	ldw	r4,-20(fp)
10000bfc:	20c7883a 	add	r3,r4,r3
10000c00:	18c20e04 	addi	r3,r3,2104
10000c04:	18c00003 	ldbu	r3,0(r3)
10000c08:	18c03fcc 	andi	r3,r3,255
10000c0c:	18c0201c 	xori	r3,r3,128
10000c10:	18ffe004 	addi	r3,r3,-128
10000c14:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10000c18:	e0bffb17 	ldw	r2,-20(fp)
10000c1c:	10800d17 	ldw	r2,52(r2)
10000c20:	10800044 	addi	r2,r2,1
10000c24:	10c1ffcc 	andi	r3,r2,2047
10000c28:	e0bffb17 	ldw	r2,-20(fp)
10000c2c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10000c30:	e0bffa17 	ldw	r2,-24(fp)
10000c34:	10bfffc4 	addi	r2,r2,-1
10000c38:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10000c3c:	e0bffa17 	ldw	r2,-24(fp)
10000c40:	10000526 	beq	r2,zero,10000c58 <altera_avalon_jtag_uart_irq+0x1a8>
10000c44:	e0bffb17 	ldw	r2,-20(fp)
10000c48:	10c00d17 	ldw	r3,52(r2)
10000c4c:	e0bffb17 	ldw	r2,-20(fp)
10000c50:	10800c17 	ldw	r2,48(r2)
10000c54:	18bfe51e 	bne	r3,r2,10000bec <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10000c58:	e0bffa17 	ldw	r2,-24(fp)
10000c5c:	103f9d26 	beq	r2,zero,10000ad4 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10000c60:	e0bffb17 	ldw	r2,-20(fp)
10000c64:	10c00817 	ldw	r3,32(r2)
10000c68:	00bfff44 	movi	r2,-3
10000c6c:	1886703a 	and	r3,r3,r2
10000c70:	e0bffb17 	ldw	r2,-20(fp)
10000c74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10000c78:	e0bffb17 	ldw	r2,-20(fp)
10000c7c:	10800017 	ldw	r2,0(r2)
10000c80:	10800104 	addi	r2,r2,4
10000c84:	1007883a 	mov	r3,r2
10000c88:	e0bffb17 	ldw	r2,-20(fp)
10000c8c:	10800817 	ldw	r2,32(r2)
10000c90:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10000c94:	e0bffc17 	ldw	r2,-16(fp)
10000c98:	10800104 	addi	r2,r2,4
10000c9c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10000ca0:	003f8c06 	br	10000ad4 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10000ca4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10000ca8:	0001883a 	nop
10000cac:	e037883a 	mov	sp,fp
10000cb0:	df000017 	ldw	fp,0(sp)
10000cb4:	dec00104 	addi	sp,sp,4
10000cb8:	f800283a 	ret

10000cbc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10000cbc:	defff804 	addi	sp,sp,-32
10000cc0:	df000715 	stw	fp,28(sp)
10000cc4:	df000704 	addi	fp,sp,28
10000cc8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10000ccc:	e0bffb17 	ldw	r2,-20(fp)
10000cd0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10000cd4:	e0bff917 	ldw	r2,-28(fp)
10000cd8:	10800017 	ldw	r2,0(r2)
10000cdc:	10800104 	addi	r2,r2,4
10000ce0:	10800037 	ldwio	r2,0(r2)
10000ce4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10000ce8:	e0bffa17 	ldw	r2,-24(fp)
10000cec:	1081000c 	andi	r2,r2,1024
10000cf0:	10000b26 	beq	r2,zero,10000d20 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10000cf4:	e0bff917 	ldw	r2,-28(fp)
10000cf8:	10800017 	ldw	r2,0(r2)
10000cfc:	10800104 	addi	r2,r2,4
10000d00:	1007883a 	mov	r3,r2
10000d04:	e0bff917 	ldw	r2,-28(fp)
10000d08:	10800817 	ldw	r2,32(r2)
10000d0c:	10810014 	ori	r2,r2,1024
10000d10:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10000d14:	e0bff917 	ldw	r2,-28(fp)
10000d18:	10000915 	stw	zero,36(r2)
10000d1c:	00000a06 	br	10000d48 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10000d20:	e0bff917 	ldw	r2,-28(fp)
10000d24:	10c00917 	ldw	r3,36(r2)
10000d28:	00a00034 	movhi	r2,32768
10000d2c:	10bfff04 	addi	r2,r2,-4
10000d30:	10c00536 	bltu	r2,r3,10000d48 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10000d34:	e0bff917 	ldw	r2,-28(fp)
10000d38:	10800917 	ldw	r2,36(r2)
10000d3c:	10c00044 	addi	r3,r2,1
10000d40:	e0bff917 	ldw	r2,-28(fp)
10000d44:	10c00915 	stw	r3,36(r2)
10000d48:	d0a6e517 	ldw	r2,-25708(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10000d4c:	e037883a 	mov	sp,fp
10000d50:	df000017 	ldw	fp,0(sp)
10000d54:	dec00104 	addi	sp,sp,4
10000d58:	f800283a 	ret

10000d5c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10000d5c:	defffd04 	addi	sp,sp,-12
10000d60:	df000215 	stw	fp,8(sp)
10000d64:	df000204 	addi	fp,sp,8
10000d68:	e13ffe15 	stw	r4,-8(fp)
10000d6c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10000d70:	00000506 	br	10000d88 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10000d74:	e0bfff17 	ldw	r2,-4(fp)
10000d78:	1090000c 	andi	r2,r2,16384
10000d7c:	10000226 	beq	r2,zero,10000d88 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10000d80:	00bffd44 	movi	r2,-11
10000d84:	00000b06 	br	10000db4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10000d88:	e0bffe17 	ldw	r2,-8(fp)
10000d8c:	10c00d17 	ldw	r3,52(r2)
10000d90:	e0bffe17 	ldw	r2,-8(fp)
10000d94:	10800c17 	ldw	r2,48(r2)
10000d98:	18800526 	beq	r3,r2,10000db0 <altera_avalon_jtag_uart_close+0x54>
10000d9c:	e0bffe17 	ldw	r2,-8(fp)
10000da0:	10c00917 	ldw	r3,36(r2)
10000da4:	e0bffe17 	ldw	r2,-8(fp)
10000da8:	10800117 	ldw	r2,4(r2)
10000dac:	18bff136 	bltu	r3,r2,10000d74 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10000db0:	0005883a 	mov	r2,zero
}
10000db4:	e037883a 	mov	sp,fp
10000db8:	df000017 	ldw	fp,0(sp)
10000dbc:	dec00104 	addi	sp,sp,4
10000dc0:	f800283a 	ret

10000dc4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10000dc4:	defffa04 	addi	sp,sp,-24
10000dc8:	df000515 	stw	fp,20(sp)
10000dcc:	df000504 	addi	fp,sp,20
10000dd0:	e13ffd15 	stw	r4,-12(fp)
10000dd4:	e17ffe15 	stw	r5,-8(fp)
10000dd8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10000ddc:	00bff9c4 	movi	r2,-25
10000de0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10000de4:	e0bffe17 	ldw	r2,-8(fp)
10000de8:	10da8060 	cmpeqi	r3,r2,27137
10000dec:	1800031e 	bne	r3,zero,10000dfc <altera_avalon_jtag_uart_ioctl+0x38>
10000df0:	109a80a0 	cmpeqi	r2,r2,27138
10000df4:	1000181e 	bne	r2,zero,10000e58 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10000df8:	00002906 	br	10000ea0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10000dfc:	e0bffd17 	ldw	r2,-12(fp)
10000e00:	10c00117 	ldw	r3,4(r2)
10000e04:	00a00034 	movhi	r2,32768
10000e08:	10bfffc4 	addi	r2,r2,-1
10000e0c:	18802126 	beq	r3,r2,10000e94 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10000e10:	e0bfff17 	ldw	r2,-4(fp)
10000e14:	10800017 	ldw	r2,0(r2)
10000e18:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10000e1c:	e0bffc17 	ldw	r2,-16(fp)
10000e20:	10800090 	cmplti	r2,r2,2
10000e24:	1000061e 	bne	r2,zero,10000e40 <altera_avalon_jtag_uart_ioctl+0x7c>
10000e28:	e0fffc17 	ldw	r3,-16(fp)
10000e2c:	00a00034 	movhi	r2,32768
10000e30:	10bfffc4 	addi	r2,r2,-1
10000e34:	18800226 	beq	r3,r2,10000e40 <altera_avalon_jtag_uart_ioctl+0x7c>
10000e38:	e0bffc17 	ldw	r2,-16(fp)
10000e3c:	00000206 	br	10000e48 <altera_avalon_jtag_uart_ioctl+0x84>
10000e40:	00a00034 	movhi	r2,32768
10000e44:	10bfff84 	addi	r2,r2,-2
10000e48:	e0fffd17 	ldw	r3,-12(fp)
10000e4c:	18800115 	stw	r2,4(r3)
      rc = 0;
10000e50:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10000e54:	00000f06 	br	10000e94 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10000e58:	e0bffd17 	ldw	r2,-12(fp)
10000e5c:	10c00117 	ldw	r3,4(r2)
10000e60:	00a00034 	movhi	r2,32768
10000e64:	10bfffc4 	addi	r2,r2,-1
10000e68:	18800c26 	beq	r3,r2,10000e9c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10000e6c:	e0bffd17 	ldw	r2,-12(fp)
10000e70:	10c00917 	ldw	r3,36(r2)
10000e74:	e0bffd17 	ldw	r2,-12(fp)
10000e78:	10800117 	ldw	r2,4(r2)
10000e7c:	1885803a 	cmpltu	r2,r3,r2
10000e80:	10c03fcc 	andi	r3,r2,255
10000e84:	e0bfff17 	ldw	r2,-4(fp)
10000e88:	10c00015 	stw	r3,0(r2)
      rc = 0;
10000e8c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10000e90:	00000206 	br	10000e9c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10000e94:	0001883a 	nop
10000e98:	00000106 	br	10000ea0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10000e9c:	0001883a 	nop

  default:
    break;
  }

  return rc;
10000ea0:	e0bffb17 	ldw	r2,-20(fp)
}
10000ea4:	e037883a 	mov	sp,fp
10000ea8:	df000017 	ldw	fp,0(sp)
10000eac:	dec00104 	addi	sp,sp,4
10000eb0:	f800283a 	ret

10000eb4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10000eb4:	defff304 	addi	sp,sp,-52
10000eb8:	dfc00c15 	stw	ra,48(sp)
10000ebc:	df000b15 	stw	fp,44(sp)
10000ec0:	df000b04 	addi	fp,sp,44
10000ec4:	e13ffc15 	stw	r4,-16(fp)
10000ec8:	e17ffd15 	stw	r5,-12(fp)
10000ecc:	e1bffe15 	stw	r6,-8(fp)
10000ed0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10000ed4:	e0bffd17 	ldw	r2,-12(fp)
10000ed8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10000edc:	00004706 	br	10000ffc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10000ee0:	e0bffc17 	ldw	r2,-16(fp)
10000ee4:	10800a17 	ldw	r2,40(r2)
10000ee8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10000eec:	e0bffc17 	ldw	r2,-16(fp)
10000ef0:	10800b17 	ldw	r2,44(r2)
10000ef4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10000ef8:	e0fff717 	ldw	r3,-36(fp)
10000efc:	e0bff817 	ldw	r2,-32(fp)
10000f00:	18800536 	bltu	r3,r2,10000f18 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10000f04:	e0fff717 	ldw	r3,-36(fp)
10000f08:	e0bff817 	ldw	r2,-32(fp)
10000f0c:	1885c83a 	sub	r2,r3,r2
10000f10:	e0bff615 	stw	r2,-40(fp)
10000f14:	00000406 	br	10000f28 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10000f18:	00c20004 	movi	r3,2048
10000f1c:	e0bff817 	ldw	r2,-32(fp)
10000f20:	1885c83a 	sub	r2,r3,r2
10000f24:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10000f28:	e0bff617 	ldw	r2,-40(fp)
10000f2c:	10001e26 	beq	r2,zero,10000fa8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10000f30:	e0fffe17 	ldw	r3,-8(fp)
10000f34:	e0bff617 	ldw	r2,-40(fp)
10000f38:	1880022e 	bgeu	r3,r2,10000f44 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10000f3c:	e0bffe17 	ldw	r2,-8(fp)
10000f40:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10000f44:	e0bffc17 	ldw	r2,-16(fp)
10000f48:	10c00e04 	addi	r3,r2,56
10000f4c:	e0bff817 	ldw	r2,-32(fp)
10000f50:	1885883a 	add	r2,r3,r2
10000f54:	e1bff617 	ldw	r6,-40(fp)
10000f58:	100b883a 	mov	r5,r2
10000f5c:	e13ff517 	ldw	r4,-44(fp)
10000f60:	00043f80 	call	100043f8 <memcpy>
      ptr   += n;
10000f64:	e0fff517 	ldw	r3,-44(fp)
10000f68:	e0bff617 	ldw	r2,-40(fp)
10000f6c:	1885883a 	add	r2,r3,r2
10000f70:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10000f74:	e0fffe17 	ldw	r3,-8(fp)
10000f78:	e0bff617 	ldw	r2,-40(fp)
10000f7c:	1885c83a 	sub	r2,r3,r2
10000f80:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10000f84:	e0fff817 	ldw	r3,-32(fp)
10000f88:	e0bff617 	ldw	r2,-40(fp)
10000f8c:	1885883a 	add	r2,r3,r2
10000f90:	10c1ffcc 	andi	r3,r2,2047
10000f94:	e0bffc17 	ldw	r2,-16(fp)
10000f98:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10000f9c:	e0bffe17 	ldw	r2,-8(fp)
10000fa0:	00bfcf16 	blt	zero,r2,10000ee0 <altera_avalon_jtag_uart_read+0x2c>
10000fa4:	00000106 	br	10000fac <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10000fa8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10000fac:	e0fff517 	ldw	r3,-44(fp)
10000fb0:	e0bffd17 	ldw	r2,-12(fp)
10000fb4:	1880141e 	bne	r3,r2,10001008 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10000fb8:	e0bfff17 	ldw	r2,-4(fp)
10000fbc:	1090000c 	andi	r2,r2,16384
10000fc0:	1000131e 	bne	r2,zero,10001010 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10000fc4:	0001883a 	nop
10000fc8:	e0bffc17 	ldw	r2,-16(fp)
10000fcc:	10c00a17 	ldw	r3,40(r2)
10000fd0:	e0bff717 	ldw	r2,-36(fp)
10000fd4:	1880051e 	bne	r3,r2,10000fec <altera_avalon_jtag_uart_read+0x138>
10000fd8:	e0bffc17 	ldw	r2,-16(fp)
10000fdc:	10c00917 	ldw	r3,36(r2)
10000fe0:	e0bffc17 	ldw	r2,-16(fp)
10000fe4:	10800117 	ldw	r2,4(r2)
10000fe8:	18bff736 	bltu	r3,r2,10000fc8 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10000fec:	e0bffc17 	ldw	r2,-16(fp)
10000ff0:	10c00a17 	ldw	r3,40(r2)
10000ff4:	e0bff717 	ldw	r2,-36(fp)
10000ff8:	18800726 	beq	r3,r2,10001018 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10000ffc:	e0bffe17 	ldw	r2,-8(fp)
10001000:	00bfb716 	blt	zero,r2,10000ee0 <altera_avalon_jtag_uart_read+0x2c>
10001004:	00000506 	br	1000101c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10001008:	0001883a 	nop
1000100c:	00000306 	br	1000101c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10001010:	0001883a 	nop
10001014:	00000106 	br	1000101c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10001018:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000101c:	e0fff517 	ldw	r3,-44(fp)
10001020:	e0bffd17 	ldw	r2,-12(fp)
10001024:	18801826 	beq	r3,r2,10001088 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10001028:	0005303a 	rdctl	r2,status
1000102c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10001030:	e0fffb17 	ldw	r3,-20(fp)
10001034:	00bfff84 	movi	r2,-2
10001038:	1884703a 	and	r2,r3,r2
1000103c:	1001703a 	wrctl	status,r2
  
  return context;
10001040:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10001044:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10001048:	e0bffc17 	ldw	r2,-16(fp)
1000104c:	10800817 	ldw	r2,32(r2)
10001050:	10c00054 	ori	r3,r2,1
10001054:	e0bffc17 	ldw	r2,-16(fp)
10001058:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000105c:	e0bffc17 	ldw	r2,-16(fp)
10001060:	10800017 	ldw	r2,0(r2)
10001064:	10800104 	addi	r2,r2,4
10001068:	1007883a 	mov	r3,r2
1000106c:	e0bffc17 	ldw	r2,-16(fp)
10001070:	10800817 	ldw	r2,32(r2)
10001074:	18800035 	stwio	r2,0(r3)
10001078:	e0bffa17 	ldw	r2,-24(fp)
1000107c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10001080:	e0bff917 	ldw	r2,-28(fp)
10001084:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10001088:	e0fff517 	ldw	r3,-44(fp)
1000108c:	e0bffd17 	ldw	r2,-12(fp)
10001090:	18800426 	beq	r3,r2,100010a4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10001094:	e0fff517 	ldw	r3,-44(fp)
10001098:	e0bffd17 	ldw	r2,-12(fp)
1000109c:	1885c83a 	sub	r2,r3,r2
100010a0:	00000606 	br	100010bc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
100010a4:	e0bfff17 	ldw	r2,-4(fp)
100010a8:	1090000c 	andi	r2,r2,16384
100010ac:	10000226 	beq	r2,zero,100010b8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
100010b0:	00bffd44 	movi	r2,-11
100010b4:	00000106 	br	100010bc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
100010b8:	00bffec4 	movi	r2,-5
}
100010bc:	e037883a 	mov	sp,fp
100010c0:	dfc00117 	ldw	ra,4(sp)
100010c4:	df000017 	ldw	fp,0(sp)
100010c8:	dec00204 	addi	sp,sp,8
100010cc:	f800283a 	ret

100010d0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
100010d0:	defff304 	addi	sp,sp,-52
100010d4:	dfc00c15 	stw	ra,48(sp)
100010d8:	df000b15 	stw	fp,44(sp)
100010dc:	df000b04 	addi	fp,sp,44
100010e0:	e13ffc15 	stw	r4,-16(fp)
100010e4:	e17ffd15 	stw	r5,-12(fp)
100010e8:	e1bffe15 	stw	r6,-8(fp)
100010ec:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100010f0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100010f4:	e0bffd17 	ldw	r2,-12(fp)
100010f8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100010fc:	00003706 	br	100011dc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10001100:	e0bffc17 	ldw	r2,-16(fp)
10001104:	10800c17 	ldw	r2,48(r2)
10001108:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
1000110c:	e0bffc17 	ldw	r2,-16(fp)
10001110:	10800d17 	ldw	r2,52(r2)
10001114:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10001118:	e0fff917 	ldw	r3,-28(fp)
1000111c:	e0bff517 	ldw	r2,-44(fp)
10001120:	1880062e 	bgeu	r3,r2,1000113c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10001124:	e0fff517 	ldw	r3,-44(fp)
10001128:	e0bff917 	ldw	r2,-28(fp)
1000112c:	1885c83a 	sub	r2,r3,r2
10001130:	10bfffc4 	addi	r2,r2,-1
10001134:	e0bff615 	stw	r2,-40(fp)
10001138:	00000b06 	br	10001168 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000113c:	e0bff517 	ldw	r2,-44(fp)
10001140:	10000526 	beq	r2,zero,10001158 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10001144:	00c20004 	movi	r3,2048
10001148:	e0bff917 	ldw	r2,-28(fp)
1000114c:	1885c83a 	sub	r2,r3,r2
10001150:	e0bff615 	stw	r2,-40(fp)
10001154:	00000406 	br	10001168 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10001158:	00c1ffc4 	movi	r3,2047
1000115c:	e0bff917 	ldw	r2,-28(fp)
10001160:	1885c83a 	sub	r2,r3,r2
10001164:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10001168:	e0bff617 	ldw	r2,-40(fp)
1000116c:	10001e26 	beq	r2,zero,100011e8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10001170:	e0fffe17 	ldw	r3,-8(fp)
10001174:	e0bff617 	ldw	r2,-40(fp)
10001178:	1880022e 	bgeu	r3,r2,10001184 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1000117c:	e0bffe17 	ldw	r2,-8(fp)
10001180:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10001184:	e0bffc17 	ldw	r2,-16(fp)
10001188:	10c20e04 	addi	r3,r2,2104
1000118c:	e0bff917 	ldw	r2,-28(fp)
10001190:	1885883a 	add	r2,r3,r2
10001194:	e1bff617 	ldw	r6,-40(fp)
10001198:	e17ffd17 	ldw	r5,-12(fp)
1000119c:	1009883a 	mov	r4,r2
100011a0:	00043f80 	call	100043f8 <memcpy>
      ptr   += n;
100011a4:	e0fffd17 	ldw	r3,-12(fp)
100011a8:	e0bff617 	ldw	r2,-40(fp)
100011ac:	1885883a 	add	r2,r3,r2
100011b0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
100011b4:	e0fffe17 	ldw	r3,-8(fp)
100011b8:	e0bff617 	ldw	r2,-40(fp)
100011bc:	1885c83a 	sub	r2,r3,r2
100011c0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100011c4:	e0fff917 	ldw	r3,-28(fp)
100011c8:	e0bff617 	ldw	r2,-40(fp)
100011cc:	1885883a 	add	r2,r3,r2
100011d0:	10c1ffcc 	andi	r3,r2,2047
100011d4:	e0bffc17 	ldw	r2,-16(fp)
100011d8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100011dc:	e0bffe17 	ldw	r2,-8(fp)
100011e0:	00bfc716 	blt	zero,r2,10001100 <altera_avalon_jtag_uart_write+0x30>
100011e4:	00000106 	br	100011ec <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
100011e8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100011ec:	0005303a 	rdctl	r2,status
100011f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100011f4:	e0fffb17 	ldw	r3,-20(fp)
100011f8:	00bfff84 	movi	r2,-2
100011fc:	1884703a 	and	r2,r3,r2
10001200:	1001703a 	wrctl	status,r2
  
  return context;
10001204:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10001208:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000120c:	e0bffc17 	ldw	r2,-16(fp)
10001210:	10800817 	ldw	r2,32(r2)
10001214:	10c00094 	ori	r3,r2,2
10001218:	e0bffc17 	ldw	r2,-16(fp)
1000121c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10001220:	e0bffc17 	ldw	r2,-16(fp)
10001224:	10800017 	ldw	r2,0(r2)
10001228:	10800104 	addi	r2,r2,4
1000122c:	1007883a 	mov	r3,r2
10001230:	e0bffc17 	ldw	r2,-16(fp)
10001234:	10800817 	ldw	r2,32(r2)
10001238:	18800035 	stwio	r2,0(r3)
1000123c:	e0bffa17 	ldw	r2,-24(fp)
10001240:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10001244:	e0bff817 	ldw	r2,-32(fp)
10001248:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000124c:	e0bffe17 	ldw	r2,-8(fp)
10001250:	0080100e 	bge	zero,r2,10001294 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10001254:	e0bfff17 	ldw	r2,-4(fp)
10001258:	1090000c 	andi	r2,r2,16384
1000125c:	1000101e 	bne	r2,zero,100012a0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10001260:	0001883a 	nop
10001264:	e0bffc17 	ldw	r2,-16(fp)
10001268:	10c00d17 	ldw	r3,52(r2)
1000126c:	e0bff517 	ldw	r2,-44(fp)
10001270:	1880051e 	bne	r3,r2,10001288 <altera_avalon_jtag_uart_write+0x1b8>
10001274:	e0bffc17 	ldw	r2,-16(fp)
10001278:	10c00917 	ldw	r3,36(r2)
1000127c:	e0bffc17 	ldw	r2,-16(fp)
10001280:	10800117 	ldw	r2,4(r2)
10001284:	18bff736 	bltu	r3,r2,10001264 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10001288:	e0bffc17 	ldw	r2,-16(fp)
1000128c:	10800917 	ldw	r2,36(r2)
10001290:	1000051e 	bne	r2,zero,100012a8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10001294:	e0bffe17 	ldw	r2,-8(fp)
10001298:	00bfd016 	blt	zero,r2,100011dc <altera_avalon_jtag_uart_write+0x10c>
1000129c:	00000306 	br	100012ac <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
100012a0:	0001883a 	nop
100012a4:	00000106 	br	100012ac <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
100012a8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
100012ac:	e0fffd17 	ldw	r3,-12(fp)
100012b0:	e0bff717 	ldw	r2,-36(fp)
100012b4:	18800426 	beq	r3,r2,100012c8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
100012b8:	e0fffd17 	ldw	r3,-12(fp)
100012bc:	e0bff717 	ldw	r2,-36(fp)
100012c0:	1885c83a 	sub	r2,r3,r2
100012c4:	00000606 	br	100012e0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
100012c8:	e0bfff17 	ldw	r2,-4(fp)
100012cc:	1090000c 	andi	r2,r2,16384
100012d0:	10000226 	beq	r2,zero,100012dc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
100012d4:	00bffd44 	movi	r2,-11
100012d8:	00000106 	br	100012e0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
100012dc:	00bffec4 	movi	r2,-5
}
100012e0:	e037883a 	mov	sp,fp
100012e4:	dfc00117 	ldw	ra,4(sp)
100012e8:	df000017 	ldw	fp,0(sp)
100012ec:	dec00204 	addi	sp,sp,8
100012f0:	f800283a 	ret

100012f4 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
100012f4:	defffc04 	addi	sp,sp,-16
100012f8:	dfc00315 	stw	ra,12(sp)
100012fc:	df000215 	stw	fp,8(sp)
10001300:	df000204 	addi	fp,sp,8
10001304:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
10001308:	e0bfff17 	ldw	r2,-4(fp)
1000130c:	10800217 	ldw	r2,8(r2)
10001310:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
10001314:	00000b06 	br	10001344 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
10001318:	01440034 	movhi	r5,4096
1000131c:	295b7004 	addi	r5,r5,28096
10001320:	e13ffe17 	ldw	r4,-8(fp)
10001324:	0004c540 	call	10004c54 <strcmp>
10001328:	1000031e 	bne	r2,zero,10001338 <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
1000132c:	e0bffe17 	ldw	r2,-8(fp)
10001330:	10000005 	stb	zero,0(r2)
			break;
10001334:	00000906 	br	1000135c <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
10001338:	e0bffe17 	ldw	r2,-8(fp)
1000133c:	10800044 	addi	r2,r2,1
10001340:	e0bffe15 	stw	r2,-8(fp)
10001344:	e0bffe17 	ldw	r2,-8(fp)
10001348:	10800003 	ldbu	r2,0(r2)
1000134c:	10803fcc 	andi	r2,r2,255
10001350:	1080201c 	xori	r2,r2,128
10001354:	10bfe004 	addi	r2,r2,-128
10001358:	103fef1e 	bne	r2,zero,10001318 <alt_up_char_buffer_init+0x24>
			(*name) = '\0';
			break;
		}
	}
	
	return;
1000135c:	0001883a 	nop
}
10001360:	e037883a 	mov	sp,fp
10001364:	dfc00117 	ldw	ra,4(sp)
10001368:	df000017 	ldw	fp,0(sp)
1000136c:	dec00204 	addi	sp,sp,8
10001370:	f800283a 	ret

10001374 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
10001374:	defffc04 	addi	sp,sp,-16
10001378:	dfc00315 	stw	ra,12(sp)
1000137c:	df000215 	stw	fp,8(sp)
10001380:	df000204 	addi	fp,sp,8
10001384:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
10001388:	d1600204 	addi	r5,gp,-32760
1000138c:	e13fff17 	ldw	r4,-4(fp)
10001390:	00028d40 	call	100028d4 <alt_find_dev>
10001394:	e0bffe15 	stw	r2,-8(fp)

  return dev;
10001398:	e0bffe17 	ldw	r2,-8(fp)
}
1000139c:	e037883a 	mov	sp,fp
100013a0:	dfc00117 	ldw	ra,4(sp)
100013a4:	df000017 	ldw	fp,0(sp)
100013a8:	dec00204 	addi	sp,sp,8
100013ac:	f800283a 	ret

100013b0 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
100013b0:	defffa04 	addi	sp,sp,-24
100013b4:	df000515 	stw	fp,20(sp)
100013b8:	df000504 	addi	fp,sp,20
100013bc:	e13ffc15 	stw	r4,-16(fp)
100013c0:	2805883a 	mov	r2,r5
100013c4:	e1bffe15 	stw	r6,-8(fp)
100013c8:	e1ffff15 	stw	r7,-4(fp)
100013cc:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
100013d0:	e0bffc17 	ldw	r2,-16(fp)
100013d4:	10800c17 	ldw	r2,48(r2)
100013d8:	e0fffe17 	ldw	r3,-8(fp)
100013dc:	1880042e 	bgeu	r3,r2,100013f0 <alt_up_char_buffer_draw+0x40>
100013e0:	e0bffc17 	ldw	r2,-16(fp)
100013e4:	10800d17 	ldw	r2,52(r2)
100013e8:	e0ffff17 	ldw	r3,-4(fp)
100013ec:	18800236 	bltu	r3,r2,100013f8 <alt_up_char_buffer_draw+0x48>
		return -1;
100013f0:	00bfffc4 	movi	r2,-1
100013f4:	00001d06 	br	1000146c <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
100013f8:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
100013fc:	e0bffc17 	ldw	r2,-16(fp)
10001400:	10c00f17 	ldw	r3,60(r2)
10001404:	e0bffe17 	ldw	r2,-8(fp)
10001408:	1886703a 	and	r3,r3,r2
1000140c:	e0bffc17 	ldw	r2,-16(fp)
10001410:	10800e17 	ldw	r2,56(r2)
10001414:	1884983a 	sll	r2,r3,r2
10001418:	e0fffb17 	ldw	r3,-20(fp)
1000141c:	1884b03a 	or	r2,r3,r2
10001420:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
10001424:	e0bffc17 	ldw	r2,-16(fp)
10001428:	10c01117 	ldw	r3,68(r2)
1000142c:	e0bfff17 	ldw	r2,-4(fp)
10001430:	1886703a 	and	r3,r3,r2
10001434:	e0bffc17 	ldw	r2,-16(fp)
10001438:	10801017 	ldw	r2,64(r2)
1000143c:	1884983a 	sll	r2,r3,r2
10001440:	e0fffb17 	ldw	r3,-20(fp)
10001444:	1884b03a 	or	r2,r3,r2
10001448:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
1000144c:	e0bffc17 	ldw	r2,-16(fp)
10001450:	10c00b17 	ldw	r3,44(r2)
10001454:	e0bffb17 	ldw	r2,-20(fp)
10001458:	1885883a 	add	r2,r3,r2
1000145c:	1007883a 	mov	r3,r2
10001460:	e0bffd03 	ldbu	r2,-12(fp)
10001464:	18800025 	stbio	r2,0(r3)

	return 0;
10001468:	0005883a 	mov	r2,zero
}
1000146c:	e037883a 	mov	sp,fp
10001470:	df000017 	ldw	fp,0(sp)
10001474:	dec00104 	addi	sp,sp,4
10001478:	f800283a 	ret

1000147c <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
1000147c:	defffa04 	addi	sp,sp,-24
10001480:	df000515 	stw	fp,20(sp)
10001484:	df000504 	addi	fp,sp,20
10001488:	e13ffc15 	stw	r4,-16(fp)
1000148c:	e17ffd15 	stw	r5,-12(fp)
10001490:	e1bffe15 	stw	r6,-8(fp)
10001494:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
10001498:	e0bffc17 	ldw	r2,-16(fp)
1000149c:	10800c17 	ldw	r2,48(r2)
100014a0:	e0fffe17 	ldw	r3,-8(fp)
100014a4:	1880042e 	bgeu	r3,r2,100014b8 <alt_up_char_buffer_string+0x3c>
100014a8:	e0bffc17 	ldw	r2,-16(fp)
100014ac:	10800d17 	ldw	r2,52(r2)
100014b0:	e0ffff17 	ldw	r3,-4(fp)
100014b4:	18800236 	bltu	r3,r2,100014c0 <alt_up_char_buffer_string+0x44>
		return -1;
100014b8:	00bfffc4 	movi	r2,-1
100014bc:	00002a06 	br	10001568 <alt_up_char_buffer_string+0xec>
	
	unsigned int offset = 0;
100014c0:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
100014c4:	e0bffc17 	ldw	r2,-16(fp)
100014c8:	10801017 	ldw	r2,64(r2)
100014cc:	e0ffff17 	ldw	r3,-4(fp)
100014d0:	1886983a 	sll	r3,r3,r2
100014d4:	e0bffe17 	ldw	r2,-8(fp)
100014d8:	1885883a 	add	r2,r3,r2
100014dc:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
100014e0:	00001a06 	br	1000154c <alt_up_char_buffer_string+0xd0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
100014e4:	e0bffc17 	ldw	r2,-16(fp)
100014e8:	10c00b17 	ldw	r3,44(r2)
100014ec:	e0bffb17 	ldw	r2,-20(fp)
100014f0:	1885883a 	add	r2,r3,r2
100014f4:	1007883a 	mov	r3,r2
100014f8:	e0bffd17 	ldw	r2,-12(fp)
100014fc:	10800003 	ldbu	r2,0(r2)
10001500:	10803fcc 	andi	r2,r2,255
10001504:	1080201c 	xori	r2,r2,128
10001508:	10bfe004 	addi	r2,r2,-128
1000150c:	18800025 	stbio	r2,0(r3)
		++ptr;
10001510:	e0bffd17 	ldw	r2,-12(fp)
10001514:	10800044 	addi	r2,r2,1
10001518:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
1000151c:	e0bffe17 	ldw	r2,-8(fp)
10001520:	10800044 	addi	r2,r2,1
10001524:	e0bffe15 	stw	r2,-8(fp)
10001528:	e0bffc17 	ldw	r2,-16(fp)
1000152c:	10800c17 	ldw	r2,48(r2)
10001530:	e0fffe17 	ldw	r3,-8(fp)
10001534:	18800236 	bltu	r3,r2,10001540 <alt_up_char_buffer_string+0xc4>
			return -1;
10001538:	00bfffc4 	movi	r2,-1
1000153c:	00000a06 	br	10001568 <alt_up_char_buffer_string+0xec>
		++offset;
10001540:	e0bffb17 	ldw	r2,-20(fp)
10001544:	10800044 	addi	r2,r2,1
10001548:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
1000154c:	e0bffd17 	ldw	r2,-12(fp)
10001550:	10800003 	ldbu	r2,0(r2)
10001554:	10803fcc 	andi	r2,r2,255
10001558:	1080201c 	xori	r2,r2,128
1000155c:	10bfe004 	addi	r2,r2,-128
10001560:	103fe01e 	bne	r2,zero,100014e4 <alt_up_char_buffer_string+0x68>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
10001564:	0005883a 	mov	r2,zero
}
10001568:	e037883a 	mov	sp,fp
1000156c:	df000017 	ldw	fp,0(sp)
10001570:	dec00104 	addi	sp,sp,4
10001574:	f800283a 	ret

10001578 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
10001578:	defffe04 	addi	sp,sp,-8
1000157c:	df000115 	stw	fp,4(sp)
10001580:	df000104 	addi	fp,sp,4
10001584:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
10001588:	e0bfff17 	ldw	r2,-4(fp)
1000158c:	10800a17 	ldw	r2,40(r2)
10001590:	10800084 	addi	r2,r2,2
10001594:	1007883a 	mov	r3,r2
10001598:	00800044 	movi	r2,1
1000159c:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
100015a0:	0001883a 	nop
100015a4:	e0bfff17 	ldw	r2,-4(fp)
100015a8:	10800a17 	ldw	r2,40(r2)
100015ac:	10800084 	addi	r2,r2,2
100015b0:	10800023 	ldbuio	r2,0(r2)
100015b4:	10803fcc 	andi	r2,r2,255
100015b8:	1080004c 	andi	r2,r2,1
100015bc:	103ff91e 	bne	r2,zero,100015a4 <alt_up_char_buffer_clear+0x2c>
	return 0;
100015c0:	0005883a 	mov	r2,zero
}
100015c4:	e037883a 	mov	sp,fp
100015c8:	df000017 	ldw	fp,0(sp)
100015cc:	dec00104 	addi	sp,sp,4
100015d0:	f800283a 	ret

100015d4 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
100015d4:	defffc04 	addi	sp,sp,-16
100015d8:	dfc00315 	stw	ra,12(sp)
100015dc:	df000215 	stw	fp,8(sp)
100015e0:	df000204 	addi	fp,sp,8
100015e4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
100015e8:	d1600204 	addi	r5,gp,-32760
100015ec:	e13fff17 	ldw	r4,-4(fp)
100015f0:	00028d40 	call	100028d4 <alt_find_dev>
100015f4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
100015f8:	e0bffe17 	ldw	r2,-8(fp)
}
100015fc:	e037883a 	mov	sp,fp
10001600:	dfc00117 	ldw	ra,4(sp)
10001604:	df000017 	ldw	fp,0(sp)
10001608:	dec00204 	addi	sp,sp,8
1000160c:	f800283a 	ret

10001610 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
10001610:	defffa04 	addi	sp,sp,-24
10001614:	df000515 	stw	fp,20(sp)
10001618:	df000504 	addi	fp,sp,20
1000161c:	e13ffc15 	stw	r4,-16(fp)
10001620:	e17ffd15 	stw	r5,-12(fp)
10001624:	e1bffe15 	stw	r6,-8(fp)
10001628:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
1000162c:	e0bffc17 	ldw	r2,-16(fp)
10001630:	10800f17 	ldw	r2,60(r2)
10001634:	e0fffe17 	ldw	r3,-8(fp)
10001638:	1880042e 	bgeu	r3,r2,1000164c <alt_up_pixel_buffer_dma_draw+0x3c>
1000163c:	e0bffc17 	ldw	r2,-16(fp)
10001640:	10801017 	ldw	r2,64(r2)
10001644:	e0ffff17 	ldw	r3,-4(fp)
10001648:	18800236 	bltu	r3,r2,10001654 <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
1000164c:	00bfffc4 	movi	r2,-1
10001650:	00005006 	br	10001794 <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
10001654:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
10001658:	e0bffc17 	ldw	r2,-16(fp)
1000165c:	10800d17 	ldw	r2,52(r2)
10001660:	1000151e 	bne	r2,zero,100016b8 <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
10001664:	e0bffc17 	ldw	r2,-16(fp)
10001668:	10c01217 	ldw	r3,72(r2)
1000166c:	e0bffe17 	ldw	r2,-8(fp)
10001670:	1886703a 	and	r3,r3,r2
10001674:	e0bffc17 	ldw	r2,-16(fp)
10001678:	10801117 	ldw	r2,68(r2)
1000167c:	1884983a 	sll	r2,r3,r2
10001680:	e0fffb17 	ldw	r3,-20(fp)
10001684:	1885883a 	add	r2,r3,r2
10001688:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
1000168c:	e0bffc17 	ldw	r2,-16(fp)
10001690:	10c01417 	ldw	r3,80(r2)
10001694:	e0bfff17 	ldw	r2,-4(fp)
10001698:	1886703a 	and	r3,r3,r2
1000169c:	e0bffc17 	ldw	r2,-16(fp)
100016a0:	10801317 	ldw	r2,76(r2)
100016a4:	1884983a 	sll	r2,r3,r2
100016a8:	e0fffb17 	ldw	r3,-20(fp)
100016ac:	1885883a 	add	r2,r3,r2
100016b0:	e0bffb15 	stw	r2,-20(fp)
100016b4:	00001706 	br	10001714 <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
100016b8:	e0bffc17 	ldw	r2,-16(fp)
100016bc:	10c01217 	ldw	r3,72(r2)
100016c0:	e0bffe17 	ldw	r2,-8(fp)
100016c4:	1886703a 	and	r3,r3,r2
100016c8:	e0bffc17 	ldw	r2,-16(fp)
100016cc:	10801117 	ldw	r2,68(r2)
100016d0:	1884983a 	sll	r2,r3,r2
100016d4:	e0fffb17 	ldw	r3,-20(fp)
100016d8:	1885883a 	add	r2,r3,r2
100016dc:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
100016e0:	e0bffc17 	ldw	r2,-16(fp)
100016e4:	10c01417 	ldw	r3,80(r2)
100016e8:	e0bfff17 	ldw	r2,-4(fp)
100016ec:	1886703a 	and	r3,r3,r2
100016f0:	e0bffc17 	ldw	r2,-16(fp)
100016f4:	10800f17 	ldw	r2,60(r2)
100016f8:	1887383a 	mul	r3,r3,r2
100016fc:	e0bffc17 	ldw	r2,-16(fp)
10001700:	10801117 	ldw	r2,68(r2)
10001704:	1884983a 	sll	r2,r3,r2
10001708:	e0fffb17 	ldw	r3,-20(fp)
1000170c:	1885883a 	add	r2,r3,r2
10001710:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10001714:	e0bffc17 	ldw	r2,-16(fp)
10001718:	10800e17 	ldw	r2,56(r2)
1000171c:	10800058 	cmpnei	r2,r2,1
10001720:	1000081e 	bne	r2,zero,10001744 <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
10001724:	e0bffc17 	ldw	r2,-16(fp)
10001728:	10c00c17 	ldw	r3,48(r2)
1000172c:	e0bffb17 	ldw	r2,-20(fp)
10001730:	1885883a 	add	r2,r3,r2
10001734:	1007883a 	mov	r3,r2
10001738:	e0bffd17 	ldw	r2,-12(fp)
1000173c:	18800025 	stbio	r2,0(r3)
10001740:	00001306 	br	10001790 <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10001744:	e0bffc17 	ldw	r2,-16(fp)
10001748:	10800e17 	ldw	r2,56(r2)
1000174c:	10800098 	cmpnei	r2,r2,2
10001750:	1000081e 	bne	r2,zero,10001774 <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
10001754:	e0bffc17 	ldw	r2,-16(fp)
10001758:	10c00c17 	ldw	r3,48(r2)
1000175c:	e0bffb17 	ldw	r2,-20(fp)
10001760:	1885883a 	add	r2,r3,r2
10001764:	1007883a 	mov	r3,r2
10001768:	e0bffd17 	ldw	r2,-12(fp)
1000176c:	1880002d 	sthio	r2,0(r3)
10001770:	00000706 	br	10001790 <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
10001774:	e0bffc17 	ldw	r2,-16(fp)
10001778:	10c00c17 	ldw	r3,48(r2)
1000177c:	e0bffb17 	ldw	r2,-20(fp)
10001780:	1885883a 	add	r2,r3,r2
10001784:	1007883a 	mov	r3,r2
10001788:	e0bffd17 	ldw	r2,-12(fp)
1000178c:	18800035 	stwio	r2,0(r3)
	}

	return 0;
10001790:	0005883a 	mov	r2,zero
}
10001794:	e037883a 	mov	sp,fp
10001798:	df000017 	ldw	fp,0(sp)
1000179c:	dec00104 	addi	sp,sp,4
100017a0:	f800283a 	ret

100017a4 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
100017a4:	defffd04 	addi	sp,sp,-12
100017a8:	df000215 	stw	fp,8(sp)
100017ac:	df000204 	addi	fp,sp,8
100017b0:	e13ffe15 	stw	r4,-8(fp)
100017b4:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
100017b8:	e0bffe17 	ldw	r2,-8(fp)
100017bc:	10800a17 	ldw	r2,40(r2)
100017c0:	10800104 	addi	r2,r2,4
100017c4:	1007883a 	mov	r3,r2
100017c8:	e0bfff17 	ldw	r2,-4(fp)
100017cc:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
100017d0:	e0bffe17 	ldw	r2,-8(fp)
100017d4:	10800a17 	ldw	r2,40(r2)
100017d8:	10800104 	addi	r2,r2,4
100017dc:	10800037 	ldwio	r2,0(r2)
100017e0:	1007883a 	mov	r3,r2
100017e4:	e0bffe17 	ldw	r2,-8(fp)
100017e8:	10c00c15 	stw	r3,48(r2)
	return 0;
100017ec:	0005883a 	mov	r2,zero
}
100017f0:	e037883a 	mov	sp,fp
100017f4:	df000017 	ldw	fp,0(sp)
100017f8:	dec00104 	addi	sp,sp,4
100017fc:	f800283a 	ret

10001800 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
10001800:	defffd04 	addi	sp,sp,-12
10001804:	df000215 	stw	fp,8(sp)
10001808:	dc000115 	stw	r16,4(sp)
1000180c:	df000204 	addi	fp,sp,8
10001810:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
10001814:	e0bffe17 	ldw	r2,-8(fp)
10001818:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
1000181c:	e0bffe17 	ldw	r2,-8(fp)
10001820:	10800a17 	ldw	r2,40(r2)
10001824:	1007883a 	mov	r3,r2
10001828:	00800044 	movi	r2,1
1000182c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
10001830:	e0bffe17 	ldw	r2,-8(fp)
10001834:	10c00b17 	ldw	r3,44(r2)
10001838:	e0bffe17 	ldw	r2,-8(fp)
1000183c:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
10001840:	e0bffe17 	ldw	r2,-8(fp)
10001844:	14000b15 	stw	r16,44(r2)
	return 0;
10001848:	0005883a 	mov	r2,zero
}
1000184c:	e6ffff04 	addi	sp,fp,-4
10001850:	df000117 	ldw	fp,4(sp)
10001854:	dc000017 	ldw	r16,0(sp)
10001858:	dec00204 	addi	sp,sp,8
1000185c:	f800283a 	ret

10001860 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
10001860:	defffe04 	addi	sp,sp,-8
10001864:	df000115 	stw	fp,4(sp)
10001868:	df000104 	addi	fp,sp,4
1000186c:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
10001870:	e0bfff17 	ldw	r2,-4(fp)
10001874:	10800a17 	ldw	r2,40(r2)
10001878:	10800304 	addi	r2,r2,12
1000187c:	10800037 	ldwio	r2,0(r2)
10001880:	1080004c 	andi	r2,r2,1
}
10001884:	e037883a 	mov	sp,fp
10001888:	df000017 	ldw	fp,0(sp)
1000188c:	dec00104 	addi	sp,sp,4
10001890:	f800283a 	ret

10001894 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
10001894:	defff704 	addi	sp,sp,-36
10001898:	df000815 	stw	fp,32(sp)
1000189c:	dd400715 	stw	r21,28(sp)
100018a0:	dd000615 	stw	r20,24(sp)
100018a4:	dcc00515 	stw	r19,20(sp)
100018a8:	dc800415 	stw	r18,16(sp)
100018ac:	dc400315 	stw	r17,12(sp)
100018b0:	dc000215 	stw	r16,8(sp)
100018b4:	df000804 	addi	fp,sp,32
100018b8:	e13ff815 	stw	r4,-32(fp)
100018bc:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
100018c0:	e0bff917 	ldw	r2,-28(fp)
100018c4:	10800058 	cmpnei	r2,r2,1
100018c8:	1000031e 	bne	r2,zero,100018d8 <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
100018cc:	e0bff817 	ldw	r2,-32(fp)
100018d0:	14400c17 	ldw	r17,48(r2)
100018d4:	00000206 	br	100018e0 <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
100018d8:	e0bff817 	ldw	r2,-32(fp)
100018dc:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
100018e0:	e0bff817 	ldw	r2,-32(fp)
100018e4:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
100018e8:	e0bff817 	ldw	r2,-32(fp)
100018ec:	10800e17 	ldw	r2,56(r2)
100018f0:	10800098 	cmpnei	r2,r2,2
100018f4:	1000031e 	bne	r2,zero,10001904 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
100018f8:	8405883a 	add	r2,r16,r16
100018fc:	1021883a 	mov	r16,r2
10001900:	00000306 	br	10001910 <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
10001904:	8405883a 	add	r2,r16,r16
10001908:	1085883a 	add	r2,r2,r2
1000190c:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
10001910:	e0bff817 	ldw	r2,-32(fp)
10001914:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
10001918:	e0bff817 	ldw	r2,-32(fp)
1000191c:	10800d17 	ldw	r2,52(r2)
10001920:	1000111e 	bne	r2,zero,10001968 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
10001924:	e0bff817 	ldw	r2,-32(fp)
10001928:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
1000192c:	0029883a 	mov	r20,zero
10001930:	00000b06 	br	10001960 <alt_up_pixel_buffer_dma_clear_screen+0xcc>
		{
			for (x = 0; x < limit_x; x = x + 4)
10001934:	0027883a 	mov	r19,zero
10001938:	00000406 	br	1000194c <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
1000193c:	9c45883a 	add	r2,r19,r17
10001940:	0007883a 	mov	r3,zero
10001944:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
10001948:	9cc00104 	addi	r19,r19,4
1000194c:	9c3ffb36 	bltu	r19,r16,1000193c <alt_up_pixel_buffer_dma_clear_screen+0xa8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
10001950:	00800044 	movi	r2,1
10001954:	1544983a 	sll	r2,r2,r21
10001958:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
1000195c:	a5000044 	addi	r20,r20,1
10001960:	a4bff436 	bltu	r20,r18,10001934 <alt_up_pixel_buffer_dma_clear_screen+0xa0>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
10001964:	00000a06 	br	10001990 <alt_up_pixel_buffer_dma_clear_screen+0xfc>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
10001968:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
1000196c:	0021883a 	mov	r16,zero
10001970:	00000506 	br	10001988 <alt_up_pixel_buffer_dma_clear_screen+0xf4>
		{
			IOWR_32DIRECT(addr, x, 0);
10001974:	8005883a 	mov	r2,r16
10001978:	1445883a 	add	r2,r2,r17
1000197c:	0007883a 	mov	r3,zero
10001980:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
10001984:	84000104 	addi	r16,r16,4
10001988:	8005883a 	mov	r2,r16
1000198c:	14bff936 	bltu	r2,r18,10001974 <alt_up_pixel_buffer_dma_clear_screen+0xe0>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
10001990:	0001883a 	nop
10001994:	e6fffa04 	addi	sp,fp,-24
10001998:	df000617 	ldw	fp,24(sp)
1000199c:	dd400517 	ldw	r21,20(sp)
100019a0:	dd000417 	ldw	r20,16(sp)
100019a4:	dcc00317 	ldw	r19,12(sp)
100019a8:	dc800217 	ldw	r18,8(sp)
100019ac:	dc400117 	ldw	r17,4(sp)
100019b0:	dc000017 	ldw	r16,0(sp)
100019b4:	dec00704 	addi	sp,sp,28
100019b8:	f800283a 	ret

100019bc <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
100019bc:	defff304 	addi	sp,sp,-52
100019c0:	df000c15 	stw	fp,48(sp)
100019c4:	ddc00b15 	stw	r23,44(sp)
100019c8:	dd800a15 	stw	r22,40(sp)
100019cc:	dd400915 	stw	r21,36(sp)
100019d0:	dd000815 	stw	r20,32(sp)
100019d4:	dcc00715 	stw	r19,28(sp)
100019d8:	dc800615 	stw	r18,24(sp)
100019dc:	dc400515 	stw	r17,20(sp)
100019e0:	dc000415 	stw	r16,16(sp)
100019e4:	df000c04 	addi	fp,sp,48
100019e8:	e13ff415 	stw	r4,-48(fp)
100019ec:	e17ff515 	stw	r5,-44(fp)
100019f0:	e1bff615 	stw	r6,-40(fp)
100019f4:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
100019f8:	e0bff417 	ldw	r2,-48(fp)
100019fc:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
10001a00:	e0bff417 	ldw	r2,-48(fp)
10001a04:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
10001a08:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
10001a0c:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
10001a10:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
10001a14:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
10001a18:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
10001a1c:	a580032e 	bgeu	r20,r22,10001a2c <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
10001a20:	b02b883a 	mov	r21,r22
		l_x = r_x;
10001a24:	a02d883a 	mov	r22,r20
		r_x = temp;
10001a28:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
10001a2c:	9c40032e 	bgeu	r19,r17,10001a3c <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
10001a30:	882b883a 	mov	r21,r17
		t_y = b_y;
10001a34:	9823883a 	mov	r17,r19
		b_y = temp;
10001a38:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
10001a3c:	b480892e 	bgeu	r22,r18,10001c64 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
10001a40:	8c00882e 	bgeu	r17,r16,10001c64 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
10001a44:	a4800136 	bltu	r20,r18,10001a4c <alt_up_pixel_buffer_dma_draw_box+0x90>
	{
		r_x = limit_x - 1;
10001a48:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
10001a4c:	9c000136 	bltu	r19,r16,10001a54 <alt_up_pixel_buffer_dma_draw_box+0x98>
	{
		b_y = limit_y - 1;
10001a50:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
10001a54:	e0800317 	ldw	r2,12(fp)
10001a58:	10800058 	cmpnei	r2,r2,1
10001a5c:	1000031e 	bne	r2,zero,10001a6c <alt_up_pixel_buffer_dma_draw_box+0xb0>
		addr = pixel_buffer->back_buffer_start_address;
10001a60:	e0bff417 	ldw	r2,-48(fp)
10001a64:	14000c17 	ldw	r16,48(r2)
10001a68:	00000206 	br	10001a74 <alt_up_pixel_buffer_dma_draw_box+0xb8>
	else
		addr = pixel_buffer->buffer_start_address;
10001a6c:	e0bff417 	ldw	r2,-48(fp)
10001a70:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
10001a74:	e0bff417 	ldw	r2,-48(fp)
10001a78:	10800d17 	ldw	r2,52(r2)
10001a7c:	10003c1e 	bne	r2,zero,10001b70 <alt_up_pixel_buffer_dma_draw_box+0x1b4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
10001a80:	e0bff417 	ldw	r2,-48(fp)
10001a84:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
10001a88:	8d44983a 	sll	r2,r17,r21
10001a8c:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10001a90:	e0bff417 	ldw	r2,-48(fp)
10001a94:	10800e17 	ldw	r2,56(r2)
10001a98:	10800058 	cmpnei	r2,r2,1
10001a9c:	10000f1e 	bne	r2,zero,10001adc <alt_up_pixel_buffer_dma_draw_box+0x120>
			for (y = t_y; y <= b_y; y++)
10001aa0:	8825883a 	mov	r18,r17
10001aa4:	00000b06 	br	10001ad4 <alt_up_pixel_buffer_dma_draw_box+0x118>
			{
				for (x = l_x; x <= r_x; x++)
10001aa8:	b023883a 	mov	r17,r22
10001aac:	00000406 	br	10001ac0 <alt_up_pixel_buffer_dma_draw_box+0x104>
				{
					IOWR_8DIRECT(addr, x, local_color);
10001ab0:	8c05883a 	add	r2,r17,r16
10001ab4:	b807883a 	mov	r3,r23
10001ab8:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10001abc:	8c400044 	addi	r17,r17,1
10001ac0:	a47ffb2e 	bgeu	r20,r17,10001ab0 <alt_up_pixel_buffer_dma_draw_box+0xf4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
10001ac4:	00800044 	movi	r2,1
10001ac8:	1544983a 	sll	r2,r2,r21
10001acc:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
10001ad0:	94800044 	addi	r18,r18,1
10001ad4:	9cbff42e 	bgeu	r19,r18,10001aa8 <alt_up_pixel_buffer_dma_draw_box+0xec>
10001ad8:	00006306 	br	10001c68 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10001adc:	e0bff417 	ldw	r2,-48(fp)
10001ae0:	10800e17 	ldw	r2,56(r2)
10001ae4:	10800098 	cmpnei	r2,r2,2
10001ae8:	1000101e 	bne	r2,zero,10001b2c <alt_up_pixel_buffer_dma_draw_box+0x170>
			for (y = t_y; y <= b_y; y++)
10001aec:	8825883a 	mov	r18,r17
10001af0:	00000c06 	br	10001b24 <alt_up_pixel_buffer_dma_draw_box+0x168>
			{
				for (x = l_x; x <= r_x; x++)
10001af4:	b023883a 	mov	r17,r22
10001af8:	00000506 	br	10001b10 <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
10001afc:	8c45883a 	add	r2,r17,r17
10001b00:	1405883a 	add	r2,r2,r16
10001b04:	b807883a 	mov	r3,r23
10001b08:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10001b0c:	8c400044 	addi	r17,r17,1
10001b10:	a47ffa2e 	bgeu	r20,r17,10001afc <alt_up_pixel_buffer_dma_draw_box+0x140>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
10001b14:	00800044 	movi	r2,1
10001b18:	1544983a 	sll	r2,r2,r21
10001b1c:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
10001b20:	94800044 	addi	r18,r18,1
10001b24:	9cbff32e 	bgeu	r19,r18,10001af4 <alt_up_pixel_buffer_dma_draw_box+0x138>
10001b28:	00004f06 	br	10001c68 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
10001b2c:	8825883a 	mov	r18,r17
10001b30:	00000d06 	br	10001b68 <alt_up_pixel_buffer_dma_draw_box+0x1ac>
			{
				for (x = l_x; x <= r_x; x++)
10001b34:	b023883a 	mov	r17,r22
10001b38:	00000606 	br	10001b54 <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
10001b3c:	8c45883a 	add	r2,r17,r17
10001b40:	1085883a 	add	r2,r2,r2
10001b44:	1405883a 	add	r2,r2,r16
10001b48:	b807883a 	mov	r3,r23
10001b4c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10001b50:	8c400044 	addi	r17,r17,1
10001b54:	a47ff92e 	bgeu	r20,r17,10001b3c <alt_up_pixel_buffer_dma_draw_box+0x180>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
10001b58:	00800044 	movi	r2,1
10001b5c:	1544983a 	sll	r2,r2,r21
10001b60:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
10001b64:	94800044 	addi	r18,r18,1
10001b68:	9cbff22e 	bgeu	r19,r18,10001b34 <alt_up_pixel_buffer_dma_draw_box+0x178>
10001b6c:	00003e06 	br	10001c68 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10001b70:	e0bff417 	ldw	r2,-48(fp)
10001b74:	10800e17 	ldw	r2,56(r2)
10001b78:	10800058 	cmpnei	r2,r2,1
10001b7c:	10000f1e 	bne	r2,zero,10001bbc <alt_up_pixel_buffer_dma_draw_box+0x200>
			addr = addr + t_y * limit_x;
10001b80:	8c85383a 	mul	r2,r17,r18
10001b84:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
10001b88:	882b883a 	mov	r21,r17
10001b8c:	00000906 	br	10001bb4 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
			{
				for (x = l_x; x <= r_x; x++)
10001b90:	b023883a 	mov	r17,r22
10001b94:	00000406 	br	10001ba8 <alt_up_pixel_buffer_dma_draw_box+0x1ec>
				{
					IOWR_8DIRECT(addr, x, local_color);
10001b98:	8c05883a 	add	r2,r17,r16
10001b9c:	b807883a 	mov	r3,r23
10001ba0:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10001ba4:	8c400044 	addi	r17,r17,1
10001ba8:	a47ffb2e 	bgeu	r20,r17,10001b98 <alt_up_pixel_buffer_dma_draw_box+0x1dc>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
10001bac:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10001bb0:	ad400044 	addi	r21,r21,1
10001bb4:	9d7ff62e 	bgeu	r19,r21,10001b90 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
10001bb8:	00002b06 	br	10001c68 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10001bbc:	e0bff417 	ldw	r2,-48(fp)
10001bc0:	10800e17 	ldw	r2,56(r2)
10001bc4:	10800098 	cmpnei	r2,r2,2
10001bc8:	1000121e 	bne	r2,zero,10001c14 <alt_up_pixel_buffer_dma_draw_box+0x258>
			limit_x = limit_x << 1;
10001bcc:	9485883a 	add	r2,r18,r18
10001bd0:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
10001bd4:	8c85383a 	mul	r2,r17,r18
10001bd8:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
10001bdc:	882b883a 	mov	r21,r17
10001be0:	00000a06 	br	10001c0c <alt_up_pixel_buffer_dma_draw_box+0x250>
			{
				for (x = l_x; x <= r_x; x++)
10001be4:	b023883a 	mov	r17,r22
10001be8:	00000506 	br	10001c00 <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
10001bec:	8c45883a 	add	r2,r17,r17
10001bf0:	1405883a 	add	r2,r2,r16
10001bf4:	b807883a 	mov	r3,r23
10001bf8:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10001bfc:	8c400044 	addi	r17,r17,1
10001c00:	a47ffa2e 	bgeu	r20,r17,10001bec <alt_up_pixel_buffer_dma_draw_box+0x230>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
10001c04:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10001c08:	ad400044 	addi	r21,r21,1
10001c0c:	9d7ff52e 	bgeu	r19,r21,10001be4 <alt_up_pixel_buffer_dma_draw_box+0x228>
10001c10:	00001506 	br	10001c68 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
10001c14:	9485883a 	add	r2,r18,r18
10001c18:	1085883a 	add	r2,r2,r2
10001c1c:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
10001c20:	8c85383a 	mul	r2,r17,r18
10001c24:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
10001c28:	882b883a 	mov	r21,r17
10001c2c:	00000b06 	br	10001c5c <alt_up_pixel_buffer_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
10001c30:	b023883a 	mov	r17,r22
10001c34:	00000606 	br	10001c50 <alt_up_pixel_buffer_dma_draw_box+0x294>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
10001c38:	8c45883a 	add	r2,r17,r17
10001c3c:	1085883a 	add	r2,r2,r2
10001c40:	1405883a 	add	r2,r2,r16
10001c44:	b807883a 	mov	r3,r23
10001c48:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10001c4c:	8c400044 	addi	r17,r17,1
10001c50:	a47ff92e 	bgeu	r20,r17,10001c38 <alt_up_pixel_buffer_dma_draw_box+0x27c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
10001c54:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10001c58:	ad400044 	addi	r21,r21,1
10001c5c:	9d7ff42e 	bgeu	r19,r21,10001c30 <alt_up_pixel_buffer_dma_draw_box+0x274>
10001c60:	00000106 	br	10001c68 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
10001c64:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
10001c68:	e6fff804 	addi	sp,fp,-32
10001c6c:	df000817 	ldw	fp,32(sp)
10001c70:	ddc00717 	ldw	r23,28(sp)
10001c74:	dd800617 	ldw	r22,24(sp)
10001c78:	dd400517 	ldw	r21,20(sp)
10001c7c:	dd000417 	ldw	r20,16(sp)
10001c80:	dcc00317 	ldw	r19,12(sp)
10001c84:	dc800217 	ldw	r18,8(sp)
10001c88:	dc400117 	ldw	r17,4(sp)
10001c8c:	dc000017 	ldw	r16,0(sp)
10001c90:	dec00904 	addi	sp,sp,36
10001c94:	f800283a 	ret

10001c98 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
10001c98:	defff404 	addi	sp,sp,-48
10001c9c:	df000b15 	stw	fp,44(sp)
10001ca0:	dd800a15 	stw	r22,40(sp)
10001ca4:	dd400915 	stw	r21,36(sp)
10001ca8:	dd000815 	stw	r20,32(sp)
10001cac:	dcc00715 	stw	r19,28(sp)
10001cb0:	dc800615 	stw	r18,24(sp)
10001cb4:	dc400515 	stw	r17,20(sp)
10001cb8:	dc000415 	stw	r16,16(sp)
10001cbc:	df000b04 	addi	fp,sp,44
10001cc0:	e13ff515 	stw	r4,-44(fp)
10001cc4:	e17ff615 	stw	r5,-40(fp)
10001cc8:	e1bff715 	stw	r6,-36(fp)
10001ccc:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
10001cd0:	e0bff517 	ldw	r2,-44(fp)
10001cd4:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
10001cd8:	e0bff517 	ldw	r2,-44(fp)
10001cdc:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
10001ce0:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
10001ce4:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
10001ce8:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
10001cec:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
10001cf0:	9c40032e 	bgeu	r19,r17,10001d00 <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
10001cf4:	882d883a 	mov	r22,r17
		l_x = r_x;
10001cf8:	9823883a 	mov	r17,r19
		r_x = temp;
10001cfc:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
10001d00:	8c805d2e 	bgeu	r17,r18,10001e78 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
10001d04:	a4005c2e 	bgeu	r20,r16,10001e78 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
10001d08:	9c800136 	bltu	r19,r18,10001d10 <alt_up_pixel_buffer_dma_draw_hline+0x78>
	{
		r_x = limit_x - 1;
10001d0c:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
10001d10:	e0800217 	ldw	r2,8(fp)
10001d14:	10800058 	cmpnei	r2,r2,1
10001d18:	1000031e 	bne	r2,zero,10001d28 <alt_up_pixel_buffer_dma_draw_hline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
10001d1c:	e0bff517 	ldw	r2,-44(fp)
10001d20:	14000c17 	ldw	r16,48(r2)
10001d24:	00000206 	br	10001d30 <alt_up_pixel_buffer_dma_draw_hline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
10001d28:	e0bff517 	ldw	r2,-44(fp)
10001d2c:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
10001d30:	e0bff517 	ldw	r2,-44(fp)
10001d34:	10800d17 	ldw	r2,52(r2)
10001d38:	1000231e 	bne	r2,zero,10001dc8 <alt_up_pixel_buffer_dma_draw_hline+0x130>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
10001d3c:	e0bff517 	ldw	r2,-44(fp)
10001d40:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
10001d44:	a484983a 	sll	r2,r20,r18
10001d48:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10001d4c:	e0bff517 	ldw	r2,-44(fp)
10001d50:	10800e17 	ldw	r2,56(r2)
10001d54:	10800058 	cmpnei	r2,r2,1
10001d58:	1000071e 	bne	r2,zero,10001d78 <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			for (x = l_x; x <= r_x; x++)
10001d5c:	00000406 	br	10001d70 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
			{
				IOWR_8DIRECT(addr, x, local_color);
10001d60:	8c05883a 	add	r2,r17,r16
10001d64:	a807883a 	mov	r3,r21
10001d68:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
10001d6c:	8c400044 	addi	r17,r17,1
10001d70:	9c7ffb2e 	bgeu	r19,r17,10001d60 <alt_up_pixel_buffer_dma_draw_hline+0xc8>
10001d74:	00004106 	br	10001e7c <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10001d78:	e0bff517 	ldw	r2,-44(fp)
10001d7c:	10800e17 	ldw	r2,56(r2)
10001d80:	10800098 	cmpnei	r2,r2,2
10001d84:	10000e1e 	bne	r2,zero,10001dc0 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
10001d88:	00000506 	br	10001da0 <alt_up_pixel_buffer_dma_draw_hline+0x108>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
10001d8c:	8c45883a 	add	r2,r17,r17
10001d90:	1405883a 	add	r2,r2,r16
10001d94:	a807883a 	mov	r3,r21
10001d98:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
10001d9c:	8c400044 	addi	r17,r17,1
10001da0:	9c7ffa2e 	bgeu	r19,r17,10001d8c <alt_up_pixel_buffer_dma_draw_hline+0xf4>
10001da4:	00003506 	br	10001e7c <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
10001da8:	8c45883a 	add	r2,r17,r17
10001dac:	1085883a 	add	r2,r2,r2
10001db0:	1405883a 	add	r2,r2,r16
10001db4:	a807883a 	mov	r3,r21
10001db8:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
10001dbc:	8c400044 	addi	r17,r17,1
10001dc0:	9c7ff92e 	bgeu	r19,r17,10001da8 <alt_up_pixel_buffer_dma_draw_hline+0x110>
10001dc4:	00002d06 	br	10001e7c <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10001dc8:	e0bff517 	ldw	r2,-44(fp)
10001dcc:	10800e17 	ldw	r2,56(r2)
10001dd0:	10800058 	cmpnei	r2,r2,1
10001dd4:	1000091e 	bne	r2,zero,10001dfc <alt_up_pixel_buffer_dma_draw_hline+0x164>
			addr = addr + line_y * limit_x;
10001dd8:	a485383a 	mul	r2,r20,r18
10001ddc:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
10001de0:	00000406 	br	10001df4 <alt_up_pixel_buffer_dma_draw_hline+0x15c>
			{
				IOWR_8DIRECT(addr, x, local_color);
10001de4:	8c05883a 	add	r2,r17,r16
10001de8:	a807883a 	mov	r3,r21
10001dec:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
10001df0:	8c400044 	addi	r17,r17,1
10001df4:	9c7ffb2e 	bgeu	r19,r17,10001de4 <alt_up_pixel_buffer_dma_draw_hline+0x14c>
10001df8:	00002006 	br	10001e7c <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10001dfc:	e0bff517 	ldw	r2,-44(fp)
10001e00:	10800e17 	ldw	r2,56(r2)
10001e04:	10800098 	cmpnei	r2,r2,2
10001e08:	10000c1e 	bne	r2,zero,10001e3c <alt_up_pixel_buffer_dma_draw_hline+0x1a4>
			limit_x = limit_x << 1;
10001e0c:	9485883a 	add	r2,r18,r18
10001e10:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
10001e14:	a485383a 	mul	r2,r20,r18
10001e18:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
10001e1c:	00000506 	br	10001e34 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
10001e20:	8c45883a 	add	r2,r17,r17
10001e24:	1405883a 	add	r2,r2,r16
10001e28:	a807883a 	mov	r3,r21
10001e2c:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
10001e30:	8c400044 	addi	r17,r17,1
10001e34:	9c7ffa2e 	bgeu	r19,r17,10001e20 <alt_up_pixel_buffer_dma_draw_hline+0x188>
10001e38:	00001006 	br	10001e7c <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
10001e3c:	9485883a 	add	r2,r18,r18
10001e40:	1085883a 	add	r2,r2,r2
10001e44:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
10001e48:	a485383a 	mul	r2,r20,r18
10001e4c:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
10001e50:	00000606 	br	10001e6c <alt_up_pixel_buffer_dma_draw_hline+0x1d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
10001e54:	8c45883a 	add	r2,r17,r17
10001e58:	1085883a 	add	r2,r2,r2
10001e5c:	1405883a 	add	r2,r2,r16
10001e60:	a807883a 	mov	r3,r21
10001e64:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
10001e68:	8c400044 	addi	r17,r17,1
10001e6c:	9c7ff92e 	bgeu	r19,r17,10001e54 <alt_up_pixel_buffer_dma_draw_hline+0x1bc>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
10001e70:	84a1883a 	add	r16,r16,r18
10001e74:	00000106 	br	10001e7c <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
10001e78:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
10001e7c:	e6fff904 	addi	sp,fp,-28
10001e80:	df000717 	ldw	fp,28(sp)
10001e84:	dd800617 	ldw	r22,24(sp)
10001e88:	dd400517 	ldw	r21,20(sp)
10001e8c:	dd000417 	ldw	r20,16(sp)
10001e90:	dcc00317 	ldw	r19,12(sp)
10001e94:	dc800217 	ldw	r18,8(sp)
10001e98:	dc400117 	ldw	r17,4(sp)
10001e9c:	dc000017 	ldw	r16,0(sp)
10001ea0:	dec00804 	addi	sp,sp,32
10001ea4:	f800283a 	ret

10001ea8 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
10001ea8:	defff404 	addi	sp,sp,-48
10001eac:	df000b15 	stw	fp,44(sp)
10001eb0:	dd800a15 	stw	r22,40(sp)
10001eb4:	dd400915 	stw	r21,36(sp)
10001eb8:	dd000815 	stw	r20,32(sp)
10001ebc:	dcc00715 	stw	r19,28(sp)
10001ec0:	dc800615 	stw	r18,24(sp)
10001ec4:	dc400515 	stw	r17,20(sp)
10001ec8:	dc000415 	stw	r16,16(sp)
10001ecc:	df000b04 	addi	fp,sp,44
10001ed0:	e13ff515 	stw	r4,-44(fp)
10001ed4:	e17ff615 	stw	r5,-40(fp)
10001ed8:	e1bff715 	stw	r6,-36(fp)
10001edc:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
10001ee0:	e0bff517 	ldw	r2,-44(fp)
10001ee4:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
10001ee8:	e0bff517 	ldw	r2,-44(fp)
10001eec:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
10001ef0:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
10001ef4:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
10001ef8:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
10001efc:	e5800117 	ldw	r22,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
10001f00:	9d00032e 	bgeu	r19,r20,10001f10 <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
10001f04:	a02b883a 	mov	r21,r20
		t_y = b_y;
10001f08:	9829883a 	mov	r20,r19
		b_y = temp;
10001f0c:	a827883a 	mov	r19,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
10001f10:	94406c2e 	bgeu	r18,r17,100020c4 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
10001f14:	a4006b2e 	bgeu	r20,r16,100020c4 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
10001f18:	9c000136 	bltu	r19,r16,10001f20 <alt_up_pixel_buffer_dma_draw_vline+0x78>
	{
		b_y = limit_y - 1;
10001f1c:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
10001f20:	e0800217 	ldw	r2,8(fp)
10001f24:	10800058 	cmpnei	r2,r2,1
10001f28:	1000031e 	bne	r2,zero,10001f38 <alt_up_pixel_buffer_dma_draw_vline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
10001f2c:	e0bff517 	ldw	r2,-44(fp)
10001f30:	14000c17 	ldw	r16,48(r2)
10001f34:	00000206 	br	10001f40 <alt_up_pixel_buffer_dma_draw_vline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
10001f38:	e0bff517 	ldw	r2,-44(fp)
10001f3c:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
10001f40:	e0bff517 	ldw	r2,-44(fp)
10001f44:	10800d17 	ldw	r2,52(r2)
10001f48:	1000301e 	bne	r2,zero,1000200c <alt_up_pixel_buffer_dma_draw_vline+0x164>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
10001f4c:	e0bff517 	ldw	r2,-44(fp)
10001f50:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
10001f54:	a544983a 	sll	r2,r20,r21
10001f58:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10001f5c:	e0bff517 	ldw	r2,-44(fp)
10001f60:	10800e17 	ldw	r2,56(r2)
10001f64:	10800058 	cmpnei	r2,r2,1
10001f68:	10000b1e 	bne	r2,zero,10001f98 <alt_up_pixel_buffer_dma_draw_vline+0xf0>
			for (y = t_y; y <= b_y; y++)
10001f6c:	a023883a 	mov	r17,r20
10001f70:	00000706 	br	10001f90 <alt_up_pixel_buffer_dma_draw_vline+0xe8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
10001f74:	9405883a 	add	r2,r18,r16
10001f78:	b007883a 	mov	r3,r22
10001f7c:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
10001f80:	00800044 	movi	r2,1
10001f84:	1544983a 	sll	r2,r2,r21
10001f88:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
10001f8c:	8c400044 	addi	r17,r17,1
10001f90:	9c7ff82e 	bgeu	r19,r17,10001f74 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
10001f94:	00004c06 	br	100020c8 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10001f98:	e0bff517 	ldw	r2,-44(fp)
10001f9c:	10800e17 	ldw	r2,56(r2)
10001fa0:	10800098 	cmpnei	r2,r2,2
10001fa4:	10000c1e 	bne	r2,zero,10001fd8 <alt_up_pixel_buffer_dma_draw_vline+0x130>
			for (y = t_y; y <= b_y; y++)
10001fa8:	a023883a 	mov	r17,r20
10001fac:	00000806 	br	10001fd0 <alt_up_pixel_buffer_dma_draw_vline+0x128>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
10001fb0:	9485883a 	add	r2,r18,r18
10001fb4:	1405883a 	add	r2,r2,r16
10001fb8:	b007883a 	mov	r3,r22
10001fbc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
10001fc0:	00800044 	movi	r2,1
10001fc4:	1544983a 	sll	r2,r2,r21
10001fc8:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
10001fcc:	8c400044 	addi	r17,r17,1
10001fd0:	9c7ff72e 	bgeu	r19,r17,10001fb0 <alt_up_pixel_buffer_dma_draw_vline+0x108>
10001fd4:	00003c06 	br	100020c8 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
10001fd8:	a023883a 	mov	r17,r20
10001fdc:	00000906 	br	10002004 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
10001fe0:	9485883a 	add	r2,r18,r18
10001fe4:	1085883a 	add	r2,r2,r2
10001fe8:	1405883a 	add	r2,r2,r16
10001fec:	b007883a 	mov	r3,r22
10001ff0:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
10001ff4:	00800044 	movi	r2,1
10001ff8:	1544983a 	sll	r2,r2,r21
10001ffc:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
10002000:	8c400044 	addi	r17,r17,1
10002004:	9c7ff62e 	bgeu	r19,r17,10001fe0 <alt_up_pixel_buffer_dma_draw_vline+0x138>
10002008:	00002f06 	br	100020c8 <alt_up_pixel_buffer_dma_draw_vline+0x220>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
1000200c:	e0bff517 	ldw	r2,-44(fp)
10002010:	10800e17 	ldw	r2,56(r2)
10002014:	10800058 	cmpnei	r2,r2,1
10002018:	10000a1e 	bne	r2,zero,10002044 <alt_up_pixel_buffer_dma_draw_vline+0x19c>
			addr = addr + t_y * limit_x;
1000201c:	a445383a 	mul	r2,r20,r17
10002020:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
10002024:	00000506 	br	1000203c <alt_up_pixel_buffer_dma_draw_vline+0x194>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
10002028:	9405883a 	add	r2,r18,r16
1000202c:	b007883a 	mov	r3,r22
10002030:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
10002034:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10002038:	a5000044 	addi	r20,r20,1
1000203c:	9d3ffa2e 	bgeu	r19,r20,10002028 <alt_up_pixel_buffer_dma_draw_vline+0x180>
10002040:	00002106 	br	100020c8 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10002044:	e0bff517 	ldw	r2,-44(fp)
10002048:	10800e17 	ldw	r2,56(r2)
1000204c:	10800098 	cmpnei	r2,r2,2
10002050:	10000d1e 	bne	r2,zero,10002088 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
			limit_x = limit_x << 1;
10002054:	8c45883a 	add	r2,r17,r17
10002058:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
1000205c:	a445383a 	mul	r2,r20,r17
10002060:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
10002064:	00000606 	br	10002080 <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
10002068:	9485883a 	add	r2,r18,r18
1000206c:	1405883a 	add	r2,r2,r16
10002070:	b007883a 	mov	r3,r22
10002074:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
10002078:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
1000207c:	a5000044 	addi	r20,r20,1
10002080:	9d3ff92e 	bgeu	r19,r20,10002068 <alt_up_pixel_buffer_dma_draw_vline+0x1c0>
10002084:	00001006 	br	100020c8 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
10002088:	8c45883a 	add	r2,r17,r17
1000208c:	1085883a 	add	r2,r2,r2
10002090:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
10002094:	a445383a 	mul	r2,r20,r17
10002098:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
1000209c:	00000706 	br	100020bc <alt_up_pixel_buffer_dma_draw_vline+0x214>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
100020a0:	9485883a 	add	r2,r18,r18
100020a4:	1085883a 	add	r2,r2,r2
100020a8:	1405883a 	add	r2,r2,r16
100020ac:	b007883a 	mov	r3,r22
100020b0:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
100020b4:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
100020b8:	a5000044 	addi	r20,r20,1
100020bc:	9d3ff82e 	bgeu	r19,r20,100020a0 <alt_up_pixel_buffer_dma_draw_vline+0x1f8>
100020c0:	00000106 	br	100020c8 <alt_up_pixel_buffer_dma_draw_vline+0x220>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
100020c4:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
100020c8:	e6fff904 	addi	sp,fp,-28
100020cc:	df000717 	ldw	fp,28(sp)
100020d0:	dd800617 	ldw	r22,24(sp)
100020d4:	dd400517 	ldw	r21,20(sp)
100020d8:	dd000417 	ldw	r20,16(sp)
100020dc:	dcc00317 	ldw	r19,12(sp)
100020e0:	dc800217 	ldw	r18,8(sp)
100020e4:	dc400117 	ldw	r17,4(sp)
100020e8:	dc000017 	ldw	r16,0(sp)
100020ec:	dec00804 	addi	sp,sp,32
100020f0:	f800283a 	ret

100020f4 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
100020f4:	defff804 	addi	sp,sp,-32
100020f8:	dfc00715 	stw	ra,28(sp)
100020fc:	df000615 	stw	fp,24(sp)
10002100:	df000604 	addi	fp,sp,24
10002104:	e13ffc15 	stw	r4,-16(fp)
10002108:	e17ffd15 	stw	r5,-12(fp)
1000210c:	e1bffe15 	stw	r6,-8(fp)
10002110:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
10002114:	e0800417 	ldw	r2,16(fp)
10002118:	d8800115 	stw	r2,4(sp)
1000211c:	e0800317 	ldw	r2,12(fp)
10002120:	d8800015 	stw	r2,0(sp)
10002124:	e1fffe17 	ldw	r7,-8(fp)
10002128:	e1bfff17 	ldw	r6,-4(fp)
1000212c:	e17ffd17 	ldw	r5,-12(fp)
10002130:	e13ffc17 	ldw	r4,-16(fp)
10002134:	0001c980 	call	10001c98 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
10002138:	e0800417 	ldw	r2,16(fp)
1000213c:	d8800115 	stw	r2,4(sp)
10002140:	e0800317 	ldw	r2,12(fp)
10002144:	d8800015 	stw	r2,0(sp)
10002148:	e1c00217 	ldw	r7,8(fp)
1000214c:	e1bfff17 	ldw	r6,-4(fp)
10002150:	e17ffd17 	ldw	r5,-12(fp)
10002154:	e13ffc17 	ldw	r4,-16(fp)
10002158:	0001c980 	call	10001c98 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
1000215c:	e0800417 	ldw	r2,16(fp)
10002160:	d8800115 	stw	r2,4(sp)
10002164:	e0800317 	ldw	r2,12(fp)
10002168:	d8800015 	stw	r2,0(sp)
1000216c:	e1c00217 	ldw	r7,8(fp)
10002170:	e1bffe17 	ldw	r6,-8(fp)
10002174:	e17ffd17 	ldw	r5,-12(fp)
10002178:	e13ffc17 	ldw	r4,-16(fp)
1000217c:	0001ea80 	call	10001ea8 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
10002180:	e0800417 	ldw	r2,16(fp)
10002184:	d8800115 	stw	r2,4(sp)
10002188:	e0800317 	ldw	r2,12(fp)
1000218c:	d8800015 	stw	r2,0(sp)
10002190:	e1c00217 	ldw	r7,8(fp)
10002194:	e1bffe17 	ldw	r6,-8(fp)
10002198:	e17fff17 	ldw	r5,-4(fp)
1000219c:	e13ffc17 	ldw	r4,-16(fp)
100021a0:	0001ea80 	call	10001ea8 <alt_up_pixel_buffer_dma_draw_vline>
}
100021a4:	0001883a 	nop
100021a8:	e037883a 	mov	sp,fp
100021ac:	dfc00117 	ldw	ra,4(sp)
100021b0:	df000017 	ldw	fp,0(sp)
100021b4:	dec00204 	addi	sp,sp,8
100021b8:	f800283a 	ret

100021bc <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
100021bc:	deffff04 	addi	sp,sp,-4
100021c0:	df000015 	stw	fp,0(sp)
100021c4:	d839883a 	mov	fp,sp
100021c8:	2005883a 	mov	r2,r4
100021cc:	3007883a 	mov	r3,r6
100021d0:	3809883a 	mov	r4,r7
100021d4:	e1800117 	ldw	r6,4(fp)
100021d8:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
100021dc:	3800051e 	bne	r7,zero,100021f4 <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
100021e0:	2909383a 	mul	r4,r5,r4
100021e4:	20c7883a 	add	r3,r4,r3
100021e8:	1885883a 	add	r2,r3,r2
100021ec:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
100021f0:	00000e06 	br	1000222c <helper_plot_pixel+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
100021f4:	39c00058 	cmpnei	r7,r7,1
100021f8:	3800061e 	bne	r7,zero,10002214 <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
100021fc:	2909383a 	mul	r4,r5,r4
10002200:	20c7883a 	add	r3,r4,r3
10002204:	18c7883a 	add	r3,r3,r3
10002208:	1885883a 	add	r2,r3,r2
1000220c:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
10002210:	00000606 	br	1000222c <helper_plot_pixel+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
10002214:	2909383a 	mul	r4,r5,r4
10002218:	20c7883a 	add	r3,r4,r3
1000221c:	18c7883a 	add	r3,r3,r3
10002220:	18c7883a 	add	r3,r3,r3
10002224:	1885883a 	add	r2,r3,r2
10002228:	11800035 	stwio	r6,0(r2)
}
1000222c:	0001883a 	nop
10002230:	e037883a 	mov	sp,fp
10002234:	df000017 	ldw	fp,0(sp)
10002238:	dec00104 	addi	sp,sp,4
1000223c:	f800283a 	ret

10002240 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
10002240:	deffeb04 	addi	sp,sp,-84
10002244:	dfc01415 	stw	ra,80(sp)
10002248:	df001315 	stw	fp,76(sp)
1000224c:	ddc01215 	stw	r23,72(sp)
10002250:	dd801115 	stw	r22,68(sp)
10002254:	dd401015 	stw	r21,64(sp)
10002258:	dd000f15 	stw	r20,60(sp)
1000225c:	dcc00e15 	stw	r19,56(sp)
10002260:	dc800d15 	stw	r18,52(sp)
10002264:	dc400c15 	stw	r17,48(sp)
10002268:	dc000b15 	stw	r16,44(sp)
1000226c:	df001304 	addi	fp,sp,76
10002270:	e13fef15 	stw	r4,-68(fp)
10002274:	e17ff015 	stw	r5,-64(fp)
10002278:	e1bff115 	stw	r6,-60(fp)
1000227c:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
10002280:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
10002284:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
10002288:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
1000228c:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
10002290:	a4c5c83a 	sub	r2,r20,r19
10002294:	1000010e 	bge	r2,zero,1000229c <alt_up_pixel_buffer_dma_draw_line+0x5c>
10002298:	0085c83a 	sub	r2,zero,r2
1000229c:	1007883a 	mov	r3,r2
100022a0:	9445c83a 	sub	r2,r18,r17
100022a4:	1000010e 	bge	r2,zero,100022ac <alt_up_pixel_buffer_dma_draw_line+0x6c>
100022a8:	0085c83a 	sub	r2,zero,r2
100022ac:	10c4803a 	cmplt	r2,r2,r3
100022b0:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
100022b4:	e0bfef17 	ldw	r2,-68(fp)
100022b8:	10800e17 	ldw	r2,56(r2)
100022bc:	10800060 	cmpeqi	r2,r2,1
100022c0:	1000081e 	bne	r2,zero,100022e4 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
100022c4:	e0bfef17 	ldw	r2,-68(fp)
100022c8:	10800e17 	ldw	r2,56(r2)
100022cc:	10800098 	cmpnei	r2,r2,2
100022d0:	1000021e 	bne	r2,zero,100022dc <alt_up_pixel_buffer_dma_draw_line+0x9c>
100022d4:	00800044 	movi	r2,1
100022d8:	00000306 	br	100022e8 <alt_up_pixel_buffer_dma_draw_line+0xa8>
100022dc:	00800084 	movi	r2,2
100022e0:	00000106 	br	100022e8 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
100022e4:	0005883a 	mov	r2,zero
100022e8:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
100022ec:	e0800317 	ldw	r2,12(fp)
100022f0:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
100022f4:	e0bfef17 	ldw	r2,-68(fp)
100022f8:	10800d17 	ldw	r2,52(r2)
100022fc:	1000071e 	bne	r2,zero,1000231c <alt_up_pixel_buffer_dma_draw_line+0xdc>
10002300:	e0bfef17 	ldw	r2,-68(fp)
10002304:	10801317 	ldw	r2,76(r2)
10002308:	e0fff417 	ldw	r3,-48(fp)
1000230c:	10c5c83a 	sub	r2,r2,r3
10002310:	00c00044 	movi	r3,1
10002314:	1884983a 	sll	r2,r3,r2
10002318:	00000206 	br	10002324 <alt_up_pixel_buffer_dma_draw_line+0xe4>
1000231c:	e0bfef17 	ldw	r2,-68(fp)
10002320:	10800f17 	ldw	r2,60(r2)
10002324:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
10002328:	e0800417 	ldw	r2,16(fp)
1000232c:	10800058 	cmpnei	r2,r2,1
10002330:	1000031e 	bne	r2,zero,10002340 <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
10002334:	e0bfef17 	ldw	r2,-68(fp)
10002338:	15c00c17 	ldw	r23,48(r2)
1000233c:	00000206 	br	10002348 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
10002340:	e0bfef17 	ldw	r2,-68(fp)
10002344:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
10002348:	e0bff307 	ldb	r2,-52(fp)
1000234c:	0080060e 	bge	zero,r2,10002368 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
10002350:	8821883a 	mov	r16,r17
		x_0 = y_0;
10002354:	9823883a 	mov	r17,r19
		y_0 = error;
10002358:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
1000235c:	9021883a 	mov	r16,r18
		x_1 = y_1;
10002360:	a025883a 	mov	r18,r20
		y_1 = error;
10002364:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
10002368:	9440060e 	bge	r18,r17,10002384 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
1000236c:	8821883a 	mov	r16,r17
		x_0 = x_1;
10002370:	9023883a 	mov	r17,r18
		x_1 = error;
10002374:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
10002378:	9821883a 	mov	r16,r19
		y_0 = y_1;
1000237c:	a027883a 	mov	r19,r20
		y_1 = error;
10002380:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
10002384:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
10002388:	a4c5c83a 	sub	r2,r20,r19
1000238c:	1000010e 	bge	r2,zero,10002394 <alt_up_pixel_buffer_dma_draw_line+0x154>
10002390:	0085c83a 	sub	r2,zero,r2
10002394:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
10002398:	a804d7fa 	srli	r2,r21,31
1000239c:	1545883a 	add	r2,r2,r21
100023a0:	1005d07a 	srai	r2,r2,1
100023a4:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
100023a8:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
100023ac:	9d00020e 	bge	r19,r20,100023b8 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
100023b0:	04c00044 	movi	r19,1
100023b4:	00000106 	br	100023bc <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
100023b8:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
100023bc:	e0bff307 	ldb	r2,-52(fp)
100023c0:	10800058 	cmpnei	r2,r2,1
100023c4:	1000211e 	bne	r2,zero,1000244c <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
100023c8:	00000f06 	br	10002408 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
100023cc:	e0bff417 	ldw	r2,-48(fp)
100023d0:	d8800115 	stw	r2,4(sp)
100023d4:	e0bff517 	ldw	r2,-44(fp)
100023d8:	d8800015 	stw	r2,0(sp)
100023dc:	880f883a 	mov	r7,r17
100023e0:	b00d883a 	mov	r6,r22
100023e4:	e17ff617 	ldw	r5,-40(fp)
100023e8:	b809883a 	mov	r4,r23
100023ec:	00021bc0 	call	100021bc <helper_plot_pixel>
			error = error + deltay;
100023f0:	e0bff717 	ldw	r2,-36(fp)
100023f4:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
100023f8:	0400020e 	bge	zero,r16,10002404 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
100023fc:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
10002400:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
10002404:	8c400044 	addi	r17,r17,1
10002408:	947ff00e 	bge	r18,r17,100023cc <alt_up_pixel_buffer_dma_draw_line+0x18c>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
1000240c:	00001006 	br	10002450 <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
10002410:	e0bff417 	ldw	r2,-48(fp)
10002414:	d8800115 	stw	r2,4(sp)
10002418:	e0bff517 	ldw	r2,-44(fp)
1000241c:	d8800015 	stw	r2,0(sp)
10002420:	b00f883a 	mov	r7,r22
10002424:	880d883a 	mov	r6,r17
10002428:	e17ff617 	ldw	r5,-40(fp)
1000242c:	b809883a 	mov	r4,r23
10002430:	00021bc0 	call	100021bc <helper_plot_pixel>
			error = error + deltay;
10002434:	e0bff717 	ldw	r2,-36(fp)
10002438:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
1000243c:	0400020e 	bge	zero,r16,10002448 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
10002440:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
10002444:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
10002448:	8c400044 	addi	r17,r17,1
1000244c:	947ff00e 	bge	r18,r17,10002410 <alt_up_pixel_buffer_dma_draw_line+0x1d0>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
10002450:	0001883a 	nop
10002454:	e6fff804 	addi	sp,fp,-32
10002458:	dfc00917 	ldw	ra,36(sp)
1000245c:	df000817 	ldw	fp,32(sp)
10002460:	ddc00717 	ldw	r23,28(sp)
10002464:	dd800617 	ldw	r22,24(sp)
10002468:	dd400517 	ldw	r21,20(sp)
1000246c:	dd000417 	ldw	r20,16(sp)
10002470:	dcc00317 	ldw	r19,12(sp)
10002474:	dc800217 	ldw	r18,8(sp)
10002478:	dc400117 	ldw	r17,4(sp)
1000247c:	dc000017 	ldw	r16,0(sp)
10002480:	dec00a04 	addi	sp,sp,40
10002484:	f800283a 	ret

10002488 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10002488:	defff504 	addi	sp,sp,-44
1000248c:	df000a15 	stw	fp,40(sp)
10002490:	df000a04 	addi	fp,sp,40
10002494:	e13ffc15 	stw	r4,-16(fp)
10002498:	e17ffd15 	stw	r5,-12(fp)
1000249c:	e1bffe15 	stw	r6,-8(fp)
100024a0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100024a4:	e03ff615 	stw	zero,-40(fp)
100024a8:	d0a6e517 	ldw	r2,-25708(gp)
  
  if (alt_ticks_per_second ())
100024ac:	10003c26 	beq	r2,zero,100025a0 <alt_alarm_start+0x118>
  {
    if (alarm)
100024b0:	e0bffc17 	ldw	r2,-16(fp)
100024b4:	10003826 	beq	r2,zero,10002598 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
100024b8:	e0bffc17 	ldw	r2,-16(fp)
100024bc:	e0fffe17 	ldw	r3,-8(fp)
100024c0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
100024c4:	e0bffc17 	ldw	r2,-16(fp)
100024c8:	e0ffff17 	ldw	r3,-4(fp)
100024cc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100024d0:	0005303a 	rdctl	r2,status
100024d4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100024d8:	e0fff917 	ldw	r3,-28(fp)
100024dc:	00bfff84 	movi	r2,-2
100024e0:	1884703a 	and	r2,r3,r2
100024e4:	1001703a 	wrctl	status,r2
  
  return context;
100024e8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
100024ec:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
100024f0:	d0a6e617 	ldw	r2,-25704(gp)
      
      current_nticks = alt_nticks();
100024f4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
100024f8:	e0fffd17 	ldw	r3,-12(fp)
100024fc:	e0bff617 	ldw	r2,-40(fp)
10002500:	1885883a 	add	r2,r3,r2
10002504:	10c00044 	addi	r3,r2,1
10002508:	e0bffc17 	ldw	r2,-16(fp)
1000250c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10002510:	e0bffc17 	ldw	r2,-16(fp)
10002514:	10c00217 	ldw	r3,8(r2)
10002518:	e0bff617 	ldw	r2,-40(fp)
1000251c:	1880042e 	bgeu	r3,r2,10002530 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10002520:	e0bffc17 	ldw	r2,-16(fp)
10002524:	00c00044 	movi	r3,1
10002528:	10c00405 	stb	r3,16(r2)
1000252c:	00000206 	br	10002538 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10002530:	e0bffc17 	ldw	r2,-16(fp)
10002534:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10002538:	e0bffc17 	ldw	r2,-16(fp)
1000253c:	d0e00704 	addi	r3,gp,-32740
10002540:	e0fffa15 	stw	r3,-24(fp)
10002544:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10002548:	e0bffb17 	ldw	r2,-20(fp)
1000254c:	e0fffa17 	ldw	r3,-24(fp)
10002550:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10002554:	e0bffa17 	ldw	r2,-24(fp)
10002558:	10c00017 	ldw	r3,0(r2)
1000255c:	e0bffb17 	ldw	r2,-20(fp)
10002560:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10002564:	e0bffa17 	ldw	r2,-24(fp)
10002568:	10800017 	ldw	r2,0(r2)
1000256c:	e0fffb17 	ldw	r3,-20(fp)
10002570:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10002574:	e0bffa17 	ldw	r2,-24(fp)
10002578:	e0fffb17 	ldw	r3,-20(fp)
1000257c:	10c00015 	stw	r3,0(r2)
10002580:	e0bff817 	ldw	r2,-32(fp)
10002584:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10002588:	e0bff717 	ldw	r2,-36(fp)
1000258c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10002590:	0005883a 	mov	r2,zero
10002594:	00000306 	br	100025a4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10002598:	00bffa84 	movi	r2,-22
1000259c:	00000106 	br	100025a4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
100025a0:	00bfde84 	movi	r2,-134
  }
}
100025a4:	e037883a 	mov	sp,fp
100025a8:	df000017 	ldw	fp,0(sp)
100025ac:	dec00104 	addi	sp,sp,4
100025b0:	f800283a 	ret

100025b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100025b4:	defffe04 	addi	sp,sp,-8
100025b8:	dfc00115 	stw	ra,4(sp)
100025bc:	df000015 	stw	fp,0(sp)
100025c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100025c4:	d0a00517 	ldw	r2,-32748(gp)
100025c8:	10000326 	beq	r2,zero,100025d8 <alt_get_errno+0x24>
100025cc:	d0a00517 	ldw	r2,-32748(gp)
100025d0:	103ee83a 	callr	r2
100025d4:	00000106 	br	100025dc <alt_get_errno+0x28>
100025d8:	d0a6e804 	addi	r2,gp,-25696
}
100025dc:	e037883a 	mov	sp,fp
100025e0:	dfc00117 	ldw	ra,4(sp)
100025e4:	df000017 	ldw	fp,0(sp)
100025e8:	dec00204 	addi	sp,sp,8
100025ec:	f800283a 	ret

100025f0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
100025f0:	defffb04 	addi	sp,sp,-20
100025f4:	dfc00415 	stw	ra,16(sp)
100025f8:	df000315 	stw	fp,12(sp)
100025fc:	df000304 	addi	fp,sp,12
10002600:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10002604:	e0bfff17 	ldw	r2,-4(fp)
10002608:	10000616 	blt	r2,zero,10002624 <close+0x34>
1000260c:	e0bfff17 	ldw	r2,-4(fp)
10002610:	10c00324 	muli	r3,r2,12
10002614:	00840034 	movhi	r2,4096
10002618:	109fd504 	addi	r2,r2,32596
1000261c:	1885883a 	add	r2,r3,r2
10002620:	00000106 	br	10002628 <close+0x38>
10002624:	0005883a 	mov	r2,zero
10002628:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000262c:	e0bffd17 	ldw	r2,-12(fp)
10002630:	10001926 	beq	r2,zero,10002698 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10002634:	e0bffd17 	ldw	r2,-12(fp)
10002638:	10800017 	ldw	r2,0(r2)
1000263c:	10800417 	ldw	r2,16(r2)
10002640:	10000626 	beq	r2,zero,1000265c <close+0x6c>
10002644:	e0bffd17 	ldw	r2,-12(fp)
10002648:	10800017 	ldw	r2,0(r2)
1000264c:	10800417 	ldw	r2,16(r2)
10002650:	e13ffd17 	ldw	r4,-12(fp)
10002654:	103ee83a 	callr	r2
10002658:	00000106 	br	10002660 <close+0x70>
1000265c:	0005883a 	mov	r2,zero
10002660:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10002664:	e13fff17 	ldw	r4,-4(fp)
10002668:	0002fcc0 	call	10002fcc <alt_release_fd>
    if (rval < 0)
1000266c:	e0bffe17 	ldw	r2,-8(fp)
10002670:	1000070e 	bge	r2,zero,10002690 <close+0xa0>
    {
      ALT_ERRNO = -rval;
10002674:	00025b40 	call	100025b4 <alt_get_errno>
10002678:	1007883a 	mov	r3,r2
1000267c:	e0bffe17 	ldw	r2,-8(fp)
10002680:	0085c83a 	sub	r2,zero,r2
10002684:	18800015 	stw	r2,0(r3)
      return -1;
10002688:	00bfffc4 	movi	r2,-1
1000268c:	00000706 	br	100026ac <close+0xbc>
    }
    return 0;
10002690:	0005883a 	mov	r2,zero
10002694:	00000506 	br	100026ac <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10002698:	00025b40 	call	100025b4 <alt_get_errno>
1000269c:	1007883a 	mov	r3,r2
100026a0:	00801444 	movi	r2,81
100026a4:	18800015 	stw	r2,0(r3)
    return -1;
100026a8:	00bfffc4 	movi	r2,-1
  }
}
100026ac:	e037883a 	mov	sp,fp
100026b0:	dfc00117 	ldw	ra,4(sp)
100026b4:	df000017 	ldw	fp,0(sp)
100026b8:	dec00204 	addi	sp,sp,8
100026bc:	f800283a 	ret

100026c0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100026c0:	defffe04 	addi	sp,sp,-8
100026c4:	df000115 	stw	fp,4(sp)
100026c8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
100026cc:	e03fff15 	stw	zero,-4(fp)
100026d0:	00000506 	br	100026e8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
100026d4:	e0bfff17 	ldw	r2,-4(fp)
100026d8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
100026dc:	e0bfff17 	ldw	r2,-4(fp)
100026e0:	10800804 	addi	r2,r2,32
100026e4:	e0bfff15 	stw	r2,-4(fp)
100026e8:	e0bfff17 	ldw	r2,-4(fp)
100026ec:	10840030 	cmpltui	r2,r2,4096
100026f0:	103ff81e 	bne	r2,zero,100026d4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100026f4:	0001883a 	nop
100026f8:	e037883a 	mov	sp,fp
100026fc:	df000017 	ldw	fp,0(sp)
10002700:	dec00104 	addi	sp,sp,4
10002704:	f800283a 	ret

10002708 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10002708:	defffc04 	addi	sp,sp,-16
1000270c:	df000315 	stw	fp,12(sp)
10002710:	df000304 	addi	fp,sp,12
10002714:	e13ffd15 	stw	r4,-12(fp)
10002718:	e17ffe15 	stw	r5,-8(fp)
1000271c:	e1bfff15 	stw	r6,-4(fp)
  return len;
10002720:	e0bfff17 	ldw	r2,-4(fp)
}
10002724:	e037883a 	mov	sp,fp
10002728:	df000017 	ldw	fp,0(sp)
1000272c:	dec00104 	addi	sp,sp,4
10002730:	f800283a 	ret

10002734 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10002734:	defffe04 	addi	sp,sp,-8
10002738:	dfc00115 	stw	ra,4(sp)
1000273c:	df000015 	stw	fp,0(sp)
10002740:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10002744:	d0a00517 	ldw	r2,-32748(gp)
10002748:	10000326 	beq	r2,zero,10002758 <alt_get_errno+0x24>
1000274c:	d0a00517 	ldw	r2,-32748(gp)
10002750:	103ee83a 	callr	r2
10002754:	00000106 	br	1000275c <alt_get_errno+0x28>
10002758:	d0a6e804 	addi	r2,gp,-25696
}
1000275c:	e037883a 	mov	sp,fp
10002760:	dfc00117 	ldw	ra,4(sp)
10002764:	df000017 	ldw	fp,0(sp)
10002768:	dec00204 	addi	sp,sp,8
1000276c:	f800283a 	ret

10002770 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10002770:	defffa04 	addi	sp,sp,-24
10002774:	dfc00515 	stw	ra,20(sp)
10002778:	df000415 	stw	fp,16(sp)
1000277c:	df000404 	addi	fp,sp,16
10002780:	e13ffe15 	stw	r4,-8(fp)
10002784:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10002788:	e0bffe17 	ldw	r2,-8(fp)
1000278c:	10000326 	beq	r2,zero,1000279c <alt_dev_llist_insert+0x2c>
10002790:	e0bffe17 	ldw	r2,-8(fp)
10002794:	10800217 	ldw	r2,8(r2)
10002798:	1000061e 	bne	r2,zero,100027b4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1000279c:	00027340 	call	10002734 <alt_get_errno>
100027a0:	1007883a 	mov	r3,r2
100027a4:	00800584 	movi	r2,22
100027a8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
100027ac:	00bffa84 	movi	r2,-22
100027b0:	00001306 	br	10002800 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
100027b4:	e0bffe17 	ldw	r2,-8(fp)
100027b8:	e0ffff17 	ldw	r3,-4(fp)
100027bc:	e0fffc15 	stw	r3,-16(fp)
100027c0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100027c4:	e0bffd17 	ldw	r2,-12(fp)
100027c8:	e0fffc17 	ldw	r3,-16(fp)
100027cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100027d0:	e0bffc17 	ldw	r2,-16(fp)
100027d4:	10c00017 	ldw	r3,0(r2)
100027d8:	e0bffd17 	ldw	r2,-12(fp)
100027dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100027e0:	e0bffc17 	ldw	r2,-16(fp)
100027e4:	10800017 	ldw	r2,0(r2)
100027e8:	e0fffd17 	ldw	r3,-12(fp)
100027ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100027f0:	e0bffc17 	ldw	r2,-16(fp)
100027f4:	e0fffd17 	ldw	r3,-12(fp)
100027f8:	10c00015 	stw	r3,0(r2)

  return 0;  
100027fc:	0005883a 	mov	r2,zero
}
10002800:	e037883a 	mov	sp,fp
10002804:	dfc00117 	ldw	ra,4(sp)
10002808:	df000017 	ldw	fp,0(sp)
1000280c:	dec00204 	addi	sp,sp,8
10002810:	f800283a 	ret

10002814 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10002814:	defffd04 	addi	sp,sp,-12
10002818:	dfc00215 	stw	ra,8(sp)
1000281c:	df000115 	stw	fp,4(sp)
10002820:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10002824:	00840034 	movhi	r2,4096
10002828:	109b4904 	addi	r2,r2,27940
1000282c:	e0bfff15 	stw	r2,-4(fp)
10002830:	00000606 	br	1000284c <_do_ctors+0x38>
        (*ctor) (); 
10002834:	e0bfff17 	ldw	r2,-4(fp)
10002838:	10800017 	ldw	r2,0(r2)
1000283c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10002840:	e0bfff17 	ldw	r2,-4(fp)
10002844:	10bfff04 	addi	r2,r2,-4
10002848:	e0bfff15 	stw	r2,-4(fp)
1000284c:	e0ffff17 	ldw	r3,-4(fp)
10002850:	00840034 	movhi	r2,4096
10002854:	109b4a04 	addi	r2,r2,27944
10002858:	18bff62e 	bgeu	r3,r2,10002834 <_do_ctors+0x20>
        (*ctor) (); 
}
1000285c:	0001883a 	nop
10002860:	e037883a 	mov	sp,fp
10002864:	dfc00117 	ldw	ra,4(sp)
10002868:	df000017 	ldw	fp,0(sp)
1000286c:	dec00204 	addi	sp,sp,8
10002870:	f800283a 	ret

10002874 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10002874:	defffd04 	addi	sp,sp,-12
10002878:	dfc00215 	stw	ra,8(sp)
1000287c:	df000115 	stw	fp,4(sp)
10002880:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10002884:	00840034 	movhi	r2,4096
10002888:	109b4904 	addi	r2,r2,27940
1000288c:	e0bfff15 	stw	r2,-4(fp)
10002890:	00000606 	br	100028ac <_do_dtors+0x38>
        (*dtor) (); 
10002894:	e0bfff17 	ldw	r2,-4(fp)
10002898:	10800017 	ldw	r2,0(r2)
1000289c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100028a0:	e0bfff17 	ldw	r2,-4(fp)
100028a4:	10bfff04 	addi	r2,r2,-4
100028a8:	e0bfff15 	stw	r2,-4(fp)
100028ac:	e0ffff17 	ldw	r3,-4(fp)
100028b0:	00840034 	movhi	r2,4096
100028b4:	109b4a04 	addi	r2,r2,27944
100028b8:	18bff62e 	bgeu	r3,r2,10002894 <_do_dtors+0x20>
        (*dtor) (); 
}
100028bc:	0001883a 	nop
100028c0:	e037883a 	mov	sp,fp
100028c4:	dfc00117 	ldw	ra,4(sp)
100028c8:	df000017 	ldw	fp,0(sp)
100028cc:	dec00204 	addi	sp,sp,8
100028d0:	f800283a 	ret

100028d4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
100028d4:	defffa04 	addi	sp,sp,-24
100028d8:	dfc00515 	stw	ra,20(sp)
100028dc:	df000415 	stw	fp,16(sp)
100028e0:	df000404 	addi	fp,sp,16
100028e4:	e13ffe15 	stw	r4,-8(fp)
100028e8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
100028ec:	e0bfff17 	ldw	r2,-4(fp)
100028f0:	10800017 	ldw	r2,0(r2)
100028f4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
100028f8:	e13ffe17 	ldw	r4,-8(fp)
100028fc:	0004d300 	call	10004d30 <strlen>
10002900:	10800044 	addi	r2,r2,1
10002904:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10002908:	00000d06 	br	10002940 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000290c:	e0bffc17 	ldw	r2,-16(fp)
10002910:	10800217 	ldw	r2,8(r2)
10002914:	e0fffd17 	ldw	r3,-12(fp)
10002918:	180d883a 	mov	r6,r3
1000291c:	e17ffe17 	ldw	r5,-8(fp)
10002920:	1009883a 	mov	r4,r2
10002924:	000437c0 	call	1000437c <memcmp>
10002928:	1000021e 	bne	r2,zero,10002934 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1000292c:	e0bffc17 	ldw	r2,-16(fp)
10002930:	00000706 	br	10002950 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10002934:	e0bffc17 	ldw	r2,-16(fp)
10002938:	10800017 	ldw	r2,0(r2)
1000293c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10002940:	e0fffc17 	ldw	r3,-16(fp)
10002944:	e0bfff17 	ldw	r2,-4(fp)
10002948:	18bff01e 	bne	r3,r2,1000290c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1000294c:	0005883a 	mov	r2,zero
}
10002950:	e037883a 	mov	sp,fp
10002954:	dfc00117 	ldw	ra,4(sp)
10002958:	df000017 	ldw	fp,0(sp)
1000295c:	dec00204 	addi	sp,sp,8
10002960:	f800283a 	ret

10002964 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10002964:	defffe04 	addi	sp,sp,-8
10002968:	dfc00115 	stw	ra,4(sp)
1000296c:	df000015 	stw	fp,0(sp)
10002970:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
10002974:	01440004 	movi	r5,4096
10002978:	0009883a 	mov	r4,zero
1000297c:	00033a40 	call	100033a4 <alt_icache_flush>
#endif
}
10002980:	0001883a 	nop
10002984:	e037883a 	mov	sp,fp
10002988:	dfc00117 	ldw	ra,4(sp)
1000298c:	df000017 	ldw	fp,0(sp)
10002990:	dec00204 	addi	sp,sp,8
10002994:	f800283a 	ret

10002998 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10002998:	defff904 	addi	sp,sp,-28
1000299c:	dfc00615 	stw	ra,24(sp)
100029a0:	df000515 	stw	fp,20(sp)
100029a4:	df000504 	addi	fp,sp,20
100029a8:	e13ffc15 	stw	r4,-16(fp)
100029ac:	e17ffd15 	stw	r5,-12(fp)
100029b0:	e1bffe15 	stw	r6,-8(fp)
100029b4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100029b8:	e0800217 	ldw	r2,8(fp)
100029bc:	d8800015 	stw	r2,0(sp)
100029c0:	e1ffff17 	ldw	r7,-4(fp)
100029c4:	e1bffe17 	ldw	r6,-8(fp)
100029c8:	e17ffd17 	ldw	r5,-12(fp)
100029cc:	e13ffc17 	ldw	r4,-16(fp)
100029d0:	0002b480 	call	10002b48 <alt_iic_isr_register>
}  
100029d4:	e037883a 	mov	sp,fp
100029d8:	dfc00117 	ldw	ra,4(sp)
100029dc:	df000017 	ldw	fp,0(sp)
100029e0:	dec00204 	addi	sp,sp,8
100029e4:	f800283a 	ret

100029e8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100029e8:	defff904 	addi	sp,sp,-28
100029ec:	df000615 	stw	fp,24(sp)
100029f0:	df000604 	addi	fp,sp,24
100029f4:	e13ffe15 	stw	r4,-8(fp)
100029f8:	e17fff15 	stw	r5,-4(fp)
100029fc:	e0bfff17 	ldw	r2,-4(fp)
10002a00:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10002a04:	0005303a 	rdctl	r2,status
10002a08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10002a0c:	e0fffb17 	ldw	r3,-20(fp)
10002a10:	00bfff84 	movi	r2,-2
10002a14:	1884703a 	and	r2,r3,r2
10002a18:	1001703a 	wrctl	status,r2
  
  return context;
10002a1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10002a20:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10002a24:	00c00044 	movi	r3,1
10002a28:	e0bffa17 	ldw	r2,-24(fp)
10002a2c:	1884983a 	sll	r2,r3,r2
10002a30:	1007883a 	mov	r3,r2
10002a34:	d0a6e417 	ldw	r2,-25712(gp)
10002a38:	1884b03a 	or	r2,r3,r2
10002a3c:	d0a6e415 	stw	r2,-25712(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10002a40:	d0a6e417 	ldw	r2,-25712(gp)
10002a44:	100170fa 	wrctl	ienable,r2
10002a48:	e0bffc17 	ldw	r2,-16(fp)
10002a4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10002a50:	e0bffd17 	ldw	r2,-12(fp)
10002a54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10002a58:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10002a5c:	0001883a 	nop
}
10002a60:	e037883a 	mov	sp,fp
10002a64:	df000017 	ldw	fp,0(sp)
10002a68:	dec00104 	addi	sp,sp,4
10002a6c:	f800283a 	ret

10002a70 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10002a70:	defff904 	addi	sp,sp,-28
10002a74:	df000615 	stw	fp,24(sp)
10002a78:	df000604 	addi	fp,sp,24
10002a7c:	e13ffe15 	stw	r4,-8(fp)
10002a80:	e17fff15 	stw	r5,-4(fp)
10002a84:	e0bfff17 	ldw	r2,-4(fp)
10002a88:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10002a8c:	0005303a 	rdctl	r2,status
10002a90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10002a94:	e0fffb17 	ldw	r3,-20(fp)
10002a98:	00bfff84 	movi	r2,-2
10002a9c:	1884703a 	and	r2,r3,r2
10002aa0:	1001703a 	wrctl	status,r2
  
  return context;
10002aa4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10002aa8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10002aac:	00c00044 	movi	r3,1
10002ab0:	e0bffa17 	ldw	r2,-24(fp)
10002ab4:	1884983a 	sll	r2,r3,r2
10002ab8:	0084303a 	nor	r2,zero,r2
10002abc:	1007883a 	mov	r3,r2
10002ac0:	d0a6e417 	ldw	r2,-25712(gp)
10002ac4:	1884703a 	and	r2,r3,r2
10002ac8:	d0a6e415 	stw	r2,-25712(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10002acc:	d0a6e417 	ldw	r2,-25712(gp)
10002ad0:	100170fa 	wrctl	ienable,r2
10002ad4:	e0bffc17 	ldw	r2,-16(fp)
10002ad8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10002adc:	e0bffd17 	ldw	r2,-12(fp)
10002ae0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10002ae4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10002ae8:	0001883a 	nop
}
10002aec:	e037883a 	mov	sp,fp
10002af0:	df000017 	ldw	fp,0(sp)
10002af4:	dec00104 	addi	sp,sp,4
10002af8:	f800283a 	ret

10002afc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10002afc:	defffc04 	addi	sp,sp,-16
10002b00:	df000315 	stw	fp,12(sp)
10002b04:	df000304 	addi	fp,sp,12
10002b08:	e13ffe15 	stw	r4,-8(fp)
10002b0c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10002b10:	000530fa 	rdctl	r2,ienable
10002b14:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10002b18:	00c00044 	movi	r3,1
10002b1c:	e0bfff17 	ldw	r2,-4(fp)
10002b20:	1884983a 	sll	r2,r3,r2
10002b24:	1007883a 	mov	r3,r2
10002b28:	e0bffd17 	ldw	r2,-12(fp)
10002b2c:	1884703a 	and	r2,r3,r2
10002b30:	1004c03a 	cmpne	r2,r2,zero
10002b34:	10803fcc 	andi	r2,r2,255
}
10002b38:	e037883a 	mov	sp,fp
10002b3c:	df000017 	ldw	fp,0(sp)
10002b40:	dec00104 	addi	sp,sp,4
10002b44:	f800283a 	ret

10002b48 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10002b48:	defff504 	addi	sp,sp,-44
10002b4c:	dfc00a15 	stw	ra,40(sp)
10002b50:	df000915 	stw	fp,36(sp)
10002b54:	df000904 	addi	fp,sp,36
10002b58:	e13ffc15 	stw	r4,-16(fp)
10002b5c:	e17ffd15 	stw	r5,-12(fp)
10002b60:	e1bffe15 	stw	r6,-8(fp)
10002b64:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10002b68:	00bffa84 	movi	r2,-22
10002b6c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10002b70:	e0bffd17 	ldw	r2,-12(fp)
10002b74:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10002b78:	e0bff817 	ldw	r2,-32(fp)
10002b7c:	10800808 	cmpgei	r2,r2,32
10002b80:	1000271e 	bne	r2,zero,10002c20 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10002b84:	0005303a 	rdctl	r2,status
10002b88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10002b8c:	e0fffb17 	ldw	r3,-20(fp)
10002b90:	00bfff84 	movi	r2,-2
10002b94:	1884703a 	and	r2,r3,r2
10002b98:	1001703a 	wrctl	status,r2
  
  return context;
10002b9c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10002ba0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10002ba4:	00840074 	movhi	r2,4097
10002ba8:	10a93604 	addi	r2,r2,-23336
10002bac:	e0fff817 	ldw	r3,-32(fp)
10002bb0:	180690fa 	slli	r3,r3,3
10002bb4:	10c5883a 	add	r2,r2,r3
10002bb8:	e0fffe17 	ldw	r3,-8(fp)
10002bbc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10002bc0:	00840074 	movhi	r2,4097
10002bc4:	10a93604 	addi	r2,r2,-23336
10002bc8:	e0fff817 	ldw	r3,-32(fp)
10002bcc:	180690fa 	slli	r3,r3,3
10002bd0:	10c5883a 	add	r2,r2,r3
10002bd4:	10800104 	addi	r2,r2,4
10002bd8:	e0ffff17 	ldw	r3,-4(fp)
10002bdc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10002be0:	e0bffe17 	ldw	r2,-8(fp)
10002be4:	10000526 	beq	r2,zero,10002bfc <alt_iic_isr_register+0xb4>
10002be8:	e0bff817 	ldw	r2,-32(fp)
10002bec:	100b883a 	mov	r5,r2
10002bf0:	e13ffc17 	ldw	r4,-16(fp)
10002bf4:	00029e80 	call	100029e8 <alt_ic_irq_enable>
10002bf8:	00000406 	br	10002c0c <alt_iic_isr_register+0xc4>
10002bfc:	e0bff817 	ldw	r2,-32(fp)
10002c00:	100b883a 	mov	r5,r2
10002c04:	e13ffc17 	ldw	r4,-16(fp)
10002c08:	0002a700 	call	10002a70 <alt_ic_irq_disable>
10002c0c:	e0bff715 	stw	r2,-36(fp)
10002c10:	e0bffa17 	ldw	r2,-24(fp)
10002c14:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10002c18:	e0bff917 	ldw	r2,-28(fp)
10002c1c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10002c20:	e0bff717 	ldw	r2,-36(fp)
}
10002c24:	e037883a 	mov	sp,fp
10002c28:	dfc00117 	ldw	ra,4(sp)
10002c2c:	df000017 	ldw	fp,0(sp)
10002c30:	dec00204 	addi	sp,sp,8
10002c34:	f800283a 	ret

10002c38 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10002c38:	defff904 	addi	sp,sp,-28
10002c3c:	dfc00615 	stw	ra,24(sp)
10002c40:	df000515 	stw	fp,20(sp)
10002c44:	df000504 	addi	fp,sp,20
10002c48:	e13ffc15 	stw	r4,-16(fp)
10002c4c:	e17ffd15 	stw	r5,-12(fp)
10002c50:	e1bffe15 	stw	r6,-8(fp)
10002c54:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10002c58:	e1bfff17 	ldw	r6,-4(fp)
10002c5c:	e17ffe17 	ldw	r5,-8(fp)
10002c60:	e13ffd17 	ldw	r4,-12(fp)
10002c64:	0002e780 	call	10002e78 <open>
10002c68:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10002c6c:	e0bffb17 	ldw	r2,-20(fp)
10002c70:	10001c16 	blt	r2,zero,10002ce4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
10002c74:	00840034 	movhi	r2,4096
10002c78:	109fd504 	addi	r2,r2,32596
10002c7c:	e0fffb17 	ldw	r3,-20(fp)
10002c80:	18c00324 	muli	r3,r3,12
10002c84:	10c5883a 	add	r2,r2,r3
10002c88:	10c00017 	ldw	r3,0(r2)
10002c8c:	e0bffc17 	ldw	r2,-16(fp)
10002c90:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10002c94:	00840034 	movhi	r2,4096
10002c98:	109fd504 	addi	r2,r2,32596
10002c9c:	e0fffb17 	ldw	r3,-20(fp)
10002ca0:	18c00324 	muli	r3,r3,12
10002ca4:	10c5883a 	add	r2,r2,r3
10002ca8:	10800104 	addi	r2,r2,4
10002cac:	10c00017 	ldw	r3,0(r2)
10002cb0:	e0bffc17 	ldw	r2,-16(fp)
10002cb4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10002cb8:	00840034 	movhi	r2,4096
10002cbc:	109fd504 	addi	r2,r2,32596
10002cc0:	e0fffb17 	ldw	r3,-20(fp)
10002cc4:	18c00324 	muli	r3,r3,12
10002cc8:	10c5883a 	add	r2,r2,r3
10002ccc:	10800204 	addi	r2,r2,8
10002cd0:	10c00017 	ldw	r3,0(r2)
10002cd4:	e0bffc17 	ldw	r2,-16(fp)
10002cd8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10002cdc:	e13ffb17 	ldw	r4,-20(fp)
10002ce0:	0002fcc0 	call	10002fcc <alt_release_fd>
  }
} 
10002ce4:	0001883a 	nop
10002ce8:	e037883a 	mov	sp,fp
10002cec:	dfc00117 	ldw	ra,4(sp)
10002cf0:	df000017 	ldw	fp,0(sp)
10002cf4:	dec00204 	addi	sp,sp,8
10002cf8:	f800283a 	ret

10002cfc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10002cfc:	defffb04 	addi	sp,sp,-20
10002d00:	dfc00415 	stw	ra,16(sp)
10002d04:	df000315 	stw	fp,12(sp)
10002d08:	df000304 	addi	fp,sp,12
10002d0c:	e13ffd15 	stw	r4,-12(fp)
10002d10:	e17ffe15 	stw	r5,-8(fp)
10002d14:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10002d18:	01c07fc4 	movi	r7,511
10002d1c:	01800044 	movi	r6,1
10002d20:	e17ffd17 	ldw	r5,-12(fp)
10002d24:	01040034 	movhi	r4,4096
10002d28:	211fd804 	addi	r4,r4,32608
10002d2c:	0002c380 	call	10002c38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10002d30:	01c07fc4 	movi	r7,511
10002d34:	000d883a 	mov	r6,zero
10002d38:	e17ffe17 	ldw	r5,-8(fp)
10002d3c:	01040034 	movhi	r4,4096
10002d40:	211fd504 	addi	r4,r4,32596
10002d44:	0002c380 	call	10002c38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10002d48:	01c07fc4 	movi	r7,511
10002d4c:	01800044 	movi	r6,1
10002d50:	e17fff17 	ldw	r5,-4(fp)
10002d54:	01040034 	movhi	r4,4096
10002d58:	211fdb04 	addi	r4,r4,32620
10002d5c:	0002c380 	call	10002c38 <alt_open_fd>
}  
10002d60:	0001883a 	nop
10002d64:	e037883a 	mov	sp,fp
10002d68:	dfc00117 	ldw	ra,4(sp)
10002d6c:	df000017 	ldw	fp,0(sp)
10002d70:	dec00204 	addi	sp,sp,8
10002d74:	f800283a 	ret

10002d78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10002d78:	defffe04 	addi	sp,sp,-8
10002d7c:	dfc00115 	stw	ra,4(sp)
10002d80:	df000015 	stw	fp,0(sp)
10002d84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10002d88:	d0a00517 	ldw	r2,-32748(gp)
10002d8c:	10000326 	beq	r2,zero,10002d9c <alt_get_errno+0x24>
10002d90:	d0a00517 	ldw	r2,-32748(gp)
10002d94:	103ee83a 	callr	r2
10002d98:	00000106 	br	10002da0 <alt_get_errno+0x28>
10002d9c:	d0a6e804 	addi	r2,gp,-25696
}
10002da0:	e037883a 	mov	sp,fp
10002da4:	dfc00117 	ldw	ra,4(sp)
10002da8:	df000017 	ldw	fp,0(sp)
10002dac:	dec00204 	addi	sp,sp,8
10002db0:	f800283a 	ret

10002db4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10002db4:	defffd04 	addi	sp,sp,-12
10002db8:	df000215 	stw	fp,8(sp)
10002dbc:	df000204 	addi	fp,sp,8
10002dc0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10002dc4:	e0bfff17 	ldw	r2,-4(fp)
10002dc8:	10800217 	ldw	r2,8(r2)
10002dcc:	10d00034 	orhi	r3,r2,16384
10002dd0:	e0bfff17 	ldw	r2,-4(fp)
10002dd4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10002dd8:	e03ffe15 	stw	zero,-8(fp)
10002ddc:	00001d06 	br	10002e54 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10002de0:	00840034 	movhi	r2,4096
10002de4:	109fd504 	addi	r2,r2,32596
10002de8:	e0fffe17 	ldw	r3,-8(fp)
10002dec:	18c00324 	muli	r3,r3,12
10002df0:	10c5883a 	add	r2,r2,r3
10002df4:	10c00017 	ldw	r3,0(r2)
10002df8:	e0bfff17 	ldw	r2,-4(fp)
10002dfc:	10800017 	ldw	r2,0(r2)
10002e00:	1880111e 	bne	r3,r2,10002e48 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10002e04:	00840034 	movhi	r2,4096
10002e08:	109fd504 	addi	r2,r2,32596
10002e0c:	e0fffe17 	ldw	r3,-8(fp)
10002e10:	18c00324 	muli	r3,r3,12
10002e14:	10c5883a 	add	r2,r2,r3
10002e18:	10800204 	addi	r2,r2,8
10002e1c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10002e20:	1000090e 	bge	r2,zero,10002e48 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10002e24:	e0bffe17 	ldw	r2,-8(fp)
10002e28:	10c00324 	muli	r3,r2,12
10002e2c:	00840034 	movhi	r2,4096
10002e30:	109fd504 	addi	r2,r2,32596
10002e34:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10002e38:	e0bfff17 	ldw	r2,-4(fp)
10002e3c:	18800226 	beq	r3,r2,10002e48 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10002e40:	00bffcc4 	movi	r2,-13
10002e44:	00000806 	br	10002e68 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10002e48:	e0bffe17 	ldw	r2,-8(fp)
10002e4c:	10800044 	addi	r2,r2,1
10002e50:	e0bffe15 	stw	r2,-8(fp)
10002e54:	d0a00417 	ldw	r2,-32752(gp)
10002e58:	1007883a 	mov	r3,r2
10002e5c:	e0bffe17 	ldw	r2,-8(fp)
10002e60:	18bfdf2e 	bgeu	r3,r2,10002de0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10002e64:	0005883a 	mov	r2,zero
}
10002e68:	e037883a 	mov	sp,fp
10002e6c:	df000017 	ldw	fp,0(sp)
10002e70:	dec00104 	addi	sp,sp,4
10002e74:	f800283a 	ret

10002e78 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10002e78:	defff604 	addi	sp,sp,-40
10002e7c:	dfc00915 	stw	ra,36(sp)
10002e80:	df000815 	stw	fp,32(sp)
10002e84:	df000804 	addi	fp,sp,32
10002e88:	e13ffd15 	stw	r4,-12(fp)
10002e8c:	e17ffe15 	stw	r5,-8(fp)
10002e90:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10002e94:	00bfffc4 	movi	r2,-1
10002e98:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10002e9c:	00bffb44 	movi	r2,-19
10002ea0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10002ea4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10002ea8:	d1600204 	addi	r5,gp,-32760
10002eac:	e13ffd17 	ldw	r4,-12(fp)
10002eb0:	00028d40 	call	100028d4 <alt_find_dev>
10002eb4:	e0bff815 	stw	r2,-32(fp)
10002eb8:	e0bff817 	ldw	r2,-32(fp)
10002ebc:	1000051e 	bne	r2,zero,10002ed4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10002ec0:	e13ffd17 	ldw	r4,-12(fp)
10002ec4:	00031f80 	call	100031f8 <alt_find_file>
10002ec8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10002ecc:	00800044 	movi	r2,1
10002ed0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10002ed4:	e0bff817 	ldw	r2,-32(fp)
10002ed8:	10002926 	beq	r2,zero,10002f80 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
10002edc:	e13ff817 	ldw	r4,-32(fp)
10002ee0:	00033000 	call	10003300 <alt_get_fd>
10002ee4:	e0bff915 	stw	r2,-28(fp)
10002ee8:	e0bff917 	ldw	r2,-28(fp)
10002eec:	1000030e 	bge	r2,zero,10002efc <open+0x84>
    {
      status = index;
10002ef0:	e0bff917 	ldw	r2,-28(fp)
10002ef4:	e0bffa15 	stw	r2,-24(fp)
10002ef8:	00002306 	br	10002f88 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
10002efc:	e0bff917 	ldw	r2,-28(fp)
10002f00:	10c00324 	muli	r3,r2,12
10002f04:	00840034 	movhi	r2,4096
10002f08:	109fd504 	addi	r2,r2,32596
10002f0c:	1885883a 	add	r2,r3,r2
10002f10:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10002f14:	e0fffe17 	ldw	r3,-8(fp)
10002f18:	00900034 	movhi	r2,16384
10002f1c:	10bfffc4 	addi	r2,r2,-1
10002f20:	1886703a 	and	r3,r3,r2
10002f24:	e0bffc17 	ldw	r2,-16(fp)
10002f28:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10002f2c:	e0bffb17 	ldw	r2,-20(fp)
10002f30:	1000051e 	bne	r2,zero,10002f48 <open+0xd0>
10002f34:	e13ffc17 	ldw	r4,-16(fp)
10002f38:	0002db40 	call	10002db4 <alt_file_locked>
10002f3c:	e0bffa15 	stw	r2,-24(fp)
10002f40:	e0bffa17 	ldw	r2,-24(fp)
10002f44:	10001016 	blt	r2,zero,10002f88 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10002f48:	e0bff817 	ldw	r2,-32(fp)
10002f4c:	10800317 	ldw	r2,12(r2)
10002f50:	10000826 	beq	r2,zero,10002f74 <open+0xfc>
10002f54:	e0bff817 	ldw	r2,-32(fp)
10002f58:	10800317 	ldw	r2,12(r2)
10002f5c:	e1ffff17 	ldw	r7,-4(fp)
10002f60:	e1bffe17 	ldw	r6,-8(fp)
10002f64:	e17ffd17 	ldw	r5,-12(fp)
10002f68:	e13ffc17 	ldw	r4,-16(fp)
10002f6c:	103ee83a 	callr	r2
10002f70:	00000106 	br	10002f78 <open+0x100>
10002f74:	0005883a 	mov	r2,zero
10002f78:	e0bffa15 	stw	r2,-24(fp)
10002f7c:	00000206 	br	10002f88 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
10002f80:	00bffb44 	movi	r2,-19
10002f84:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10002f88:	e0bffa17 	ldw	r2,-24(fp)
10002f8c:	1000090e 	bge	r2,zero,10002fb4 <open+0x13c>
  {
    alt_release_fd (index);  
10002f90:	e13ff917 	ldw	r4,-28(fp)
10002f94:	0002fcc0 	call	10002fcc <alt_release_fd>
    ALT_ERRNO = -status;
10002f98:	0002d780 	call	10002d78 <alt_get_errno>
10002f9c:	1007883a 	mov	r3,r2
10002fa0:	e0bffa17 	ldw	r2,-24(fp)
10002fa4:	0085c83a 	sub	r2,zero,r2
10002fa8:	18800015 	stw	r2,0(r3)
    return -1;
10002fac:	00bfffc4 	movi	r2,-1
10002fb0:	00000106 	br	10002fb8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
10002fb4:	e0bff917 	ldw	r2,-28(fp)
}
10002fb8:	e037883a 	mov	sp,fp
10002fbc:	dfc00117 	ldw	ra,4(sp)
10002fc0:	df000017 	ldw	fp,0(sp)
10002fc4:	dec00204 	addi	sp,sp,8
10002fc8:	f800283a 	ret

10002fcc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10002fcc:	defffe04 	addi	sp,sp,-8
10002fd0:	df000115 	stw	fp,4(sp)
10002fd4:	df000104 	addi	fp,sp,4
10002fd8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
10002fdc:	e0bfff17 	ldw	r2,-4(fp)
10002fe0:	108000d0 	cmplti	r2,r2,3
10002fe4:	10000d1e 	bne	r2,zero,1000301c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
10002fe8:	00840034 	movhi	r2,4096
10002fec:	109fd504 	addi	r2,r2,32596
10002ff0:	e0ffff17 	ldw	r3,-4(fp)
10002ff4:	18c00324 	muli	r3,r3,12
10002ff8:	10c5883a 	add	r2,r2,r3
10002ffc:	10800204 	addi	r2,r2,8
10003000:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10003004:	00840034 	movhi	r2,4096
10003008:	109fd504 	addi	r2,r2,32596
1000300c:	e0ffff17 	ldw	r3,-4(fp)
10003010:	18c00324 	muli	r3,r3,12
10003014:	10c5883a 	add	r2,r2,r3
10003018:	10000015 	stw	zero,0(r2)
  }
}
1000301c:	0001883a 	nop
10003020:	e037883a 	mov	sp,fp
10003024:	df000017 	ldw	fp,0(sp)
10003028:	dec00104 	addi	sp,sp,4
1000302c:	f800283a 	ret

10003030 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10003030:	defffa04 	addi	sp,sp,-24
10003034:	df000515 	stw	fp,20(sp)
10003038:	df000504 	addi	fp,sp,20
1000303c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10003040:	0005303a 	rdctl	r2,status
10003044:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10003048:	e0fffc17 	ldw	r3,-16(fp)
1000304c:	00bfff84 	movi	r2,-2
10003050:	1884703a 	and	r2,r3,r2
10003054:	1001703a 	wrctl	status,r2
  
  return context;
10003058:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1000305c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10003060:	e0bfff17 	ldw	r2,-4(fp)
10003064:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10003068:	e0bffd17 	ldw	r2,-12(fp)
1000306c:	10800017 	ldw	r2,0(r2)
10003070:	e0fffd17 	ldw	r3,-12(fp)
10003074:	18c00117 	ldw	r3,4(r3)
10003078:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1000307c:	e0bffd17 	ldw	r2,-12(fp)
10003080:	10800117 	ldw	r2,4(r2)
10003084:	e0fffd17 	ldw	r3,-12(fp)
10003088:	18c00017 	ldw	r3,0(r3)
1000308c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10003090:	e0bffd17 	ldw	r2,-12(fp)
10003094:	e0fffd17 	ldw	r3,-12(fp)
10003098:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1000309c:	e0bffd17 	ldw	r2,-12(fp)
100030a0:	e0fffd17 	ldw	r3,-12(fp)
100030a4:	10c00015 	stw	r3,0(r2)
100030a8:	e0bffb17 	ldw	r2,-20(fp)
100030ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100030b0:	e0bffe17 	ldw	r2,-8(fp)
100030b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100030b8:	0001883a 	nop
100030bc:	e037883a 	mov	sp,fp
100030c0:	df000017 	ldw	fp,0(sp)
100030c4:	dec00104 	addi	sp,sp,4
100030c8:	f800283a 	ret

100030cc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100030cc:	defffb04 	addi	sp,sp,-20
100030d0:	dfc00415 	stw	ra,16(sp)
100030d4:	df000315 	stw	fp,12(sp)
100030d8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100030dc:	d0a00717 	ldw	r2,-32740(gp)
100030e0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100030e4:	d0a6e617 	ldw	r2,-25704(gp)
100030e8:	10800044 	addi	r2,r2,1
100030ec:	d0a6e615 	stw	r2,-25704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100030f0:	00002e06 	br	100031ac <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100030f4:	e0bffd17 	ldw	r2,-12(fp)
100030f8:	10800017 	ldw	r2,0(r2)
100030fc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10003100:	e0bffd17 	ldw	r2,-12(fp)
10003104:	10800403 	ldbu	r2,16(r2)
10003108:	10803fcc 	andi	r2,r2,255
1000310c:	10000426 	beq	r2,zero,10003120 <alt_tick+0x54>
10003110:	d0a6e617 	ldw	r2,-25704(gp)
10003114:	1000021e 	bne	r2,zero,10003120 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10003118:	e0bffd17 	ldw	r2,-12(fp)
1000311c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10003120:	e0bffd17 	ldw	r2,-12(fp)
10003124:	10800217 	ldw	r2,8(r2)
10003128:	d0e6e617 	ldw	r3,-25704(gp)
1000312c:	18801d36 	bltu	r3,r2,100031a4 <alt_tick+0xd8>
10003130:	e0bffd17 	ldw	r2,-12(fp)
10003134:	10800403 	ldbu	r2,16(r2)
10003138:	10803fcc 	andi	r2,r2,255
1000313c:	1000191e 	bne	r2,zero,100031a4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10003140:	e0bffd17 	ldw	r2,-12(fp)
10003144:	10800317 	ldw	r2,12(r2)
10003148:	e0fffd17 	ldw	r3,-12(fp)
1000314c:	18c00517 	ldw	r3,20(r3)
10003150:	1809883a 	mov	r4,r3
10003154:	103ee83a 	callr	r2
10003158:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1000315c:	e0bfff17 	ldw	r2,-4(fp)
10003160:	1000031e 	bne	r2,zero,10003170 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10003164:	e13ffd17 	ldw	r4,-12(fp)
10003168:	00030300 	call	10003030 <alt_alarm_stop>
1000316c:	00000d06 	br	100031a4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10003170:	e0bffd17 	ldw	r2,-12(fp)
10003174:	10c00217 	ldw	r3,8(r2)
10003178:	e0bfff17 	ldw	r2,-4(fp)
1000317c:	1887883a 	add	r3,r3,r2
10003180:	e0bffd17 	ldw	r2,-12(fp)
10003184:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10003188:	e0bffd17 	ldw	r2,-12(fp)
1000318c:	10c00217 	ldw	r3,8(r2)
10003190:	d0a6e617 	ldw	r2,-25704(gp)
10003194:	1880032e 	bgeu	r3,r2,100031a4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10003198:	e0bffd17 	ldw	r2,-12(fp)
1000319c:	00c00044 	movi	r3,1
100031a0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100031a4:	e0bffe17 	ldw	r2,-8(fp)
100031a8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100031ac:	e0fffd17 	ldw	r3,-12(fp)
100031b0:	d0a00704 	addi	r2,gp,-32740
100031b4:	18bfcf1e 	bne	r3,r2,100030f4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100031b8:	0001883a 	nop
}
100031bc:	0001883a 	nop
100031c0:	e037883a 	mov	sp,fp
100031c4:	dfc00117 	ldw	ra,4(sp)
100031c8:	df000017 	ldw	fp,0(sp)
100031cc:	dec00204 	addi	sp,sp,8
100031d0:	f800283a 	ret

100031d4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100031d4:	deffff04 	addi	sp,sp,-4
100031d8:	df000015 	stw	fp,0(sp)
100031dc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100031e0:	000170fa 	wrctl	ienable,zero
}
100031e4:	0001883a 	nop
100031e8:	e037883a 	mov	sp,fp
100031ec:	df000017 	ldw	fp,0(sp)
100031f0:	dec00104 	addi	sp,sp,4
100031f4:	f800283a 	ret

100031f8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100031f8:	defffb04 	addi	sp,sp,-20
100031fc:	dfc00415 	stw	ra,16(sp)
10003200:	df000315 	stw	fp,12(sp)
10003204:	df000304 	addi	fp,sp,12
10003208:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1000320c:	d0a00017 	ldw	r2,-32768(gp)
10003210:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10003214:	00003106 	br	100032dc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10003218:	e0bffd17 	ldw	r2,-12(fp)
1000321c:	10800217 	ldw	r2,8(r2)
10003220:	1009883a 	mov	r4,r2
10003224:	0004d300 	call	10004d30 <strlen>
10003228:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000322c:	e0bffd17 	ldw	r2,-12(fp)
10003230:	10c00217 	ldw	r3,8(r2)
10003234:	e0bffe17 	ldw	r2,-8(fp)
10003238:	10bfffc4 	addi	r2,r2,-1
1000323c:	1885883a 	add	r2,r3,r2
10003240:	10800003 	ldbu	r2,0(r2)
10003244:	10803fcc 	andi	r2,r2,255
10003248:	1080201c 	xori	r2,r2,128
1000324c:	10bfe004 	addi	r2,r2,-128
10003250:	10800bd8 	cmpnei	r2,r2,47
10003254:	1000031e 	bne	r2,zero,10003264 <alt_find_file+0x6c>
    {
      len -= 1;
10003258:	e0bffe17 	ldw	r2,-8(fp)
1000325c:	10bfffc4 	addi	r2,r2,-1
10003260:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10003264:	e0bffe17 	ldw	r2,-8(fp)
10003268:	e0ffff17 	ldw	r3,-4(fp)
1000326c:	1885883a 	add	r2,r3,r2
10003270:	10800003 	ldbu	r2,0(r2)
10003274:	10803fcc 	andi	r2,r2,255
10003278:	1080201c 	xori	r2,r2,128
1000327c:	10bfe004 	addi	r2,r2,-128
10003280:	10800be0 	cmpeqi	r2,r2,47
10003284:	1000081e 	bne	r2,zero,100032a8 <alt_find_file+0xb0>
10003288:	e0bffe17 	ldw	r2,-8(fp)
1000328c:	e0ffff17 	ldw	r3,-4(fp)
10003290:	1885883a 	add	r2,r3,r2
10003294:	10800003 	ldbu	r2,0(r2)
10003298:	10803fcc 	andi	r2,r2,255
1000329c:	1080201c 	xori	r2,r2,128
100032a0:	10bfe004 	addi	r2,r2,-128
100032a4:	10000a1e 	bne	r2,zero,100032d0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
100032a8:	e0bffd17 	ldw	r2,-12(fp)
100032ac:	10800217 	ldw	r2,8(r2)
100032b0:	e0fffe17 	ldw	r3,-8(fp)
100032b4:	180d883a 	mov	r6,r3
100032b8:	e17fff17 	ldw	r5,-4(fp)
100032bc:	1009883a 	mov	r4,r2
100032c0:	000437c0 	call	1000437c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100032c4:	1000021e 	bne	r2,zero,100032d0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100032c8:	e0bffd17 	ldw	r2,-12(fp)
100032cc:	00000706 	br	100032ec <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
100032d0:	e0bffd17 	ldw	r2,-12(fp)
100032d4:	10800017 	ldw	r2,0(r2)
100032d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100032dc:	e0fffd17 	ldw	r3,-12(fp)
100032e0:	d0a00004 	addi	r2,gp,-32768
100032e4:	18bfcc1e 	bne	r3,r2,10003218 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100032e8:	0005883a 	mov	r2,zero
}
100032ec:	e037883a 	mov	sp,fp
100032f0:	dfc00117 	ldw	ra,4(sp)
100032f4:	df000017 	ldw	fp,0(sp)
100032f8:	dec00204 	addi	sp,sp,8
100032fc:	f800283a 	ret

10003300 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10003300:	defffc04 	addi	sp,sp,-16
10003304:	df000315 	stw	fp,12(sp)
10003308:	df000304 	addi	fp,sp,12
1000330c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
10003310:	00bffa04 	movi	r2,-24
10003314:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10003318:	e03ffd15 	stw	zero,-12(fp)
1000331c:	00001906 	br	10003384 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
10003320:	00840034 	movhi	r2,4096
10003324:	109fd504 	addi	r2,r2,32596
10003328:	e0fffd17 	ldw	r3,-12(fp)
1000332c:	18c00324 	muli	r3,r3,12
10003330:	10c5883a 	add	r2,r2,r3
10003334:	10800017 	ldw	r2,0(r2)
10003338:	10000f1e 	bne	r2,zero,10003378 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
1000333c:	00840034 	movhi	r2,4096
10003340:	109fd504 	addi	r2,r2,32596
10003344:	e0fffd17 	ldw	r3,-12(fp)
10003348:	18c00324 	muli	r3,r3,12
1000334c:	10c5883a 	add	r2,r2,r3
10003350:	e0ffff17 	ldw	r3,-4(fp)
10003354:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10003358:	d0e00417 	ldw	r3,-32752(gp)
1000335c:	e0bffd17 	ldw	r2,-12(fp)
10003360:	1880020e 	bge	r3,r2,1000336c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
10003364:	e0bffd17 	ldw	r2,-12(fp)
10003368:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
1000336c:	e0bffd17 	ldw	r2,-12(fp)
10003370:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10003374:	00000606 	br	10003390 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10003378:	e0bffd17 	ldw	r2,-12(fp)
1000337c:	10800044 	addi	r2,r2,1
10003380:	e0bffd15 	stw	r2,-12(fp)
10003384:	e0bffd17 	ldw	r2,-12(fp)
10003388:	10800810 	cmplti	r2,r2,32
1000338c:	103fe41e 	bne	r2,zero,10003320 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10003390:	e0bffe17 	ldw	r2,-8(fp)
}
10003394:	e037883a 	mov	sp,fp
10003398:	df000017 	ldw	fp,0(sp)
1000339c:	dec00104 	addi	sp,sp,4
100033a0:	f800283a 	ret

100033a4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
100033a4:	defffb04 	addi	sp,sp,-20
100033a8:	df000415 	stw	fp,16(sp)
100033ac:	df000404 	addi	fp,sp,16
100033b0:	e13ffe15 	stw	r4,-8(fp)
100033b4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
100033b8:	e0bfff17 	ldw	r2,-4(fp)
100033bc:	10840070 	cmpltui	r2,r2,4097
100033c0:	1000021e 	bne	r2,zero,100033cc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
100033c4:	00840004 	movi	r2,4096
100033c8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
100033cc:	e0fffe17 	ldw	r3,-8(fp)
100033d0:	e0bfff17 	ldw	r2,-4(fp)
100033d4:	1885883a 	add	r2,r3,r2
100033d8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
100033dc:	e0bffe17 	ldw	r2,-8(fp)
100033e0:	e0bffc15 	stw	r2,-16(fp)
100033e4:	00000506 	br	100033fc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
100033e8:	e0bffc17 	ldw	r2,-16(fp)
100033ec:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
100033f0:	e0bffc17 	ldw	r2,-16(fp)
100033f4:	10800804 	addi	r2,r2,32
100033f8:	e0bffc15 	stw	r2,-16(fp)
100033fc:	e0fffc17 	ldw	r3,-16(fp)
10003400:	e0bffd17 	ldw	r2,-12(fp)
10003404:	18bff836 	bltu	r3,r2,100033e8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
10003408:	e0bffe17 	ldw	r2,-8(fp)
1000340c:	108007cc 	andi	r2,r2,31
10003410:	10000226 	beq	r2,zero,1000341c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
10003414:	e0bffc17 	ldw	r2,-16(fp)
10003418:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
1000341c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
10003420:	0001883a 	nop
10003424:	e037883a 	mov	sp,fp
10003428:	df000017 	ldw	fp,0(sp)
1000342c:	dec00104 	addi	sp,sp,4
10003430:	f800283a 	ret

10003434 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10003434:	defffe04 	addi	sp,sp,-8
10003438:	df000115 	stw	fp,4(sp)
1000343c:	df000104 	addi	fp,sp,4
10003440:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10003444:	e0bfff17 	ldw	r2,-4(fp)
10003448:	10bffe84 	addi	r2,r2,-6
1000344c:	10c00428 	cmpgeui	r3,r2,16
10003450:	18001a1e 	bne	r3,zero,100034bc <alt_exception_cause_generated_bad_addr+0x88>
10003454:	100690ba 	slli	r3,r2,2
10003458:	00840034 	movhi	r2,4096
1000345c:	108d1b04 	addi	r2,r2,13420
10003460:	1885883a 	add	r2,r3,r2
10003464:	10800017 	ldw	r2,0(r2)
10003468:	1000683a 	jmp	r2
1000346c:	100034ac 	andhi	zero,r2,210
10003470:	100034ac 	andhi	zero,r2,210
10003474:	100034bc 	xorhi	zero,r2,210
10003478:	100034bc 	xorhi	zero,r2,210
1000347c:	100034bc 	xorhi	zero,r2,210
10003480:	100034ac 	andhi	zero,r2,210
10003484:	100034b4 	orhi	zero,r2,210
10003488:	100034bc 	xorhi	zero,r2,210
1000348c:	100034ac 	andhi	zero,r2,210
10003490:	100034ac 	andhi	zero,r2,210
10003494:	100034bc 	xorhi	zero,r2,210
10003498:	100034ac 	andhi	zero,r2,210
1000349c:	100034b4 	orhi	zero,r2,210
100034a0:	100034bc 	xorhi	zero,r2,210
100034a4:	100034bc 	xorhi	zero,r2,210
100034a8:	100034ac 	andhi	zero,r2,210
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
100034ac:	00800044 	movi	r2,1
100034b0:	00000306 	br	100034c0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
100034b4:	0005883a 	mov	r2,zero
100034b8:	00000106 	br	100034c0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
100034bc:	0005883a 	mov	r2,zero
  }
}
100034c0:	e037883a 	mov	sp,fp
100034c4:	df000017 	ldw	fp,0(sp)
100034c8:	dec00104 	addi	sp,sp,4
100034cc:	f800283a 	ret

100034d0 <atexit>:
100034d0:	200b883a 	mov	r5,r4
100034d4:	000f883a 	mov	r7,zero
100034d8:	000d883a 	mov	r6,zero
100034dc:	0009883a 	mov	r4,zero
100034e0:	0004f1c1 	jmpi	10004f1c <__register_exitproc>

100034e4 <exit>:
100034e4:	defffe04 	addi	sp,sp,-8
100034e8:	000b883a 	mov	r5,zero
100034ec:	dc000015 	stw	r16,0(sp)
100034f0:	dfc00115 	stw	ra,4(sp)
100034f4:	2021883a 	mov	r16,r4
100034f8:	00050340 	call	10005034 <__call_exitprocs>
100034fc:	00840074 	movhi	r2,4097
10003500:	10a24904 	addi	r2,r2,-30428
10003504:	11000017 	ldw	r4,0(r2)
10003508:	20800f17 	ldw	r2,60(r4)
1000350c:	10000126 	beq	r2,zero,10003514 <exit+0x30>
10003510:	103ee83a 	callr	r2
10003514:	8009883a 	mov	r4,r16
10003518:	00066b40 	call	100066b4 <_exit>

1000351c <_fputs_r>:
1000351c:	defff804 	addi	sp,sp,-32
10003520:	dc400615 	stw	r17,24(sp)
10003524:	2023883a 	mov	r17,r4
10003528:	2809883a 	mov	r4,r5
1000352c:	dc000515 	stw	r16,20(sp)
10003530:	dfc00715 	stw	ra,28(sp)
10003534:	3021883a 	mov	r16,r6
10003538:	d9400315 	stw	r5,12(sp)
1000353c:	0004d300 	call	10004d30 <strlen>
10003540:	d8800215 	stw	r2,8(sp)
10003544:	d8800415 	stw	r2,16(sp)
10003548:	d8800304 	addi	r2,sp,12
1000354c:	d8800015 	stw	r2,0(sp)
10003550:	00800044 	movi	r2,1
10003554:	d8800115 	stw	r2,4(sp)
10003558:	88000226 	beq	r17,zero,10003564 <_fputs_r+0x48>
1000355c:	88800e17 	ldw	r2,56(r17)
10003560:	10001226 	beq	r2,zero,100035ac <_fputs_r+0x90>
10003564:	8080030b 	ldhu	r2,12(r16)
10003568:	10c8000c 	andi	r3,r2,8192
1000356c:	1800061e 	bne	r3,zero,10003588 <_fputs_r+0x6c>
10003570:	81001917 	ldw	r4,100(r16)
10003574:	00f7ffc4 	movi	r3,-8193
10003578:	10880014 	ori	r2,r2,8192
1000357c:	20c6703a 	and	r3,r4,r3
10003580:	8080030d 	sth	r2,12(r16)
10003584:	80c01915 	stw	r3,100(r16)
10003588:	d80d883a 	mov	r6,sp
1000358c:	800b883a 	mov	r5,r16
10003590:	8809883a 	mov	r4,r17
10003594:	00035d00 	call	100035d0 <__sfvwrite_r>
10003598:	dfc00717 	ldw	ra,28(sp)
1000359c:	dc400617 	ldw	r17,24(sp)
100035a0:	dc000517 	ldw	r16,20(sp)
100035a4:	dec00804 	addi	sp,sp,32
100035a8:	f800283a 	ret
100035ac:	8809883a 	mov	r4,r17
100035b0:	00057ac0 	call	100057ac <__sinit>
100035b4:	003feb06 	br	10003564 <_fputs_r+0x48>

100035b8 <fputs>:
100035b8:	00840074 	movhi	r2,4097
100035bc:	10a24a04 	addi	r2,r2,-30424
100035c0:	280d883a 	mov	r6,r5
100035c4:	200b883a 	mov	r5,r4
100035c8:	11000017 	ldw	r4,0(r2)
100035cc:	000351c1 	jmpi	1000351c <_fputs_r>

100035d0 <__sfvwrite_r>:
100035d0:	30800217 	ldw	r2,8(r6)
100035d4:	10006726 	beq	r2,zero,10003774 <__sfvwrite_r+0x1a4>
100035d8:	28c0030b 	ldhu	r3,12(r5)
100035dc:	defff404 	addi	sp,sp,-48
100035e0:	dd400715 	stw	r21,28(sp)
100035e4:	dd000615 	stw	r20,24(sp)
100035e8:	dc000215 	stw	r16,8(sp)
100035ec:	dfc00b15 	stw	ra,44(sp)
100035f0:	df000a15 	stw	fp,40(sp)
100035f4:	ddc00915 	stw	r23,36(sp)
100035f8:	dd800815 	stw	r22,32(sp)
100035fc:	dcc00515 	stw	r19,20(sp)
10003600:	dc800415 	stw	r18,16(sp)
10003604:	dc400315 	stw	r17,12(sp)
10003608:	1880020c 	andi	r2,r3,8
1000360c:	2821883a 	mov	r16,r5
10003610:	202b883a 	mov	r21,r4
10003614:	3029883a 	mov	r20,r6
10003618:	10002726 	beq	r2,zero,100036b8 <__sfvwrite_r+0xe8>
1000361c:	28800417 	ldw	r2,16(r5)
10003620:	10002526 	beq	r2,zero,100036b8 <__sfvwrite_r+0xe8>
10003624:	1880008c 	andi	r2,r3,2
10003628:	a4400017 	ldw	r17,0(r20)
1000362c:	10002a26 	beq	r2,zero,100036d8 <__sfvwrite_r+0x108>
10003630:	05a00034 	movhi	r22,32768
10003634:	0027883a 	mov	r19,zero
10003638:	0025883a 	mov	r18,zero
1000363c:	b5bf0004 	addi	r22,r22,-1024
10003640:	980d883a 	mov	r6,r19
10003644:	a809883a 	mov	r4,r21
10003648:	90004626 	beq	r18,zero,10003764 <__sfvwrite_r+0x194>
1000364c:	900f883a 	mov	r7,r18
10003650:	b480022e 	bgeu	r22,r18,1000365c <__sfvwrite_r+0x8c>
10003654:	01e00034 	movhi	r7,32768
10003658:	39ff0004 	addi	r7,r7,-1024
1000365c:	80800917 	ldw	r2,36(r16)
10003660:	81400717 	ldw	r5,28(r16)
10003664:	103ee83a 	callr	r2
10003668:	0080570e 	bge	zero,r2,100037c8 <__sfvwrite_r+0x1f8>
1000366c:	a0c00217 	ldw	r3,8(r20)
10003670:	98a7883a 	add	r19,r19,r2
10003674:	90a5c83a 	sub	r18,r18,r2
10003678:	1885c83a 	sub	r2,r3,r2
1000367c:	a0800215 	stw	r2,8(r20)
10003680:	103fef1e 	bne	r2,zero,10003640 <__sfvwrite_r+0x70>
10003684:	0005883a 	mov	r2,zero
10003688:	dfc00b17 	ldw	ra,44(sp)
1000368c:	df000a17 	ldw	fp,40(sp)
10003690:	ddc00917 	ldw	r23,36(sp)
10003694:	dd800817 	ldw	r22,32(sp)
10003698:	dd400717 	ldw	r21,28(sp)
1000369c:	dd000617 	ldw	r20,24(sp)
100036a0:	dcc00517 	ldw	r19,20(sp)
100036a4:	dc800417 	ldw	r18,16(sp)
100036a8:	dc400317 	ldw	r17,12(sp)
100036ac:	dc000217 	ldw	r16,8(sp)
100036b0:	dec00c04 	addi	sp,sp,48
100036b4:	f800283a 	ret
100036b8:	800b883a 	mov	r5,r16
100036bc:	a809883a 	mov	r4,r21
100036c0:	0004dc80 	call	10004dc8 <__swsetup_r>
100036c4:	1000eb1e 	bne	r2,zero,10003a74 <__sfvwrite_r+0x4a4>
100036c8:	80c0030b 	ldhu	r3,12(r16)
100036cc:	a4400017 	ldw	r17,0(r20)
100036d0:	1880008c 	andi	r2,r3,2
100036d4:	103fd61e 	bne	r2,zero,10003630 <__sfvwrite_r+0x60>
100036d8:	1880004c 	andi	r2,r3,1
100036dc:	10003f1e 	bne	r2,zero,100037dc <__sfvwrite_r+0x20c>
100036e0:	0039883a 	mov	fp,zero
100036e4:	0025883a 	mov	r18,zero
100036e8:	90001a26 	beq	r18,zero,10003754 <__sfvwrite_r+0x184>
100036ec:	1880800c 	andi	r2,r3,512
100036f0:	84c00217 	ldw	r19,8(r16)
100036f4:	10002126 	beq	r2,zero,1000377c <__sfvwrite_r+0x1ac>
100036f8:	982f883a 	mov	r23,r19
100036fc:	94c09336 	bltu	r18,r19,1000394c <__sfvwrite_r+0x37c>
10003700:	1881200c 	andi	r2,r3,1152
10003704:	10009e1e 	bne	r2,zero,10003980 <__sfvwrite_r+0x3b0>
10003708:	81000017 	ldw	r4,0(r16)
1000370c:	b80d883a 	mov	r6,r23
10003710:	e00b883a 	mov	r5,fp
10003714:	00045400 	call	10004540 <memmove>
10003718:	80c00217 	ldw	r3,8(r16)
1000371c:	81000017 	ldw	r4,0(r16)
10003720:	9005883a 	mov	r2,r18
10003724:	1ce7c83a 	sub	r19,r3,r19
10003728:	25cf883a 	add	r7,r4,r23
1000372c:	84c00215 	stw	r19,8(r16)
10003730:	81c00015 	stw	r7,0(r16)
10003734:	a0c00217 	ldw	r3,8(r20)
10003738:	e0b9883a 	add	fp,fp,r2
1000373c:	90a5c83a 	sub	r18,r18,r2
10003740:	18a7c83a 	sub	r19,r3,r2
10003744:	a4c00215 	stw	r19,8(r20)
10003748:	983fce26 	beq	r19,zero,10003684 <__sfvwrite_r+0xb4>
1000374c:	80c0030b 	ldhu	r3,12(r16)
10003750:	903fe61e 	bne	r18,zero,100036ec <__sfvwrite_r+0x11c>
10003754:	8f000017 	ldw	fp,0(r17)
10003758:	8c800117 	ldw	r18,4(r17)
1000375c:	8c400204 	addi	r17,r17,8
10003760:	003fe106 	br	100036e8 <__sfvwrite_r+0x118>
10003764:	8cc00017 	ldw	r19,0(r17)
10003768:	8c800117 	ldw	r18,4(r17)
1000376c:	8c400204 	addi	r17,r17,8
10003770:	003fb306 	br	10003640 <__sfvwrite_r+0x70>
10003774:	0005883a 	mov	r2,zero
10003778:	f800283a 	ret
1000377c:	81000017 	ldw	r4,0(r16)
10003780:	80800417 	ldw	r2,16(r16)
10003784:	11005736 	bltu	r2,r4,100038e4 <__sfvwrite_r+0x314>
10003788:	85c00517 	ldw	r23,20(r16)
1000378c:	95c05536 	bltu	r18,r23,100038e4 <__sfvwrite_r+0x314>
10003790:	00a00034 	movhi	r2,32768
10003794:	10bfffc4 	addi	r2,r2,-1
10003798:	9009883a 	mov	r4,r18
1000379c:	1480012e 	bgeu	r2,r18,100037a4 <__sfvwrite_r+0x1d4>
100037a0:	1009883a 	mov	r4,r2
100037a4:	b80b883a 	mov	r5,r23
100037a8:	00065000 	call	10006500 <__divsi3>
100037ac:	15cf383a 	mul	r7,r2,r23
100037b0:	81400717 	ldw	r5,28(r16)
100037b4:	80800917 	ldw	r2,36(r16)
100037b8:	e00d883a 	mov	r6,fp
100037bc:	a809883a 	mov	r4,r21
100037c0:	103ee83a 	callr	r2
100037c4:	00bfdb16 	blt	zero,r2,10003734 <__sfvwrite_r+0x164>
100037c8:	8080030b 	ldhu	r2,12(r16)
100037cc:	10801014 	ori	r2,r2,64
100037d0:	8080030d 	sth	r2,12(r16)
100037d4:	00bfffc4 	movi	r2,-1
100037d8:	003fab06 	br	10003688 <__sfvwrite_r+0xb8>
100037dc:	0027883a 	mov	r19,zero
100037e0:	0011883a 	mov	r8,zero
100037e4:	0039883a 	mov	fp,zero
100037e8:	0025883a 	mov	r18,zero
100037ec:	90001f26 	beq	r18,zero,1000386c <__sfvwrite_r+0x29c>
100037f0:	40005a26 	beq	r8,zero,1000395c <__sfvwrite_r+0x38c>
100037f4:	982d883a 	mov	r22,r19
100037f8:	94c0012e 	bgeu	r18,r19,10003800 <__sfvwrite_r+0x230>
100037fc:	902d883a 	mov	r22,r18
10003800:	81000017 	ldw	r4,0(r16)
10003804:	80800417 	ldw	r2,16(r16)
10003808:	b02f883a 	mov	r23,r22
1000380c:	81c00517 	ldw	r7,20(r16)
10003810:	1100032e 	bgeu	r2,r4,10003820 <__sfvwrite_r+0x250>
10003814:	80c00217 	ldw	r3,8(r16)
10003818:	38c7883a 	add	r3,r7,r3
1000381c:	1d801816 	blt	r3,r22,10003880 <__sfvwrite_r+0x2b0>
10003820:	b1c03e16 	blt	r22,r7,1000391c <__sfvwrite_r+0x34c>
10003824:	80800917 	ldw	r2,36(r16)
10003828:	81400717 	ldw	r5,28(r16)
1000382c:	e00d883a 	mov	r6,fp
10003830:	da000115 	stw	r8,4(sp)
10003834:	a809883a 	mov	r4,r21
10003838:	103ee83a 	callr	r2
1000383c:	102f883a 	mov	r23,r2
10003840:	da000117 	ldw	r8,4(sp)
10003844:	00bfe00e 	bge	zero,r2,100037c8 <__sfvwrite_r+0x1f8>
10003848:	9de7c83a 	sub	r19,r19,r23
1000384c:	98001f26 	beq	r19,zero,100038cc <__sfvwrite_r+0x2fc>
10003850:	a0800217 	ldw	r2,8(r20)
10003854:	e5f9883a 	add	fp,fp,r23
10003858:	95e5c83a 	sub	r18,r18,r23
1000385c:	15efc83a 	sub	r23,r2,r23
10003860:	a5c00215 	stw	r23,8(r20)
10003864:	b83f8726 	beq	r23,zero,10003684 <__sfvwrite_r+0xb4>
10003868:	903fe11e 	bne	r18,zero,100037f0 <__sfvwrite_r+0x220>
1000386c:	8f000017 	ldw	fp,0(r17)
10003870:	8c800117 	ldw	r18,4(r17)
10003874:	0011883a 	mov	r8,zero
10003878:	8c400204 	addi	r17,r17,8
1000387c:	003fdb06 	br	100037ec <__sfvwrite_r+0x21c>
10003880:	180d883a 	mov	r6,r3
10003884:	e00b883a 	mov	r5,fp
10003888:	da000115 	stw	r8,4(sp)
1000388c:	d8c00015 	stw	r3,0(sp)
10003890:	00045400 	call	10004540 <memmove>
10003894:	d8c00017 	ldw	r3,0(sp)
10003898:	80800017 	ldw	r2,0(r16)
1000389c:	800b883a 	mov	r5,r16
100038a0:	a809883a 	mov	r4,r21
100038a4:	10c5883a 	add	r2,r2,r3
100038a8:	80800015 	stw	r2,0(r16)
100038ac:	d8c00015 	stw	r3,0(sp)
100038b0:	00053d00 	call	100053d0 <_fflush_r>
100038b4:	d8c00017 	ldw	r3,0(sp)
100038b8:	da000117 	ldw	r8,4(sp)
100038bc:	103fc21e 	bne	r2,zero,100037c8 <__sfvwrite_r+0x1f8>
100038c0:	182f883a 	mov	r23,r3
100038c4:	9de7c83a 	sub	r19,r19,r23
100038c8:	983fe11e 	bne	r19,zero,10003850 <__sfvwrite_r+0x280>
100038cc:	800b883a 	mov	r5,r16
100038d0:	a809883a 	mov	r4,r21
100038d4:	00053d00 	call	100053d0 <_fflush_r>
100038d8:	103fbb1e 	bne	r2,zero,100037c8 <__sfvwrite_r+0x1f8>
100038dc:	0011883a 	mov	r8,zero
100038e0:	003fdb06 	br	10003850 <__sfvwrite_r+0x280>
100038e4:	94c0012e 	bgeu	r18,r19,100038ec <__sfvwrite_r+0x31c>
100038e8:	9027883a 	mov	r19,r18
100038ec:	980d883a 	mov	r6,r19
100038f0:	e00b883a 	mov	r5,fp
100038f4:	00045400 	call	10004540 <memmove>
100038f8:	80800217 	ldw	r2,8(r16)
100038fc:	80c00017 	ldw	r3,0(r16)
10003900:	14c5c83a 	sub	r2,r2,r19
10003904:	1cc7883a 	add	r3,r3,r19
10003908:	80800215 	stw	r2,8(r16)
1000390c:	80c00015 	stw	r3,0(r16)
10003910:	10004326 	beq	r2,zero,10003a20 <__sfvwrite_r+0x450>
10003914:	9805883a 	mov	r2,r19
10003918:	003f8606 	br	10003734 <__sfvwrite_r+0x164>
1000391c:	b00d883a 	mov	r6,r22
10003920:	e00b883a 	mov	r5,fp
10003924:	da000115 	stw	r8,4(sp)
10003928:	00045400 	call	10004540 <memmove>
1000392c:	80800217 	ldw	r2,8(r16)
10003930:	80c00017 	ldw	r3,0(r16)
10003934:	da000117 	ldw	r8,4(sp)
10003938:	1585c83a 	sub	r2,r2,r22
1000393c:	1dad883a 	add	r22,r3,r22
10003940:	80800215 	stw	r2,8(r16)
10003944:	85800015 	stw	r22,0(r16)
10003948:	003fbf06 	br	10003848 <__sfvwrite_r+0x278>
1000394c:	81000017 	ldw	r4,0(r16)
10003950:	9027883a 	mov	r19,r18
10003954:	902f883a 	mov	r23,r18
10003958:	003f6c06 	br	1000370c <__sfvwrite_r+0x13c>
1000395c:	900d883a 	mov	r6,r18
10003960:	01400284 	movi	r5,10
10003964:	e009883a 	mov	r4,fp
10003968:	00042980 	call	10004298 <memchr>
1000396c:	10003e26 	beq	r2,zero,10003a68 <__sfvwrite_r+0x498>
10003970:	10800044 	addi	r2,r2,1
10003974:	1727c83a 	sub	r19,r2,fp
10003978:	02000044 	movi	r8,1
1000397c:	003f9d06 	br	100037f4 <__sfvwrite_r+0x224>
10003980:	80800517 	ldw	r2,20(r16)
10003984:	81400417 	ldw	r5,16(r16)
10003988:	81c00017 	ldw	r7,0(r16)
1000398c:	10a7883a 	add	r19,r2,r2
10003990:	9885883a 	add	r2,r19,r2
10003994:	1026d7fa 	srli	r19,r2,31
10003998:	396dc83a 	sub	r22,r7,r5
1000399c:	b1000044 	addi	r4,r22,1
100039a0:	9885883a 	add	r2,r19,r2
100039a4:	1027d07a 	srai	r19,r2,1
100039a8:	2485883a 	add	r2,r4,r18
100039ac:	980d883a 	mov	r6,r19
100039b0:	9880022e 	bgeu	r19,r2,100039bc <__sfvwrite_r+0x3ec>
100039b4:	1027883a 	mov	r19,r2
100039b8:	100d883a 	mov	r6,r2
100039bc:	18c1000c 	andi	r3,r3,1024
100039c0:	18001c26 	beq	r3,zero,10003a34 <__sfvwrite_r+0x464>
100039c4:	300b883a 	mov	r5,r6
100039c8:	a809883a 	mov	r4,r21
100039cc:	0003a8c0 	call	10003a8c <_malloc_r>
100039d0:	102f883a 	mov	r23,r2
100039d4:	10002926 	beq	r2,zero,10003a7c <__sfvwrite_r+0x4ac>
100039d8:	81400417 	ldw	r5,16(r16)
100039dc:	b00d883a 	mov	r6,r22
100039e0:	1009883a 	mov	r4,r2
100039e4:	00043f80 	call	100043f8 <memcpy>
100039e8:	8080030b 	ldhu	r2,12(r16)
100039ec:	00fedfc4 	movi	r3,-1153
100039f0:	10c4703a 	and	r2,r2,r3
100039f4:	10802014 	ori	r2,r2,128
100039f8:	8080030d 	sth	r2,12(r16)
100039fc:	bd89883a 	add	r4,r23,r22
10003a00:	9d8fc83a 	sub	r7,r19,r22
10003a04:	85c00415 	stw	r23,16(r16)
10003a08:	84c00515 	stw	r19,20(r16)
10003a0c:	81000015 	stw	r4,0(r16)
10003a10:	9027883a 	mov	r19,r18
10003a14:	81c00215 	stw	r7,8(r16)
10003a18:	902f883a 	mov	r23,r18
10003a1c:	003f3b06 	br	1000370c <__sfvwrite_r+0x13c>
10003a20:	800b883a 	mov	r5,r16
10003a24:	a809883a 	mov	r4,r21
10003a28:	00053d00 	call	100053d0 <_fflush_r>
10003a2c:	103fb926 	beq	r2,zero,10003914 <__sfvwrite_r+0x344>
10003a30:	003f6506 	br	100037c8 <__sfvwrite_r+0x1f8>
10003a34:	a809883a 	mov	r4,r21
10003a38:	000469c0 	call	1000469c <_realloc_r>
10003a3c:	102f883a 	mov	r23,r2
10003a40:	103fee1e 	bne	r2,zero,100039fc <__sfvwrite_r+0x42c>
10003a44:	81400417 	ldw	r5,16(r16)
10003a48:	a809883a 	mov	r4,r21
10003a4c:	00059200 	call	10005920 <_free_r>
10003a50:	8080030b 	ldhu	r2,12(r16)
10003a54:	00ffdfc4 	movi	r3,-129
10003a58:	1884703a 	and	r2,r3,r2
10003a5c:	00c00304 	movi	r3,12
10003a60:	a8c00015 	stw	r3,0(r21)
10003a64:	003f5906 	br	100037cc <__sfvwrite_r+0x1fc>
10003a68:	94c00044 	addi	r19,r18,1
10003a6c:	02000044 	movi	r8,1
10003a70:	003f6006 	br	100037f4 <__sfvwrite_r+0x224>
10003a74:	00bfffc4 	movi	r2,-1
10003a78:	003f0306 	br	10003688 <__sfvwrite_r+0xb8>
10003a7c:	00800304 	movi	r2,12
10003a80:	a8800015 	stw	r2,0(r21)
10003a84:	8080030b 	ldhu	r2,12(r16)
10003a88:	003f5006 	br	100037cc <__sfvwrite_r+0x1fc>

10003a8c <_malloc_r>:
10003a8c:	defff504 	addi	sp,sp,-44
10003a90:	dc800315 	stw	r18,12(sp)
10003a94:	dfc00a15 	stw	ra,40(sp)
10003a98:	df000915 	stw	fp,36(sp)
10003a9c:	ddc00815 	stw	r23,32(sp)
10003aa0:	dd800715 	stw	r22,28(sp)
10003aa4:	dd400615 	stw	r21,24(sp)
10003aa8:	dd000515 	stw	r20,20(sp)
10003aac:	dcc00415 	stw	r19,16(sp)
10003ab0:	dc400215 	stw	r17,8(sp)
10003ab4:	dc000115 	stw	r16,4(sp)
10003ab8:	288002c4 	addi	r2,r5,11
10003abc:	00c00584 	movi	r3,22
10003ac0:	2025883a 	mov	r18,r4
10003ac4:	18807f2e 	bgeu	r3,r2,10003cc4 <_malloc_r+0x238>
10003ac8:	047ffe04 	movi	r17,-8
10003acc:	1462703a 	and	r17,r2,r17
10003ad0:	8800a316 	blt	r17,zero,10003d60 <_malloc_r+0x2d4>
10003ad4:	8940a236 	bltu	r17,r5,10003d60 <_malloc_r+0x2d4>
10003ad8:	00069c40 	call	100069c4 <__malloc_lock>
10003adc:	00807dc4 	movi	r2,503
10003ae0:	1441e92e 	bgeu	r2,r17,10004288 <_malloc_r+0x7fc>
10003ae4:	8804d27a 	srli	r2,r17,9
10003ae8:	1000a126 	beq	r2,zero,10003d70 <_malloc_r+0x2e4>
10003aec:	00c00104 	movi	r3,4
10003af0:	18811e36 	bltu	r3,r2,10003f6c <_malloc_r+0x4e0>
10003af4:	8804d1ba 	srli	r2,r17,6
10003af8:	12000e44 	addi	r8,r2,57
10003afc:	11c00e04 	addi	r7,r2,56
10003b00:	4209883a 	add	r4,r8,r8
10003b04:	04c40074 	movhi	r19,4097
10003b08:	2109883a 	add	r4,r4,r4
10003b0c:	9ce13e04 	addi	r19,r19,-31496
10003b10:	2109883a 	add	r4,r4,r4
10003b14:	9909883a 	add	r4,r19,r4
10003b18:	24000117 	ldw	r16,4(r4)
10003b1c:	213ffe04 	addi	r4,r4,-8
10003b20:	24009726 	beq	r4,r16,10003d80 <_malloc_r+0x2f4>
10003b24:	80800117 	ldw	r2,4(r16)
10003b28:	01bfff04 	movi	r6,-4
10003b2c:	014003c4 	movi	r5,15
10003b30:	1184703a 	and	r2,r2,r6
10003b34:	1447c83a 	sub	r3,r2,r17
10003b38:	28c00716 	blt	r5,r3,10003b58 <_malloc_r+0xcc>
10003b3c:	1800920e 	bge	r3,zero,10003d88 <_malloc_r+0x2fc>
10003b40:	84000317 	ldw	r16,12(r16)
10003b44:	24008e26 	beq	r4,r16,10003d80 <_malloc_r+0x2f4>
10003b48:	80800117 	ldw	r2,4(r16)
10003b4c:	1184703a 	and	r2,r2,r6
10003b50:	1447c83a 	sub	r3,r2,r17
10003b54:	28fff90e 	bge	r5,r3,10003b3c <_malloc_r+0xb0>
10003b58:	3809883a 	mov	r4,r7
10003b5c:	01840074 	movhi	r6,4097
10003b60:	9c000417 	ldw	r16,16(r19)
10003b64:	31a13e04 	addi	r6,r6,-31496
10003b68:	32000204 	addi	r8,r6,8
10003b6c:	82013426 	beq	r16,r8,10004040 <_malloc_r+0x5b4>
10003b70:	80c00117 	ldw	r3,4(r16)
10003b74:	00bfff04 	movi	r2,-4
10003b78:	188e703a 	and	r7,r3,r2
10003b7c:	3c45c83a 	sub	r2,r7,r17
10003b80:	00c003c4 	movi	r3,15
10003b84:	18811f16 	blt	r3,r2,10004004 <_malloc_r+0x578>
10003b88:	32000515 	stw	r8,20(r6)
10003b8c:	32000415 	stw	r8,16(r6)
10003b90:	10007f0e 	bge	r2,zero,10003d90 <_malloc_r+0x304>
10003b94:	00807fc4 	movi	r2,511
10003b98:	11c0fd36 	bltu	r2,r7,10003f90 <_malloc_r+0x504>
10003b9c:	3806d0fa 	srli	r3,r7,3
10003ba0:	01c00044 	movi	r7,1
10003ba4:	30800117 	ldw	r2,4(r6)
10003ba8:	19400044 	addi	r5,r3,1
10003bac:	294b883a 	add	r5,r5,r5
10003bb0:	1807d0ba 	srai	r3,r3,2
10003bb4:	294b883a 	add	r5,r5,r5
10003bb8:	294b883a 	add	r5,r5,r5
10003bbc:	298b883a 	add	r5,r5,r6
10003bc0:	38c6983a 	sll	r3,r7,r3
10003bc4:	29c00017 	ldw	r7,0(r5)
10003bc8:	2a7ffe04 	addi	r9,r5,-8
10003bcc:	1886b03a 	or	r3,r3,r2
10003bd0:	82400315 	stw	r9,12(r16)
10003bd4:	81c00215 	stw	r7,8(r16)
10003bd8:	30c00115 	stw	r3,4(r6)
10003bdc:	2c000015 	stw	r16,0(r5)
10003be0:	3c000315 	stw	r16,12(r7)
10003be4:	2005d0ba 	srai	r2,r4,2
10003be8:	01400044 	movi	r5,1
10003bec:	288a983a 	sll	r5,r5,r2
10003bf0:	19406f36 	bltu	r3,r5,10003db0 <_malloc_r+0x324>
10003bf4:	28c4703a 	and	r2,r5,r3
10003bf8:	10000a1e 	bne	r2,zero,10003c24 <_malloc_r+0x198>
10003bfc:	00bfff04 	movi	r2,-4
10003c00:	294b883a 	add	r5,r5,r5
10003c04:	2088703a 	and	r4,r4,r2
10003c08:	28c4703a 	and	r2,r5,r3
10003c0c:	21000104 	addi	r4,r4,4
10003c10:	1000041e 	bne	r2,zero,10003c24 <_malloc_r+0x198>
10003c14:	294b883a 	add	r5,r5,r5
10003c18:	28c4703a 	and	r2,r5,r3
10003c1c:	21000104 	addi	r4,r4,4
10003c20:	103ffc26 	beq	r2,zero,10003c14 <_malloc_r+0x188>
10003c24:	02bfff04 	movi	r10,-4
10003c28:	024003c4 	movi	r9,15
10003c2c:	21800044 	addi	r6,r4,1
10003c30:	318d883a 	add	r6,r6,r6
10003c34:	318d883a 	add	r6,r6,r6
10003c38:	318d883a 	add	r6,r6,r6
10003c3c:	998d883a 	add	r6,r19,r6
10003c40:	333ffe04 	addi	r12,r6,-8
10003c44:	2017883a 	mov	r11,r4
10003c48:	31800104 	addi	r6,r6,4
10003c4c:	34000017 	ldw	r16,0(r6)
10003c50:	31fffd04 	addi	r7,r6,-12
10003c54:	81c0041e 	bne	r16,r7,10003c68 <_malloc_r+0x1dc>
10003c58:	0000fb06 	br	10004048 <_malloc_r+0x5bc>
10003c5c:	1801030e 	bge	r3,zero,1000406c <_malloc_r+0x5e0>
10003c60:	84000317 	ldw	r16,12(r16)
10003c64:	81c0f826 	beq	r16,r7,10004048 <_malloc_r+0x5bc>
10003c68:	80800117 	ldw	r2,4(r16)
10003c6c:	1284703a 	and	r2,r2,r10
10003c70:	1447c83a 	sub	r3,r2,r17
10003c74:	48fff90e 	bge	r9,r3,10003c5c <_malloc_r+0x1d0>
10003c78:	80800317 	ldw	r2,12(r16)
10003c7c:	81000217 	ldw	r4,8(r16)
10003c80:	89400054 	ori	r5,r17,1
10003c84:	81400115 	stw	r5,4(r16)
10003c88:	20800315 	stw	r2,12(r4)
10003c8c:	11000215 	stw	r4,8(r2)
10003c90:	8463883a 	add	r17,r16,r17
10003c94:	9c400515 	stw	r17,20(r19)
10003c98:	9c400415 	stw	r17,16(r19)
10003c9c:	18800054 	ori	r2,r3,1
10003ca0:	88800115 	stw	r2,4(r17)
10003ca4:	8a000315 	stw	r8,12(r17)
10003ca8:	8a000215 	stw	r8,8(r17)
10003cac:	88e3883a 	add	r17,r17,r3
10003cb0:	88c00015 	stw	r3,0(r17)
10003cb4:	9009883a 	mov	r4,r18
10003cb8:	00069e80 	call	100069e8 <__malloc_unlock>
10003cbc:	80800204 	addi	r2,r16,8
10003cc0:	00001b06 	br	10003d30 <_malloc_r+0x2a4>
10003cc4:	04400404 	movi	r17,16
10003cc8:	89402536 	bltu	r17,r5,10003d60 <_malloc_r+0x2d4>
10003ccc:	00069c40 	call	100069c4 <__malloc_lock>
10003cd0:	00800184 	movi	r2,6
10003cd4:	01000084 	movi	r4,2
10003cd8:	04c40074 	movhi	r19,4097
10003cdc:	1085883a 	add	r2,r2,r2
10003ce0:	9ce13e04 	addi	r19,r19,-31496
10003ce4:	1085883a 	add	r2,r2,r2
10003ce8:	9885883a 	add	r2,r19,r2
10003cec:	14000117 	ldw	r16,4(r2)
10003cf0:	10fffe04 	addi	r3,r2,-8
10003cf4:	80c0d926 	beq	r16,r3,1000405c <_malloc_r+0x5d0>
10003cf8:	80c00117 	ldw	r3,4(r16)
10003cfc:	81000317 	ldw	r4,12(r16)
10003d00:	00bfff04 	movi	r2,-4
10003d04:	1884703a 	and	r2,r3,r2
10003d08:	81400217 	ldw	r5,8(r16)
10003d0c:	8085883a 	add	r2,r16,r2
10003d10:	10c00117 	ldw	r3,4(r2)
10003d14:	29000315 	stw	r4,12(r5)
10003d18:	21400215 	stw	r5,8(r4)
10003d1c:	18c00054 	ori	r3,r3,1
10003d20:	10c00115 	stw	r3,4(r2)
10003d24:	9009883a 	mov	r4,r18
10003d28:	00069e80 	call	100069e8 <__malloc_unlock>
10003d2c:	80800204 	addi	r2,r16,8
10003d30:	dfc00a17 	ldw	ra,40(sp)
10003d34:	df000917 	ldw	fp,36(sp)
10003d38:	ddc00817 	ldw	r23,32(sp)
10003d3c:	dd800717 	ldw	r22,28(sp)
10003d40:	dd400617 	ldw	r21,24(sp)
10003d44:	dd000517 	ldw	r20,20(sp)
10003d48:	dcc00417 	ldw	r19,16(sp)
10003d4c:	dc800317 	ldw	r18,12(sp)
10003d50:	dc400217 	ldw	r17,8(sp)
10003d54:	dc000117 	ldw	r16,4(sp)
10003d58:	dec00b04 	addi	sp,sp,44
10003d5c:	f800283a 	ret
10003d60:	00800304 	movi	r2,12
10003d64:	90800015 	stw	r2,0(r18)
10003d68:	0005883a 	mov	r2,zero
10003d6c:	003ff006 	br	10003d30 <_malloc_r+0x2a4>
10003d70:	01002004 	movi	r4,128
10003d74:	02001004 	movi	r8,64
10003d78:	01c00fc4 	movi	r7,63
10003d7c:	003f6106 	br	10003b04 <_malloc_r+0x78>
10003d80:	4009883a 	mov	r4,r8
10003d84:	003f7506 	br	10003b5c <_malloc_r+0xd0>
10003d88:	81000317 	ldw	r4,12(r16)
10003d8c:	003fde06 	br	10003d08 <_malloc_r+0x27c>
10003d90:	81c5883a 	add	r2,r16,r7
10003d94:	11400117 	ldw	r5,4(r2)
10003d98:	9009883a 	mov	r4,r18
10003d9c:	29400054 	ori	r5,r5,1
10003da0:	11400115 	stw	r5,4(r2)
10003da4:	00069e80 	call	100069e8 <__malloc_unlock>
10003da8:	80800204 	addi	r2,r16,8
10003dac:	003fe006 	br	10003d30 <_malloc_r+0x2a4>
10003db0:	9c000217 	ldw	r16,8(r19)
10003db4:	00bfff04 	movi	r2,-4
10003db8:	85800117 	ldw	r22,4(r16)
10003dbc:	b0ac703a 	and	r22,r22,r2
10003dc0:	b4400336 	bltu	r22,r17,10003dd0 <_malloc_r+0x344>
10003dc4:	b445c83a 	sub	r2,r22,r17
10003dc8:	00c003c4 	movi	r3,15
10003dcc:	18805d16 	blt	r3,r2,10003f44 <_malloc_r+0x4b8>
10003dd0:	05c40074 	movhi	r23,4097
10003dd4:	00840074 	movhi	r2,4097
10003dd8:	10a92b04 	addi	r2,r2,-23380
10003ddc:	bde24b04 	addi	r23,r23,-30420
10003de0:	15400017 	ldw	r21,0(r2)
10003de4:	b8c00017 	ldw	r3,0(r23)
10003de8:	00bfffc4 	movi	r2,-1
10003dec:	858d883a 	add	r6,r16,r22
10003df0:	8d6b883a 	add	r21,r17,r21
10003df4:	1880ea26 	beq	r3,r2,100041a0 <_malloc_r+0x714>
10003df8:	ad4403c4 	addi	r21,r21,4111
10003dfc:	00bc0004 	movi	r2,-4096
10003e00:	a8aa703a 	and	r21,r21,r2
10003e04:	a80b883a 	mov	r5,r21
10003e08:	9009883a 	mov	r4,r18
10003e0c:	d9800015 	stw	r6,0(sp)
10003e10:	0004c000 	call	10004c00 <_sbrk_r>
10003e14:	1029883a 	mov	r20,r2
10003e18:	00bfffc4 	movi	r2,-1
10003e1c:	d9800017 	ldw	r6,0(sp)
10003e20:	a080e826 	beq	r20,r2,100041c4 <_malloc_r+0x738>
10003e24:	a180a636 	bltu	r20,r6,100040c0 <_malloc_r+0x634>
10003e28:	07040074 	movhi	fp,4097
10003e2c:	e7292c04 	addi	fp,fp,-23376
10003e30:	e0800017 	ldw	r2,0(fp)
10003e34:	a887883a 	add	r3,r21,r2
10003e38:	e0c00015 	stw	r3,0(fp)
10003e3c:	3500e626 	beq	r6,r20,100041d8 <_malloc_r+0x74c>
10003e40:	b9000017 	ldw	r4,0(r23)
10003e44:	00bfffc4 	movi	r2,-1
10003e48:	2080ee26 	beq	r4,r2,10004204 <_malloc_r+0x778>
10003e4c:	a185c83a 	sub	r2,r20,r6
10003e50:	10c5883a 	add	r2,r2,r3
10003e54:	e0800015 	stw	r2,0(fp)
10003e58:	a0c001cc 	andi	r3,r20,7
10003e5c:	1800bc26 	beq	r3,zero,10004150 <_malloc_r+0x6c4>
10003e60:	a0e9c83a 	sub	r20,r20,r3
10003e64:	00840204 	movi	r2,4104
10003e68:	a5000204 	addi	r20,r20,8
10003e6c:	10c7c83a 	sub	r3,r2,r3
10003e70:	a545883a 	add	r2,r20,r21
10003e74:	1083ffcc 	andi	r2,r2,4095
10003e78:	18abc83a 	sub	r21,r3,r2
10003e7c:	a80b883a 	mov	r5,r21
10003e80:	9009883a 	mov	r4,r18
10003e84:	0004c000 	call	10004c00 <_sbrk_r>
10003e88:	00ffffc4 	movi	r3,-1
10003e8c:	10c0e126 	beq	r2,r3,10004214 <_malloc_r+0x788>
10003e90:	1505c83a 	sub	r2,r2,r20
10003e94:	1545883a 	add	r2,r2,r21
10003e98:	10800054 	ori	r2,r2,1
10003e9c:	e0c00017 	ldw	r3,0(fp)
10003ea0:	9d000215 	stw	r20,8(r19)
10003ea4:	a0800115 	stw	r2,4(r20)
10003ea8:	a8c7883a 	add	r3,r21,r3
10003eac:	e0c00015 	stw	r3,0(fp)
10003eb0:	84c00e26 	beq	r16,r19,10003eec <_malloc_r+0x460>
10003eb4:	018003c4 	movi	r6,15
10003eb8:	3580a72e 	bgeu	r6,r22,10004158 <_malloc_r+0x6cc>
10003ebc:	81400117 	ldw	r5,4(r16)
10003ec0:	013ffe04 	movi	r4,-8
10003ec4:	b0bffd04 	addi	r2,r22,-12
10003ec8:	1104703a 	and	r2,r2,r4
10003ecc:	2900004c 	andi	r4,r5,1
10003ed0:	2088b03a 	or	r4,r4,r2
10003ed4:	81000115 	stw	r4,4(r16)
10003ed8:	01400144 	movi	r5,5
10003edc:	8089883a 	add	r4,r16,r2
10003ee0:	21400115 	stw	r5,4(r4)
10003ee4:	21400215 	stw	r5,8(r4)
10003ee8:	3080cd36 	bltu	r6,r2,10004220 <_malloc_r+0x794>
10003eec:	00840074 	movhi	r2,4097
10003ef0:	10a92a04 	addi	r2,r2,-23384
10003ef4:	11000017 	ldw	r4,0(r2)
10003ef8:	20c0012e 	bgeu	r4,r3,10003f00 <_malloc_r+0x474>
10003efc:	10c00015 	stw	r3,0(r2)
10003f00:	00840074 	movhi	r2,4097
10003f04:	10a92904 	addi	r2,r2,-23388
10003f08:	11000017 	ldw	r4,0(r2)
10003f0c:	9c000217 	ldw	r16,8(r19)
10003f10:	20c0012e 	bgeu	r4,r3,10003f18 <_malloc_r+0x48c>
10003f14:	10c00015 	stw	r3,0(r2)
10003f18:	80c00117 	ldw	r3,4(r16)
10003f1c:	00bfff04 	movi	r2,-4
10003f20:	1886703a 	and	r3,r3,r2
10003f24:	1c45c83a 	sub	r2,r3,r17
10003f28:	1c400236 	bltu	r3,r17,10003f34 <_malloc_r+0x4a8>
10003f2c:	00c003c4 	movi	r3,15
10003f30:	18800416 	blt	r3,r2,10003f44 <_malloc_r+0x4b8>
10003f34:	9009883a 	mov	r4,r18
10003f38:	00069e80 	call	100069e8 <__malloc_unlock>
10003f3c:	0005883a 	mov	r2,zero
10003f40:	003f7b06 	br	10003d30 <_malloc_r+0x2a4>
10003f44:	88c00054 	ori	r3,r17,1
10003f48:	80c00115 	stw	r3,4(r16)
10003f4c:	8463883a 	add	r17,r16,r17
10003f50:	10800054 	ori	r2,r2,1
10003f54:	9c400215 	stw	r17,8(r19)
10003f58:	88800115 	stw	r2,4(r17)
10003f5c:	9009883a 	mov	r4,r18
10003f60:	00069e80 	call	100069e8 <__malloc_unlock>
10003f64:	80800204 	addi	r2,r16,8
10003f68:	003f7106 	br	10003d30 <_malloc_r+0x2a4>
10003f6c:	00c00504 	movi	r3,20
10003f70:	18804a2e 	bgeu	r3,r2,1000409c <_malloc_r+0x610>
10003f74:	00c01504 	movi	r3,84
10003f78:	18806e36 	bltu	r3,r2,10004134 <_malloc_r+0x6a8>
10003f7c:	8804d33a 	srli	r2,r17,12
10003f80:	12001bc4 	addi	r8,r2,111
10003f84:	11c01b84 	addi	r7,r2,110
10003f88:	4209883a 	add	r4,r8,r8
10003f8c:	003edd06 	br	10003b04 <_malloc_r+0x78>
10003f90:	3804d27a 	srli	r2,r7,9
10003f94:	00c00104 	movi	r3,4
10003f98:	1880442e 	bgeu	r3,r2,100040ac <_malloc_r+0x620>
10003f9c:	00c00504 	movi	r3,20
10003fa0:	18808136 	bltu	r3,r2,100041a8 <_malloc_r+0x71c>
10003fa4:	11401704 	addi	r5,r2,92
10003fa8:	10c016c4 	addi	r3,r2,91
10003fac:	294b883a 	add	r5,r5,r5
10003fb0:	294b883a 	add	r5,r5,r5
10003fb4:	294b883a 	add	r5,r5,r5
10003fb8:	994b883a 	add	r5,r19,r5
10003fbc:	28800017 	ldw	r2,0(r5)
10003fc0:	01840074 	movhi	r6,4097
10003fc4:	297ffe04 	addi	r5,r5,-8
10003fc8:	31a13e04 	addi	r6,r6,-31496
10003fcc:	28806526 	beq	r5,r2,10004164 <_malloc_r+0x6d8>
10003fd0:	01bfff04 	movi	r6,-4
10003fd4:	10c00117 	ldw	r3,4(r2)
10003fd8:	1986703a 	and	r3,r3,r6
10003fdc:	38c0022e 	bgeu	r7,r3,10003fe8 <_malloc_r+0x55c>
10003fe0:	10800217 	ldw	r2,8(r2)
10003fe4:	28bffb1e 	bne	r5,r2,10003fd4 <_malloc_r+0x548>
10003fe8:	11400317 	ldw	r5,12(r2)
10003fec:	98c00117 	ldw	r3,4(r19)
10003ff0:	81400315 	stw	r5,12(r16)
10003ff4:	80800215 	stw	r2,8(r16)
10003ff8:	2c000215 	stw	r16,8(r5)
10003ffc:	14000315 	stw	r16,12(r2)
10004000:	003ef806 	br	10003be4 <_malloc_r+0x158>
10004004:	88c00054 	ori	r3,r17,1
10004008:	80c00115 	stw	r3,4(r16)
1000400c:	8463883a 	add	r17,r16,r17
10004010:	34400515 	stw	r17,20(r6)
10004014:	34400415 	stw	r17,16(r6)
10004018:	10c00054 	ori	r3,r2,1
1000401c:	8a000315 	stw	r8,12(r17)
10004020:	8a000215 	stw	r8,8(r17)
10004024:	88c00115 	stw	r3,4(r17)
10004028:	88a3883a 	add	r17,r17,r2
1000402c:	88800015 	stw	r2,0(r17)
10004030:	9009883a 	mov	r4,r18
10004034:	00069e80 	call	100069e8 <__malloc_unlock>
10004038:	80800204 	addi	r2,r16,8
1000403c:	003f3c06 	br	10003d30 <_malloc_r+0x2a4>
10004040:	30c00117 	ldw	r3,4(r6)
10004044:	003ee706 	br	10003be4 <_malloc_r+0x158>
10004048:	5ac00044 	addi	r11,r11,1
1000404c:	588000cc 	andi	r2,r11,3
10004050:	31800204 	addi	r6,r6,8
10004054:	103efd1e 	bne	r2,zero,10003c4c <_malloc_r+0x1c0>
10004058:	00002406 	br	100040ec <_malloc_r+0x660>
1000405c:	14000317 	ldw	r16,12(r2)
10004060:	143f251e 	bne	r2,r16,10003cf8 <_malloc_r+0x26c>
10004064:	21000084 	addi	r4,r4,2
10004068:	003ebc06 	br	10003b5c <_malloc_r+0xd0>
1000406c:	8085883a 	add	r2,r16,r2
10004070:	10c00117 	ldw	r3,4(r2)
10004074:	81000317 	ldw	r4,12(r16)
10004078:	81400217 	ldw	r5,8(r16)
1000407c:	18c00054 	ori	r3,r3,1
10004080:	10c00115 	stw	r3,4(r2)
10004084:	29000315 	stw	r4,12(r5)
10004088:	21400215 	stw	r5,8(r4)
1000408c:	9009883a 	mov	r4,r18
10004090:	00069e80 	call	100069e8 <__malloc_unlock>
10004094:	80800204 	addi	r2,r16,8
10004098:	003f2506 	br	10003d30 <_malloc_r+0x2a4>
1000409c:	12001704 	addi	r8,r2,92
100040a0:	11c016c4 	addi	r7,r2,91
100040a4:	4209883a 	add	r4,r8,r8
100040a8:	003e9606 	br	10003b04 <_malloc_r+0x78>
100040ac:	3804d1ba 	srli	r2,r7,6
100040b0:	11400e44 	addi	r5,r2,57
100040b4:	10c00e04 	addi	r3,r2,56
100040b8:	294b883a 	add	r5,r5,r5
100040bc:	003fbc06 	br	10003fb0 <_malloc_r+0x524>
100040c0:	84ff5926 	beq	r16,r19,10003e28 <_malloc_r+0x39c>
100040c4:	00840074 	movhi	r2,4097
100040c8:	10a13e04 	addi	r2,r2,-31496
100040cc:	14000217 	ldw	r16,8(r2)
100040d0:	00bfff04 	movi	r2,-4
100040d4:	80c00117 	ldw	r3,4(r16)
100040d8:	1886703a 	and	r3,r3,r2
100040dc:	003f9106 	br	10003f24 <_malloc_r+0x498>
100040e0:	60800217 	ldw	r2,8(r12)
100040e4:	213fffc4 	addi	r4,r4,-1
100040e8:	1300651e 	bne	r2,r12,10004280 <_malloc_r+0x7f4>
100040ec:	208000cc 	andi	r2,r4,3
100040f0:	633ffe04 	addi	r12,r12,-8
100040f4:	103ffa1e 	bne	r2,zero,100040e0 <_malloc_r+0x654>
100040f8:	98800117 	ldw	r2,4(r19)
100040fc:	0146303a 	nor	r3,zero,r5
10004100:	1884703a 	and	r2,r3,r2
10004104:	98800115 	stw	r2,4(r19)
10004108:	294b883a 	add	r5,r5,r5
1000410c:	117f2836 	bltu	r2,r5,10003db0 <_malloc_r+0x324>
10004110:	283f2726 	beq	r5,zero,10003db0 <_malloc_r+0x324>
10004114:	2886703a 	and	r3,r5,r2
10004118:	5809883a 	mov	r4,r11
1000411c:	183ec31e 	bne	r3,zero,10003c2c <_malloc_r+0x1a0>
10004120:	294b883a 	add	r5,r5,r5
10004124:	2886703a 	and	r3,r5,r2
10004128:	21000104 	addi	r4,r4,4
1000412c:	183ffc26 	beq	r3,zero,10004120 <_malloc_r+0x694>
10004130:	003ebe06 	br	10003c2c <_malloc_r+0x1a0>
10004134:	00c05504 	movi	r3,340
10004138:	18801236 	bltu	r3,r2,10004184 <_malloc_r+0x6f8>
1000413c:	8804d3fa 	srli	r2,r17,15
10004140:	12001e04 	addi	r8,r2,120
10004144:	11c01dc4 	addi	r7,r2,119
10004148:	4209883a 	add	r4,r8,r8
1000414c:	003e6d06 	br	10003b04 <_malloc_r+0x78>
10004150:	00c40004 	movi	r3,4096
10004154:	003f4606 	br	10003e70 <_malloc_r+0x3e4>
10004158:	00800044 	movi	r2,1
1000415c:	a0800115 	stw	r2,4(r20)
10004160:	003f7406 	br	10003f34 <_malloc_r+0x4a8>
10004164:	1805d0ba 	srai	r2,r3,2
10004168:	01c00044 	movi	r7,1
1000416c:	30c00117 	ldw	r3,4(r6)
10004170:	388e983a 	sll	r7,r7,r2
10004174:	2805883a 	mov	r2,r5
10004178:	38c6b03a 	or	r3,r7,r3
1000417c:	30c00115 	stw	r3,4(r6)
10004180:	003f9b06 	br	10003ff0 <_malloc_r+0x564>
10004184:	00c15504 	movi	r3,1364
10004188:	18801a36 	bltu	r3,r2,100041f4 <_malloc_r+0x768>
1000418c:	8804d4ba 	srli	r2,r17,18
10004190:	12001f44 	addi	r8,r2,125
10004194:	11c01f04 	addi	r7,r2,124
10004198:	4209883a 	add	r4,r8,r8
1000419c:	003e5906 	br	10003b04 <_malloc_r+0x78>
100041a0:	ad400404 	addi	r21,r21,16
100041a4:	003f1706 	br	10003e04 <_malloc_r+0x378>
100041a8:	00c01504 	movi	r3,84
100041ac:	18802336 	bltu	r3,r2,1000423c <_malloc_r+0x7b0>
100041b0:	3804d33a 	srli	r2,r7,12
100041b4:	11401bc4 	addi	r5,r2,111
100041b8:	10c01b84 	addi	r3,r2,110
100041bc:	294b883a 	add	r5,r5,r5
100041c0:	003f7b06 	br	10003fb0 <_malloc_r+0x524>
100041c4:	9c000217 	ldw	r16,8(r19)
100041c8:	00bfff04 	movi	r2,-4
100041cc:	80c00117 	ldw	r3,4(r16)
100041d0:	1886703a 	and	r3,r3,r2
100041d4:	003f5306 	br	10003f24 <_malloc_r+0x498>
100041d8:	3083ffcc 	andi	r2,r6,4095
100041dc:	103f181e 	bne	r2,zero,10003e40 <_malloc_r+0x3b4>
100041e0:	99000217 	ldw	r4,8(r19)
100041e4:	b545883a 	add	r2,r22,r21
100041e8:	10800054 	ori	r2,r2,1
100041ec:	20800115 	stw	r2,4(r4)
100041f0:	003f3e06 	br	10003eec <_malloc_r+0x460>
100041f4:	01003f84 	movi	r4,254
100041f8:	02001fc4 	movi	r8,127
100041fc:	01c01f84 	movi	r7,126
10004200:	003e4006 	br	10003b04 <_malloc_r+0x78>
10004204:	00840074 	movhi	r2,4097
10004208:	10a24b04 	addi	r2,r2,-30420
1000420c:	15000015 	stw	r20,0(r2)
10004210:	003f1106 	br	10003e58 <_malloc_r+0x3cc>
10004214:	00800044 	movi	r2,1
10004218:	002b883a 	mov	r21,zero
1000421c:	003f1f06 	br	10003e9c <_malloc_r+0x410>
10004220:	81400204 	addi	r5,r16,8
10004224:	9009883a 	mov	r4,r18
10004228:	00059200 	call	10005920 <_free_r>
1000422c:	00840074 	movhi	r2,4097
10004230:	10a92c04 	addi	r2,r2,-23376
10004234:	10c00017 	ldw	r3,0(r2)
10004238:	003f2c06 	br	10003eec <_malloc_r+0x460>
1000423c:	00c05504 	movi	r3,340
10004240:	18800536 	bltu	r3,r2,10004258 <_malloc_r+0x7cc>
10004244:	3804d3fa 	srli	r2,r7,15
10004248:	11401e04 	addi	r5,r2,120
1000424c:	10c01dc4 	addi	r3,r2,119
10004250:	294b883a 	add	r5,r5,r5
10004254:	003f5606 	br	10003fb0 <_malloc_r+0x524>
10004258:	00c15504 	movi	r3,1364
1000425c:	18800536 	bltu	r3,r2,10004274 <_malloc_r+0x7e8>
10004260:	3804d4ba 	srli	r2,r7,18
10004264:	11401f44 	addi	r5,r2,125
10004268:	10c01f04 	addi	r3,r2,124
1000426c:	294b883a 	add	r5,r5,r5
10004270:	003f4f06 	br	10003fb0 <_malloc_r+0x524>
10004274:	01403f84 	movi	r5,254
10004278:	00c01f84 	movi	r3,126
1000427c:	003f4c06 	br	10003fb0 <_malloc_r+0x524>
10004280:	98800117 	ldw	r2,4(r19)
10004284:	003fa006 	br	10004108 <_malloc_r+0x67c>
10004288:	8808d0fa 	srli	r4,r17,3
1000428c:	20800044 	addi	r2,r4,1
10004290:	1085883a 	add	r2,r2,r2
10004294:	003e9006 	br	10003cd8 <_malloc_r+0x24c>

10004298 <memchr>:
10004298:	208000cc 	andi	r2,r4,3
1000429c:	280f883a 	mov	r7,r5
100042a0:	10003426 	beq	r2,zero,10004374 <memchr+0xdc>
100042a4:	30bfffc4 	addi	r2,r6,-1
100042a8:	30001a26 	beq	r6,zero,10004314 <memchr+0x7c>
100042ac:	20c00003 	ldbu	r3,0(r4)
100042b0:	29803fcc 	andi	r6,r5,255
100042b4:	30c0051e 	bne	r6,r3,100042cc <memchr+0x34>
100042b8:	00001806 	br	1000431c <memchr+0x84>
100042bc:	10001526 	beq	r2,zero,10004314 <memchr+0x7c>
100042c0:	20c00003 	ldbu	r3,0(r4)
100042c4:	10bfffc4 	addi	r2,r2,-1
100042c8:	30c01426 	beq	r6,r3,1000431c <memchr+0x84>
100042cc:	21000044 	addi	r4,r4,1
100042d0:	20c000cc 	andi	r3,r4,3
100042d4:	183ff91e 	bne	r3,zero,100042bc <memchr+0x24>
100042d8:	020000c4 	movi	r8,3
100042dc:	40801136 	bltu	r8,r2,10004324 <memchr+0x8c>
100042e0:	10000c26 	beq	r2,zero,10004314 <memchr+0x7c>
100042e4:	20c00003 	ldbu	r3,0(r4)
100042e8:	29403fcc 	andi	r5,r5,255
100042ec:	28c00b26 	beq	r5,r3,1000431c <memchr+0x84>
100042f0:	20c00044 	addi	r3,r4,1
100042f4:	39803fcc 	andi	r6,r7,255
100042f8:	2089883a 	add	r4,r4,r2
100042fc:	00000306 	br	1000430c <memchr+0x74>
10004300:	18c00044 	addi	r3,r3,1
10004304:	197fffc3 	ldbu	r5,-1(r3)
10004308:	31400526 	beq	r6,r5,10004320 <memchr+0x88>
1000430c:	1805883a 	mov	r2,r3
10004310:	20fffb1e 	bne	r4,r3,10004300 <memchr+0x68>
10004314:	0005883a 	mov	r2,zero
10004318:	f800283a 	ret
1000431c:	2005883a 	mov	r2,r4
10004320:	f800283a 	ret
10004324:	28c03fcc 	andi	r3,r5,255
10004328:	1812923a 	slli	r9,r3,8
1000432c:	02ffbff4 	movhi	r11,65279
10004330:	02a02074 	movhi	r10,32897
10004334:	48d2b03a 	or	r9,r9,r3
10004338:	4806943a 	slli	r3,r9,16
1000433c:	5affbfc4 	addi	r11,r11,-257
10004340:	52a02004 	addi	r10,r10,-32640
10004344:	48d2b03a 	or	r9,r9,r3
10004348:	20c00017 	ldw	r3,0(r4)
1000434c:	48c6f03a 	xor	r3,r9,r3
10004350:	1acd883a 	add	r6,r3,r11
10004354:	00c6303a 	nor	r3,zero,r3
10004358:	30c6703a 	and	r3,r6,r3
1000435c:	1a86703a 	and	r3,r3,r10
10004360:	183fe01e 	bne	r3,zero,100042e4 <memchr+0x4c>
10004364:	10bfff04 	addi	r2,r2,-4
10004368:	21000104 	addi	r4,r4,4
1000436c:	40bff636 	bltu	r8,r2,10004348 <memchr+0xb0>
10004370:	003fdb06 	br	100042e0 <memchr+0x48>
10004374:	3005883a 	mov	r2,r6
10004378:	003fd706 	br	100042d8 <memchr+0x40>

1000437c <memcmp>:
1000437c:	01c000c4 	movi	r7,3
10004380:	3980192e 	bgeu	r7,r6,100043e8 <memcmp+0x6c>
10004384:	2144b03a 	or	r2,r4,r5
10004388:	11c4703a 	and	r2,r2,r7
1000438c:	10000f26 	beq	r2,zero,100043cc <memcmp+0x50>
10004390:	20800003 	ldbu	r2,0(r4)
10004394:	28c00003 	ldbu	r3,0(r5)
10004398:	10c0151e 	bne	r2,r3,100043f0 <memcmp+0x74>
1000439c:	31bfff84 	addi	r6,r6,-2
100043a0:	01ffffc4 	movi	r7,-1
100043a4:	00000406 	br	100043b8 <memcmp+0x3c>
100043a8:	20800003 	ldbu	r2,0(r4)
100043ac:	28c00003 	ldbu	r3,0(r5)
100043b0:	31bfffc4 	addi	r6,r6,-1
100043b4:	10c00e1e 	bne	r2,r3,100043f0 <memcmp+0x74>
100043b8:	21000044 	addi	r4,r4,1
100043bc:	29400044 	addi	r5,r5,1
100043c0:	31fff91e 	bne	r6,r7,100043a8 <memcmp+0x2c>
100043c4:	0005883a 	mov	r2,zero
100043c8:	f800283a 	ret
100043cc:	20c00017 	ldw	r3,0(r4)
100043d0:	28800017 	ldw	r2,0(r5)
100043d4:	18bfee1e 	bne	r3,r2,10004390 <memcmp+0x14>
100043d8:	31bfff04 	addi	r6,r6,-4
100043dc:	21000104 	addi	r4,r4,4
100043e0:	29400104 	addi	r5,r5,4
100043e4:	39bff936 	bltu	r7,r6,100043cc <memcmp+0x50>
100043e8:	303fe91e 	bne	r6,zero,10004390 <memcmp+0x14>
100043ec:	003ff506 	br	100043c4 <memcmp+0x48>
100043f0:	10c5c83a 	sub	r2,r2,r3
100043f4:	f800283a 	ret

100043f8 <memcpy>:
100043f8:	defffd04 	addi	sp,sp,-12
100043fc:	dfc00215 	stw	ra,8(sp)
10004400:	dc400115 	stw	r17,4(sp)
10004404:	dc000015 	stw	r16,0(sp)
10004408:	00c003c4 	movi	r3,15
1000440c:	2005883a 	mov	r2,r4
10004410:	1980452e 	bgeu	r3,r6,10004528 <memcpy+0x130>
10004414:	2906b03a 	or	r3,r5,r4
10004418:	18c000cc 	andi	r3,r3,3
1000441c:	1800441e 	bne	r3,zero,10004530 <memcpy+0x138>
10004420:	347ffc04 	addi	r17,r6,-16
10004424:	8822d13a 	srli	r17,r17,4
10004428:	28c00104 	addi	r3,r5,4
1000442c:	23400104 	addi	r13,r4,4
10004430:	8820913a 	slli	r16,r17,4
10004434:	2b000204 	addi	r12,r5,8
10004438:	22c00204 	addi	r11,r4,8
1000443c:	84000504 	addi	r16,r16,20
10004440:	2a800304 	addi	r10,r5,12
10004444:	22400304 	addi	r9,r4,12
10004448:	2c21883a 	add	r16,r5,r16
1000444c:	2811883a 	mov	r8,r5
10004450:	200f883a 	mov	r7,r4
10004454:	41000017 	ldw	r4,0(r8)
10004458:	1fc00017 	ldw	ra,0(r3)
1000445c:	63c00017 	ldw	r15,0(r12)
10004460:	39000015 	stw	r4,0(r7)
10004464:	53800017 	ldw	r14,0(r10)
10004468:	6fc00015 	stw	ra,0(r13)
1000446c:	5bc00015 	stw	r15,0(r11)
10004470:	4b800015 	stw	r14,0(r9)
10004474:	18c00404 	addi	r3,r3,16
10004478:	39c00404 	addi	r7,r7,16
1000447c:	42000404 	addi	r8,r8,16
10004480:	6b400404 	addi	r13,r13,16
10004484:	63000404 	addi	r12,r12,16
10004488:	5ac00404 	addi	r11,r11,16
1000448c:	52800404 	addi	r10,r10,16
10004490:	4a400404 	addi	r9,r9,16
10004494:	1c3fef1e 	bne	r3,r16,10004454 <memcpy+0x5c>
10004498:	89c00044 	addi	r7,r17,1
1000449c:	380e913a 	slli	r7,r7,4
100044a0:	310003cc 	andi	r4,r6,15
100044a4:	02c000c4 	movi	r11,3
100044a8:	11c7883a 	add	r3,r2,r7
100044ac:	29cb883a 	add	r5,r5,r7
100044b0:	5900212e 	bgeu	r11,r4,10004538 <memcpy+0x140>
100044b4:	1813883a 	mov	r9,r3
100044b8:	2811883a 	mov	r8,r5
100044bc:	200f883a 	mov	r7,r4
100044c0:	42800017 	ldw	r10,0(r8)
100044c4:	4a400104 	addi	r9,r9,4
100044c8:	39ffff04 	addi	r7,r7,-4
100044cc:	4abfff15 	stw	r10,-4(r9)
100044d0:	42000104 	addi	r8,r8,4
100044d4:	59fffa36 	bltu	r11,r7,100044c0 <memcpy+0xc8>
100044d8:	213fff04 	addi	r4,r4,-4
100044dc:	2008d0ba 	srli	r4,r4,2
100044e0:	318000cc 	andi	r6,r6,3
100044e4:	21000044 	addi	r4,r4,1
100044e8:	2109883a 	add	r4,r4,r4
100044ec:	2109883a 	add	r4,r4,r4
100044f0:	1907883a 	add	r3,r3,r4
100044f4:	290b883a 	add	r5,r5,r4
100044f8:	30000626 	beq	r6,zero,10004514 <memcpy+0x11c>
100044fc:	198d883a 	add	r6,r3,r6
10004500:	29c00003 	ldbu	r7,0(r5)
10004504:	18c00044 	addi	r3,r3,1
10004508:	29400044 	addi	r5,r5,1
1000450c:	19ffffc5 	stb	r7,-1(r3)
10004510:	19bffb1e 	bne	r3,r6,10004500 <memcpy+0x108>
10004514:	dfc00217 	ldw	ra,8(sp)
10004518:	dc400117 	ldw	r17,4(sp)
1000451c:	dc000017 	ldw	r16,0(sp)
10004520:	dec00304 	addi	sp,sp,12
10004524:	f800283a 	ret
10004528:	2007883a 	mov	r3,r4
1000452c:	003ff206 	br	100044f8 <memcpy+0x100>
10004530:	2007883a 	mov	r3,r4
10004534:	003ff106 	br	100044fc <memcpy+0x104>
10004538:	200d883a 	mov	r6,r4
1000453c:	003fee06 	br	100044f8 <memcpy+0x100>

10004540 <memmove>:
10004540:	2005883a 	mov	r2,r4
10004544:	29000b2e 	bgeu	r5,r4,10004574 <memmove+0x34>
10004548:	298f883a 	add	r7,r5,r6
1000454c:	21c0092e 	bgeu	r4,r7,10004574 <memmove+0x34>
10004550:	2187883a 	add	r3,r4,r6
10004554:	198bc83a 	sub	r5,r3,r6
10004558:	30004826 	beq	r6,zero,1000467c <memmove+0x13c>
1000455c:	39ffffc4 	addi	r7,r7,-1
10004560:	39000003 	ldbu	r4,0(r7)
10004564:	18ffffc4 	addi	r3,r3,-1
10004568:	19000005 	stb	r4,0(r3)
1000456c:	28fffb1e 	bne	r5,r3,1000455c <memmove+0x1c>
10004570:	f800283a 	ret
10004574:	00c003c4 	movi	r3,15
10004578:	1980412e 	bgeu	r3,r6,10004680 <memmove+0x140>
1000457c:	2886b03a 	or	r3,r5,r2
10004580:	18c000cc 	andi	r3,r3,3
10004584:	1800401e 	bne	r3,zero,10004688 <memmove+0x148>
10004588:	33fffc04 	addi	r15,r6,-16
1000458c:	781ed13a 	srli	r15,r15,4
10004590:	28c00104 	addi	r3,r5,4
10004594:	13400104 	addi	r13,r2,4
10004598:	781c913a 	slli	r14,r15,4
1000459c:	2b000204 	addi	r12,r5,8
100045a0:	12c00204 	addi	r11,r2,8
100045a4:	73800504 	addi	r14,r14,20
100045a8:	2a800304 	addi	r10,r5,12
100045ac:	12400304 	addi	r9,r2,12
100045b0:	2b9d883a 	add	r14,r5,r14
100045b4:	2811883a 	mov	r8,r5
100045b8:	100f883a 	mov	r7,r2
100045bc:	41000017 	ldw	r4,0(r8)
100045c0:	39c00404 	addi	r7,r7,16
100045c4:	18c00404 	addi	r3,r3,16
100045c8:	393ffc15 	stw	r4,-16(r7)
100045cc:	193ffc17 	ldw	r4,-16(r3)
100045d0:	6b400404 	addi	r13,r13,16
100045d4:	5ac00404 	addi	r11,r11,16
100045d8:	693ffc15 	stw	r4,-16(r13)
100045dc:	61000017 	ldw	r4,0(r12)
100045e0:	4a400404 	addi	r9,r9,16
100045e4:	42000404 	addi	r8,r8,16
100045e8:	593ffc15 	stw	r4,-16(r11)
100045ec:	51000017 	ldw	r4,0(r10)
100045f0:	63000404 	addi	r12,r12,16
100045f4:	52800404 	addi	r10,r10,16
100045f8:	493ffc15 	stw	r4,-16(r9)
100045fc:	1bbfef1e 	bne	r3,r14,100045bc <memmove+0x7c>
10004600:	79000044 	addi	r4,r15,1
10004604:	2008913a 	slli	r4,r4,4
10004608:	328003cc 	andi	r10,r6,15
1000460c:	02c000c4 	movi	r11,3
10004610:	1107883a 	add	r3,r2,r4
10004614:	290b883a 	add	r5,r5,r4
10004618:	5a801e2e 	bgeu	r11,r10,10004694 <memmove+0x154>
1000461c:	1813883a 	mov	r9,r3
10004620:	2811883a 	mov	r8,r5
10004624:	500f883a 	mov	r7,r10
10004628:	41000017 	ldw	r4,0(r8)
1000462c:	4a400104 	addi	r9,r9,4
10004630:	39ffff04 	addi	r7,r7,-4
10004634:	493fff15 	stw	r4,-4(r9)
10004638:	42000104 	addi	r8,r8,4
1000463c:	59fffa36 	bltu	r11,r7,10004628 <memmove+0xe8>
10004640:	513fff04 	addi	r4,r10,-4
10004644:	2008d0ba 	srli	r4,r4,2
10004648:	318000cc 	andi	r6,r6,3
1000464c:	21000044 	addi	r4,r4,1
10004650:	2109883a 	add	r4,r4,r4
10004654:	2109883a 	add	r4,r4,r4
10004658:	1907883a 	add	r3,r3,r4
1000465c:	290b883a 	add	r5,r5,r4
10004660:	30000b26 	beq	r6,zero,10004690 <memmove+0x150>
10004664:	198d883a 	add	r6,r3,r6
10004668:	29c00003 	ldbu	r7,0(r5)
1000466c:	18c00044 	addi	r3,r3,1
10004670:	29400044 	addi	r5,r5,1
10004674:	19ffffc5 	stb	r7,-1(r3)
10004678:	19bffb1e 	bne	r3,r6,10004668 <memmove+0x128>
1000467c:	f800283a 	ret
10004680:	1007883a 	mov	r3,r2
10004684:	003ff606 	br	10004660 <memmove+0x120>
10004688:	1007883a 	mov	r3,r2
1000468c:	003ff506 	br	10004664 <memmove+0x124>
10004690:	f800283a 	ret
10004694:	500d883a 	mov	r6,r10
10004698:	003ff106 	br	10004660 <memmove+0x120>

1000469c <_realloc_r>:
1000469c:	defff604 	addi	sp,sp,-40
100046a0:	dc800215 	stw	r18,8(sp)
100046a4:	dfc00915 	stw	ra,36(sp)
100046a8:	df000815 	stw	fp,32(sp)
100046ac:	ddc00715 	stw	r23,28(sp)
100046b0:	dd800615 	stw	r22,24(sp)
100046b4:	dd400515 	stw	r21,20(sp)
100046b8:	dd000415 	stw	r20,16(sp)
100046bc:	dcc00315 	stw	r19,12(sp)
100046c0:	dc400115 	stw	r17,4(sp)
100046c4:	dc000015 	stw	r16,0(sp)
100046c8:	3025883a 	mov	r18,r6
100046cc:	2800b726 	beq	r5,zero,100049ac <_realloc_r+0x310>
100046d0:	282b883a 	mov	r21,r5
100046d4:	2029883a 	mov	r20,r4
100046d8:	00069c40 	call	100069c4 <__malloc_lock>
100046dc:	a8bfff17 	ldw	r2,-4(r21)
100046e0:	043fff04 	movi	r16,-4
100046e4:	90c002c4 	addi	r3,r18,11
100046e8:	01000584 	movi	r4,22
100046ec:	acfffe04 	addi	r19,r21,-8
100046f0:	1420703a 	and	r16,r2,r16
100046f4:	20c0332e 	bgeu	r4,r3,100047c4 <_realloc_r+0x128>
100046f8:	047ffe04 	movi	r17,-8
100046fc:	1c62703a 	and	r17,r3,r17
10004700:	8807883a 	mov	r3,r17
10004704:	88005816 	blt	r17,zero,10004868 <_realloc_r+0x1cc>
10004708:	8c805736 	bltu	r17,r18,10004868 <_realloc_r+0x1cc>
1000470c:	80c0300e 	bge	r16,r3,100047d0 <_realloc_r+0x134>
10004710:	07040074 	movhi	fp,4097
10004714:	e7213e04 	addi	fp,fp,-31496
10004718:	e1c00217 	ldw	r7,8(fp)
1000471c:	9c09883a 	add	r4,r19,r16
10004720:	22000117 	ldw	r8,4(r4)
10004724:	21c06326 	beq	r4,r7,100048b4 <_realloc_r+0x218>
10004728:	017fff84 	movi	r5,-2
1000472c:	414a703a 	and	r5,r8,r5
10004730:	214b883a 	add	r5,r4,r5
10004734:	29800117 	ldw	r6,4(r5)
10004738:	3180004c 	andi	r6,r6,1
1000473c:	30003f26 	beq	r6,zero,1000483c <_realloc_r+0x1a0>
10004740:	1080004c 	andi	r2,r2,1
10004744:	10008326 	beq	r2,zero,10004954 <_realloc_r+0x2b8>
10004748:	900b883a 	mov	r5,r18
1000474c:	a009883a 	mov	r4,r20
10004750:	0003a8c0 	call	10003a8c <_malloc_r>
10004754:	1025883a 	mov	r18,r2
10004758:	10011e26 	beq	r2,zero,10004bd4 <_realloc_r+0x538>
1000475c:	a93fff17 	ldw	r4,-4(r21)
10004760:	10fffe04 	addi	r3,r2,-8
10004764:	00bfff84 	movi	r2,-2
10004768:	2084703a 	and	r2,r4,r2
1000476c:	9885883a 	add	r2,r19,r2
10004770:	1880ee26 	beq	r3,r2,10004b2c <_realloc_r+0x490>
10004774:	81bfff04 	addi	r6,r16,-4
10004778:	00800904 	movi	r2,36
1000477c:	1180b836 	bltu	r2,r6,10004a60 <_realloc_r+0x3c4>
10004780:	00c004c4 	movi	r3,19
10004784:	19809636 	bltu	r3,r6,100049e0 <_realloc_r+0x344>
10004788:	9005883a 	mov	r2,r18
1000478c:	a807883a 	mov	r3,r21
10004790:	19000017 	ldw	r4,0(r3)
10004794:	11000015 	stw	r4,0(r2)
10004798:	19000117 	ldw	r4,4(r3)
1000479c:	11000115 	stw	r4,4(r2)
100047a0:	18c00217 	ldw	r3,8(r3)
100047a4:	10c00215 	stw	r3,8(r2)
100047a8:	a80b883a 	mov	r5,r21
100047ac:	a009883a 	mov	r4,r20
100047b0:	00059200 	call	10005920 <_free_r>
100047b4:	a009883a 	mov	r4,r20
100047b8:	00069e80 	call	100069e8 <__malloc_unlock>
100047bc:	9005883a 	mov	r2,r18
100047c0:	00001206 	br	1000480c <_realloc_r+0x170>
100047c4:	00c00404 	movi	r3,16
100047c8:	1823883a 	mov	r17,r3
100047cc:	003fce06 	br	10004708 <_realloc_r+0x6c>
100047d0:	a825883a 	mov	r18,r21
100047d4:	8445c83a 	sub	r2,r16,r17
100047d8:	00c003c4 	movi	r3,15
100047dc:	18802636 	bltu	r3,r2,10004878 <_realloc_r+0x1dc>
100047e0:	99800117 	ldw	r6,4(r19)
100047e4:	9c07883a 	add	r3,r19,r16
100047e8:	3180004c 	andi	r6,r6,1
100047ec:	3420b03a 	or	r16,r6,r16
100047f0:	9c000115 	stw	r16,4(r19)
100047f4:	18800117 	ldw	r2,4(r3)
100047f8:	10800054 	ori	r2,r2,1
100047fc:	18800115 	stw	r2,4(r3)
10004800:	a009883a 	mov	r4,r20
10004804:	00069e80 	call	100069e8 <__malloc_unlock>
10004808:	9005883a 	mov	r2,r18
1000480c:	dfc00917 	ldw	ra,36(sp)
10004810:	df000817 	ldw	fp,32(sp)
10004814:	ddc00717 	ldw	r23,28(sp)
10004818:	dd800617 	ldw	r22,24(sp)
1000481c:	dd400517 	ldw	r21,20(sp)
10004820:	dd000417 	ldw	r20,16(sp)
10004824:	dcc00317 	ldw	r19,12(sp)
10004828:	dc800217 	ldw	r18,8(sp)
1000482c:	dc400117 	ldw	r17,4(sp)
10004830:	dc000017 	ldw	r16,0(sp)
10004834:	dec00a04 	addi	sp,sp,40
10004838:	f800283a 	ret
1000483c:	017fff04 	movi	r5,-4
10004840:	414a703a 	and	r5,r8,r5
10004844:	814d883a 	add	r6,r16,r5
10004848:	30c01f16 	blt	r6,r3,100048c8 <_realloc_r+0x22c>
1000484c:	20800317 	ldw	r2,12(r4)
10004850:	20c00217 	ldw	r3,8(r4)
10004854:	a825883a 	mov	r18,r21
10004858:	3021883a 	mov	r16,r6
1000485c:	18800315 	stw	r2,12(r3)
10004860:	10c00215 	stw	r3,8(r2)
10004864:	003fdb06 	br	100047d4 <_realloc_r+0x138>
10004868:	00800304 	movi	r2,12
1000486c:	a0800015 	stw	r2,0(r20)
10004870:	0005883a 	mov	r2,zero
10004874:	003fe506 	br	1000480c <_realloc_r+0x170>
10004878:	98c00117 	ldw	r3,4(r19)
1000487c:	9c4b883a 	add	r5,r19,r17
10004880:	11000054 	ori	r4,r2,1
10004884:	18c0004c 	andi	r3,r3,1
10004888:	1c62b03a 	or	r17,r3,r17
1000488c:	9c400115 	stw	r17,4(r19)
10004890:	29000115 	stw	r4,4(r5)
10004894:	2885883a 	add	r2,r5,r2
10004898:	10c00117 	ldw	r3,4(r2)
1000489c:	29400204 	addi	r5,r5,8
100048a0:	a009883a 	mov	r4,r20
100048a4:	18c00054 	ori	r3,r3,1
100048a8:	10c00115 	stw	r3,4(r2)
100048ac:	00059200 	call	10005920 <_free_r>
100048b0:	003fd306 	br	10004800 <_realloc_r+0x164>
100048b4:	017fff04 	movi	r5,-4
100048b8:	414a703a 	and	r5,r8,r5
100048bc:	89800404 	addi	r6,r17,16
100048c0:	8151883a 	add	r8,r16,r5
100048c4:	4180590e 	bge	r8,r6,10004a2c <_realloc_r+0x390>
100048c8:	1080004c 	andi	r2,r2,1
100048cc:	103f9e1e 	bne	r2,zero,10004748 <_realloc_r+0xac>
100048d0:	adbffe17 	ldw	r22,-8(r21)
100048d4:	00bfff04 	movi	r2,-4
100048d8:	9dadc83a 	sub	r22,r19,r22
100048dc:	b1800117 	ldw	r6,4(r22)
100048e0:	3084703a 	and	r2,r6,r2
100048e4:	20002026 	beq	r4,zero,10004968 <_realloc_r+0x2cc>
100048e8:	80af883a 	add	r23,r16,r2
100048ec:	b96f883a 	add	r23,r23,r5
100048f0:	21c05f26 	beq	r4,r7,10004a70 <_realloc_r+0x3d4>
100048f4:	b8c01c16 	blt	r23,r3,10004968 <_realloc_r+0x2cc>
100048f8:	20800317 	ldw	r2,12(r4)
100048fc:	20c00217 	ldw	r3,8(r4)
10004900:	81bfff04 	addi	r6,r16,-4
10004904:	01000904 	movi	r4,36
10004908:	18800315 	stw	r2,12(r3)
1000490c:	10c00215 	stw	r3,8(r2)
10004910:	b0c00217 	ldw	r3,8(r22)
10004914:	b0800317 	ldw	r2,12(r22)
10004918:	b4800204 	addi	r18,r22,8
1000491c:	18800315 	stw	r2,12(r3)
10004920:	10c00215 	stw	r3,8(r2)
10004924:	21801b36 	bltu	r4,r6,10004994 <_realloc_r+0x2f8>
10004928:	008004c4 	movi	r2,19
1000492c:	1180352e 	bgeu	r2,r6,10004a04 <_realloc_r+0x368>
10004930:	a8800017 	ldw	r2,0(r21)
10004934:	b0800215 	stw	r2,8(r22)
10004938:	a8800117 	ldw	r2,4(r21)
1000493c:	b0800315 	stw	r2,12(r22)
10004940:	008006c4 	movi	r2,27
10004944:	11807f36 	bltu	r2,r6,10004b44 <_realloc_r+0x4a8>
10004948:	b0800404 	addi	r2,r22,16
1000494c:	ad400204 	addi	r21,r21,8
10004950:	00002d06 	br	10004a08 <_realloc_r+0x36c>
10004954:	adbffe17 	ldw	r22,-8(r21)
10004958:	00bfff04 	movi	r2,-4
1000495c:	9dadc83a 	sub	r22,r19,r22
10004960:	b1000117 	ldw	r4,4(r22)
10004964:	2084703a 	and	r2,r4,r2
10004968:	b03f7726 	beq	r22,zero,10004748 <_realloc_r+0xac>
1000496c:	80af883a 	add	r23,r16,r2
10004970:	b8ff7516 	blt	r23,r3,10004748 <_realloc_r+0xac>
10004974:	b0800317 	ldw	r2,12(r22)
10004978:	b0c00217 	ldw	r3,8(r22)
1000497c:	81bfff04 	addi	r6,r16,-4
10004980:	01000904 	movi	r4,36
10004984:	18800315 	stw	r2,12(r3)
10004988:	10c00215 	stw	r3,8(r2)
1000498c:	b4800204 	addi	r18,r22,8
10004990:	21bfe52e 	bgeu	r4,r6,10004928 <_realloc_r+0x28c>
10004994:	a80b883a 	mov	r5,r21
10004998:	9009883a 	mov	r4,r18
1000499c:	00045400 	call	10004540 <memmove>
100049a0:	b821883a 	mov	r16,r23
100049a4:	b027883a 	mov	r19,r22
100049a8:	003f8a06 	br	100047d4 <_realloc_r+0x138>
100049ac:	300b883a 	mov	r5,r6
100049b0:	dfc00917 	ldw	ra,36(sp)
100049b4:	df000817 	ldw	fp,32(sp)
100049b8:	ddc00717 	ldw	r23,28(sp)
100049bc:	dd800617 	ldw	r22,24(sp)
100049c0:	dd400517 	ldw	r21,20(sp)
100049c4:	dd000417 	ldw	r20,16(sp)
100049c8:	dcc00317 	ldw	r19,12(sp)
100049cc:	dc800217 	ldw	r18,8(sp)
100049d0:	dc400117 	ldw	r17,4(sp)
100049d4:	dc000017 	ldw	r16,0(sp)
100049d8:	dec00a04 	addi	sp,sp,40
100049dc:	0003a8c1 	jmpi	10003a8c <_malloc_r>
100049e0:	a8c00017 	ldw	r3,0(r21)
100049e4:	90c00015 	stw	r3,0(r18)
100049e8:	a8c00117 	ldw	r3,4(r21)
100049ec:	90c00115 	stw	r3,4(r18)
100049f0:	00c006c4 	movi	r3,27
100049f4:	19804536 	bltu	r3,r6,10004b0c <_realloc_r+0x470>
100049f8:	90800204 	addi	r2,r18,8
100049fc:	a8c00204 	addi	r3,r21,8
10004a00:	003f6306 	br	10004790 <_realloc_r+0xf4>
10004a04:	9005883a 	mov	r2,r18
10004a08:	a8c00017 	ldw	r3,0(r21)
10004a0c:	b821883a 	mov	r16,r23
10004a10:	b027883a 	mov	r19,r22
10004a14:	10c00015 	stw	r3,0(r2)
10004a18:	a8c00117 	ldw	r3,4(r21)
10004a1c:	10c00115 	stw	r3,4(r2)
10004a20:	a8c00217 	ldw	r3,8(r21)
10004a24:	10c00215 	stw	r3,8(r2)
10004a28:	003f6a06 	br	100047d4 <_realloc_r+0x138>
10004a2c:	9c67883a 	add	r19,r19,r17
10004a30:	4445c83a 	sub	r2,r8,r17
10004a34:	e4c00215 	stw	r19,8(fp)
10004a38:	10800054 	ori	r2,r2,1
10004a3c:	98800115 	stw	r2,4(r19)
10004a40:	a8bfff17 	ldw	r2,-4(r21)
10004a44:	a009883a 	mov	r4,r20
10004a48:	1080004c 	andi	r2,r2,1
10004a4c:	1462b03a 	or	r17,r2,r17
10004a50:	ac7fff15 	stw	r17,-4(r21)
10004a54:	00069e80 	call	100069e8 <__malloc_unlock>
10004a58:	a805883a 	mov	r2,r21
10004a5c:	003f6b06 	br	1000480c <_realloc_r+0x170>
10004a60:	a80b883a 	mov	r5,r21
10004a64:	9009883a 	mov	r4,r18
10004a68:	00045400 	call	10004540 <memmove>
10004a6c:	003f4e06 	br	100047a8 <_realloc_r+0x10c>
10004a70:	89000404 	addi	r4,r17,16
10004a74:	b93fbc16 	blt	r23,r4,10004968 <_realloc_r+0x2cc>
10004a78:	b0800317 	ldw	r2,12(r22)
10004a7c:	b0c00217 	ldw	r3,8(r22)
10004a80:	81bfff04 	addi	r6,r16,-4
10004a84:	01000904 	movi	r4,36
10004a88:	18800315 	stw	r2,12(r3)
10004a8c:	10c00215 	stw	r3,8(r2)
10004a90:	b4800204 	addi	r18,r22,8
10004a94:	21804336 	bltu	r4,r6,10004ba4 <_realloc_r+0x508>
10004a98:	008004c4 	movi	r2,19
10004a9c:	11803f2e 	bgeu	r2,r6,10004b9c <_realloc_r+0x500>
10004aa0:	a8800017 	ldw	r2,0(r21)
10004aa4:	b0800215 	stw	r2,8(r22)
10004aa8:	a8800117 	ldw	r2,4(r21)
10004aac:	b0800315 	stw	r2,12(r22)
10004ab0:	008006c4 	movi	r2,27
10004ab4:	11803f36 	bltu	r2,r6,10004bb4 <_realloc_r+0x518>
10004ab8:	b0800404 	addi	r2,r22,16
10004abc:	ad400204 	addi	r21,r21,8
10004ac0:	a8c00017 	ldw	r3,0(r21)
10004ac4:	10c00015 	stw	r3,0(r2)
10004ac8:	a8c00117 	ldw	r3,4(r21)
10004acc:	10c00115 	stw	r3,4(r2)
10004ad0:	a8c00217 	ldw	r3,8(r21)
10004ad4:	10c00215 	stw	r3,8(r2)
10004ad8:	b447883a 	add	r3,r22,r17
10004adc:	bc45c83a 	sub	r2,r23,r17
10004ae0:	e0c00215 	stw	r3,8(fp)
10004ae4:	10800054 	ori	r2,r2,1
10004ae8:	18800115 	stw	r2,4(r3)
10004aec:	b0800117 	ldw	r2,4(r22)
10004af0:	a009883a 	mov	r4,r20
10004af4:	1080004c 	andi	r2,r2,1
10004af8:	1462b03a 	or	r17,r2,r17
10004afc:	b4400115 	stw	r17,4(r22)
10004b00:	00069e80 	call	100069e8 <__malloc_unlock>
10004b04:	9005883a 	mov	r2,r18
10004b08:	003f4006 	br	1000480c <_realloc_r+0x170>
10004b0c:	a8c00217 	ldw	r3,8(r21)
10004b10:	90c00215 	stw	r3,8(r18)
10004b14:	a8c00317 	ldw	r3,12(r21)
10004b18:	90c00315 	stw	r3,12(r18)
10004b1c:	30801126 	beq	r6,r2,10004b64 <_realloc_r+0x4c8>
10004b20:	90800404 	addi	r2,r18,16
10004b24:	a8c00404 	addi	r3,r21,16
10004b28:	003f1906 	br	10004790 <_realloc_r+0xf4>
10004b2c:	90ffff17 	ldw	r3,-4(r18)
10004b30:	00bfff04 	movi	r2,-4
10004b34:	a825883a 	mov	r18,r21
10004b38:	1884703a 	and	r2,r3,r2
10004b3c:	80a1883a 	add	r16,r16,r2
10004b40:	003f2406 	br	100047d4 <_realloc_r+0x138>
10004b44:	a8800217 	ldw	r2,8(r21)
10004b48:	b0800415 	stw	r2,16(r22)
10004b4c:	a8800317 	ldw	r2,12(r21)
10004b50:	b0800515 	stw	r2,20(r22)
10004b54:	31000a26 	beq	r6,r4,10004b80 <_realloc_r+0x4e4>
10004b58:	b0800604 	addi	r2,r22,24
10004b5c:	ad400404 	addi	r21,r21,16
10004b60:	003fa906 	br	10004a08 <_realloc_r+0x36c>
10004b64:	a9000417 	ldw	r4,16(r21)
10004b68:	90800604 	addi	r2,r18,24
10004b6c:	a8c00604 	addi	r3,r21,24
10004b70:	91000415 	stw	r4,16(r18)
10004b74:	a9000517 	ldw	r4,20(r21)
10004b78:	91000515 	stw	r4,20(r18)
10004b7c:	003f0406 	br	10004790 <_realloc_r+0xf4>
10004b80:	a8c00417 	ldw	r3,16(r21)
10004b84:	ad400604 	addi	r21,r21,24
10004b88:	b0800804 	addi	r2,r22,32
10004b8c:	b0c00615 	stw	r3,24(r22)
10004b90:	a8ffff17 	ldw	r3,-4(r21)
10004b94:	b0c00715 	stw	r3,28(r22)
10004b98:	003f9b06 	br	10004a08 <_realloc_r+0x36c>
10004b9c:	9005883a 	mov	r2,r18
10004ba0:	003fc706 	br	10004ac0 <_realloc_r+0x424>
10004ba4:	a80b883a 	mov	r5,r21
10004ba8:	9009883a 	mov	r4,r18
10004bac:	00045400 	call	10004540 <memmove>
10004bb0:	003fc906 	br	10004ad8 <_realloc_r+0x43c>
10004bb4:	a8800217 	ldw	r2,8(r21)
10004bb8:	b0800415 	stw	r2,16(r22)
10004bbc:	a8800317 	ldw	r2,12(r21)
10004bc0:	b0800515 	stw	r2,20(r22)
10004bc4:	31000726 	beq	r6,r4,10004be4 <_realloc_r+0x548>
10004bc8:	b0800604 	addi	r2,r22,24
10004bcc:	ad400404 	addi	r21,r21,16
10004bd0:	003fbb06 	br	10004ac0 <_realloc_r+0x424>
10004bd4:	a009883a 	mov	r4,r20
10004bd8:	00069e80 	call	100069e8 <__malloc_unlock>
10004bdc:	0005883a 	mov	r2,zero
10004be0:	003f0a06 	br	1000480c <_realloc_r+0x170>
10004be4:	a8c00417 	ldw	r3,16(r21)
10004be8:	ad400604 	addi	r21,r21,24
10004bec:	b0800804 	addi	r2,r22,32
10004bf0:	b0c00615 	stw	r3,24(r22)
10004bf4:	a8ffff17 	ldw	r3,-4(r21)
10004bf8:	b0c00715 	stw	r3,28(r22)
10004bfc:	003fb006 	br	10004ac0 <_realloc_r+0x424>

10004c00 <_sbrk_r>:
10004c00:	defffd04 	addi	sp,sp,-12
10004c04:	dc000015 	stw	r16,0(sp)
10004c08:	04040074 	movhi	r16,4097
10004c0c:	dc400115 	stw	r17,4(sp)
10004c10:	84292804 	addi	r16,r16,-23392
10004c14:	2023883a 	mov	r17,r4
10004c18:	2809883a 	mov	r4,r5
10004c1c:	dfc00215 	stw	ra,8(sp)
10004c20:	80000015 	stw	zero,0(r16)
10004c24:	0006b440 	call	10006b44 <sbrk>
10004c28:	00ffffc4 	movi	r3,-1
10004c2c:	10c00526 	beq	r2,r3,10004c44 <_sbrk_r+0x44>
10004c30:	dfc00217 	ldw	ra,8(sp)
10004c34:	dc400117 	ldw	r17,4(sp)
10004c38:	dc000017 	ldw	r16,0(sp)
10004c3c:	dec00304 	addi	sp,sp,12
10004c40:	f800283a 	ret
10004c44:	80c00017 	ldw	r3,0(r16)
10004c48:	183ff926 	beq	r3,zero,10004c30 <_sbrk_r+0x30>
10004c4c:	88c00015 	stw	r3,0(r17)
10004c50:	003ff706 	br	10004c30 <_sbrk_r+0x30>

10004c54 <strcmp>:
10004c54:	2144b03a 	or	r2,r4,r5
10004c58:	108000cc 	andi	r2,r2,3
10004c5c:	1000171e 	bne	r2,zero,10004cbc <strcmp+0x68>
10004c60:	20800017 	ldw	r2,0(r4)
10004c64:	28c00017 	ldw	r3,0(r5)
10004c68:	10c0141e 	bne	r2,r3,10004cbc <strcmp+0x68>
10004c6c:	027fbff4 	movhi	r9,65279
10004c70:	4a7fbfc4 	addi	r9,r9,-257
10004c74:	0086303a 	nor	r3,zero,r2
10004c78:	02202074 	movhi	r8,32897
10004c7c:	1245883a 	add	r2,r2,r9
10004c80:	42202004 	addi	r8,r8,-32640
10004c84:	10c4703a 	and	r2,r2,r3
10004c88:	1204703a 	and	r2,r2,r8
10004c8c:	10000226 	beq	r2,zero,10004c98 <strcmp+0x44>
10004c90:	00002306 	br	10004d20 <strcmp+0xcc>
10004c94:	1000221e 	bne	r2,zero,10004d20 <strcmp+0xcc>
10004c98:	21000104 	addi	r4,r4,4
10004c9c:	20c00017 	ldw	r3,0(r4)
10004ca0:	29400104 	addi	r5,r5,4
10004ca4:	29800017 	ldw	r6,0(r5)
10004ca8:	1a4f883a 	add	r7,r3,r9
10004cac:	00c4303a 	nor	r2,zero,r3
10004cb0:	3884703a 	and	r2,r7,r2
10004cb4:	1204703a 	and	r2,r2,r8
10004cb8:	19bff626 	beq	r3,r6,10004c94 <strcmp+0x40>
10004cbc:	20800003 	ldbu	r2,0(r4)
10004cc0:	10c03fcc 	andi	r3,r2,255
10004cc4:	18c0201c 	xori	r3,r3,128
10004cc8:	18ffe004 	addi	r3,r3,-128
10004ccc:	18000c26 	beq	r3,zero,10004d00 <strcmp+0xac>
10004cd0:	29800007 	ldb	r6,0(r5)
10004cd4:	19800326 	beq	r3,r6,10004ce4 <strcmp+0x90>
10004cd8:	00001306 	br	10004d28 <strcmp+0xd4>
10004cdc:	29800007 	ldb	r6,0(r5)
10004ce0:	11800b1e 	bne	r2,r6,10004d10 <strcmp+0xbc>
10004ce4:	21000044 	addi	r4,r4,1
10004ce8:	20c00003 	ldbu	r3,0(r4)
10004cec:	29400044 	addi	r5,r5,1
10004cf0:	18803fcc 	andi	r2,r3,255
10004cf4:	1080201c 	xori	r2,r2,128
10004cf8:	10bfe004 	addi	r2,r2,-128
10004cfc:	103ff71e 	bne	r2,zero,10004cdc <strcmp+0x88>
10004d00:	0007883a 	mov	r3,zero
10004d04:	28800003 	ldbu	r2,0(r5)
10004d08:	1885c83a 	sub	r2,r3,r2
10004d0c:	f800283a 	ret
10004d10:	28800003 	ldbu	r2,0(r5)
10004d14:	18c03fcc 	andi	r3,r3,255
10004d18:	1885c83a 	sub	r2,r3,r2
10004d1c:	f800283a 	ret
10004d20:	0005883a 	mov	r2,zero
10004d24:	f800283a 	ret
10004d28:	10c03fcc 	andi	r3,r2,255
10004d2c:	003ff506 	br	10004d04 <strcmp+0xb0>

10004d30 <strlen>:
10004d30:	208000cc 	andi	r2,r4,3
10004d34:	10002026 	beq	r2,zero,10004db8 <strlen+0x88>
10004d38:	20800007 	ldb	r2,0(r4)
10004d3c:	10002026 	beq	r2,zero,10004dc0 <strlen+0x90>
10004d40:	2005883a 	mov	r2,r4
10004d44:	00000206 	br	10004d50 <strlen+0x20>
10004d48:	10c00007 	ldb	r3,0(r2)
10004d4c:	18001826 	beq	r3,zero,10004db0 <strlen+0x80>
10004d50:	10800044 	addi	r2,r2,1
10004d54:	10c000cc 	andi	r3,r2,3
10004d58:	183ffb1e 	bne	r3,zero,10004d48 <strlen+0x18>
10004d5c:	10c00017 	ldw	r3,0(r2)
10004d60:	01ffbff4 	movhi	r7,65279
10004d64:	39ffbfc4 	addi	r7,r7,-257
10004d68:	00ca303a 	nor	r5,zero,r3
10004d6c:	01a02074 	movhi	r6,32897
10004d70:	19c7883a 	add	r3,r3,r7
10004d74:	31a02004 	addi	r6,r6,-32640
10004d78:	1946703a 	and	r3,r3,r5
10004d7c:	1986703a 	and	r3,r3,r6
10004d80:	1800091e 	bne	r3,zero,10004da8 <strlen+0x78>
10004d84:	10800104 	addi	r2,r2,4
10004d88:	10c00017 	ldw	r3,0(r2)
10004d8c:	19cb883a 	add	r5,r3,r7
10004d90:	00c6303a 	nor	r3,zero,r3
10004d94:	28c6703a 	and	r3,r5,r3
10004d98:	1986703a 	and	r3,r3,r6
10004d9c:	183ff926 	beq	r3,zero,10004d84 <strlen+0x54>
10004da0:	00000106 	br	10004da8 <strlen+0x78>
10004da4:	10800044 	addi	r2,r2,1
10004da8:	10c00007 	ldb	r3,0(r2)
10004dac:	183ffd1e 	bne	r3,zero,10004da4 <strlen+0x74>
10004db0:	1105c83a 	sub	r2,r2,r4
10004db4:	f800283a 	ret
10004db8:	2005883a 	mov	r2,r4
10004dbc:	003fe706 	br	10004d5c <strlen+0x2c>
10004dc0:	0005883a 	mov	r2,zero
10004dc4:	f800283a 	ret

10004dc8 <__swsetup_r>:
10004dc8:	00840074 	movhi	r2,4097
10004dcc:	defffd04 	addi	sp,sp,-12
10004dd0:	10a24a04 	addi	r2,r2,-30424
10004dd4:	dc400115 	stw	r17,4(sp)
10004dd8:	2023883a 	mov	r17,r4
10004ddc:	11000017 	ldw	r4,0(r2)
10004de0:	dc000015 	stw	r16,0(sp)
10004de4:	dfc00215 	stw	ra,8(sp)
10004de8:	2821883a 	mov	r16,r5
10004dec:	20000226 	beq	r4,zero,10004df8 <__swsetup_r+0x30>
10004df0:	20800e17 	ldw	r2,56(r4)
10004df4:	10003126 	beq	r2,zero,10004ebc <__swsetup_r+0xf4>
10004df8:	8080030b 	ldhu	r2,12(r16)
10004dfc:	10c0020c 	andi	r3,r2,8
10004e00:	1009883a 	mov	r4,r2
10004e04:	18000f26 	beq	r3,zero,10004e44 <__swsetup_r+0x7c>
10004e08:	80c00417 	ldw	r3,16(r16)
10004e0c:	18001526 	beq	r3,zero,10004e64 <__swsetup_r+0x9c>
10004e10:	1100004c 	andi	r4,r2,1
10004e14:	20001c1e 	bne	r4,zero,10004e88 <__swsetup_r+0xc0>
10004e18:	1080008c 	andi	r2,r2,2
10004e1c:	1000291e 	bne	r2,zero,10004ec4 <__swsetup_r+0xfc>
10004e20:	80800517 	ldw	r2,20(r16)
10004e24:	80800215 	stw	r2,8(r16)
10004e28:	18001c26 	beq	r3,zero,10004e9c <__swsetup_r+0xd4>
10004e2c:	0005883a 	mov	r2,zero
10004e30:	dfc00217 	ldw	ra,8(sp)
10004e34:	dc400117 	ldw	r17,4(sp)
10004e38:	dc000017 	ldw	r16,0(sp)
10004e3c:	dec00304 	addi	sp,sp,12
10004e40:	f800283a 	ret
10004e44:	2080040c 	andi	r2,r4,16
10004e48:	10002e26 	beq	r2,zero,10004f04 <__swsetup_r+0x13c>
10004e4c:	2080010c 	andi	r2,r4,4
10004e50:	10001e1e 	bne	r2,zero,10004ecc <__swsetup_r+0x104>
10004e54:	80c00417 	ldw	r3,16(r16)
10004e58:	20800214 	ori	r2,r4,8
10004e5c:	8080030d 	sth	r2,12(r16)
10004e60:	183feb1e 	bne	r3,zero,10004e10 <__swsetup_r+0x48>
10004e64:	1100a00c 	andi	r4,r2,640
10004e68:	01408004 	movi	r5,512
10004e6c:	217fe826 	beq	r4,r5,10004e10 <__swsetup_r+0x48>
10004e70:	800b883a 	mov	r5,r16
10004e74:	8809883a 	mov	r4,r17
10004e78:	0005db80 	call	10005db8 <__smakebuf_r>
10004e7c:	8080030b 	ldhu	r2,12(r16)
10004e80:	80c00417 	ldw	r3,16(r16)
10004e84:	003fe206 	br	10004e10 <__swsetup_r+0x48>
10004e88:	80800517 	ldw	r2,20(r16)
10004e8c:	80000215 	stw	zero,8(r16)
10004e90:	0085c83a 	sub	r2,zero,r2
10004e94:	80800615 	stw	r2,24(r16)
10004e98:	183fe41e 	bne	r3,zero,10004e2c <__swsetup_r+0x64>
10004e9c:	80c0030b 	ldhu	r3,12(r16)
10004ea0:	0005883a 	mov	r2,zero
10004ea4:	1900200c 	andi	r4,r3,128
10004ea8:	203fe126 	beq	r4,zero,10004e30 <__swsetup_r+0x68>
10004eac:	18c01014 	ori	r3,r3,64
10004eb0:	80c0030d 	sth	r3,12(r16)
10004eb4:	00bfffc4 	movi	r2,-1
10004eb8:	003fdd06 	br	10004e30 <__swsetup_r+0x68>
10004ebc:	00057ac0 	call	100057ac <__sinit>
10004ec0:	003fcd06 	br	10004df8 <__swsetup_r+0x30>
10004ec4:	0005883a 	mov	r2,zero
10004ec8:	003fd606 	br	10004e24 <__swsetup_r+0x5c>
10004ecc:	81400c17 	ldw	r5,48(r16)
10004ed0:	28000626 	beq	r5,zero,10004eec <__swsetup_r+0x124>
10004ed4:	80801004 	addi	r2,r16,64
10004ed8:	28800326 	beq	r5,r2,10004ee8 <__swsetup_r+0x120>
10004edc:	8809883a 	mov	r4,r17
10004ee0:	00059200 	call	10005920 <_free_r>
10004ee4:	8100030b 	ldhu	r4,12(r16)
10004ee8:	80000c15 	stw	zero,48(r16)
10004eec:	80c00417 	ldw	r3,16(r16)
10004ef0:	00bff6c4 	movi	r2,-37
10004ef4:	1108703a 	and	r4,r2,r4
10004ef8:	80000115 	stw	zero,4(r16)
10004efc:	80c00015 	stw	r3,0(r16)
10004f00:	003fd506 	br	10004e58 <__swsetup_r+0x90>
10004f04:	00800244 	movi	r2,9
10004f08:	88800015 	stw	r2,0(r17)
10004f0c:	20801014 	ori	r2,r4,64
10004f10:	8080030d 	sth	r2,12(r16)
10004f14:	00bfffc4 	movi	r2,-1
10004f18:	003fc506 	br	10004e30 <__swsetup_r+0x68>

10004f1c <__register_exitproc>:
10004f1c:	defffa04 	addi	sp,sp,-24
10004f20:	dc000315 	stw	r16,12(sp)
10004f24:	04040074 	movhi	r16,4097
10004f28:	84224904 	addi	r16,r16,-30428
10004f2c:	80c00017 	ldw	r3,0(r16)
10004f30:	dc400415 	stw	r17,16(sp)
10004f34:	dfc00515 	stw	ra,20(sp)
10004f38:	18805217 	ldw	r2,328(r3)
10004f3c:	2023883a 	mov	r17,r4
10004f40:	10003726 	beq	r2,zero,10005020 <__register_exitproc+0x104>
10004f44:	10c00117 	ldw	r3,4(r2)
10004f48:	010007c4 	movi	r4,31
10004f4c:	20c00e16 	blt	r4,r3,10004f88 <__register_exitproc+0x6c>
10004f50:	1a000044 	addi	r8,r3,1
10004f54:	8800221e 	bne	r17,zero,10004fe0 <__register_exitproc+0xc4>
10004f58:	18c00084 	addi	r3,r3,2
10004f5c:	18c7883a 	add	r3,r3,r3
10004f60:	18c7883a 	add	r3,r3,r3
10004f64:	12000115 	stw	r8,4(r2)
10004f68:	10c7883a 	add	r3,r2,r3
10004f6c:	19400015 	stw	r5,0(r3)
10004f70:	0005883a 	mov	r2,zero
10004f74:	dfc00517 	ldw	ra,20(sp)
10004f78:	dc400417 	ldw	r17,16(sp)
10004f7c:	dc000317 	ldw	r16,12(sp)
10004f80:	dec00604 	addi	sp,sp,24
10004f84:	f800283a 	ret
10004f88:	00800034 	movhi	r2,0
10004f8c:	10800004 	addi	r2,r2,0
10004f90:	10002626 	beq	r2,zero,1000502c <__register_exitproc+0x110>
10004f94:	01006404 	movi	r4,400
10004f98:	d9400015 	stw	r5,0(sp)
10004f9c:	d9800115 	stw	r6,4(sp)
10004fa0:	d9c00215 	stw	r7,8(sp)
10004fa4:	00000000 	call	10000000 <__alt_mem_sdram_controller>
10004fa8:	d9400017 	ldw	r5,0(sp)
10004fac:	d9800117 	ldw	r6,4(sp)
10004fb0:	d9c00217 	ldw	r7,8(sp)
10004fb4:	10001d26 	beq	r2,zero,1000502c <__register_exitproc+0x110>
10004fb8:	81000017 	ldw	r4,0(r16)
10004fbc:	10000115 	stw	zero,4(r2)
10004fc0:	02000044 	movi	r8,1
10004fc4:	22405217 	ldw	r9,328(r4)
10004fc8:	0007883a 	mov	r3,zero
10004fcc:	12400015 	stw	r9,0(r2)
10004fd0:	20805215 	stw	r2,328(r4)
10004fd4:	10006215 	stw	zero,392(r2)
10004fd8:	10006315 	stw	zero,396(r2)
10004fdc:	883fde26 	beq	r17,zero,10004f58 <__register_exitproc+0x3c>
10004fe0:	18c9883a 	add	r4,r3,r3
10004fe4:	2109883a 	add	r4,r4,r4
10004fe8:	1109883a 	add	r4,r2,r4
10004fec:	21802215 	stw	r6,136(r4)
10004ff0:	01800044 	movi	r6,1
10004ff4:	12406217 	ldw	r9,392(r2)
10004ff8:	30cc983a 	sll	r6,r6,r3
10004ffc:	4992b03a 	or	r9,r9,r6
10005000:	12406215 	stw	r9,392(r2)
10005004:	21c04215 	stw	r7,264(r4)
10005008:	01000084 	movi	r4,2
1000500c:	893fd21e 	bne	r17,r4,10004f58 <__register_exitproc+0x3c>
10005010:	11006317 	ldw	r4,396(r2)
10005014:	218cb03a 	or	r6,r4,r6
10005018:	11806315 	stw	r6,396(r2)
1000501c:	003fce06 	br	10004f58 <__register_exitproc+0x3c>
10005020:	18805304 	addi	r2,r3,332
10005024:	18805215 	stw	r2,328(r3)
10005028:	003fc606 	br	10004f44 <__register_exitproc+0x28>
1000502c:	00bfffc4 	movi	r2,-1
10005030:	003fd006 	br	10004f74 <__register_exitproc+0x58>

10005034 <__call_exitprocs>:
10005034:	defff504 	addi	sp,sp,-44
10005038:	df000915 	stw	fp,36(sp)
1000503c:	dd400615 	stw	r21,24(sp)
10005040:	dc800315 	stw	r18,12(sp)
10005044:	dfc00a15 	stw	ra,40(sp)
10005048:	ddc00815 	stw	r23,32(sp)
1000504c:	dd800715 	stw	r22,28(sp)
10005050:	dd000515 	stw	r20,20(sp)
10005054:	dcc00415 	stw	r19,16(sp)
10005058:	dc400215 	stw	r17,8(sp)
1000505c:	dc000115 	stw	r16,4(sp)
10005060:	d9000015 	stw	r4,0(sp)
10005064:	2839883a 	mov	fp,r5
10005068:	04800044 	movi	r18,1
1000506c:	057fffc4 	movi	r21,-1
10005070:	00840074 	movhi	r2,4097
10005074:	10a24904 	addi	r2,r2,-30428
10005078:	12000017 	ldw	r8,0(r2)
1000507c:	45005217 	ldw	r20,328(r8)
10005080:	44c05204 	addi	r19,r8,328
10005084:	a0001c26 	beq	r20,zero,100050f8 <__call_exitprocs+0xc4>
10005088:	a0800117 	ldw	r2,4(r20)
1000508c:	15ffffc4 	addi	r23,r2,-1
10005090:	b8000d16 	blt	r23,zero,100050c8 <__call_exitprocs+0x94>
10005094:	14000044 	addi	r16,r2,1
10005098:	8421883a 	add	r16,r16,r16
1000509c:	8421883a 	add	r16,r16,r16
100050a0:	84402004 	addi	r17,r16,128
100050a4:	a463883a 	add	r17,r20,r17
100050a8:	a421883a 	add	r16,r20,r16
100050ac:	e0001e26 	beq	fp,zero,10005128 <__call_exitprocs+0xf4>
100050b0:	80804017 	ldw	r2,256(r16)
100050b4:	e0801c26 	beq	fp,r2,10005128 <__call_exitprocs+0xf4>
100050b8:	bdffffc4 	addi	r23,r23,-1
100050bc:	843fff04 	addi	r16,r16,-4
100050c0:	8c7fff04 	addi	r17,r17,-4
100050c4:	bd7ff91e 	bne	r23,r21,100050ac <__call_exitprocs+0x78>
100050c8:	00800034 	movhi	r2,0
100050cc:	10800004 	addi	r2,r2,0
100050d0:	10000926 	beq	r2,zero,100050f8 <__call_exitprocs+0xc4>
100050d4:	a0800117 	ldw	r2,4(r20)
100050d8:	1000301e 	bne	r2,zero,1000519c <__call_exitprocs+0x168>
100050dc:	a0800017 	ldw	r2,0(r20)
100050e0:	10003226 	beq	r2,zero,100051ac <__call_exitprocs+0x178>
100050e4:	a009883a 	mov	r4,r20
100050e8:	98800015 	stw	r2,0(r19)
100050ec:	00000000 	call	10000000 <__alt_mem_sdram_controller>
100050f0:	9d000017 	ldw	r20,0(r19)
100050f4:	a03fe41e 	bne	r20,zero,10005088 <__call_exitprocs+0x54>
100050f8:	dfc00a17 	ldw	ra,40(sp)
100050fc:	df000917 	ldw	fp,36(sp)
10005100:	ddc00817 	ldw	r23,32(sp)
10005104:	dd800717 	ldw	r22,28(sp)
10005108:	dd400617 	ldw	r21,24(sp)
1000510c:	dd000517 	ldw	r20,20(sp)
10005110:	dcc00417 	ldw	r19,16(sp)
10005114:	dc800317 	ldw	r18,12(sp)
10005118:	dc400217 	ldw	r17,8(sp)
1000511c:	dc000117 	ldw	r16,4(sp)
10005120:	dec00b04 	addi	sp,sp,44
10005124:	f800283a 	ret
10005128:	a0800117 	ldw	r2,4(r20)
1000512c:	80c00017 	ldw	r3,0(r16)
10005130:	10bfffc4 	addi	r2,r2,-1
10005134:	15c01426 	beq	r2,r23,10005188 <__call_exitprocs+0x154>
10005138:	80000015 	stw	zero,0(r16)
1000513c:	183fde26 	beq	r3,zero,100050b8 <__call_exitprocs+0x84>
10005140:	95c8983a 	sll	r4,r18,r23
10005144:	a0806217 	ldw	r2,392(r20)
10005148:	a5800117 	ldw	r22,4(r20)
1000514c:	2084703a 	and	r2,r4,r2
10005150:	10000b26 	beq	r2,zero,10005180 <__call_exitprocs+0x14c>
10005154:	a0806317 	ldw	r2,396(r20)
10005158:	2088703a 	and	r4,r4,r2
1000515c:	20000c1e 	bne	r4,zero,10005190 <__call_exitprocs+0x15c>
10005160:	89400017 	ldw	r5,0(r17)
10005164:	d9000017 	ldw	r4,0(sp)
10005168:	183ee83a 	callr	r3
1000516c:	a0800117 	ldw	r2,4(r20)
10005170:	15bfbf1e 	bne	r2,r22,10005070 <__call_exitprocs+0x3c>
10005174:	98800017 	ldw	r2,0(r19)
10005178:	153fcf26 	beq	r2,r20,100050b8 <__call_exitprocs+0x84>
1000517c:	003fbc06 	br	10005070 <__call_exitprocs+0x3c>
10005180:	183ee83a 	callr	r3
10005184:	003ff906 	br	1000516c <__call_exitprocs+0x138>
10005188:	a5c00115 	stw	r23,4(r20)
1000518c:	003feb06 	br	1000513c <__call_exitprocs+0x108>
10005190:	89000017 	ldw	r4,0(r17)
10005194:	183ee83a 	callr	r3
10005198:	003ff406 	br	1000516c <__call_exitprocs+0x138>
1000519c:	a0800017 	ldw	r2,0(r20)
100051a0:	a027883a 	mov	r19,r20
100051a4:	1029883a 	mov	r20,r2
100051a8:	003fb606 	br	10005084 <__call_exitprocs+0x50>
100051ac:	0005883a 	mov	r2,zero
100051b0:	003ffb06 	br	100051a0 <__call_exitprocs+0x16c>

100051b4 <__sflush_r>:
100051b4:	2880030b 	ldhu	r2,12(r5)
100051b8:	defffb04 	addi	sp,sp,-20
100051bc:	dcc00315 	stw	r19,12(sp)
100051c0:	dc400115 	stw	r17,4(sp)
100051c4:	dfc00415 	stw	ra,16(sp)
100051c8:	dc800215 	stw	r18,8(sp)
100051cc:	dc000015 	stw	r16,0(sp)
100051d0:	10c0020c 	andi	r3,r2,8
100051d4:	2823883a 	mov	r17,r5
100051d8:	2027883a 	mov	r19,r4
100051dc:	1800311e 	bne	r3,zero,100052a4 <__sflush_r+0xf0>
100051e0:	28c00117 	ldw	r3,4(r5)
100051e4:	10820014 	ori	r2,r2,2048
100051e8:	2880030d 	sth	r2,12(r5)
100051ec:	00c04b0e 	bge	zero,r3,1000531c <__sflush_r+0x168>
100051f0:	8a000a17 	ldw	r8,40(r17)
100051f4:	40002326 	beq	r8,zero,10005284 <__sflush_r+0xd0>
100051f8:	9c000017 	ldw	r16,0(r19)
100051fc:	10c4000c 	andi	r3,r2,4096
10005200:	98000015 	stw	zero,0(r19)
10005204:	18004826 	beq	r3,zero,10005328 <__sflush_r+0x174>
10005208:	89801417 	ldw	r6,80(r17)
1000520c:	10c0010c 	andi	r3,r2,4
10005210:	18000626 	beq	r3,zero,1000522c <__sflush_r+0x78>
10005214:	88c00117 	ldw	r3,4(r17)
10005218:	88800c17 	ldw	r2,48(r17)
1000521c:	30cdc83a 	sub	r6,r6,r3
10005220:	10000226 	beq	r2,zero,1000522c <__sflush_r+0x78>
10005224:	88800f17 	ldw	r2,60(r17)
10005228:	308dc83a 	sub	r6,r6,r2
1000522c:	89400717 	ldw	r5,28(r17)
10005230:	000f883a 	mov	r7,zero
10005234:	9809883a 	mov	r4,r19
10005238:	403ee83a 	callr	r8
1000523c:	00ffffc4 	movi	r3,-1
10005240:	10c04426 	beq	r2,r3,10005354 <__sflush_r+0x1a0>
10005244:	88c0030b 	ldhu	r3,12(r17)
10005248:	89000417 	ldw	r4,16(r17)
1000524c:	88000115 	stw	zero,4(r17)
10005250:	197dffcc 	andi	r5,r3,63487
10005254:	8940030d 	sth	r5,12(r17)
10005258:	89000015 	stw	r4,0(r17)
1000525c:	18c4000c 	andi	r3,r3,4096
10005260:	18002c1e 	bne	r3,zero,10005314 <__sflush_r+0x160>
10005264:	89400c17 	ldw	r5,48(r17)
10005268:	9c000015 	stw	r16,0(r19)
1000526c:	28000526 	beq	r5,zero,10005284 <__sflush_r+0xd0>
10005270:	88801004 	addi	r2,r17,64
10005274:	28800226 	beq	r5,r2,10005280 <__sflush_r+0xcc>
10005278:	9809883a 	mov	r4,r19
1000527c:	00059200 	call	10005920 <_free_r>
10005280:	88000c15 	stw	zero,48(r17)
10005284:	0005883a 	mov	r2,zero
10005288:	dfc00417 	ldw	ra,16(sp)
1000528c:	dcc00317 	ldw	r19,12(sp)
10005290:	dc800217 	ldw	r18,8(sp)
10005294:	dc400117 	ldw	r17,4(sp)
10005298:	dc000017 	ldw	r16,0(sp)
1000529c:	dec00504 	addi	sp,sp,20
100052a0:	f800283a 	ret
100052a4:	2c800417 	ldw	r18,16(r5)
100052a8:	903ff626 	beq	r18,zero,10005284 <__sflush_r+0xd0>
100052ac:	2c000017 	ldw	r16,0(r5)
100052b0:	108000cc 	andi	r2,r2,3
100052b4:	2c800015 	stw	r18,0(r5)
100052b8:	84a1c83a 	sub	r16,r16,r18
100052bc:	1000131e 	bne	r2,zero,1000530c <__sflush_r+0x158>
100052c0:	28800517 	ldw	r2,20(r5)
100052c4:	88800215 	stw	r2,8(r17)
100052c8:	04000316 	blt	zero,r16,100052d8 <__sflush_r+0x124>
100052cc:	003fed06 	br	10005284 <__sflush_r+0xd0>
100052d0:	90a5883a 	add	r18,r18,r2
100052d4:	043feb0e 	bge	zero,r16,10005284 <__sflush_r+0xd0>
100052d8:	88800917 	ldw	r2,36(r17)
100052dc:	89400717 	ldw	r5,28(r17)
100052e0:	800f883a 	mov	r7,r16
100052e4:	900d883a 	mov	r6,r18
100052e8:	9809883a 	mov	r4,r19
100052ec:	103ee83a 	callr	r2
100052f0:	80a1c83a 	sub	r16,r16,r2
100052f4:	00bff616 	blt	zero,r2,100052d0 <__sflush_r+0x11c>
100052f8:	88c0030b 	ldhu	r3,12(r17)
100052fc:	00bfffc4 	movi	r2,-1
10005300:	18c01014 	ori	r3,r3,64
10005304:	88c0030d 	sth	r3,12(r17)
10005308:	003fdf06 	br	10005288 <__sflush_r+0xd4>
1000530c:	0005883a 	mov	r2,zero
10005310:	003fec06 	br	100052c4 <__sflush_r+0x110>
10005314:	88801415 	stw	r2,80(r17)
10005318:	003fd206 	br	10005264 <__sflush_r+0xb0>
1000531c:	28c00f17 	ldw	r3,60(r5)
10005320:	00ffb316 	blt	zero,r3,100051f0 <__sflush_r+0x3c>
10005324:	003fd706 	br	10005284 <__sflush_r+0xd0>
10005328:	89400717 	ldw	r5,28(r17)
1000532c:	000d883a 	mov	r6,zero
10005330:	01c00044 	movi	r7,1
10005334:	9809883a 	mov	r4,r19
10005338:	403ee83a 	callr	r8
1000533c:	100d883a 	mov	r6,r2
10005340:	00bfffc4 	movi	r2,-1
10005344:	30801426 	beq	r6,r2,10005398 <__sflush_r+0x1e4>
10005348:	8880030b 	ldhu	r2,12(r17)
1000534c:	8a000a17 	ldw	r8,40(r17)
10005350:	003fae06 	br	1000520c <__sflush_r+0x58>
10005354:	98c00017 	ldw	r3,0(r19)
10005358:	183fba26 	beq	r3,zero,10005244 <__sflush_r+0x90>
1000535c:	01000744 	movi	r4,29
10005360:	19000626 	beq	r3,r4,1000537c <__sflush_r+0x1c8>
10005364:	01000584 	movi	r4,22
10005368:	19000426 	beq	r3,r4,1000537c <__sflush_r+0x1c8>
1000536c:	88c0030b 	ldhu	r3,12(r17)
10005370:	18c01014 	ori	r3,r3,64
10005374:	88c0030d 	sth	r3,12(r17)
10005378:	003fc306 	br	10005288 <__sflush_r+0xd4>
1000537c:	8880030b 	ldhu	r2,12(r17)
10005380:	88c00417 	ldw	r3,16(r17)
10005384:	88000115 	stw	zero,4(r17)
10005388:	10bdffcc 	andi	r2,r2,63487
1000538c:	8880030d 	sth	r2,12(r17)
10005390:	88c00015 	stw	r3,0(r17)
10005394:	003fb306 	br	10005264 <__sflush_r+0xb0>
10005398:	98800017 	ldw	r2,0(r19)
1000539c:	103fea26 	beq	r2,zero,10005348 <__sflush_r+0x194>
100053a0:	00c00744 	movi	r3,29
100053a4:	10c00226 	beq	r2,r3,100053b0 <__sflush_r+0x1fc>
100053a8:	00c00584 	movi	r3,22
100053ac:	10c0031e 	bne	r2,r3,100053bc <__sflush_r+0x208>
100053b0:	9c000015 	stw	r16,0(r19)
100053b4:	0005883a 	mov	r2,zero
100053b8:	003fb306 	br	10005288 <__sflush_r+0xd4>
100053bc:	88c0030b 	ldhu	r3,12(r17)
100053c0:	3005883a 	mov	r2,r6
100053c4:	18c01014 	ori	r3,r3,64
100053c8:	88c0030d 	sth	r3,12(r17)
100053cc:	003fae06 	br	10005288 <__sflush_r+0xd4>

100053d0 <_fflush_r>:
100053d0:	defffd04 	addi	sp,sp,-12
100053d4:	dc000115 	stw	r16,4(sp)
100053d8:	dfc00215 	stw	ra,8(sp)
100053dc:	2021883a 	mov	r16,r4
100053e0:	20000226 	beq	r4,zero,100053ec <_fflush_r+0x1c>
100053e4:	20800e17 	ldw	r2,56(r4)
100053e8:	10000c26 	beq	r2,zero,1000541c <_fflush_r+0x4c>
100053ec:	2880030f 	ldh	r2,12(r5)
100053f0:	1000051e 	bne	r2,zero,10005408 <_fflush_r+0x38>
100053f4:	0005883a 	mov	r2,zero
100053f8:	dfc00217 	ldw	ra,8(sp)
100053fc:	dc000117 	ldw	r16,4(sp)
10005400:	dec00304 	addi	sp,sp,12
10005404:	f800283a 	ret
10005408:	8009883a 	mov	r4,r16
1000540c:	dfc00217 	ldw	ra,8(sp)
10005410:	dc000117 	ldw	r16,4(sp)
10005414:	dec00304 	addi	sp,sp,12
10005418:	00051b41 	jmpi	100051b4 <__sflush_r>
1000541c:	d9400015 	stw	r5,0(sp)
10005420:	00057ac0 	call	100057ac <__sinit>
10005424:	d9400017 	ldw	r5,0(sp)
10005428:	003ff006 	br	100053ec <_fflush_r+0x1c>

1000542c <fflush>:
1000542c:	20000526 	beq	r4,zero,10005444 <fflush+0x18>
10005430:	00840074 	movhi	r2,4097
10005434:	10a24a04 	addi	r2,r2,-30424
10005438:	200b883a 	mov	r5,r4
1000543c:	11000017 	ldw	r4,0(r2)
10005440:	00053d01 	jmpi	100053d0 <_fflush_r>
10005444:	00840074 	movhi	r2,4097
10005448:	10a24904 	addi	r2,r2,-30428
1000544c:	11000017 	ldw	r4,0(r2)
10005450:	01440034 	movhi	r5,4096
10005454:	2954f404 	addi	r5,r5,21456
10005458:	0005cf41 	jmpi	10005cf4 <_fwalk_reent>

1000545c <__fp_unlock>:
1000545c:	0005883a 	mov	r2,zero
10005460:	f800283a 	ret

10005464 <_cleanup_r>:
10005464:	01440034 	movhi	r5,4096
10005468:	2958a304 	addi	r5,r5,25228
1000546c:	0005cf41 	jmpi	10005cf4 <_fwalk_reent>

10005470 <__sinit.part.1>:
10005470:	defff704 	addi	sp,sp,-36
10005474:	00c40034 	movhi	r3,4096
10005478:	dfc00815 	stw	ra,32(sp)
1000547c:	ddc00715 	stw	r23,28(sp)
10005480:	dd800615 	stw	r22,24(sp)
10005484:	dd400515 	stw	r21,20(sp)
10005488:	dd000415 	stw	r20,16(sp)
1000548c:	dcc00315 	stw	r19,12(sp)
10005490:	dc800215 	stw	r18,8(sp)
10005494:	dc400115 	stw	r17,4(sp)
10005498:	dc000015 	stw	r16,0(sp)
1000549c:	18d51904 	addi	r3,r3,21604
100054a0:	24000117 	ldw	r16,4(r4)
100054a4:	20c00f15 	stw	r3,60(r4)
100054a8:	2080bb04 	addi	r2,r4,748
100054ac:	00c000c4 	movi	r3,3
100054b0:	20c0b915 	stw	r3,740(r4)
100054b4:	2080ba15 	stw	r2,744(r4)
100054b8:	2000b815 	stw	zero,736(r4)
100054bc:	05c00204 	movi	r23,8
100054c0:	00800104 	movi	r2,4
100054c4:	2025883a 	mov	r18,r4
100054c8:	b80d883a 	mov	r6,r23
100054cc:	81001704 	addi	r4,r16,92
100054d0:	000b883a 	mov	r5,zero
100054d4:	80000015 	stw	zero,0(r16)
100054d8:	80000115 	stw	zero,4(r16)
100054dc:	80000215 	stw	zero,8(r16)
100054e0:	8080030d 	sth	r2,12(r16)
100054e4:	80001915 	stw	zero,100(r16)
100054e8:	8000038d 	sth	zero,14(r16)
100054ec:	80000415 	stw	zero,16(r16)
100054f0:	80000515 	stw	zero,20(r16)
100054f4:	80000615 	stw	zero,24(r16)
100054f8:	0005f740 	call	10005f74 <memset>
100054fc:	05840034 	movhi	r22,4096
10005500:	94400217 	ldw	r17,8(r18)
10005504:	05440034 	movhi	r21,4096
10005508:	05040034 	movhi	r20,4096
1000550c:	04c40034 	movhi	r19,4096
10005510:	b5982704 	addi	r22,r22,24732
10005514:	ad583e04 	addi	r21,r21,24824
10005518:	a5185d04 	addi	r20,r20,24948
1000551c:	9cd87404 	addi	r19,r19,25040
10005520:	85800815 	stw	r22,32(r16)
10005524:	85400915 	stw	r21,36(r16)
10005528:	85000a15 	stw	r20,40(r16)
1000552c:	84c00b15 	stw	r19,44(r16)
10005530:	84000715 	stw	r16,28(r16)
10005534:	00800284 	movi	r2,10
10005538:	8880030d 	sth	r2,12(r17)
1000553c:	00800044 	movi	r2,1
10005540:	b80d883a 	mov	r6,r23
10005544:	89001704 	addi	r4,r17,92
10005548:	000b883a 	mov	r5,zero
1000554c:	88000015 	stw	zero,0(r17)
10005550:	88000115 	stw	zero,4(r17)
10005554:	88000215 	stw	zero,8(r17)
10005558:	88001915 	stw	zero,100(r17)
1000555c:	8880038d 	sth	r2,14(r17)
10005560:	88000415 	stw	zero,16(r17)
10005564:	88000515 	stw	zero,20(r17)
10005568:	88000615 	stw	zero,24(r17)
1000556c:	0005f740 	call	10005f74 <memset>
10005570:	94000317 	ldw	r16,12(r18)
10005574:	00800484 	movi	r2,18
10005578:	8c400715 	stw	r17,28(r17)
1000557c:	8d800815 	stw	r22,32(r17)
10005580:	8d400915 	stw	r21,36(r17)
10005584:	8d000a15 	stw	r20,40(r17)
10005588:	8cc00b15 	stw	r19,44(r17)
1000558c:	8080030d 	sth	r2,12(r16)
10005590:	00800084 	movi	r2,2
10005594:	80000015 	stw	zero,0(r16)
10005598:	80000115 	stw	zero,4(r16)
1000559c:	80000215 	stw	zero,8(r16)
100055a0:	80001915 	stw	zero,100(r16)
100055a4:	8080038d 	sth	r2,14(r16)
100055a8:	80000415 	stw	zero,16(r16)
100055ac:	80000515 	stw	zero,20(r16)
100055b0:	80000615 	stw	zero,24(r16)
100055b4:	b80d883a 	mov	r6,r23
100055b8:	000b883a 	mov	r5,zero
100055bc:	81001704 	addi	r4,r16,92
100055c0:	0005f740 	call	10005f74 <memset>
100055c4:	00800044 	movi	r2,1
100055c8:	84000715 	stw	r16,28(r16)
100055cc:	85800815 	stw	r22,32(r16)
100055d0:	85400915 	stw	r21,36(r16)
100055d4:	85000a15 	stw	r20,40(r16)
100055d8:	84c00b15 	stw	r19,44(r16)
100055dc:	90800e15 	stw	r2,56(r18)
100055e0:	dfc00817 	ldw	ra,32(sp)
100055e4:	ddc00717 	ldw	r23,28(sp)
100055e8:	dd800617 	ldw	r22,24(sp)
100055ec:	dd400517 	ldw	r21,20(sp)
100055f0:	dd000417 	ldw	r20,16(sp)
100055f4:	dcc00317 	ldw	r19,12(sp)
100055f8:	dc800217 	ldw	r18,8(sp)
100055fc:	dc400117 	ldw	r17,4(sp)
10005600:	dc000017 	ldw	r16,0(sp)
10005604:	dec00904 	addi	sp,sp,36
10005608:	f800283a 	ret

1000560c <__fp_lock>:
1000560c:	0005883a 	mov	r2,zero
10005610:	f800283a 	ret

10005614 <__sfmoreglue>:
10005614:	defffc04 	addi	sp,sp,-16
10005618:	dc400115 	stw	r17,4(sp)
1000561c:	2c7fffc4 	addi	r17,r5,-1
10005620:	8c401a24 	muli	r17,r17,104
10005624:	dc800215 	stw	r18,8(sp)
10005628:	2825883a 	mov	r18,r5
1000562c:	89401d04 	addi	r5,r17,116
10005630:	dc000015 	stw	r16,0(sp)
10005634:	dfc00315 	stw	ra,12(sp)
10005638:	0003a8c0 	call	10003a8c <_malloc_r>
1000563c:	1021883a 	mov	r16,r2
10005640:	10000726 	beq	r2,zero,10005660 <__sfmoreglue+0x4c>
10005644:	11000304 	addi	r4,r2,12
10005648:	10000015 	stw	zero,0(r2)
1000564c:	14800115 	stw	r18,4(r2)
10005650:	11000215 	stw	r4,8(r2)
10005654:	89801a04 	addi	r6,r17,104
10005658:	000b883a 	mov	r5,zero
1000565c:	0005f740 	call	10005f74 <memset>
10005660:	8005883a 	mov	r2,r16
10005664:	dfc00317 	ldw	ra,12(sp)
10005668:	dc800217 	ldw	r18,8(sp)
1000566c:	dc400117 	ldw	r17,4(sp)
10005670:	dc000017 	ldw	r16,0(sp)
10005674:	dec00404 	addi	sp,sp,16
10005678:	f800283a 	ret

1000567c <__sfp>:
1000567c:	defffb04 	addi	sp,sp,-20
10005680:	dc000015 	stw	r16,0(sp)
10005684:	04040074 	movhi	r16,4097
10005688:	84224904 	addi	r16,r16,-30428
1000568c:	dcc00315 	stw	r19,12(sp)
10005690:	2027883a 	mov	r19,r4
10005694:	81000017 	ldw	r4,0(r16)
10005698:	dfc00415 	stw	ra,16(sp)
1000569c:	dc800215 	stw	r18,8(sp)
100056a0:	20800e17 	ldw	r2,56(r4)
100056a4:	dc400115 	stw	r17,4(sp)
100056a8:	1000021e 	bne	r2,zero,100056b4 <__sfp+0x38>
100056ac:	00054700 	call	10005470 <__sinit.part.1>
100056b0:	81000017 	ldw	r4,0(r16)
100056b4:	2480b804 	addi	r18,r4,736
100056b8:	047fffc4 	movi	r17,-1
100056bc:	91000117 	ldw	r4,4(r18)
100056c0:	94000217 	ldw	r16,8(r18)
100056c4:	213fffc4 	addi	r4,r4,-1
100056c8:	20000a16 	blt	r4,zero,100056f4 <__sfp+0x78>
100056cc:	8080030f 	ldh	r2,12(r16)
100056d0:	10000c26 	beq	r2,zero,10005704 <__sfp+0x88>
100056d4:	80c01d04 	addi	r3,r16,116
100056d8:	00000206 	br	100056e4 <__sfp+0x68>
100056dc:	18bfe60f 	ldh	r2,-104(r3)
100056e0:	10000826 	beq	r2,zero,10005704 <__sfp+0x88>
100056e4:	213fffc4 	addi	r4,r4,-1
100056e8:	1c3ffd04 	addi	r16,r3,-12
100056ec:	18c01a04 	addi	r3,r3,104
100056f0:	247ffa1e 	bne	r4,r17,100056dc <__sfp+0x60>
100056f4:	90800017 	ldw	r2,0(r18)
100056f8:	10001d26 	beq	r2,zero,10005770 <__sfp+0xf4>
100056fc:	1025883a 	mov	r18,r2
10005700:	003fee06 	br	100056bc <__sfp+0x40>
10005704:	00bfffc4 	movi	r2,-1
10005708:	8080038d 	sth	r2,14(r16)
1000570c:	00800044 	movi	r2,1
10005710:	8080030d 	sth	r2,12(r16)
10005714:	80001915 	stw	zero,100(r16)
10005718:	80000015 	stw	zero,0(r16)
1000571c:	80000215 	stw	zero,8(r16)
10005720:	80000115 	stw	zero,4(r16)
10005724:	80000415 	stw	zero,16(r16)
10005728:	80000515 	stw	zero,20(r16)
1000572c:	80000615 	stw	zero,24(r16)
10005730:	01800204 	movi	r6,8
10005734:	000b883a 	mov	r5,zero
10005738:	81001704 	addi	r4,r16,92
1000573c:	0005f740 	call	10005f74 <memset>
10005740:	8005883a 	mov	r2,r16
10005744:	80000c15 	stw	zero,48(r16)
10005748:	80000d15 	stw	zero,52(r16)
1000574c:	80001115 	stw	zero,68(r16)
10005750:	80001215 	stw	zero,72(r16)
10005754:	dfc00417 	ldw	ra,16(sp)
10005758:	dcc00317 	ldw	r19,12(sp)
1000575c:	dc800217 	ldw	r18,8(sp)
10005760:	dc400117 	ldw	r17,4(sp)
10005764:	dc000017 	ldw	r16,0(sp)
10005768:	dec00504 	addi	sp,sp,20
1000576c:	f800283a 	ret
10005770:	01400104 	movi	r5,4
10005774:	9809883a 	mov	r4,r19
10005778:	00056140 	call	10005614 <__sfmoreglue>
1000577c:	90800015 	stw	r2,0(r18)
10005780:	103fde1e 	bne	r2,zero,100056fc <__sfp+0x80>
10005784:	00800304 	movi	r2,12
10005788:	98800015 	stw	r2,0(r19)
1000578c:	0005883a 	mov	r2,zero
10005790:	003ff006 	br	10005754 <__sfp+0xd8>

10005794 <_cleanup>:
10005794:	00840074 	movhi	r2,4097
10005798:	10a24904 	addi	r2,r2,-30428
1000579c:	11000017 	ldw	r4,0(r2)
100057a0:	01440034 	movhi	r5,4096
100057a4:	2958a304 	addi	r5,r5,25228
100057a8:	0005cf41 	jmpi	10005cf4 <_fwalk_reent>

100057ac <__sinit>:
100057ac:	20800e17 	ldw	r2,56(r4)
100057b0:	10000126 	beq	r2,zero,100057b8 <__sinit+0xc>
100057b4:	f800283a 	ret
100057b8:	00054701 	jmpi	10005470 <__sinit.part.1>

100057bc <__sfp_lock_acquire>:
100057bc:	f800283a 	ret

100057c0 <__sfp_lock_release>:
100057c0:	f800283a 	ret

100057c4 <__sinit_lock_acquire>:
100057c4:	f800283a 	ret

100057c8 <__sinit_lock_release>:
100057c8:	f800283a 	ret

100057cc <__fp_lock_all>:
100057cc:	00840074 	movhi	r2,4097
100057d0:	10a24a04 	addi	r2,r2,-30424
100057d4:	11000017 	ldw	r4,0(r2)
100057d8:	01440034 	movhi	r5,4096
100057dc:	29558304 	addi	r5,r5,22028
100057e0:	0005c301 	jmpi	10005c30 <_fwalk>

100057e4 <__fp_unlock_all>:
100057e4:	00840074 	movhi	r2,4097
100057e8:	10a24a04 	addi	r2,r2,-30424
100057ec:	11000017 	ldw	r4,0(r2)
100057f0:	01440034 	movhi	r5,4096
100057f4:	29551704 	addi	r5,r5,21596
100057f8:	0005c301 	jmpi	10005c30 <_fwalk>

100057fc <_malloc_trim_r>:
100057fc:	defffb04 	addi	sp,sp,-20
10005800:	dcc00315 	stw	r19,12(sp)
10005804:	04c40074 	movhi	r19,4097
10005808:	dc800215 	stw	r18,8(sp)
1000580c:	dc400115 	stw	r17,4(sp)
10005810:	dc000015 	stw	r16,0(sp)
10005814:	dfc00415 	stw	ra,16(sp)
10005818:	2821883a 	mov	r16,r5
1000581c:	9ce13e04 	addi	r19,r19,-31496
10005820:	2025883a 	mov	r18,r4
10005824:	00069c40 	call	100069c4 <__malloc_lock>
10005828:	98800217 	ldw	r2,8(r19)
1000582c:	14400117 	ldw	r17,4(r2)
10005830:	00bfff04 	movi	r2,-4
10005834:	88a2703a 	and	r17,r17,r2
10005838:	8c21c83a 	sub	r16,r17,r16
1000583c:	8403fbc4 	addi	r16,r16,4079
10005840:	8020d33a 	srli	r16,r16,12
10005844:	0083ffc4 	movi	r2,4095
10005848:	843fffc4 	addi	r16,r16,-1
1000584c:	8020933a 	slli	r16,r16,12
10005850:	1400060e 	bge	r2,r16,1000586c <_malloc_trim_r+0x70>
10005854:	000b883a 	mov	r5,zero
10005858:	9009883a 	mov	r4,r18
1000585c:	0004c000 	call	10004c00 <_sbrk_r>
10005860:	98c00217 	ldw	r3,8(r19)
10005864:	1c47883a 	add	r3,r3,r17
10005868:	10c00a26 	beq	r2,r3,10005894 <_malloc_trim_r+0x98>
1000586c:	9009883a 	mov	r4,r18
10005870:	00069e80 	call	100069e8 <__malloc_unlock>
10005874:	0005883a 	mov	r2,zero
10005878:	dfc00417 	ldw	ra,16(sp)
1000587c:	dcc00317 	ldw	r19,12(sp)
10005880:	dc800217 	ldw	r18,8(sp)
10005884:	dc400117 	ldw	r17,4(sp)
10005888:	dc000017 	ldw	r16,0(sp)
1000588c:	dec00504 	addi	sp,sp,20
10005890:	f800283a 	ret
10005894:	040bc83a 	sub	r5,zero,r16
10005898:	9009883a 	mov	r4,r18
1000589c:	0004c000 	call	10004c00 <_sbrk_r>
100058a0:	00ffffc4 	movi	r3,-1
100058a4:	10c00d26 	beq	r2,r3,100058dc <_malloc_trim_r+0xe0>
100058a8:	00c40074 	movhi	r3,4097
100058ac:	18e92c04 	addi	r3,r3,-23376
100058b0:	18800017 	ldw	r2,0(r3)
100058b4:	99000217 	ldw	r4,8(r19)
100058b8:	8c23c83a 	sub	r17,r17,r16
100058bc:	8c400054 	ori	r17,r17,1
100058c0:	1421c83a 	sub	r16,r2,r16
100058c4:	24400115 	stw	r17,4(r4)
100058c8:	9009883a 	mov	r4,r18
100058cc:	1c000015 	stw	r16,0(r3)
100058d0:	00069e80 	call	100069e8 <__malloc_unlock>
100058d4:	00800044 	movi	r2,1
100058d8:	003fe706 	br	10005878 <_malloc_trim_r+0x7c>
100058dc:	000b883a 	mov	r5,zero
100058e0:	9009883a 	mov	r4,r18
100058e4:	0004c000 	call	10004c00 <_sbrk_r>
100058e8:	99000217 	ldw	r4,8(r19)
100058ec:	014003c4 	movi	r5,15
100058f0:	1107c83a 	sub	r3,r2,r4
100058f4:	28ffdd0e 	bge	r5,r3,1000586c <_malloc_trim_r+0x70>
100058f8:	01440074 	movhi	r5,4097
100058fc:	29624b04 	addi	r5,r5,-30420
10005900:	29400017 	ldw	r5,0(r5)
10005904:	18c00054 	ori	r3,r3,1
10005908:	20c00115 	stw	r3,4(r4)
1000590c:	00c40074 	movhi	r3,4097
10005910:	1145c83a 	sub	r2,r2,r5
10005914:	18e92c04 	addi	r3,r3,-23376
10005918:	18800015 	stw	r2,0(r3)
1000591c:	003fd306 	br	1000586c <_malloc_trim_r+0x70>

10005920 <_free_r>:
10005920:	28004126 	beq	r5,zero,10005a28 <_free_r+0x108>
10005924:	defffd04 	addi	sp,sp,-12
10005928:	dc400115 	stw	r17,4(sp)
1000592c:	dc000015 	stw	r16,0(sp)
10005930:	2023883a 	mov	r17,r4
10005934:	2821883a 	mov	r16,r5
10005938:	dfc00215 	stw	ra,8(sp)
1000593c:	00069c40 	call	100069c4 <__malloc_lock>
10005940:	81ffff17 	ldw	r7,-4(r16)
10005944:	00bfff84 	movi	r2,-2
10005948:	01040074 	movhi	r4,4097
1000594c:	81bffe04 	addi	r6,r16,-8
10005950:	3884703a 	and	r2,r7,r2
10005954:	21213e04 	addi	r4,r4,-31496
10005958:	308b883a 	add	r5,r6,r2
1000595c:	2a400117 	ldw	r9,4(r5)
10005960:	22000217 	ldw	r8,8(r4)
10005964:	00ffff04 	movi	r3,-4
10005968:	48c6703a 	and	r3,r9,r3
1000596c:	2a005726 	beq	r5,r8,10005acc <_free_r+0x1ac>
10005970:	28c00115 	stw	r3,4(r5)
10005974:	39c0004c 	andi	r7,r7,1
10005978:	3800091e 	bne	r7,zero,100059a0 <_free_r+0x80>
1000597c:	823ffe17 	ldw	r8,-8(r16)
10005980:	22400204 	addi	r9,r4,8
10005984:	320dc83a 	sub	r6,r6,r8
10005988:	31c00217 	ldw	r7,8(r6)
1000598c:	1205883a 	add	r2,r2,r8
10005990:	3a406526 	beq	r7,r9,10005b28 <_free_r+0x208>
10005994:	32000317 	ldw	r8,12(r6)
10005998:	3a000315 	stw	r8,12(r7)
1000599c:	41c00215 	stw	r7,8(r8)
100059a0:	28cf883a 	add	r7,r5,r3
100059a4:	39c00117 	ldw	r7,4(r7)
100059a8:	39c0004c 	andi	r7,r7,1
100059ac:	38003a26 	beq	r7,zero,10005a98 <_free_r+0x178>
100059b0:	10c00054 	ori	r3,r2,1
100059b4:	30c00115 	stw	r3,4(r6)
100059b8:	3087883a 	add	r3,r6,r2
100059bc:	18800015 	stw	r2,0(r3)
100059c0:	00c07fc4 	movi	r3,511
100059c4:	18801936 	bltu	r3,r2,10005a2c <_free_r+0x10c>
100059c8:	1004d0fa 	srli	r2,r2,3
100059cc:	01c00044 	movi	r7,1
100059d0:	21400117 	ldw	r5,4(r4)
100059d4:	10c00044 	addi	r3,r2,1
100059d8:	18c7883a 	add	r3,r3,r3
100059dc:	1005d0ba 	srai	r2,r2,2
100059e0:	18c7883a 	add	r3,r3,r3
100059e4:	18c7883a 	add	r3,r3,r3
100059e8:	1907883a 	add	r3,r3,r4
100059ec:	3884983a 	sll	r2,r7,r2
100059f0:	19c00017 	ldw	r7,0(r3)
100059f4:	1a3ffe04 	addi	r8,r3,-8
100059f8:	1144b03a 	or	r2,r2,r5
100059fc:	32000315 	stw	r8,12(r6)
10005a00:	31c00215 	stw	r7,8(r6)
10005a04:	20800115 	stw	r2,4(r4)
10005a08:	19800015 	stw	r6,0(r3)
10005a0c:	39800315 	stw	r6,12(r7)
10005a10:	8809883a 	mov	r4,r17
10005a14:	dfc00217 	ldw	ra,8(sp)
10005a18:	dc400117 	ldw	r17,4(sp)
10005a1c:	dc000017 	ldw	r16,0(sp)
10005a20:	dec00304 	addi	sp,sp,12
10005a24:	00069e81 	jmpi	100069e8 <__malloc_unlock>
10005a28:	f800283a 	ret
10005a2c:	100ad27a 	srli	r5,r2,9
10005a30:	00c00104 	movi	r3,4
10005a34:	19404a36 	bltu	r3,r5,10005b60 <_free_r+0x240>
10005a38:	100ad1ba 	srli	r5,r2,6
10005a3c:	28c00e44 	addi	r3,r5,57
10005a40:	18c7883a 	add	r3,r3,r3
10005a44:	29400e04 	addi	r5,r5,56
10005a48:	18c7883a 	add	r3,r3,r3
10005a4c:	18c7883a 	add	r3,r3,r3
10005a50:	1909883a 	add	r4,r3,r4
10005a54:	20c00017 	ldw	r3,0(r4)
10005a58:	01c40074 	movhi	r7,4097
10005a5c:	213ffe04 	addi	r4,r4,-8
10005a60:	39e13e04 	addi	r7,r7,-31496
10005a64:	20c04426 	beq	r4,r3,10005b78 <_free_r+0x258>
10005a68:	01ffff04 	movi	r7,-4
10005a6c:	19400117 	ldw	r5,4(r3)
10005a70:	29ca703a 	and	r5,r5,r7
10005a74:	1140022e 	bgeu	r2,r5,10005a80 <_free_r+0x160>
10005a78:	18c00217 	ldw	r3,8(r3)
10005a7c:	20fffb1e 	bne	r4,r3,10005a6c <_free_r+0x14c>
10005a80:	19000317 	ldw	r4,12(r3)
10005a84:	31000315 	stw	r4,12(r6)
10005a88:	30c00215 	stw	r3,8(r6)
10005a8c:	21800215 	stw	r6,8(r4)
10005a90:	19800315 	stw	r6,12(r3)
10005a94:	003fde06 	br	10005a10 <_free_r+0xf0>
10005a98:	29c00217 	ldw	r7,8(r5)
10005a9c:	10c5883a 	add	r2,r2,r3
10005aa0:	00c40074 	movhi	r3,4097
10005aa4:	18e14004 	addi	r3,r3,-31488
10005aa8:	38c03b26 	beq	r7,r3,10005b98 <_free_r+0x278>
10005aac:	2a000317 	ldw	r8,12(r5)
10005ab0:	11400054 	ori	r5,r2,1
10005ab4:	3087883a 	add	r3,r6,r2
10005ab8:	3a000315 	stw	r8,12(r7)
10005abc:	41c00215 	stw	r7,8(r8)
10005ac0:	31400115 	stw	r5,4(r6)
10005ac4:	18800015 	stw	r2,0(r3)
10005ac8:	003fbd06 	br	100059c0 <_free_r+0xa0>
10005acc:	39c0004c 	andi	r7,r7,1
10005ad0:	10c5883a 	add	r2,r2,r3
10005ad4:	3800071e 	bne	r7,zero,10005af4 <_free_r+0x1d4>
10005ad8:	81fffe17 	ldw	r7,-8(r16)
10005adc:	31cdc83a 	sub	r6,r6,r7
10005ae0:	30c00317 	ldw	r3,12(r6)
10005ae4:	31400217 	ldw	r5,8(r6)
10005ae8:	11c5883a 	add	r2,r2,r7
10005aec:	28c00315 	stw	r3,12(r5)
10005af0:	19400215 	stw	r5,8(r3)
10005af4:	10c00054 	ori	r3,r2,1
10005af8:	30c00115 	stw	r3,4(r6)
10005afc:	00c40074 	movhi	r3,4097
10005b00:	18e24c04 	addi	r3,r3,-30416
10005b04:	18c00017 	ldw	r3,0(r3)
10005b08:	21800215 	stw	r6,8(r4)
10005b0c:	10ffc036 	bltu	r2,r3,10005a10 <_free_r+0xf0>
10005b10:	00840074 	movhi	r2,4097
10005b14:	10a92b04 	addi	r2,r2,-23380
10005b18:	11400017 	ldw	r5,0(r2)
10005b1c:	8809883a 	mov	r4,r17
10005b20:	00057fc0 	call	100057fc <_malloc_trim_r>
10005b24:	003fba06 	br	10005a10 <_free_r+0xf0>
10005b28:	28c9883a 	add	r4,r5,r3
10005b2c:	21000117 	ldw	r4,4(r4)
10005b30:	2100004c 	andi	r4,r4,1
10005b34:	2000391e 	bne	r4,zero,10005c1c <_free_r+0x2fc>
10005b38:	29c00217 	ldw	r7,8(r5)
10005b3c:	29000317 	ldw	r4,12(r5)
10005b40:	1885883a 	add	r2,r3,r2
10005b44:	10c00054 	ori	r3,r2,1
10005b48:	39000315 	stw	r4,12(r7)
10005b4c:	21c00215 	stw	r7,8(r4)
10005b50:	30c00115 	stw	r3,4(r6)
10005b54:	308d883a 	add	r6,r6,r2
10005b58:	30800015 	stw	r2,0(r6)
10005b5c:	003fac06 	br	10005a10 <_free_r+0xf0>
10005b60:	00c00504 	movi	r3,20
10005b64:	19401536 	bltu	r3,r5,10005bbc <_free_r+0x29c>
10005b68:	28c01704 	addi	r3,r5,92
10005b6c:	18c7883a 	add	r3,r3,r3
10005b70:	294016c4 	addi	r5,r5,91
10005b74:	003fb406 	br	10005a48 <_free_r+0x128>
10005b78:	280bd0ba 	srai	r5,r5,2
10005b7c:	00c00044 	movi	r3,1
10005b80:	38800117 	ldw	r2,4(r7)
10005b84:	194a983a 	sll	r5,r3,r5
10005b88:	2007883a 	mov	r3,r4
10005b8c:	2884b03a 	or	r2,r5,r2
10005b90:	38800115 	stw	r2,4(r7)
10005b94:	003fbb06 	br	10005a84 <_free_r+0x164>
10005b98:	21800515 	stw	r6,20(r4)
10005b9c:	21800415 	stw	r6,16(r4)
10005ba0:	10c00054 	ori	r3,r2,1
10005ba4:	31c00315 	stw	r7,12(r6)
10005ba8:	31c00215 	stw	r7,8(r6)
10005bac:	30c00115 	stw	r3,4(r6)
10005bb0:	308d883a 	add	r6,r6,r2
10005bb4:	30800015 	stw	r2,0(r6)
10005bb8:	003f9506 	br	10005a10 <_free_r+0xf0>
10005bbc:	00c01504 	movi	r3,84
10005bc0:	19400536 	bltu	r3,r5,10005bd8 <_free_r+0x2b8>
10005bc4:	100ad33a 	srli	r5,r2,12
10005bc8:	28c01bc4 	addi	r3,r5,111
10005bcc:	18c7883a 	add	r3,r3,r3
10005bd0:	29401b84 	addi	r5,r5,110
10005bd4:	003f9c06 	br	10005a48 <_free_r+0x128>
10005bd8:	00c05504 	movi	r3,340
10005bdc:	19400536 	bltu	r3,r5,10005bf4 <_free_r+0x2d4>
10005be0:	100ad3fa 	srli	r5,r2,15
10005be4:	28c01e04 	addi	r3,r5,120
10005be8:	18c7883a 	add	r3,r3,r3
10005bec:	29401dc4 	addi	r5,r5,119
10005bf0:	003f9506 	br	10005a48 <_free_r+0x128>
10005bf4:	00c15504 	movi	r3,1364
10005bf8:	19400536 	bltu	r3,r5,10005c10 <_free_r+0x2f0>
10005bfc:	100ad4ba 	srli	r5,r2,18
10005c00:	28c01f44 	addi	r3,r5,125
10005c04:	18c7883a 	add	r3,r3,r3
10005c08:	29401f04 	addi	r5,r5,124
10005c0c:	003f8e06 	br	10005a48 <_free_r+0x128>
10005c10:	00c03f84 	movi	r3,254
10005c14:	01401f84 	movi	r5,126
10005c18:	003f8b06 	br	10005a48 <_free_r+0x128>
10005c1c:	10c00054 	ori	r3,r2,1
10005c20:	30c00115 	stw	r3,4(r6)
10005c24:	308d883a 	add	r6,r6,r2
10005c28:	30800015 	stw	r2,0(r6)
10005c2c:	003f7806 	br	10005a10 <_free_r+0xf0>

10005c30 <_fwalk>:
10005c30:	defff704 	addi	sp,sp,-36
10005c34:	dd000415 	stw	r20,16(sp)
10005c38:	dfc00815 	stw	ra,32(sp)
10005c3c:	ddc00715 	stw	r23,28(sp)
10005c40:	dd800615 	stw	r22,24(sp)
10005c44:	dd400515 	stw	r21,20(sp)
10005c48:	dcc00315 	stw	r19,12(sp)
10005c4c:	dc800215 	stw	r18,8(sp)
10005c50:	dc400115 	stw	r17,4(sp)
10005c54:	dc000015 	stw	r16,0(sp)
10005c58:	2500b804 	addi	r20,r4,736
10005c5c:	a0002326 	beq	r20,zero,10005cec <_fwalk+0xbc>
10005c60:	282b883a 	mov	r21,r5
10005c64:	002f883a 	mov	r23,zero
10005c68:	05800044 	movi	r22,1
10005c6c:	04ffffc4 	movi	r19,-1
10005c70:	a4400117 	ldw	r17,4(r20)
10005c74:	a4800217 	ldw	r18,8(r20)
10005c78:	8c7fffc4 	addi	r17,r17,-1
10005c7c:	88000d16 	blt	r17,zero,10005cb4 <_fwalk+0x84>
10005c80:	94000304 	addi	r16,r18,12
10005c84:	94800384 	addi	r18,r18,14
10005c88:	8080000b 	ldhu	r2,0(r16)
10005c8c:	8c7fffc4 	addi	r17,r17,-1
10005c90:	813ffd04 	addi	r4,r16,-12
10005c94:	b080042e 	bgeu	r22,r2,10005ca8 <_fwalk+0x78>
10005c98:	9080000f 	ldh	r2,0(r18)
10005c9c:	14c00226 	beq	r2,r19,10005ca8 <_fwalk+0x78>
10005ca0:	a83ee83a 	callr	r21
10005ca4:	b8aeb03a 	or	r23,r23,r2
10005ca8:	84001a04 	addi	r16,r16,104
10005cac:	94801a04 	addi	r18,r18,104
10005cb0:	8cfff51e 	bne	r17,r19,10005c88 <_fwalk+0x58>
10005cb4:	a5000017 	ldw	r20,0(r20)
10005cb8:	a03fed1e 	bne	r20,zero,10005c70 <_fwalk+0x40>
10005cbc:	b805883a 	mov	r2,r23
10005cc0:	dfc00817 	ldw	ra,32(sp)
10005cc4:	ddc00717 	ldw	r23,28(sp)
10005cc8:	dd800617 	ldw	r22,24(sp)
10005ccc:	dd400517 	ldw	r21,20(sp)
10005cd0:	dd000417 	ldw	r20,16(sp)
10005cd4:	dcc00317 	ldw	r19,12(sp)
10005cd8:	dc800217 	ldw	r18,8(sp)
10005cdc:	dc400117 	ldw	r17,4(sp)
10005ce0:	dc000017 	ldw	r16,0(sp)
10005ce4:	dec00904 	addi	sp,sp,36
10005ce8:	f800283a 	ret
10005cec:	002f883a 	mov	r23,zero
10005cf0:	003ff206 	br	10005cbc <_fwalk+0x8c>

10005cf4 <_fwalk_reent>:
10005cf4:	defff704 	addi	sp,sp,-36
10005cf8:	dd000415 	stw	r20,16(sp)
10005cfc:	dfc00815 	stw	ra,32(sp)
10005d00:	ddc00715 	stw	r23,28(sp)
10005d04:	dd800615 	stw	r22,24(sp)
10005d08:	dd400515 	stw	r21,20(sp)
10005d0c:	dcc00315 	stw	r19,12(sp)
10005d10:	dc800215 	stw	r18,8(sp)
10005d14:	dc400115 	stw	r17,4(sp)
10005d18:	dc000015 	stw	r16,0(sp)
10005d1c:	2500b804 	addi	r20,r4,736
10005d20:	a0002326 	beq	r20,zero,10005db0 <_fwalk_reent+0xbc>
10005d24:	282b883a 	mov	r21,r5
10005d28:	2027883a 	mov	r19,r4
10005d2c:	002f883a 	mov	r23,zero
10005d30:	05800044 	movi	r22,1
10005d34:	04bfffc4 	movi	r18,-1
10005d38:	a4400117 	ldw	r17,4(r20)
10005d3c:	a4000217 	ldw	r16,8(r20)
10005d40:	8c7fffc4 	addi	r17,r17,-1
10005d44:	88000c16 	blt	r17,zero,10005d78 <_fwalk_reent+0x84>
10005d48:	84000304 	addi	r16,r16,12
10005d4c:	8080000b 	ldhu	r2,0(r16)
10005d50:	8c7fffc4 	addi	r17,r17,-1
10005d54:	817ffd04 	addi	r5,r16,-12
10005d58:	b080052e 	bgeu	r22,r2,10005d70 <_fwalk_reent+0x7c>
10005d5c:	8080008f 	ldh	r2,2(r16)
10005d60:	9809883a 	mov	r4,r19
10005d64:	14800226 	beq	r2,r18,10005d70 <_fwalk_reent+0x7c>
10005d68:	a83ee83a 	callr	r21
10005d6c:	b8aeb03a 	or	r23,r23,r2
10005d70:	84001a04 	addi	r16,r16,104
10005d74:	8cbff51e 	bne	r17,r18,10005d4c <_fwalk_reent+0x58>
10005d78:	a5000017 	ldw	r20,0(r20)
10005d7c:	a03fee1e 	bne	r20,zero,10005d38 <_fwalk_reent+0x44>
10005d80:	b805883a 	mov	r2,r23
10005d84:	dfc00817 	ldw	ra,32(sp)
10005d88:	ddc00717 	ldw	r23,28(sp)
10005d8c:	dd800617 	ldw	r22,24(sp)
10005d90:	dd400517 	ldw	r21,20(sp)
10005d94:	dd000417 	ldw	r20,16(sp)
10005d98:	dcc00317 	ldw	r19,12(sp)
10005d9c:	dc800217 	ldw	r18,8(sp)
10005da0:	dc400117 	ldw	r17,4(sp)
10005da4:	dc000017 	ldw	r16,0(sp)
10005da8:	dec00904 	addi	sp,sp,36
10005dac:	f800283a 	ret
10005db0:	002f883a 	mov	r23,zero
10005db4:	003ff206 	br	10005d80 <_fwalk_reent+0x8c>

10005db8 <__smakebuf_r>:
10005db8:	2880030b 	ldhu	r2,12(r5)
10005dbc:	10c0008c 	andi	r3,r2,2
10005dc0:	1800411e 	bne	r3,zero,10005ec8 <__smakebuf_r+0x110>
10005dc4:	deffec04 	addi	sp,sp,-80
10005dc8:	dc000f15 	stw	r16,60(sp)
10005dcc:	2821883a 	mov	r16,r5
10005dd0:	2940038f 	ldh	r5,14(r5)
10005dd4:	dc401015 	stw	r17,64(sp)
10005dd8:	dfc01315 	stw	ra,76(sp)
10005ddc:	dcc01215 	stw	r19,72(sp)
10005de0:	dc801115 	stw	r18,68(sp)
10005de4:	2023883a 	mov	r17,r4
10005de8:	28001c16 	blt	r5,zero,10005e5c <__smakebuf_r+0xa4>
10005dec:	d80d883a 	mov	r6,sp
10005df0:	00063900 	call	10006390 <_fstat_r>
10005df4:	10001816 	blt	r2,zero,10005e58 <__smakebuf_r+0xa0>
10005df8:	d8800117 	ldw	r2,4(sp)
10005dfc:	00e00014 	movui	r3,32768
10005e00:	10bc000c 	andi	r2,r2,61440
10005e04:	14c80020 	cmpeqi	r19,r2,8192
10005e08:	10c03726 	beq	r2,r3,10005ee8 <__smakebuf_r+0x130>
10005e0c:	80c0030b 	ldhu	r3,12(r16)
10005e10:	18c20014 	ori	r3,r3,2048
10005e14:	80c0030d 	sth	r3,12(r16)
10005e18:	00c80004 	movi	r3,8192
10005e1c:	10c0521e 	bne	r2,r3,10005f68 <__smakebuf_r+0x1b0>
10005e20:	8140038f 	ldh	r5,14(r16)
10005e24:	8809883a 	mov	r4,r17
10005e28:	00063ec0 	call	100063ec <_isatty_r>
10005e2c:	10004c26 	beq	r2,zero,10005f60 <__smakebuf_r+0x1a8>
10005e30:	8080030b 	ldhu	r2,12(r16)
10005e34:	80c010c4 	addi	r3,r16,67
10005e38:	80c00015 	stw	r3,0(r16)
10005e3c:	10800054 	ori	r2,r2,1
10005e40:	8080030d 	sth	r2,12(r16)
10005e44:	00800044 	movi	r2,1
10005e48:	80c00415 	stw	r3,16(r16)
10005e4c:	80800515 	stw	r2,20(r16)
10005e50:	04810004 	movi	r18,1024
10005e54:	00000706 	br	10005e74 <__smakebuf_r+0xbc>
10005e58:	8080030b 	ldhu	r2,12(r16)
10005e5c:	10c0200c 	andi	r3,r2,128
10005e60:	18001f1e 	bne	r3,zero,10005ee0 <__smakebuf_r+0x128>
10005e64:	04810004 	movi	r18,1024
10005e68:	10820014 	ori	r2,r2,2048
10005e6c:	8080030d 	sth	r2,12(r16)
10005e70:	0027883a 	mov	r19,zero
10005e74:	900b883a 	mov	r5,r18
10005e78:	8809883a 	mov	r4,r17
10005e7c:	0003a8c0 	call	10003a8c <_malloc_r>
10005e80:	10002c26 	beq	r2,zero,10005f34 <__smakebuf_r+0x17c>
10005e84:	80c0030b 	ldhu	r3,12(r16)
10005e88:	01040034 	movhi	r4,4096
10005e8c:	21151904 	addi	r4,r4,21604
10005e90:	89000f15 	stw	r4,60(r17)
10005e94:	18c02014 	ori	r3,r3,128
10005e98:	80c0030d 	sth	r3,12(r16)
10005e9c:	80800015 	stw	r2,0(r16)
10005ea0:	80800415 	stw	r2,16(r16)
10005ea4:	84800515 	stw	r18,20(r16)
10005ea8:	98001a1e 	bne	r19,zero,10005f14 <__smakebuf_r+0x15c>
10005eac:	dfc01317 	ldw	ra,76(sp)
10005eb0:	dcc01217 	ldw	r19,72(sp)
10005eb4:	dc801117 	ldw	r18,68(sp)
10005eb8:	dc401017 	ldw	r17,64(sp)
10005ebc:	dc000f17 	ldw	r16,60(sp)
10005ec0:	dec01404 	addi	sp,sp,80
10005ec4:	f800283a 	ret
10005ec8:	288010c4 	addi	r2,r5,67
10005ecc:	28800015 	stw	r2,0(r5)
10005ed0:	28800415 	stw	r2,16(r5)
10005ed4:	00800044 	movi	r2,1
10005ed8:	28800515 	stw	r2,20(r5)
10005edc:	f800283a 	ret
10005ee0:	04801004 	movi	r18,64
10005ee4:	003fe006 	br	10005e68 <__smakebuf_r+0xb0>
10005ee8:	81000a17 	ldw	r4,40(r16)
10005eec:	00c40034 	movhi	r3,4096
10005ef0:	18d85d04 	addi	r3,r3,24948
10005ef4:	20ffc51e 	bne	r4,r3,10005e0c <__smakebuf_r+0x54>
10005ef8:	8080030b 	ldhu	r2,12(r16)
10005efc:	04810004 	movi	r18,1024
10005f00:	84801315 	stw	r18,76(r16)
10005f04:	1484b03a 	or	r2,r2,r18
10005f08:	8080030d 	sth	r2,12(r16)
10005f0c:	0027883a 	mov	r19,zero
10005f10:	003fd806 	br	10005e74 <__smakebuf_r+0xbc>
10005f14:	8140038f 	ldh	r5,14(r16)
10005f18:	8809883a 	mov	r4,r17
10005f1c:	00063ec0 	call	100063ec <_isatty_r>
10005f20:	103fe226 	beq	r2,zero,10005eac <__smakebuf_r+0xf4>
10005f24:	8080030b 	ldhu	r2,12(r16)
10005f28:	10800054 	ori	r2,r2,1
10005f2c:	8080030d 	sth	r2,12(r16)
10005f30:	003fde06 	br	10005eac <__smakebuf_r+0xf4>
10005f34:	8080030b 	ldhu	r2,12(r16)
10005f38:	10c0800c 	andi	r3,r2,512
10005f3c:	183fdb1e 	bne	r3,zero,10005eac <__smakebuf_r+0xf4>
10005f40:	10800094 	ori	r2,r2,2
10005f44:	80c010c4 	addi	r3,r16,67
10005f48:	8080030d 	sth	r2,12(r16)
10005f4c:	00800044 	movi	r2,1
10005f50:	80c00015 	stw	r3,0(r16)
10005f54:	80c00415 	stw	r3,16(r16)
10005f58:	80800515 	stw	r2,20(r16)
10005f5c:	003fd306 	br	10005eac <__smakebuf_r+0xf4>
10005f60:	04810004 	movi	r18,1024
10005f64:	003fc306 	br	10005e74 <__smakebuf_r+0xbc>
10005f68:	0027883a 	mov	r19,zero
10005f6c:	04810004 	movi	r18,1024
10005f70:	003fc006 	br	10005e74 <__smakebuf_r+0xbc>

10005f74 <memset>:
10005f74:	20c000cc 	andi	r3,r4,3
10005f78:	2005883a 	mov	r2,r4
10005f7c:	18004426 	beq	r3,zero,10006090 <memset+0x11c>
10005f80:	31ffffc4 	addi	r7,r6,-1
10005f84:	30004026 	beq	r6,zero,10006088 <memset+0x114>
10005f88:	2813883a 	mov	r9,r5
10005f8c:	200d883a 	mov	r6,r4
10005f90:	2007883a 	mov	r3,r4
10005f94:	00000406 	br	10005fa8 <memset+0x34>
10005f98:	3a3fffc4 	addi	r8,r7,-1
10005f9c:	31800044 	addi	r6,r6,1
10005fa0:	38003926 	beq	r7,zero,10006088 <memset+0x114>
10005fa4:	400f883a 	mov	r7,r8
10005fa8:	18c00044 	addi	r3,r3,1
10005fac:	32400005 	stb	r9,0(r6)
10005fb0:	1a0000cc 	andi	r8,r3,3
10005fb4:	403ff81e 	bne	r8,zero,10005f98 <memset+0x24>
10005fb8:	010000c4 	movi	r4,3
10005fbc:	21c02d2e 	bgeu	r4,r7,10006074 <memset+0x100>
10005fc0:	29003fcc 	andi	r4,r5,255
10005fc4:	200c923a 	slli	r6,r4,8
10005fc8:	3108b03a 	or	r4,r6,r4
10005fcc:	200c943a 	slli	r6,r4,16
10005fd0:	218cb03a 	or	r6,r4,r6
10005fd4:	010003c4 	movi	r4,15
10005fd8:	21c0182e 	bgeu	r4,r7,1000603c <memset+0xc8>
10005fdc:	3b3ffc04 	addi	r12,r7,-16
10005fe0:	6018d13a 	srli	r12,r12,4
10005fe4:	1a000104 	addi	r8,r3,4
10005fe8:	1ac00204 	addi	r11,r3,8
10005fec:	6008913a 	slli	r4,r12,4
10005ff0:	1a800304 	addi	r10,r3,12
10005ff4:	1813883a 	mov	r9,r3
10005ff8:	21000504 	addi	r4,r4,20
10005ffc:	1909883a 	add	r4,r3,r4
10006000:	49800015 	stw	r6,0(r9)
10006004:	41800015 	stw	r6,0(r8)
10006008:	59800015 	stw	r6,0(r11)
1000600c:	51800015 	stw	r6,0(r10)
10006010:	42000404 	addi	r8,r8,16
10006014:	4a400404 	addi	r9,r9,16
10006018:	5ac00404 	addi	r11,r11,16
1000601c:	52800404 	addi	r10,r10,16
10006020:	413ff71e 	bne	r8,r4,10006000 <memset+0x8c>
10006024:	63000044 	addi	r12,r12,1
10006028:	6018913a 	slli	r12,r12,4
1000602c:	39c003cc 	andi	r7,r7,15
10006030:	010000c4 	movi	r4,3
10006034:	1b07883a 	add	r3,r3,r12
10006038:	21c00e2e 	bgeu	r4,r7,10006074 <memset+0x100>
1000603c:	1813883a 	mov	r9,r3
10006040:	3811883a 	mov	r8,r7
10006044:	010000c4 	movi	r4,3
10006048:	49800015 	stw	r6,0(r9)
1000604c:	423fff04 	addi	r8,r8,-4
10006050:	4a400104 	addi	r9,r9,4
10006054:	223ffc36 	bltu	r4,r8,10006048 <memset+0xd4>
10006058:	393fff04 	addi	r4,r7,-4
1000605c:	2008d0ba 	srli	r4,r4,2
10006060:	39c000cc 	andi	r7,r7,3
10006064:	21000044 	addi	r4,r4,1
10006068:	2109883a 	add	r4,r4,r4
1000606c:	2109883a 	add	r4,r4,r4
10006070:	1907883a 	add	r3,r3,r4
10006074:	38000526 	beq	r7,zero,1000608c <memset+0x118>
10006078:	19cf883a 	add	r7,r3,r7
1000607c:	19400005 	stb	r5,0(r3)
10006080:	18c00044 	addi	r3,r3,1
10006084:	38fffd1e 	bne	r7,r3,1000607c <memset+0x108>
10006088:	f800283a 	ret
1000608c:	f800283a 	ret
10006090:	2007883a 	mov	r3,r4
10006094:	300f883a 	mov	r7,r6
10006098:	003fc706 	br	10005fb8 <memset+0x44>

1000609c <__sread>:
1000609c:	defffe04 	addi	sp,sp,-8
100060a0:	dc000015 	stw	r16,0(sp)
100060a4:	2821883a 	mov	r16,r5
100060a8:	2940038f 	ldh	r5,14(r5)
100060ac:	dfc00115 	stw	ra,4(sp)
100060b0:	00064a00 	call	100064a0 <_read_r>
100060b4:	10000716 	blt	r2,zero,100060d4 <__sread+0x38>
100060b8:	80c01417 	ldw	r3,80(r16)
100060bc:	1887883a 	add	r3,r3,r2
100060c0:	80c01415 	stw	r3,80(r16)
100060c4:	dfc00117 	ldw	ra,4(sp)
100060c8:	dc000017 	ldw	r16,0(sp)
100060cc:	dec00204 	addi	sp,sp,8
100060d0:	f800283a 	ret
100060d4:	80c0030b 	ldhu	r3,12(r16)
100060d8:	18fbffcc 	andi	r3,r3,61439
100060dc:	80c0030d 	sth	r3,12(r16)
100060e0:	dfc00117 	ldw	ra,4(sp)
100060e4:	dc000017 	ldw	r16,0(sp)
100060e8:	dec00204 	addi	sp,sp,8
100060ec:	f800283a 	ret

100060f0 <__seofread>:
100060f0:	0005883a 	mov	r2,zero
100060f4:	f800283a 	ret

100060f8 <__swrite>:
100060f8:	2880030b 	ldhu	r2,12(r5)
100060fc:	defffb04 	addi	sp,sp,-20
10006100:	dcc00315 	stw	r19,12(sp)
10006104:	dc800215 	stw	r18,8(sp)
10006108:	dc400115 	stw	r17,4(sp)
1000610c:	dc000015 	stw	r16,0(sp)
10006110:	dfc00415 	stw	ra,16(sp)
10006114:	10c0400c 	andi	r3,r2,256
10006118:	2821883a 	mov	r16,r5
1000611c:	2023883a 	mov	r17,r4
10006120:	3025883a 	mov	r18,r6
10006124:	3827883a 	mov	r19,r7
10006128:	18000526 	beq	r3,zero,10006140 <__swrite+0x48>
1000612c:	2940038f 	ldh	r5,14(r5)
10006130:	01c00084 	movi	r7,2
10006134:	000d883a 	mov	r6,zero
10006138:	00064400 	call	10006440 <_lseek_r>
1000613c:	8080030b 	ldhu	r2,12(r16)
10006140:	8140038f 	ldh	r5,14(r16)
10006144:	10bbffcc 	andi	r2,r2,61439
10006148:	980f883a 	mov	r7,r19
1000614c:	900d883a 	mov	r6,r18
10006150:	8809883a 	mov	r4,r17
10006154:	8080030d 	sth	r2,12(r16)
10006158:	dfc00417 	ldw	ra,16(sp)
1000615c:	dcc00317 	ldw	r19,12(sp)
10006160:	dc800217 	ldw	r18,8(sp)
10006164:	dc400117 	ldw	r17,4(sp)
10006168:	dc000017 	ldw	r16,0(sp)
1000616c:	dec00504 	addi	sp,sp,20
10006170:	00061d81 	jmpi	100061d8 <_write_r>

10006174 <__sseek>:
10006174:	defffe04 	addi	sp,sp,-8
10006178:	dc000015 	stw	r16,0(sp)
1000617c:	2821883a 	mov	r16,r5
10006180:	2940038f 	ldh	r5,14(r5)
10006184:	dfc00115 	stw	ra,4(sp)
10006188:	00064400 	call	10006440 <_lseek_r>
1000618c:	00ffffc4 	movi	r3,-1
10006190:	10c00826 	beq	r2,r3,100061b4 <__sseek+0x40>
10006194:	80c0030b 	ldhu	r3,12(r16)
10006198:	80801415 	stw	r2,80(r16)
1000619c:	18c40014 	ori	r3,r3,4096
100061a0:	80c0030d 	sth	r3,12(r16)
100061a4:	dfc00117 	ldw	ra,4(sp)
100061a8:	dc000017 	ldw	r16,0(sp)
100061ac:	dec00204 	addi	sp,sp,8
100061b0:	f800283a 	ret
100061b4:	80c0030b 	ldhu	r3,12(r16)
100061b8:	18fbffcc 	andi	r3,r3,61439
100061bc:	80c0030d 	sth	r3,12(r16)
100061c0:	dfc00117 	ldw	ra,4(sp)
100061c4:	dc000017 	ldw	r16,0(sp)
100061c8:	dec00204 	addi	sp,sp,8
100061cc:	f800283a 	ret

100061d0 <__sclose>:
100061d0:	2940038f 	ldh	r5,14(r5)
100061d4:	00062381 	jmpi	10006238 <_close_r>

100061d8 <_write_r>:
100061d8:	defffd04 	addi	sp,sp,-12
100061dc:	2805883a 	mov	r2,r5
100061e0:	dc000015 	stw	r16,0(sp)
100061e4:	04040074 	movhi	r16,4097
100061e8:	dc400115 	stw	r17,4(sp)
100061ec:	300b883a 	mov	r5,r6
100061f0:	84292804 	addi	r16,r16,-23392
100061f4:	2023883a 	mov	r17,r4
100061f8:	380d883a 	mov	r6,r7
100061fc:	1009883a 	mov	r4,r2
10006200:	dfc00215 	stw	ra,8(sp)
10006204:	80000015 	stw	zero,0(r16)
10006208:	0006c300 	call	10006c30 <write>
1000620c:	00ffffc4 	movi	r3,-1
10006210:	10c00526 	beq	r2,r3,10006228 <_write_r+0x50>
10006214:	dfc00217 	ldw	ra,8(sp)
10006218:	dc400117 	ldw	r17,4(sp)
1000621c:	dc000017 	ldw	r16,0(sp)
10006220:	dec00304 	addi	sp,sp,12
10006224:	f800283a 	ret
10006228:	80c00017 	ldw	r3,0(r16)
1000622c:	183ff926 	beq	r3,zero,10006214 <_write_r+0x3c>
10006230:	88c00015 	stw	r3,0(r17)
10006234:	003ff706 	br	10006214 <_write_r+0x3c>

10006238 <_close_r>:
10006238:	defffd04 	addi	sp,sp,-12
1000623c:	dc000015 	stw	r16,0(sp)
10006240:	04040074 	movhi	r16,4097
10006244:	dc400115 	stw	r17,4(sp)
10006248:	84292804 	addi	r16,r16,-23392
1000624c:	2023883a 	mov	r17,r4
10006250:	2809883a 	mov	r4,r5
10006254:	dfc00215 	stw	ra,8(sp)
10006258:	80000015 	stw	zero,0(r16)
1000625c:	00025f00 	call	100025f0 <close>
10006260:	00ffffc4 	movi	r3,-1
10006264:	10c00526 	beq	r2,r3,1000627c <_close_r+0x44>
10006268:	dfc00217 	ldw	ra,8(sp)
1000626c:	dc400117 	ldw	r17,4(sp)
10006270:	dc000017 	ldw	r16,0(sp)
10006274:	dec00304 	addi	sp,sp,12
10006278:	f800283a 	ret
1000627c:	80c00017 	ldw	r3,0(r16)
10006280:	183ff926 	beq	r3,zero,10006268 <_close_r+0x30>
10006284:	88c00015 	stw	r3,0(r17)
10006288:	003ff706 	br	10006268 <_close_r+0x30>

1000628c <_fclose_r>:
1000628c:	28003926 	beq	r5,zero,10006374 <_fclose_r+0xe8>
10006290:	defffc04 	addi	sp,sp,-16
10006294:	dc400115 	stw	r17,4(sp)
10006298:	dc000015 	stw	r16,0(sp)
1000629c:	dfc00315 	stw	ra,12(sp)
100062a0:	dc800215 	stw	r18,8(sp)
100062a4:	2023883a 	mov	r17,r4
100062a8:	2821883a 	mov	r16,r5
100062ac:	20000226 	beq	r4,zero,100062b8 <_fclose_r+0x2c>
100062b0:	20800e17 	ldw	r2,56(r4)
100062b4:	10002726 	beq	r2,zero,10006354 <_fclose_r+0xc8>
100062b8:	8080030f 	ldh	r2,12(r16)
100062bc:	1000071e 	bne	r2,zero,100062dc <_fclose_r+0x50>
100062c0:	0005883a 	mov	r2,zero
100062c4:	dfc00317 	ldw	ra,12(sp)
100062c8:	dc800217 	ldw	r18,8(sp)
100062cc:	dc400117 	ldw	r17,4(sp)
100062d0:	dc000017 	ldw	r16,0(sp)
100062d4:	dec00404 	addi	sp,sp,16
100062d8:	f800283a 	ret
100062dc:	800b883a 	mov	r5,r16
100062e0:	8809883a 	mov	r4,r17
100062e4:	00051b40 	call	100051b4 <__sflush_r>
100062e8:	1025883a 	mov	r18,r2
100062ec:	80800b17 	ldw	r2,44(r16)
100062f0:	10000426 	beq	r2,zero,10006304 <_fclose_r+0x78>
100062f4:	81400717 	ldw	r5,28(r16)
100062f8:	8809883a 	mov	r4,r17
100062fc:	103ee83a 	callr	r2
10006300:	10001616 	blt	r2,zero,1000635c <_fclose_r+0xd0>
10006304:	8080030b 	ldhu	r2,12(r16)
10006308:	1080200c 	andi	r2,r2,128
1000630c:	1000151e 	bne	r2,zero,10006364 <_fclose_r+0xd8>
10006310:	81400c17 	ldw	r5,48(r16)
10006314:	28000526 	beq	r5,zero,1000632c <_fclose_r+0xa0>
10006318:	80801004 	addi	r2,r16,64
1000631c:	28800226 	beq	r5,r2,10006328 <_fclose_r+0x9c>
10006320:	8809883a 	mov	r4,r17
10006324:	00059200 	call	10005920 <_free_r>
10006328:	80000c15 	stw	zero,48(r16)
1000632c:	81401117 	ldw	r5,68(r16)
10006330:	28000326 	beq	r5,zero,10006340 <_fclose_r+0xb4>
10006334:	8809883a 	mov	r4,r17
10006338:	00059200 	call	10005920 <_free_r>
1000633c:	80001115 	stw	zero,68(r16)
10006340:	00057bc0 	call	100057bc <__sfp_lock_acquire>
10006344:	8000030d 	sth	zero,12(r16)
10006348:	00057c00 	call	100057c0 <__sfp_lock_release>
1000634c:	9005883a 	mov	r2,r18
10006350:	003fdc06 	br	100062c4 <_fclose_r+0x38>
10006354:	00057ac0 	call	100057ac <__sinit>
10006358:	003fd706 	br	100062b8 <_fclose_r+0x2c>
1000635c:	04bfffc4 	movi	r18,-1
10006360:	003fe806 	br	10006304 <_fclose_r+0x78>
10006364:	81400417 	ldw	r5,16(r16)
10006368:	8809883a 	mov	r4,r17
1000636c:	00059200 	call	10005920 <_free_r>
10006370:	003fe706 	br	10006310 <_fclose_r+0x84>
10006374:	0005883a 	mov	r2,zero
10006378:	f800283a 	ret

1000637c <fclose>:
1000637c:	00840074 	movhi	r2,4097
10006380:	10a24a04 	addi	r2,r2,-30424
10006384:	200b883a 	mov	r5,r4
10006388:	11000017 	ldw	r4,0(r2)
1000638c:	000628c1 	jmpi	1000628c <_fclose_r>

10006390 <_fstat_r>:
10006390:	defffd04 	addi	sp,sp,-12
10006394:	2805883a 	mov	r2,r5
10006398:	dc000015 	stw	r16,0(sp)
1000639c:	04040074 	movhi	r16,4097
100063a0:	dc400115 	stw	r17,4(sp)
100063a4:	84292804 	addi	r16,r16,-23392
100063a8:	2023883a 	mov	r17,r4
100063ac:	300b883a 	mov	r5,r6
100063b0:	1009883a 	mov	r4,r2
100063b4:	dfc00215 	stw	ra,8(sp)
100063b8:	80000015 	stw	zero,0(r16)
100063bc:	00067240 	call	10006724 <fstat>
100063c0:	00ffffc4 	movi	r3,-1
100063c4:	10c00526 	beq	r2,r3,100063dc <_fstat_r+0x4c>
100063c8:	dfc00217 	ldw	ra,8(sp)
100063cc:	dc400117 	ldw	r17,4(sp)
100063d0:	dc000017 	ldw	r16,0(sp)
100063d4:	dec00304 	addi	sp,sp,12
100063d8:	f800283a 	ret
100063dc:	80c00017 	ldw	r3,0(r16)
100063e0:	183ff926 	beq	r3,zero,100063c8 <_fstat_r+0x38>
100063e4:	88c00015 	stw	r3,0(r17)
100063e8:	003ff706 	br	100063c8 <_fstat_r+0x38>

100063ec <_isatty_r>:
100063ec:	defffd04 	addi	sp,sp,-12
100063f0:	dc000015 	stw	r16,0(sp)
100063f4:	04040074 	movhi	r16,4097
100063f8:	dc400115 	stw	r17,4(sp)
100063fc:	84292804 	addi	r16,r16,-23392
10006400:	2023883a 	mov	r17,r4
10006404:	2809883a 	mov	r4,r5
10006408:	dfc00215 	stw	ra,8(sp)
1000640c:	80000015 	stw	zero,0(r16)
10006410:	00068100 	call	10006810 <isatty>
10006414:	00ffffc4 	movi	r3,-1
10006418:	10c00526 	beq	r2,r3,10006430 <_isatty_r+0x44>
1000641c:	dfc00217 	ldw	ra,8(sp)
10006420:	dc400117 	ldw	r17,4(sp)
10006424:	dc000017 	ldw	r16,0(sp)
10006428:	dec00304 	addi	sp,sp,12
1000642c:	f800283a 	ret
10006430:	80c00017 	ldw	r3,0(r16)
10006434:	183ff926 	beq	r3,zero,1000641c <_isatty_r+0x30>
10006438:	88c00015 	stw	r3,0(r17)
1000643c:	003ff706 	br	1000641c <_isatty_r+0x30>

10006440 <_lseek_r>:
10006440:	defffd04 	addi	sp,sp,-12
10006444:	2805883a 	mov	r2,r5
10006448:	dc000015 	stw	r16,0(sp)
1000644c:	04040074 	movhi	r16,4097
10006450:	dc400115 	stw	r17,4(sp)
10006454:	300b883a 	mov	r5,r6
10006458:	84292804 	addi	r16,r16,-23392
1000645c:	2023883a 	mov	r17,r4
10006460:	380d883a 	mov	r6,r7
10006464:	1009883a 	mov	r4,r2
10006468:	dfc00215 	stw	ra,8(sp)
1000646c:	80000015 	stw	zero,0(r16)
10006470:	00068f00 	call	100068f0 <lseek>
10006474:	00ffffc4 	movi	r3,-1
10006478:	10c00526 	beq	r2,r3,10006490 <_lseek_r+0x50>
1000647c:	dfc00217 	ldw	ra,8(sp)
10006480:	dc400117 	ldw	r17,4(sp)
10006484:	dc000017 	ldw	r16,0(sp)
10006488:	dec00304 	addi	sp,sp,12
1000648c:	f800283a 	ret
10006490:	80c00017 	ldw	r3,0(r16)
10006494:	183ff926 	beq	r3,zero,1000647c <_lseek_r+0x3c>
10006498:	88c00015 	stw	r3,0(r17)
1000649c:	003ff706 	br	1000647c <_lseek_r+0x3c>

100064a0 <_read_r>:
100064a0:	defffd04 	addi	sp,sp,-12
100064a4:	2805883a 	mov	r2,r5
100064a8:	dc000015 	stw	r16,0(sp)
100064ac:	04040074 	movhi	r16,4097
100064b0:	dc400115 	stw	r17,4(sp)
100064b4:	300b883a 	mov	r5,r6
100064b8:	84292804 	addi	r16,r16,-23392
100064bc:	2023883a 	mov	r17,r4
100064c0:	380d883a 	mov	r6,r7
100064c4:	1009883a 	mov	r4,r2
100064c8:	dfc00215 	stw	ra,8(sp)
100064cc:	80000015 	stw	zero,0(r16)
100064d0:	0006a480 	call	10006a48 <read>
100064d4:	00ffffc4 	movi	r3,-1
100064d8:	10c00526 	beq	r2,r3,100064f0 <_read_r+0x50>
100064dc:	dfc00217 	ldw	ra,8(sp)
100064e0:	dc400117 	ldw	r17,4(sp)
100064e4:	dc000017 	ldw	r16,0(sp)
100064e8:	dec00304 	addi	sp,sp,12
100064ec:	f800283a 	ret
100064f0:	80c00017 	ldw	r3,0(r16)
100064f4:	183ff926 	beq	r3,zero,100064dc <_read_r+0x3c>
100064f8:	88c00015 	stw	r3,0(r17)
100064fc:	003ff706 	br	100064dc <_read_r+0x3c>

10006500 <__divsi3>:
10006500:	20001b16 	blt	r4,zero,10006570 <__divsi3+0x70>
10006504:	000f883a 	mov	r7,zero
10006508:	28001616 	blt	r5,zero,10006564 <__divsi3+0x64>
1000650c:	200d883a 	mov	r6,r4
10006510:	29001a2e 	bgeu	r5,r4,1000657c <__divsi3+0x7c>
10006514:	00800804 	movi	r2,32
10006518:	00c00044 	movi	r3,1
1000651c:	00000106 	br	10006524 <__divsi3+0x24>
10006520:	10000d26 	beq	r2,zero,10006558 <__divsi3+0x58>
10006524:	294b883a 	add	r5,r5,r5
10006528:	10bfffc4 	addi	r2,r2,-1
1000652c:	18c7883a 	add	r3,r3,r3
10006530:	293ffb36 	bltu	r5,r4,10006520 <__divsi3+0x20>
10006534:	0005883a 	mov	r2,zero
10006538:	18000726 	beq	r3,zero,10006558 <__divsi3+0x58>
1000653c:	0005883a 	mov	r2,zero
10006540:	31400236 	bltu	r6,r5,1000654c <__divsi3+0x4c>
10006544:	314dc83a 	sub	r6,r6,r5
10006548:	10c4b03a 	or	r2,r2,r3
1000654c:	1806d07a 	srli	r3,r3,1
10006550:	280ad07a 	srli	r5,r5,1
10006554:	183ffa1e 	bne	r3,zero,10006540 <__divsi3+0x40>
10006558:	38000126 	beq	r7,zero,10006560 <__divsi3+0x60>
1000655c:	0085c83a 	sub	r2,zero,r2
10006560:	f800283a 	ret
10006564:	014bc83a 	sub	r5,zero,r5
10006568:	39c0005c 	xori	r7,r7,1
1000656c:	003fe706 	br	1000650c <__divsi3+0xc>
10006570:	0109c83a 	sub	r4,zero,r4
10006574:	01c00044 	movi	r7,1
10006578:	003fe306 	br	10006508 <__divsi3+0x8>
1000657c:	00c00044 	movi	r3,1
10006580:	003fee06 	br	1000653c <__divsi3+0x3c>

10006584 <__modsi3>:
10006584:	20001716 	blt	r4,zero,100065e4 <__modsi3+0x60>
10006588:	000f883a 	mov	r7,zero
1000658c:	2005883a 	mov	r2,r4
10006590:	28001216 	blt	r5,zero,100065dc <__modsi3+0x58>
10006594:	2900162e 	bgeu	r5,r4,100065f0 <__modsi3+0x6c>
10006598:	01800804 	movi	r6,32
1000659c:	00c00044 	movi	r3,1
100065a0:	00000106 	br	100065a8 <__modsi3+0x24>
100065a4:	30000a26 	beq	r6,zero,100065d0 <__modsi3+0x4c>
100065a8:	294b883a 	add	r5,r5,r5
100065ac:	31bfffc4 	addi	r6,r6,-1
100065b0:	18c7883a 	add	r3,r3,r3
100065b4:	293ffb36 	bltu	r5,r4,100065a4 <__modsi3+0x20>
100065b8:	18000526 	beq	r3,zero,100065d0 <__modsi3+0x4c>
100065bc:	1806d07a 	srli	r3,r3,1
100065c0:	11400136 	bltu	r2,r5,100065c8 <__modsi3+0x44>
100065c4:	1145c83a 	sub	r2,r2,r5
100065c8:	280ad07a 	srli	r5,r5,1
100065cc:	183ffb1e 	bne	r3,zero,100065bc <__modsi3+0x38>
100065d0:	38000126 	beq	r7,zero,100065d8 <__modsi3+0x54>
100065d4:	0085c83a 	sub	r2,zero,r2
100065d8:	f800283a 	ret
100065dc:	014bc83a 	sub	r5,zero,r5
100065e0:	003fec06 	br	10006594 <__modsi3+0x10>
100065e4:	0109c83a 	sub	r4,zero,r4
100065e8:	01c00044 	movi	r7,1
100065ec:	003fe706 	br	1000658c <__modsi3+0x8>
100065f0:	00c00044 	movi	r3,1
100065f4:	003ff106 	br	100065bc <__modsi3+0x38>

100065f8 <__udivsi3>:
100065f8:	200d883a 	mov	r6,r4
100065fc:	2900152e 	bgeu	r5,r4,10006654 <__udivsi3+0x5c>
10006600:	28001416 	blt	r5,zero,10006654 <__udivsi3+0x5c>
10006604:	00800804 	movi	r2,32
10006608:	00c00044 	movi	r3,1
1000660c:	00000206 	br	10006618 <__udivsi3+0x20>
10006610:	10000e26 	beq	r2,zero,1000664c <__udivsi3+0x54>
10006614:	28000516 	blt	r5,zero,1000662c <__udivsi3+0x34>
10006618:	294b883a 	add	r5,r5,r5
1000661c:	10bfffc4 	addi	r2,r2,-1
10006620:	18c7883a 	add	r3,r3,r3
10006624:	293ffa36 	bltu	r5,r4,10006610 <__udivsi3+0x18>
10006628:	18000826 	beq	r3,zero,1000664c <__udivsi3+0x54>
1000662c:	0005883a 	mov	r2,zero
10006630:	31400236 	bltu	r6,r5,1000663c <__udivsi3+0x44>
10006634:	314dc83a 	sub	r6,r6,r5
10006638:	10c4b03a 	or	r2,r2,r3
1000663c:	1806d07a 	srli	r3,r3,1
10006640:	280ad07a 	srli	r5,r5,1
10006644:	183ffa1e 	bne	r3,zero,10006630 <__udivsi3+0x38>
10006648:	f800283a 	ret
1000664c:	0005883a 	mov	r2,zero
10006650:	f800283a 	ret
10006654:	00c00044 	movi	r3,1
10006658:	003ff406 	br	1000662c <__udivsi3+0x34>

1000665c <__umodsi3>:
1000665c:	2005883a 	mov	r2,r4
10006660:	2900122e 	bgeu	r5,r4,100066ac <__umodsi3+0x50>
10006664:	28001116 	blt	r5,zero,100066ac <__umodsi3+0x50>
10006668:	01800804 	movi	r6,32
1000666c:	00c00044 	movi	r3,1
10006670:	00000206 	br	1000667c <__umodsi3+0x20>
10006674:	30000c26 	beq	r6,zero,100066a8 <__umodsi3+0x4c>
10006678:	28000516 	blt	r5,zero,10006690 <__umodsi3+0x34>
1000667c:	294b883a 	add	r5,r5,r5
10006680:	31bfffc4 	addi	r6,r6,-1
10006684:	18c7883a 	add	r3,r3,r3
10006688:	293ffa36 	bltu	r5,r4,10006674 <__umodsi3+0x18>
1000668c:	18000626 	beq	r3,zero,100066a8 <__umodsi3+0x4c>
10006690:	1806d07a 	srli	r3,r3,1
10006694:	11400136 	bltu	r2,r5,1000669c <__umodsi3+0x40>
10006698:	1145c83a 	sub	r2,r2,r5
1000669c:	280ad07a 	srli	r5,r5,1
100066a0:	183ffb1e 	bne	r3,zero,10006690 <__umodsi3+0x34>
100066a4:	f800283a 	ret
100066a8:	f800283a 	ret
100066ac:	00c00044 	movi	r3,1
100066b0:	003ff706 	br	10006690 <__umodsi3+0x34>

100066b4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100066b4:	defffd04 	addi	sp,sp,-12
100066b8:	df000215 	stw	fp,8(sp)
100066bc:	df000204 	addi	fp,sp,8
100066c0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100066c4:	0001883a 	nop
100066c8:	e0bfff17 	ldw	r2,-4(fp)
100066cc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
100066d0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100066d4:	10000226 	beq	r2,zero,100066e0 <_exit+0x2c>
    ALT_SIM_FAIL();
100066d8:	002af070 	cmpltui	zero,zero,43969
100066dc:	00000106 	br	100066e4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
100066e0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
100066e4:	003fff06 	br	100066e4 <_exit+0x30>

100066e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100066e8:	defffe04 	addi	sp,sp,-8
100066ec:	dfc00115 	stw	ra,4(sp)
100066f0:	df000015 	stw	fp,0(sp)
100066f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100066f8:	d0a00517 	ldw	r2,-32748(gp)
100066fc:	10000326 	beq	r2,zero,1000670c <alt_get_errno+0x24>
10006700:	d0a00517 	ldw	r2,-32748(gp)
10006704:	103ee83a 	callr	r2
10006708:	00000106 	br	10006710 <alt_get_errno+0x28>
1000670c:	d0a6e804 	addi	r2,gp,-25696
}
10006710:	e037883a 	mov	sp,fp
10006714:	dfc00117 	ldw	ra,4(sp)
10006718:	df000017 	ldw	fp,0(sp)
1000671c:	dec00204 	addi	sp,sp,8
10006720:	f800283a 	ret

10006724 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10006724:	defffb04 	addi	sp,sp,-20
10006728:	dfc00415 	stw	ra,16(sp)
1000672c:	df000315 	stw	fp,12(sp)
10006730:	df000304 	addi	fp,sp,12
10006734:	e13ffe15 	stw	r4,-8(fp)
10006738:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000673c:	e0bffe17 	ldw	r2,-8(fp)
10006740:	10000616 	blt	r2,zero,1000675c <fstat+0x38>
10006744:	e0bffe17 	ldw	r2,-8(fp)
10006748:	10c00324 	muli	r3,r2,12
1000674c:	00840034 	movhi	r2,4096
10006750:	109fd504 	addi	r2,r2,32596
10006754:	1885883a 	add	r2,r3,r2
10006758:	00000106 	br	10006760 <fstat+0x3c>
1000675c:	0005883a 	mov	r2,zero
10006760:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10006764:	e0bffd17 	ldw	r2,-12(fp)
10006768:	10001026 	beq	r2,zero,100067ac <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000676c:	e0bffd17 	ldw	r2,-12(fp)
10006770:	10800017 	ldw	r2,0(r2)
10006774:	10800817 	ldw	r2,32(r2)
10006778:	10000726 	beq	r2,zero,10006798 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
1000677c:	e0bffd17 	ldw	r2,-12(fp)
10006780:	10800017 	ldw	r2,0(r2)
10006784:	10800817 	ldw	r2,32(r2)
10006788:	e17fff17 	ldw	r5,-4(fp)
1000678c:	e13ffd17 	ldw	r4,-12(fp)
10006790:	103ee83a 	callr	r2
10006794:	00000a06 	br	100067c0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10006798:	e0bfff17 	ldw	r2,-4(fp)
1000679c:	00c80004 	movi	r3,8192
100067a0:	10c00115 	stw	r3,4(r2)
      return 0;
100067a4:	0005883a 	mov	r2,zero
100067a8:	00000506 	br	100067c0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100067ac:	00066e80 	call	100066e8 <alt_get_errno>
100067b0:	1007883a 	mov	r3,r2
100067b4:	00801444 	movi	r2,81
100067b8:	18800015 	stw	r2,0(r3)
    return -1;
100067bc:	00bfffc4 	movi	r2,-1
  }
}
100067c0:	e037883a 	mov	sp,fp
100067c4:	dfc00117 	ldw	ra,4(sp)
100067c8:	df000017 	ldw	fp,0(sp)
100067cc:	dec00204 	addi	sp,sp,8
100067d0:	f800283a 	ret

100067d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100067d4:	defffe04 	addi	sp,sp,-8
100067d8:	dfc00115 	stw	ra,4(sp)
100067dc:	df000015 	stw	fp,0(sp)
100067e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100067e4:	d0a00517 	ldw	r2,-32748(gp)
100067e8:	10000326 	beq	r2,zero,100067f8 <alt_get_errno+0x24>
100067ec:	d0a00517 	ldw	r2,-32748(gp)
100067f0:	103ee83a 	callr	r2
100067f4:	00000106 	br	100067fc <alt_get_errno+0x28>
100067f8:	d0a6e804 	addi	r2,gp,-25696
}
100067fc:	e037883a 	mov	sp,fp
10006800:	dfc00117 	ldw	ra,4(sp)
10006804:	df000017 	ldw	fp,0(sp)
10006808:	dec00204 	addi	sp,sp,8
1000680c:	f800283a 	ret

10006810 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10006810:	deffed04 	addi	sp,sp,-76
10006814:	dfc01215 	stw	ra,72(sp)
10006818:	df001115 	stw	fp,68(sp)
1000681c:	df001104 	addi	fp,sp,68
10006820:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10006824:	e0bfff17 	ldw	r2,-4(fp)
10006828:	10000616 	blt	r2,zero,10006844 <isatty+0x34>
1000682c:	e0bfff17 	ldw	r2,-4(fp)
10006830:	10c00324 	muli	r3,r2,12
10006834:	00840034 	movhi	r2,4096
10006838:	109fd504 	addi	r2,r2,32596
1000683c:	1885883a 	add	r2,r3,r2
10006840:	00000106 	br	10006848 <isatty+0x38>
10006844:	0005883a 	mov	r2,zero
10006848:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000684c:	e0bfef17 	ldw	r2,-68(fp)
10006850:	10000e26 	beq	r2,zero,1000688c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10006854:	e0bfef17 	ldw	r2,-68(fp)
10006858:	10800017 	ldw	r2,0(r2)
1000685c:	10800817 	ldw	r2,32(r2)
10006860:	1000021e 	bne	r2,zero,1000686c <isatty+0x5c>
    {
      return 1;
10006864:	00800044 	movi	r2,1
10006868:	00000d06 	br	100068a0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000686c:	e0bff004 	addi	r2,fp,-64
10006870:	100b883a 	mov	r5,r2
10006874:	e13fff17 	ldw	r4,-4(fp)
10006878:	00067240 	call	10006724 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000687c:	e0bff117 	ldw	r2,-60(fp)
10006880:	10880020 	cmpeqi	r2,r2,8192
10006884:	10803fcc 	andi	r2,r2,255
10006888:	00000506 	br	100068a0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000688c:	00067d40 	call	100067d4 <alt_get_errno>
10006890:	1007883a 	mov	r3,r2
10006894:	00801444 	movi	r2,81
10006898:	18800015 	stw	r2,0(r3)
    return 0;
1000689c:	0005883a 	mov	r2,zero
  }
}
100068a0:	e037883a 	mov	sp,fp
100068a4:	dfc00117 	ldw	ra,4(sp)
100068a8:	df000017 	ldw	fp,0(sp)
100068ac:	dec00204 	addi	sp,sp,8
100068b0:	f800283a 	ret

100068b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100068b4:	defffe04 	addi	sp,sp,-8
100068b8:	dfc00115 	stw	ra,4(sp)
100068bc:	df000015 	stw	fp,0(sp)
100068c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100068c4:	d0a00517 	ldw	r2,-32748(gp)
100068c8:	10000326 	beq	r2,zero,100068d8 <alt_get_errno+0x24>
100068cc:	d0a00517 	ldw	r2,-32748(gp)
100068d0:	103ee83a 	callr	r2
100068d4:	00000106 	br	100068dc <alt_get_errno+0x28>
100068d8:	d0a6e804 	addi	r2,gp,-25696
}
100068dc:	e037883a 	mov	sp,fp
100068e0:	dfc00117 	ldw	ra,4(sp)
100068e4:	df000017 	ldw	fp,0(sp)
100068e8:	dec00204 	addi	sp,sp,8
100068ec:	f800283a 	ret

100068f0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
100068f0:	defff904 	addi	sp,sp,-28
100068f4:	dfc00615 	stw	ra,24(sp)
100068f8:	df000515 	stw	fp,20(sp)
100068fc:	df000504 	addi	fp,sp,20
10006900:	e13ffd15 	stw	r4,-12(fp)
10006904:	e17ffe15 	stw	r5,-8(fp)
10006908:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000690c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10006910:	e0bffd17 	ldw	r2,-12(fp)
10006914:	10000616 	blt	r2,zero,10006930 <lseek+0x40>
10006918:	e0bffd17 	ldw	r2,-12(fp)
1000691c:	10c00324 	muli	r3,r2,12
10006920:	00840034 	movhi	r2,4096
10006924:	109fd504 	addi	r2,r2,32596
10006928:	1885883a 	add	r2,r3,r2
1000692c:	00000106 	br	10006934 <lseek+0x44>
10006930:	0005883a 	mov	r2,zero
10006934:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10006938:	e0bffc17 	ldw	r2,-16(fp)
1000693c:	10001026 	beq	r2,zero,10006980 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10006940:	e0bffc17 	ldw	r2,-16(fp)
10006944:	10800017 	ldw	r2,0(r2)
10006948:	10800717 	ldw	r2,28(r2)
1000694c:	10000926 	beq	r2,zero,10006974 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10006950:	e0bffc17 	ldw	r2,-16(fp)
10006954:	10800017 	ldw	r2,0(r2)
10006958:	10800717 	ldw	r2,28(r2)
1000695c:	e1bfff17 	ldw	r6,-4(fp)
10006960:	e17ffe17 	ldw	r5,-8(fp)
10006964:	e13ffc17 	ldw	r4,-16(fp)
10006968:	103ee83a 	callr	r2
1000696c:	e0bffb15 	stw	r2,-20(fp)
10006970:	00000506 	br	10006988 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10006974:	00bfde84 	movi	r2,-134
10006978:	e0bffb15 	stw	r2,-20(fp)
1000697c:	00000206 	br	10006988 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
10006980:	00bfebc4 	movi	r2,-81
10006984:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10006988:	e0bffb17 	ldw	r2,-20(fp)
1000698c:	1000070e 	bge	r2,zero,100069ac <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
10006990:	00068b40 	call	100068b4 <alt_get_errno>
10006994:	1007883a 	mov	r3,r2
10006998:	e0bffb17 	ldw	r2,-20(fp)
1000699c:	0085c83a 	sub	r2,zero,r2
100069a0:	18800015 	stw	r2,0(r3)
    rc = -1;
100069a4:	00bfffc4 	movi	r2,-1
100069a8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
100069ac:	e0bffb17 	ldw	r2,-20(fp)
}
100069b0:	e037883a 	mov	sp,fp
100069b4:	dfc00117 	ldw	ra,4(sp)
100069b8:	df000017 	ldw	fp,0(sp)
100069bc:	dec00204 	addi	sp,sp,8
100069c0:	f800283a 	ret

100069c4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
100069c4:	defffe04 	addi	sp,sp,-8
100069c8:	df000115 	stw	fp,4(sp)
100069cc:	df000104 	addi	fp,sp,4
100069d0:	e13fff15 	stw	r4,-4(fp)
}
100069d4:	0001883a 	nop
100069d8:	e037883a 	mov	sp,fp
100069dc:	df000017 	ldw	fp,0(sp)
100069e0:	dec00104 	addi	sp,sp,4
100069e4:	f800283a 	ret

100069e8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
100069e8:	defffe04 	addi	sp,sp,-8
100069ec:	df000115 	stw	fp,4(sp)
100069f0:	df000104 	addi	fp,sp,4
100069f4:	e13fff15 	stw	r4,-4(fp)
}
100069f8:	0001883a 	nop
100069fc:	e037883a 	mov	sp,fp
10006a00:	df000017 	ldw	fp,0(sp)
10006a04:	dec00104 	addi	sp,sp,4
10006a08:	f800283a 	ret

10006a0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10006a0c:	defffe04 	addi	sp,sp,-8
10006a10:	dfc00115 	stw	ra,4(sp)
10006a14:	df000015 	stw	fp,0(sp)
10006a18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10006a1c:	d0a00517 	ldw	r2,-32748(gp)
10006a20:	10000326 	beq	r2,zero,10006a30 <alt_get_errno+0x24>
10006a24:	d0a00517 	ldw	r2,-32748(gp)
10006a28:	103ee83a 	callr	r2
10006a2c:	00000106 	br	10006a34 <alt_get_errno+0x28>
10006a30:	d0a6e804 	addi	r2,gp,-25696
}
10006a34:	e037883a 	mov	sp,fp
10006a38:	dfc00117 	ldw	ra,4(sp)
10006a3c:	df000017 	ldw	fp,0(sp)
10006a40:	dec00204 	addi	sp,sp,8
10006a44:	f800283a 	ret

10006a48 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10006a48:	defff904 	addi	sp,sp,-28
10006a4c:	dfc00615 	stw	ra,24(sp)
10006a50:	df000515 	stw	fp,20(sp)
10006a54:	df000504 	addi	fp,sp,20
10006a58:	e13ffd15 	stw	r4,-12(fp)
10006a5c:	e17ffe15 	stw	r5,-8(fp)
10006a60:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10006a64:	e0bffd17 	ldw	r2,-12(fp)
10006a68:	10000616 	blt	r2,zero,10006a84 <read+0x3c>
10006a6c:	e0bffd17 	ldw	r2,-12(fp)
10006a70:	10c00324 	muli	r3,r2,12
10006a74:	00840034 	movhi	r2,4096
10006a78:	109fd504 	addi	r2,r2,32596
10006a7c:	1885883a 	add	r2,r3,r2
10006a80:	00000106 	br	10006a88 <read+0x40>
10006a84:	0005883a 	mov	r2,zero
10006a88:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10006a8c:	e0bffb17 	ldw	r2,-20(fp)
10006a90:	10002226 	beq	r2,zero,10006b1c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10006a94:	e0bffb17 	ldw	r2,-20(fp)
10006a98:	10800217 	ldw	r2,8(r2)
10006a9c:	108000cc 	andi	r2,r2,3
10006aa0:	10800060 	cmpeqi	r2,r2,1
10006aa4:	1000181e 	bne	r2,zero,10006b08 <read+0xc0>
        (fd->dev->read))
10006aa8:	e0bffb17 	ldw	r2,-20(fp)
10006aac:	10800017 	ldw	r2,0(r2)
10006ab0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10006ab4:	10001426 	beq	r2,zero,10006b08 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10006ab8:	e0bffb17 	ldw	r2,-20(fp)
10006abc:	10800017 	ldw	r2,0(r2)
10006ac0:	10800517 	ldw	r2,20(r2)
10006ac4:	e0ffff17 	ldw	r3,-4(fp)
10006ac8:	180d883a 	mov	r6,r3
10006acc:	e17ffe17 	ldw	r5,-8(fp)
10006ad0:	e13ffb17 	ldw	r4,-20(fp)
10006ad4:	103ee83a 	callr	r2
10006ad8:	e0bffc15 	stw	r2,-16(fp)
10006adc:	e0bffc17 	ldw	r2,-16(fp)
10006ae0:	1000070e 	bge	r2,zero,10006b00 <read+0xb8>
        {
          ALT_ERRNO = -rval;
10006ae4:	0006a0c0 	call	10006a0c <alt_get_errno>
10006ae8:	1007883a 	mov	r3,r2
10006aec:	e0bffc17 	ldw	r2,-16(fp)
10006af0:	0085c83a 	sub	r2,zero,r2
10006af4:	18800015 	stw	r2,0(r3)
          return -1;
10006af8:	00bfffc4 	movi	r2,-1
10006afc:	00000c06 	br	10006b30 <read+0xe8>
        }
        return rval;
10006b00:	e0bffc17 	ldw	r2,-16(fp)
10006b04:	00000a06 	br	10006b30 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
10006b08:	0006a0c0 	call	10006a0c <alt_get_errno>
10006b0c:	1007883a 	mov	r3,r2
10006b10:	00800344 	movi	r2,13
10006b14:	18800015 	stw	r2,0(r3)
10006b18:	00000406 	br	10006b2c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10006b1c:	0006a0c0 	call	10006a0c <alt_get_errno>
10006b20:	1007883a 	mov	r3,r2
10006b24:	00801444 	movi	r2,81
10006b28:	18800015 	stw	r2,0(r3)
  }
  return -1;
10006b2c:	00bfffc4 	movi	r2,-1
}
10006b30:	e037883a 	mov	sp,fp
10006b34:	dfc00117 	ldw	ra,4(sp)
10006b38:	df000017 	ldw	fp,0(sp)
10006b3c:	dec00204 	addi	sp,sp,8
10006b40:	f800283a 	ret

10006b44 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10006b44:	defff904 	addi	sp,sp,-28
10006b48:	df000615 	stw	fp,24(sp)
10006b4c:	df000604 	addi	fp,sp,24
10006b50:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10006b54:	0005303a 	rdctl	r2,status
10006b58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10006b5c:	e0fffe17 	ldw	r3,-8(fp)
10006b60:	00bfff84 	movi	r2,-2
10006b64:	1884703a 	and	r2,r3,r2
10006b68:	1001703a 	wrctl	status,r2
  
  return context;
10006b6c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10006b70:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10006b74:	d0a00d17 	ldw	r2,-32716(gp)
10006b78:	10c000c4 	addi	r3,r2,3
10006b7c:	00bfff04 	movi	r2,-4
10006b80:	1884703a 	and	r2,r3,r2
10006b84:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10006b88:	d0e00d17 	ldw	r3,-32716(gp)
10006b8c:	e0bfff17 	ldw	r2,-4(fp)
10006b90:	1887883a 	add	r3,r3,r2
10006b94:	00860034 	movhi	r2,6144
10006b98:	10800004 	addi	r2,r2,0
10006b9c:	10c0062e 	bgeu	r2,r3,10006bb8 <sbrk+0x74>
10006ba0:	e0bffb17 	ldw	r2,-20(fp)
10006ba4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10006ba8:	e0bffa17 	ldw	r2,-24(fp)
10006bac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10006bb0:	00bfffc4 	movi	r2,-1
10006bb4:	00000b06 	br	10006be4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10006bb8:	d0a00d17 	ldw	r2,-32716(gp)
10006bbc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10006bc0:	d0e00d17 	ldw	r3,-32716(gp)
10006bc4:	e0bfff17 	ldw	r2,-4(fp)
10006bc8:	1885883a 	add	r2,r3,r2
10006bcc:	d0a00d15 	stw	r2,-32716(gp)
10006bd0:	e0bffb17 	ldw	r2,-20(fp)
10006bd4:	e0bffc15 	stw	r2,-16(fp)
10006bd8:	e0bffc17 	ldw	r2,-16(fp)
10006bdc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10006be0:	e0bffd17 	ldw	r2,-12(fp)
} 
10006be4:	e037883a 	mov	sp,fp
10006be8:	df000017 	ldw	fp,0(sp)
10006bec:	dec00104 	addi	sp,sp,4
10006bf0:	f800283a 	ret

10006bf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10006bf4:	defffe04 	addi	sp,sp,-8
10006bf8:	dfc00115 	stw	ra,4(sp)
10006bfc:	df000015 	stw	fp,0(sp)
10006c00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10006c04:	d0a00517 	ldw	r2,-32748(gp)
10006c08:	10000326 	beq	r2,zero,10006c18 <alt_get_errno+0x24>
10006c0c:	d0a00517 	ldw	r2,-32748(gp)
10006c10:	103ee83a 	callr	r2
10006c14:	00000106 	br	10006c1c <alt_get_errno+0x28>
10006c18:	d0a6e804 	addi	r2,gp,-25696
}
10006c1c:	e037883a 	mov	sp,fp
10006c20:	dfc00117 	ldw	ra,4(sp)
10006c24:	df000017 	ldw	fp,0(sp)
10006c28:	dec00204 	addi	sp,sp,8
10006c2c:	f800283a 	ret

10006c30 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10006c30:	defff904 	addi	sp,sp,-28
10006c34:	dfc00615 	stw	ra,24(sp)
10006c38:	df000515 	stw	fp,20(sp)
10006c3c:	df000504 	addi	fp,sp,20
10006c40:	e13ffd15 	stw	r4,-12(fp)
10006c44:	e17ffe15 	stw	r5,-8(fp)
10006c48:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10006c4c:	e0bffd17 	ldw	r2,-12(fp)
10006c50:	10000616 	blt	r2,zero,10006c6c <write+0x3c>
10006c54:	e0bffd17 	ldw	r2,-12(fp)
10006c58:	10c00324 	muli	r3,r2,12
10006c5c:	00840034 	movhi	r2,4096
10006c60:	109fd504 	addi	r2,r2,32596
10006c64:	1885883a 	add	r2,r3,r2
10006c68:	00000106 	br	10006c70 <write+0x40>
10006c6c:	0005883a 	mov	r2,zero
10006c70:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10006c74:	e0bffb17 	ldw	r2,-20(fp)
10006c78:	10002126 	beq	r2,zero,10006d00 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10006c7c:	e0bffb17 	ldw	r2,-20(fp)
10006c80:	10800217 	ldw	r2,8(r2)
10006c84:	108000cc 	andi	r2,r2,3
10006c88:	10001826 	beq	r2,zero,10006cec <write+0xbc>
10006c8c:	e0bffb17 	ldw	r2,-20(fp)
10006c90:	10800017 	ldw	r2,0(r2)
10006c94:	10800617 	ldw	r2,24(r2)
10006c98:	10001426 	beq	r2,zero,10006cec <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10006c9c:	e0bffb17 	ldw	r2,-20(fp)
10006ca0:	10800017 	ldw	r2,0(r2)
10006ca4:	10800617 	ldw	r2,24(r2)
10006ca8:	e0ffff17 	ldw	r3,-4(fp)
10006cac:	180d883a 	mov	r6,r3
10006cb0:	e17ffe17 	ldw	r5,-8(fp)
10006cb4:	e13ffb17 	ldw	r4,-20(fp)
10006cb8:	103ee83a 	callr	r2
10006cbc:	e0bffc15 	stw	r2,-16(fp)
10006cc0:	e0bffc17 	ldw	r2,-16(fp)
10006cc4:	1000070e 	bge	r2,zero,10006ce4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
10006cc8:	0006bf40 	call	10006bf4 <alt_get_errno>
10006ccc:	1007883a 	mov	r3,r2
10006cd0:	e0bffc17 	ldw	r2,-16(fp)
10006cd4:	0085c83a 	sub	r2,zero,r2
10006cd8:	18800015 	stw	r2,0(r3)
        return -1;
10006cdc:	00bfffc4 	movi	r2,-1
10006ce0:	00000c06 	br	10006d14 <write+0xe4>
      }
      return rval;
10006ce4:	e0bffc17 	ldw	r2,-16(fp)
10006ce8:	00000a06 	br	10006d14 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
10006cec:	0006bf40 	call	10006bf4 <alt_get_errno>
10006cf0:	1007883a 	mov	r3,r2
10006cf4:	00800344 	movi	r2,13
10006cf8:	18800015 	stw	r2,0(r3)
10006cfc:	00000406 	br	10006d10 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10006d00:	0006bf40 	call	10006bf4 <alt_get_errno>
10006d04:	1007883a 	mov	r3,r2
10006d08:	00801444 	movi	r2,81
10006d0c:	18800015 	stw	r2,0(r3)
  }
  return -1;
10006d10:	00bfffc4 	movi	r2,-1
}
10006d14:	e037883a 	mov	sp,fp
10006d18:	dfc00117 	ldw	ra,4(sp)
10006d1c:	df000017 	ldw	fp,0(sp)
10006d20:	dec00204 	addi	sp,sp,8
10006d24:	f800283a 	ret
