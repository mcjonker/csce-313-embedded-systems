
p4_fix4.elf:     file format elf32-littlenios2
p4_fix4.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000244

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x001ca11c memsz 0x001ca11c flags r-x
    LOAD off    0x001cb13c vaddr 0x101ca13c paddr 0x101cbc88 align 2**12
         filesz 0x00001b4c memsz 0x00001b4c flags rw-
    LOAD off    0x001cd7d4 vaddr 0x101cd7d4 paddr 0x101cd7d4 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007ca8  10000244  10000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       001c2250  10007eec  10007eec  00008eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b4c  101ca13c  101cbc88  001cb13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  101cd7d4  101cd7d4  001cd7d4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  101cd928  101cd928  001ccc88  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  001ccc88  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ba8  00000000  00000000  001cccb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00019055  00000000  00000000  001cd858  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006d96  00000000  00000000  001e68ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007bfd  00000000  00000000  001ed643  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a78  00000000  00000000  001f5240  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002f01  00000000  00000000  001f6cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000062fe  00000000  00000000  001f9bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  001ffeb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a18  00000000  00000000  001ffee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0020341e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  00203421  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0020342a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0020342b  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0020342c  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00203430  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00203434  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00203438  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000011  00000000  00000000  00203443  2**0
                  CONTENTS, READONLY
 26 .jdi          00004c4e  00000000  00000000  00203454  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006bf83  00000000  00000000  002080a2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000244 l    d  .text	00000000 .text
10007eec l    d  .rodata	00000000 .rodata
101ca13c l    d  .rwdata	00000000 .rwdata
101cd7d4 l    d  .bss	00000000 .bss
101cd928 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../p4_fix4_bsp//obj/HAL/src/crt0.o
1000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
10001484 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
10001628 l     F .text	00000034 alt_dev_reg
101ca13c l     O .rwdata	00001060 jtag
101cb19c l     O .rwdata	00000048 video_character_buffer_with_dma_0
101cb1e4 l     O .rwdata	00000054 dma_buffer
101cb238 l     O .rwdata	00000044 rgb_resampler
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10001c74 l     F .text	0000020c altera_avalon_jtag_uart_irq
10001e80 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
10003778 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
100038cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100038f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10003dfc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10003f3c l     F .text	0000003c alt_get_errno
10003f78 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
101cb424 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10006620 l     F .text	00000008 __fp_unlock
10006634 l     F .text	0000019c __sinit.part.1
100067d0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
100078ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10007998 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
10007a78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10007bd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
101cbc84 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
10007db8 l     F .text	0000003c alt_get_errno
101cd7ec g     O .bss	00000004 alt_instruction_exception_handler
100075b0 g     F .text	00000054 _isatty_r
10001570 g     F .text	0000007c alt_main
1000306c g     F .text	0000024c alt_up_pixel_buffer_dma_draw_vline
101cd828 g     O .bss	00000100 alt_irq
10007604 g     F .text	00000060 _lseek_r
101cbc88 g       *ABS*	00000000 __flash_rwdata_start
101cd928 g       *ABS*	00000000 __alt_heap_start
10007338 g     F .text	0000005c __sseek
10006970 g     F .text	00000010 __sinit
10002640 g     F .text	000000fc alt_up_char_buffer_string
100067d8 g     F .text	00000068 __sfmoreglue
10007bac g     F .text	00000024 __malloc_unlock
10002574 g     F .text	000000cc alt_up_char_buffer_draw
10005704 g     F .text	0000015c memmove
10006958 g     F .text	00000018 _cleanup
1000128c g     F .text	00000070 .hidden __fixsfsi
100015ec g     F .text	0000003c alt_putstr
100027d4 g     F .text	00000194 alt_up_pixel_buffer_dma_draw
10004398 g     F .text	00000024 altera_nios2_gen2_irq_init
10002798 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
10000000 g     F .entry	0000001c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10007554 g     F .text	0000005c _fstat_r
101cd7f0 g     O .bss	00000004 errno
100072b4 g     F .text	00000008 __seofread
10000000 g       *ABS*	00000000 __alt_mem_sdram_controller
101cd7d8 g     O .bss	00000004 alt_argv
101d3c50 g       *ABS*	00000000 _gp
10000da8 g     F .text	000004e4 .hidden __subsf3
10002968 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
101cb2a4 g     O .rwdata	00000180 alt_fd_list
10003a98 g     F .text	00000090 alt_find_dev
100055bc g     F .text	00000148 memcpy
1000273c g     F .text	0000005c alt_up_char_buffer_clear
10006628 g     F .text	0000000c _cleanup_r
10003ec0 g     F .text	0000007c alt_io_redirect
10007eec g       *ABS*	00000000 __DTOR_END__
100045f8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10002a24 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
10002078 g     F .text	0000021c altera_avalon_jtag_uart_read
100077bc g     F .text	00000064 .hidden __udivsi3
100079d4 g     F .text	000000a4 isatty
10002e5c g     F .text	00000210 alt_up_pixel_buffer_dma_draw_hline
100008e4 g     F .text	000000c8 .hidden __lesf2
10004568 g     F .text	00000090 alt_icache_flush
101cd7fc g     O .bss	00000004 __malloc_top_pad
10004794 g     F .text	000004bc __sfvwrite_r
10005dc4 g     F .text	00000054 _sbrk_r
10003380 g     F .text	00000084 helper_plot_pixel
10007664 g     F .text	00000060 _read_r
101cbc60 g     O .rwdata	00000004 alt_max_fd
10007450 g     F .text	000000f0 _fclose_r
100065f0 g     F .text	00000030 fflush
101cd7f8 g     O .bss	00000004 __malloc_max_sbrked_mem
10002a58 g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
10007ab4 g     F .text	000000d4 lseek
101cbc74 g     O .rwdata	00000004 _global_impure_ptr
10005860 g     F .text	00000564 _realloc_r
101cd928 g       *ABS*	00000000 __bss_end
10003d0c g     F .text	000000f0 alt_iic_isr_register
10002b80 g     F .text	000002dc alt_up_pixel_buffer_dma_draw_box
10004290 g     F .text	00000108 alt_tick
10006990 g     F .text	00000018 __fp_lock_all
10003cc0 g     F .text	0000004c alt_ic_irq_enabled
100041f4 g     F .text	0000009c alt_alarm_stop
10007eec g     O .rodata	001c2000 myimage
101cd7e0 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
101cb27c g     O .rwdata	00000028 alt_dev_null
10003884 g     F .text	00000048 alt_dcache_flush_all
100032b8 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
101cbc88 g       *ABS*	00000000 __ram_rwdata_end
101cbc58 g     O .rwdata	00000008 alt_dev_list
10007df4 g     F .text	000000f8 write
10003404 g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
10000828 g     F .text	000000bc .hidden __gtsf2
101ca13c g       *ABS*	00000000 __ram_rodata_end
100078e8 g     F .text	000000b0 fstat
10007820 g     F .text	00000058 .hidden __umodsi3
101cd928 g       *ABS*	00000000 end
100024b8 g     F .text	00000080 alt_up_char_buffer_init
10001bb4 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
10007eec g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10001420 g     F .text	00000064 .hidden __clzsi2
10002294 g     F .text	00000224 altera_avalon_jtag_uart_write
10006980 g     F .text	00000004 __sfp_lock_acquire
1000545c g     F .text	000000e4 memchr
10006ae4 g     F .text	00000310 _free_r
100061f8 g     F .text	00000180 __call_exitprocs
101cbc7c g     O .rwdata	00000004 __malloc_sbrk_base
10000244 g     F .text	0000004c _start
101cd7e4 g     O .bss	00000004 _alt_tick_rate
101cd7e8 g     O .bss	00000004 _alt_nticks
10007c0c g     F .text	000000fc read
10001694 g     F .text	000003bc alt_sys_init
100012fc g     F .text	00000124 .hidden __floatsisf
100060e0 g     F .text	00000118 __register_exitproc
10001f20 g     F .text	00000068 altera_avalon_jtag_uart_close
101ca13c g       *ABS*	00000000 __ram_rwdata_start
10007eec g       *ABS*	00000000 __ram_rodata_start
101cd800 g     O .bss	00000028 __malloc_current_mallinfo
10001a50 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100044c4 g     F .text	000000a4 alt_get_fd
100073fc g     F .text	00000054 _close_r
10005540 g     F .text	0000007c memcmp
10001b10 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
101cd928 g       *ABS*	00000000 __alt_stack_base
10001b60 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10005f8c g     F .text	00000154 __swsetup_r
10006840 g     F .text	00000118 __sfp
101cb848 g     O .rwdata	00000408 __malloc_av_
1000698c g     F .text	00000004 __sinit_lock_release
10007260 g     F .text	00000054 __sread
100043bc g     F .text	00000108 alt_find_file
10003934 g     F .text	000000a4 alt_dev_llist_insert
10007b88 g     F .text	00000024 __malloc_lock
10007d08 g     F .text	000000b0 sbrk
10006594 g     F .text	0000005c _fflush_r
101cd7d4 g       *ABS*	00000000 __bss_start
10007138 g     F .text	00000128 memset
100002d4 g     F .text	000004f4 main
101cd7dc g     O .bss	00000004 alt_envp
101cd7f4 g     O .bss	00000004 __malloc_max_total_mem
100029c4 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
10002538 g     F .text	0000003c alt_up_char_buffer_open_dev
10001ab0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100008e4 g     F .text	000000c8 .hidden __ltsf2
10007394 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10007540 g     F .text	00000014 fclose
10004c50 g     F .text	0000080c _malloc_r
101cbc64 g     O .rwdata	00000004 alt_errno
10006df4 g     F .text	000000c4 _fwalk
100076c4 g     F .text	00000084 .hidden __divsi3
100069c0 g     F .text	00000124 _malloc_trim_r
10007eec g       *ABS*	00000000 __CTOR_END__
100009ac g     F .text	000003fc .hidden __mulsf3
10005e18 g     F .text	000000dc strcmp
10007eec g       *ABS*	00000000 __flash_rodata_start
10007eec g       *ABS*	00000000 __DTOR_LIST__
1000165c g     F .text	00000038 alt_irq_init
10004190 g     F .text	00000064 alt_release_fd
101c9f94 g     O .rodata	00000100 .hidden __clz_tab
10004694 g     F .text	00000014 atexit
10000828 g     F .text	000000bc .hidden __gesf2
1000739c g     F .text	00000060 _write_r
101cbc78 g     O .rwdata	00000004 _impure_ptr
101cd7d4 g     O .bss	00000004 alt_argc
10006378 g     F .text	0000021c __sflush_r
10003a38 g     F .text	00000060 _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
100069a8 g     F .text	00000018 __fp_unlock_all
101cbc50 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
10003b5c g     F .text	00000050 alt_ic_isr_register
101cbc88 g       *ABS*	00000000 _edata
101cd928 g       *ABS*	00000000 _end
10000244 g       *ABS*	00000000 __ram_exceptions_end
10001f88 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
100046e0 g     F .text	0000009c _fputs_r
10003c34 g     F .text	0000008c alt_ic_irq_disable
100072bc g     F .text	0000007c __swrite
101cbc80 g     O .rwdata	00000004 __malloc_trim_threshold
100046a8 g     F .text	00000038 exit
10006eb8 g     F .text	000000c4 _fwalk_reent
10007748 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10006984 g     F .text	00000004 __sfp_lock_release
100007c8 g     F .text	00000060 .hidden __fixunssfsi
10007878 g     F .text	00000034 _exit
1000364c g     F .text	0000012c alt_alarm_start
10006f7c g     F .text	000001bc __smakebuf_r
10005ef4 g     F .text	00000098 strlen
1000403c g     F .text	00000154 open
10000290 g     F .text	00000044 clearScreen
10003b28 g     F .text	00000034 alt_icache_flush_all
1000477c g     F .text	00000018 fputs
101cbc68 g     O .rwdata	00000004 alt_priority_mask
10003bac g     F .text	00000088 alt_ic_irq_enable
101cbc6c g     O .rwdata	00000008 alt_alarm_list
100039d8 g     F .text	00000060 _do_ctors
100037b4 g     F .text	000000d0 close
100014ec g     F .text	00000084 alt_load
10006988 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

10000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1000000c:	00bffd16 	blt	zero,r2,10000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000010:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000014:	08409114 	ori	at,at,580
    jmp r1
10000018:	0800683a 	jmp	at
1000001c:	00000000 	call	10000000 <__reset>

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840774 	movhi	r2,4125
10000140:	10b60a04 	addi	r2,r2,-10200
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840774 	movhi	r2,4125
10000158:	10b60a04 	addi	r2,r2,-10200
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
100001e4:	000531fa 	rdctl	r2,exception
100001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
100001ec:	e0bffd17 	ldw	r2,-12(fp)
100001f0:	10801f0c 	andi	r2,r2,124
100001f4:	1004d0ba 	srli	r2,r2,2
100001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
100001fc:	0005333a 	rdctl	r2,badaddr
10000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10000204:	d0a6e717 	ldw	r2,-25700(gp)
10000208:	10000726 	beq	r2,zero,10000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1000020c:	d0a6e717 	ldw	r2,-25700(gp)
10000210:	e0fffd17 	ldw	r3,-12(fp)
10000214:	e1bffe17 	ldw	r6,-8(fp)
10000218:	e17fff17 	ldw	r5,-4(fp)
1000021c:	1809883a 	mov	r4,r3
10000220:	103ee83a 	callr	r2
10000224:	00000206 	br	10000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1000022c:	0005883a 	mov	r2,zero
}
10000230:	e037883a 	mov	sp,fp
10000234:	dfc00117 	ldw	ra,4(sp)
10000238:	df000017 	ldw	fp,0(sp)
1000023c:	dec00204 	addi	sp,sp,8
10000240:	f800283a 	ret

Disassembly of section .text:

10000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10000244:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
10000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1000024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10000250:	00bffd16 	blt	zero,r2,10000248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000254:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1000025c:	06840774 	movhi	gp,4125
    ori gp, gp, %lo(_gp)
10000260:	d68f1414 	ori	gp,gp,15440
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000264:	00840734 	movhi	r2,4124
    ori r2, r2, %lo(__bss_start)
10000268:	10b5f514 	ori	r2,r2,55252

    movhi r3, %hi(__bss_end)
1000026c:	00c40734 	movhi	r3,4124
    ori r3, r3, %lo(__bss_end)
10000270:	18f64a14 	ori	r3,r3,55592

    beq r2, r3, 1f
10000274:	10c00326 	beq	r2,r3,10000284 <_start+0x40>

0:
    stw zero, (r2)
10000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1000027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000280:	10fffd36 	bltu	r2,r3,10000278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000284:	00014ec0 	call	100014ec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000288:	00015700 	call	10001570 <alt_main>

1000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1000028c:	003fff06 	br	1000028c <alt_after_alt_main>

10000290 <clearScreen>:
#include  "myfile.c"
#include <math.h>
#include <sys/alt_alarm.h>
#include <altera_up_avalon_video_pixel_buffer_dma.h> // pixel buffer dma

void clearScreen(alt_up_pixel_buffer_dma_dev *my_pixel_buffer) {
10000290:	defffd04 	addi	sp,sp,-12
10000294:	dfc00215 	stw	ra,8(sp)
10000298:	df000115 	stw	fp,4(sp)
1000029c:	df000104 	addi	fp,sp,4
100002a0:	e13fff15 	stw	r4,-4(fp)
	alt_putstr("Clearing Buffer\n");
100002a4:	01040774 	movhi	r4,4125
100002a8:	2127bb04 	addi	r4,r4,-24852
100002ac:	00015ec0 	call	100015ec <alt_putstr>
	//alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer, 0);
	alt_putstr("Buffer Cleared\n");
100002b0:	01040774 	movhi	r4,4125
100002b4:	2127c004 	addi	r4,r4,-24832
100002b8:	00015ec0 	call	100015ec <alt_putstr>
}
100002bc:	0001883a 	nop
100002c0:	e037883a 	mov	sp,fp
100002c4:	dfc00117 	ldw	ra,4(sp)
100002c8:	df000017 	ldw	fp,0(sp)
100002cc:	dec00204 	addi	sp,sp,8
100002d0:	f800283a 	ret

100002d4 <main>:
//		}
//	}
//}


int main() {
100002d4:	defff304 	addi	sp,sp,-52
100002d8:	dfc00c15 	stw	ra,48(sp)
100002dc:	df000b15 	stw	fp,44(sp)
100002e0:	dc400a15 	stw	r17,40(sp)
100002e4:	dc000915 	stw	r16,36(sp)
100002e8:	df000b04 	addi	fp,sp,44

	// Declare the mode variable as alt_u8 and initialize with 0
	alt_putstr("Hunter Frady and Mitchell Jonker - Project 3 - CSCE 313\n");
100002ec:	01040774 	movhi	r4,4125
100002f0:	2127c404 	addi	r4,r4,-24816
100002f4:	00015ec0 	call	100015ec <alt_putstr>
	alt_u8 mode = 0; // 8-bit mode variable
100002f8:	e03ffb05 	stb	zero,-20(fp)
	float scale; // image scaling variable
	scale = 1.0;
100002fc:	008fe034 	movhi	r2,16256
10000300:	e0bffc15 	stw	r2,-16(fp)
	if (scale < 0) {
10000304:	000b883a 	mov	r5,zero
10000308:	e13ffc17 	ldw	r4,-16(fp)
1000030c:	00008e40 	call	100008e4 <__lesf2>
10000310:	1000020e 	bge	r2,zero,1000031c <main+0x48>
		scale = 1.0;
10000314:	008fe034 	movhi	r2,16256
10000318:	e0bffc15 	stw	r2,-16(fp)
	}
	// Read pixel buffer (go to no.6 of software requirements in the assignment sheet)
	alt_up_pixel_buffer_dma_dev *my_pixel_buffer;
	my_pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/dma_buffer");
1000031c:	01040774 	movhi	r4,4125
10000320:	2127d304 	addi	r4,r4,-24756
10000324:	00027980 	call	10002798 <alt_up_pixel_buffer_dma_open_dev>
10000328:	e0bffd15 	stw	r2,-12(fp)

	// check if pixel buffer array contains the image code (part 6 of assignment sheet)
	if(!my_pixel_buffer) {
1000032c:	e0bffd17 	ldw	r2,-12(fp)
10000330:	1000031e 	bne	r2,zero,10000340 <main+0x6c>
		alt_putstr("Error opening pixel buffer\n");
10000334:	01040774 	movhi	r4,4125
10000338:	2127d704 	addi	r4,r4,-24740
1000033c:	00015ec0 	call	100015ec <alt_putstr>
	}

	// clear the screen (part 7 of assignment sheet)
	clearScreen(my_pixel_buffer);
10000340:	e13ffd17 	ldw	r4,-12(fp)
10000344:	00002900 	call	10000290 <clearScreen>

//	alt_u8 lastmode = 0x14; // arbitrary mode number
	while (1) {

		mode = IORD_ALTERA_AVALON_PIO_DATA(SYSTEM_MODES_BASE); // mode switches input
10000348:	00800834 	movhi	r2,32
1000034c:	108c0004 	addi	r2,r2,12288
10000350:	10800037 	ldwio	r2,0(r2)
10000354:	e0bffb05 	stb	r2,-20(fp)


		if (mode == 0x00) {//&& lastmode != 0x00) {
10000358:	e0bffb03 	ldbu	r2,-20(fp)
1000035c:	10005c1e 	bne	r2,zero,100004d0 <main+0x1fc>

			alt_putstr("Display image at 1.0 scale\n");
10000360:	01040774 	movhi	r4,4125
10000364:	2127de04 	addi	r4,r4,-24712
10000368:	00015ec0 	call	100015ec <alt_putstr>
			scale = 1.0;
1000036c:	008fe034 	movhi	r2,16256
10000370:	e0bffc15 	stw	r2,-16(fp)
			clearScreen(my_pixel_buffer);
10000374:	e13ffd17 	ldw	r4,-12(fp)
10000378:	00002900 	call	10000290 <clearScreen>
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
1000037c:	e03ff515 	stw	zero,-44(fp)
10000380:	00005006 	br	100004c4 <main+0x1f0>
				for (int j = 0; j < 320; j++) {
10000384:	e03ff615 	stw	zero,-40(fp)
10000388:	00004806 	br	100004ac <main+0x1d8>
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
						(myimage[(i*320*3+j*3+2)]) +
1000038c:	e0bff517 	ldw	r2,-44(fp)
10000390:	1100f024 	muli	r4,r2,960
10000394:	e0fff617 	ldw	r3,-40(fp)
10000398:	1805883a 	mov	r2,r3
1000039c:	1085883a 	add	r2,r2,r2
100003a0:	10c5883a 	add	r2,r2,r3
100003a4:	2085883a 	add	r2,r4,r2
100003a8:	10c00084 	addi	r3,r2,2
100003ac:	00840034 	movhi	r2,4096
100003b0:	109fbb04 	addi	r2,r2,32492
100003b4:	10c5883a 	add	r2,r2,r3
100003b8:	10800003 	ldbu	r2,0(r2)
100003bc:	11003fcc 	andi	r4,r2,255
						(myimage[(i*320*3+j*3+1)]<<8) +
100003c0:	e0bff517 	ldw	r2,-44(fp)
100003c4:	1140f024 	muli	r5,r2,960
100003c8:	e0fff617 	ldw	r3,-40(fp)
100003cc:	1805883a 	mov	r2,r3
100003d0:	1085883a 	add	r2,r2,r2
100003d4:	10c5883a 	add	r2,r2,r3
100003d8:	2885883a 	add	r2,r5,r2
100003dc:	10c00044 	addi	r3,r2,1
100003e0:	00840034 	movhi	r2,4096
100003e4:	109fbb04 	addi	r2,r2,32492
100003e8:	10c5883a 	add	r2,r2,r3
100003ec:	10800003 	ldbu	r2,0(r2)
100003f0:	10803fcc 	andi	r2,r2,255
100003f4:	1004923a 	slli	r2,r2,8
			clearScreen(my_pixel_buffer);
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
				for (int j = 0; j < 320; j++) {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
						(myimage[(i*320*3+j*3+2)]) +
100003f8:	2089883a 	add	r4,r4,r2
						(myimage[(i*320*3+j*3+1)]<<8) +
						(myimage[(i*320*3+j*3+0)]<<16),j*scale,i*scale);
100003fc:	e0bff517 	ldw	r2,-44(fp)
10000400:	1140f024 	muli	r5,r2,960
10000404:	e0fff617 	ldw	r3,-40(fp)
10000408:	1805883a 	mov	r2,r3
1000040c:	1085883a 	add	r2,r2,r2
10000410:	10c5883a 	add	r2,r2,r3
10000414:	2887883a 	add	r3,r5,r2
10000418:	00840034 	movhi	r2,4096
1000041c:	109fbb04 	addi	r2,r2,32492
10000420:	10c5883a 	add	r2,r2,r3
10000424:	10800003 	ldbu	r2,0(r2)
10000428:	10803fcc 	andi	r2,r2,255
1000042c:	1004943a 	slli	r2,r2,16
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
				for (int j = 0; j < 320; j++) {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
						(myimage[(i*320*3+j*3+2)]) +
						(myimage[(i*320*3+j*3+1)]<<8) +
10000430:	2085883a 	add	r2,r4,r2
			scale = 1.0;
			clearScreen(my_pixel_buffer);
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
				for (int j = 0; j < 320; j++) {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
10000434:	1021883a 	mov	r16,r2
						(myimage[(i*320*3+j*3+2)]) +
						(myimage[(i*320*3+j*3+1)]<<8) +
						(myimage[(i*320*3+j*3+0)]<<16),j*scale,i*scale);
10000438:	e13ff617 	ldw	r4,-40(fp)
1000043c:	00012fc0 	call	100012fc <__floatsisf>
10000440:	1007883a 	mov	r3,r2
10000444:	e17ffc17 	ldw	r5,-16(fp)
10000448:	1809883a 	mov	r4,r3
1000044c:	00009ac0 	call	100009ac <__mulsf3>
10000450:	1007883a 	mov	r3,r2
10000454:	1805883a 	mov	r2,r3
			scale = 1.0;
			clearScreen(my_pixel_buffer);
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
				for (int j = 0; j < 320; j++) {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
10000458:	1009883a 	mov	r4,r2
1000045c:	00007c80 	call	100007c8 <__fixunssfsi>
10000460:	1023883a 	mov	r17,r2
						(myimage[(i*320*3+j*3+2)]) +
						(myimage[(i*320*3+j*3+1)]<<8) +
						(myimage[(i*320*3+j*3+0)]<<16),j*scale,i*scale);
10000464:	e13ff517 	ldw	r4,-44(fp)
10000468:	00012fc0 	call	100012fc <__floatsisf>
1000046c:	1007883a 	mov	r3,r2
10000470:	e17ffc17 	ldw	r5,-16(fp)
10000474:	1809883a 	mov	r4,r3
10000478:	00009ac0 	call	100009ac <__mulsf3>
1000047c:	1007883a 	mov	r3,r2
10000480:	1805883a 	mov	r2,r3
			scale = 1.0;
			clearScreen(my_pixel_buffer);
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
				for (int j = 0; j < 320; j++) {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
10000484:	1009883a 	mov	r4,r2
10000488:	00007c80 	call	100007c8 <__fixunssfsi>
1000048c:	100f883a 	mov	r7,r2
10000490:	880d883a 	mov	r6,r17
10000494:	800b883a 	mov	r5,r16
10000498:	e13ffd17 	ldw	r4,-12(fp)
1000049c:	00027d40 	call	100027d4 <alt_up_pixel_buffer_dma_draw>
			alt_putstr("Display image at 1.0 scale\n");
			scale = 1.0;
			clearScreen(my_pixel_buffer);
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
				for (int j = 0; j < 320; j++) {
100004a0:	e0bff617 	ldw	r2,-40(fp)
100004a4:	10800044 	addi	r2,r2,1
100004a8:	e0bff615 	stw	r2,-40(fp)
100004ac:	e0bff617 	ldw	r2,-40(fp)
100004b0:	10805010 	cmplti	r2,r2,320
100004b4:	103fb51e 	bne	r2,zero,1000038c <main+0xb8>

			alt_putstr("Display image at 1.0 scale\n");
			scale = 1.0;
			clearScreen(my_pixel_buffer);
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
100004b8:	e0bff517 	ldw	r2,-44(fp)
100004bc:	10800044 	addi	r2,r2,1
100004c0:	e0bff515 	stw	r2,-44(fp)
100004c4:	e0bff517 	ldw	r2,-44(fp)
100004c8:	10805010 	cmplti	r2,r2,320
100004cc:	103fad1e 	bne	r2,zero,10000384 <main+0xb0>
				}
			}

		} // end of mode 0

		if (mode == 0x01) {
100004d0:	e0bffb03 	ldbu	r2,-20(fp)
100004d4:	10800058 	cmpnei	r2,r2,1
100004d8:	1000591e 	bne	r2,zero,10000640 <main+0x36c>
			//alt_putstr("Display image at 0.5 scale\n");
			scale = 0.5;
100004dc:	008fc034 	movhi	r2,16128
100004e0:	e0bffc15 	stw	r2,-16(fp)
			clearScreen(my_pixel_buffer);
100004e4:	e13ffd17 	ldw	r4,-12(fp)
100004e8:	00002900 	call	10000290 <clearScreen>
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
100004ec:	e03ff715 	stw	zero,-36(fp)
100004f0:	00005006 	br	10000634 <main+0x360>
				for (int j = 0; j < 320; j++) {
100004f4:	e03ff815 	stw	zero,-32(fp)
100004f8:	00004806 	br	1000061c <main+0x348>
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
						(myimage[(i*320*3+j*3+2)]) +
100004fc:	e0bff717 	ldw	r2,-36(fp)
10000500:	1100f024 	muli	r4,r2,960
10000504:	e0fff817 	ldw	r3,-32(fp)
10000508:	1805883a 	mov	r2,r3
1000050c:	1085883a 	add	r2,r2,r2
10000510:	10c5883a 	add	r2,r2,r3
10000514:	2085883a 	add	r2,r4,r2
10000518:	10c00084 	addi	r3,r2,2
1000051c:	00840034 	movhi	r2,4096
10000520:	109fbb04 	addi	r2,r2,32492
10000524:	10c5883a 	add	r2,r2,r3
10000528:	10800003 	ldbu	r2,0(r2)
1000052c:	11003fcc 	andi	r4,r2,255
						(myimage[(i*320*3+j*3+1)]<<8) +
10000530:	e0bff717 	ldw	r2,-36(fp)
10000534:	1140f024 	muli	r5,r2,960
10000538:	e0fff817 	ldw	r3,-32(fp)
1000053c:	1805883a 	mov	r2,r3
10000540:	1085883a 	add	r2,r2,r2
10000544:	10c5883a 	add	r2,r2,r3
10000548:	2885883a 	add	r2,r5,r2
1000054c:	10c00044 	addi	r3,r2,1
10000550:	00840034 	movhi	r2,4096
10000554:	109fbb04 	addi	r2,r2,32492
10000558:	10c5883a 	add	r2,r2,r3
1000055c:	10800003 	ldbu	r2,0(r2)
10000560:	10803fcc 	andi	r2,r2,255
10000564:	1004923a 	slli	r2,r2,8
			clearScreen(my_pixel_buffer);
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
				for (int j = 0; j < 320; j++) {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
						(myimage[(i*320*3+j*3+2)]) +
10000568:	2089883a 	add	r4,r4,r2
						(myimage[(i*320*3+j*3+1)]<<8) +
						(myimage[(i*320*3+j*3+0)]<<16),j*scale,i*scale);
1000056c:	e0bff717 	ldw	r2,-36(fp)
10000570:	1140f024 	muli	r5,r2,960
10000574:	e0fff817 	ldw	r3,-32(fp)
10000578:	1805883a 	mov	r2,r3
1000057c:	1085883a 	add	r2,r2,r2
10000580:	10c5883a 	add	r2,r2,r3
10000584:	2887883a 	add	r3,r5,r2
10000588:	00840034 	movhi	r2,4096
1000058c:	109fbb04 	addi	r2,r2,32492
10000590:	10c5883a 	add	r2,r2,r3
10000594:	10800003 	ldbu	r2,0(r2)
10000598:	10803fcc 	andi	r2,r2,255
1000059c:	1004943a 	slli	r2,r2,16
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
				for (int j = 0; j < 320; j++) {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
						(myimage[(i*320*3+j*3+2)]) +
						(myimage[(i*320*3+j*3+1)]<<8) +
100005a0:	2085883a 	add	r2,r4,r2
			scale = 0.5;
			clearScreen(my_pixel_buffer);
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
				for (int j = 0; j < 320; j++) {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
100005a4:	1021883a 	mov	r16,r2
						(myimage[(i*320*3+j*3+2)]) +
						(myimage[(i*320*3+j*3+1)]<<8) +
						(myimage[(i*320*3+j*3+0)]<<16),j*scale,i*scale);
100005a8:	e13ff817 	ldw	r4,-32(fp)
100005ac:	00012fc0 	call	100012fc <__floatsisf>
100005b0:	1007883a 	mov	r3,r2
100005b4:	e17ffc17 	ldw	r5,-16(fp)
100005b8:	1809883a 	mov	r4,r3
100005bc:	00009ac0 	call	100009ac <__mulsf3>
100005c0:	1007883a 	mov	r3,r2
100005c4:	1805883a 	mov	r2,r3
			scale = 0.5;
			clearScreen(my_pixel_buffer);
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
				for (int j = 0; j < 320; j++) {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
100005c8:	1009883a 	mov	r4,r2
100005cc:	00007c80 	call	100007c8 <__fixunssfsi>
100005d0:	1023883a 	mov	r17,r2
						(myimage[(i*320*3+j*3+2)]) +
						(myimage[(i*320*3+j*3+1)]<<8) +
						(myimage[(i*320*3+j*3+0)]<<16),j*scale,i*scale);
100005d4:	e13ff717 	ldw	r4,-36(fp)
100005d8:	00012fc0 	call	100012fc <__floatsisf>
100005dc:	1007883a 	mov	r3,r2
100005e0:	e17ffc17 	ldw	r5,-16(fp)
100005e4:	1809883a 	mov	r4,r3
100005e8:	00009ac0 	call	100009ac <__mulsf3>
100005ec:	1007883a 	mov	r3,r2
100005f0:	1805883a 	mov	r2,r3
			scale = 0.5;
			clearScreen(my_pixel_buffer);
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
				for (int j = 0; j < 320; j++) {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
100005f4:	1009883a 	mov	r4,r2
100005f8:	00007c80 	call	100007c8 <__fixunssfsi>
100005fc:	100f883a 	mov	r7,r2
10000600:	880d883a 	mov	r6,r17
10000604:	800b883a 	mov	r5,r16
10000608:	e13ffd17 	ldw	r4,-12(fp)
1000060c:	00027d40 	call	100027d4 <alt_up_pixel_buffer_dma_draw>
			//alt_putstr("Display image at 0.5 scale\n");
			scale = 0.5;
			clearScreen(my_pixel_buffer);
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
				for (int j = 0; j < 320; j++) {
10000610:	e0bff817 	ldw	r2,-32(fp)
10000614:	10800044 	addi	r2,r2,1
10000618:	e0bff815 	stw	r2,-32(fp)
1000061c:	e0bff817 	ldw	r2,-32(fp)
10000620:	10805010 	cmplti	r2,r2,320
10000624:	103fb51e 	bne	r2,zero,100004fc <main+0x228>
		if (mode == 0x01) {
			//alt_putstr("Display image at 0.5 scale\n");
			scale = 0.5;
			clearScreen(my_pixel_buffer);
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
10000628:	e0bff717 	ldw	r2,-36(fp)
1000062c:	10800044 	addi	r2,r2,1
10000630:	e0bff715 	stw	r2,-36(fp)
10000634:	e0bff717 	ldw	r2,-36(fp)
10000638:	10805010 	cmplti	r2,r2,320
1000063c:	103fad1e 	bne	r2,zero,100004f4 <main+0x220>
			}

		} // end of mode 1

		// check the mode value. If mode is 2.
		if (mode == 0x02) {
10000640:	e0bffb03 	ldbu	r2,-20(fp)
10000644:	10800098 	cmpnei	r2,r2,2
10000648:	1000591e 	bne	r2,zero,100007b0 <main+0x4dc>
			//alt_putstr("Display image at 2.0 scale\n");
			scale = 2.0;
1000064c:	00900034 	movhi	r2,16384
10000650:	e0bffc15 	stw	r2,-16(fp)
			clearScreen(my_pixel_buffer);
10000654:	e13ffd17 	ldw	r4,-12(fp)
10000658:	00002900 	call	10000290 <clearScreen>
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
1000065c:	e03ff915 	stw	zero,-28(fp)
10000660:	00005006 	br	100007a4 <main+0x4d0>
				for (int j = 0; j < 320; j++) {
10000664:	e03ffa15 	stw	zero,-24(fp)
10000668:	00004806 	br	1000078c <main+0x4b8>
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
						(myimage[(i*320*3+j*3+2)]) +
1000066c:	e0bff917 	ldw	r2,-28(fp)
10000670:	1100f024 	muli	r4,r2,960
10000674:	e0fffa17 	ldw	r3,-24(fp)
10000678:	1805883a 	mov	r2,r3
1000067c:	1085883a 	add	r2,r2,r2
10000680:	10c5883a 	add	r2,r2,r3
10000684:	2085883a 	add	r2,r4,r2
10000688:	10c00084 	addi	r3,r2,2
1000068c:	00840034 	movhi	r2,4096
10000690:	109fbb04 	addi	r2,r2,32492
10000694:	10c5883a 	add	r2,r2,r3
10000698:	10800003 	ldbu	r2,0(r2)
1000069c:	11003fcc 	andi	r4,r2,255
						(myimage[(i*320*3+j*3+1)]<<8) +
100006a0:	e0bff917 	ldw	r2,-28(fp)
100006a4:	1140f024 	muli	r5,r2,960
100006a8:	e0fffa17 	ldw	r3,-24(fp)
100006ac:	1805883a 	mov	r2,r3
100006b0:	1085883a 	add	r2,r2,r2
100006b4:	10c5883a 	add	r2,r2,r3
100006b8:	2885883a 	add	r2,r5,r2
100006bc:	10c00044 	addi	r3,r2,1
100006c0:	00840034 	movhi	r2,4096
100006c4:	109fbb04 	addi	r2,r2,32492
100006c8:	10c5883a 	add	r2,r2,r3
100006cc:	10800003 	ldbu	r2,0(r2)
100006d0:	10803fcc 	andi	r2,r2,255
100006d4:	1004923a 	slli	r2,r2,8
			clearScreen(my_pixel_buffer);
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
				for (int j = 0; j < 320; j++) {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
						(myimage[(i*320*3+j*3+2)]) +
100006d8:	2089883a 	add	r4,r4,r2
						(myimage[(i*320*3+j*3+1)]<<8) +
						(myimage[(i*320*3+j*3+0)]<<16),j*scale,i*scale);
100006dc:	e0bff917 	ldw	r2,-28(fp)
100006e0:	1140f024 	muli	r5,r2,960
100006e4:	e0fffa17 	ldw	r3,-24(fp)
100006e8:	1805883a 	mov	r2,r3
100006ec:	1085883a 	add	r2,r2,r2
100006f0:	10c5883a 	add	r2,r2,r3
100006f4:	2887883a 	add	r3,r5,r2
100006f8:	00840034 	movhi	r2,4096
100006fc:	109fbb04 	addi	r2,r2,32492
10000700:	10c5883a 	add	r2,r2,r3
10000704:	10800003 	ldbu	r2,0(r2)
10000708:	10803fcc 	andi	r2,r2,255
1000070c:	1004943a 	slli	r2,r2,16
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
				for (int j = 0; j < 320; j++) {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
						(myimage[(i*320*3+j*3+2)]) +
						(myimage[(i*320*3+j*3+1)]<<8) +
10000710:	2085883a 	add	r2,r4,r2
			scale = 2.0;
			clearScreen(my_pixel_buffer);
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
				for (int j = 0; j < 320; j++) {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
10000714:	1021883a 	mov	r16,r2
						(myimage[(i*320*3+j*3+2)]) +
						(myimage[(i*320*3+j*3+1)]<<8) +
						(myimage[(i*320*3+j*3+0)]<<16),j*scale,i*scale);
10000718:	e13ffa17 	ldw	r4,-24(fp)
1000071c:	00012fc0 	call	100012fc <__floatsisf>
10000720:	1007883a 	mov	r3,r2
10000724:	e17ffc17 	ldw	r5,-16(fp)
10000728:	1809883a 	mov	r4,r3
1000072c:	00009ac0 	call	100009ac <__mulsf3>
10000730:	1007883a 	mov	r3,r2
10000734:	1805883a 	mov	r2,r3
			scale = 2.0;
			clearScreen(my_pixel_buffer);
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
				for (int j = 0; j < 320; j++) {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
10000738:	1009883a 	mov	r4,r2
1000073c:	00007c80 	call	100007c8 <__fixunssfsi>
10000740:	1023883a 	mov	r17,r2
						(myimage[(i*320*3+j*3+2)]) +
						(myimage[(i*320*3+j*3+1)]<<8) +
						(myimage[(i*320*3+j*3+0)]<<16),j*scale,i*scale);
10000744:	e13ff917 	ldw	r4,-28(fp)
10000748:	00012fc0 	call	100012fc <__floatsisf>
1000074c:	1007883a 	mov	r3,r2
10000750:	e17ffc17 	ldw	r5,-16(fp)
10000754:	1809883a 	mov	r4,r3
10000758:	00009ac0 	call	100009ac <__mulsf3>
1000075c:	1007883a 	mov	r3,r2
10000760:	1805883a 	mov	r2,r3
			scale = 2.0;
			clearScreen(my_pixel_buffer);
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
				for (int j = 0; j < 320; j++) {
					alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
10000764:	1009883a 	mov	r4,r2
10000768:	00007c80 	call	100007c8 <__fixunssfsi>
1000076c:	100f883a 	mov	r7,r2
10000770:	880d883a 	mov	r6,r17
10000774:	800b883a 	mov	r5,r16
10000778:	e13ffd17 	ldw	r4,-12(fp)
1000077c:	00027d40 	call	100027d4 <alt_up_pixel_buffer_dma_draw>
			//alt_putstr("Display image at 2.0 scale\n");
			scale = 2.0;
			clearScreen(my_pixel_buffer);
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
				for (int j = 0; j < 320; j++) {
10000780:	e0bffa17 	ldw	r2,-24(fp)
10000784:	10800044 	addi	r2,r2,1
10000788:	e0bffa15 	stw	r2,-24(fp)
1000078c:	e0bffa17 	ldw	r2,-24(fp)
10000790:	10805010 	cmplti	r2,r2,320
10000794:	103fb51e 	bne	r2,zero,1000066c <main+0x398>
		if (mode == 0x02) {
			//alt_putstr("Display image at 2.0 scale\n");
			scale = 2.0;
			clearScreen(my_pixel_buffer);
			//displayScaledImage(scale, my_pixel_buffer, myimage);
			for (int i = 0; i < 320; i++) {
10000798:	e0bff917 	ldw	r2,-28(fp)
1000079c:	10800044 	addi	r2,r2,1
100007a0:	e0bff915 	stw	r2,-28(fp)
100007a4:	e0bff917 	ldw	r2,-28(fp)
100007a8:	10805010 	cmplti	r2,r2,320
100007ac:	103fad1e 	bne	r2,zero,10000664 <main+0x390>
			}

		} // end of mode 2

		// check the mode value. If mode is 3.  print the message "Video message" on the console
		if (mode == 0x03) {
100007b0:	e0bffb03 	ldbu	r2,-20(fp)
100007b4:	108000d8 	cmpnei	r2,r2,3
100007b8:	103ee31e 	bne	r2,zero,10000348 <main+0x74>
			//alt_putstr("Video project message\n");
			clearScreen(my_pixel_buffer);
100007bc:	e13ffd17 	ldw	r4,-12(fp)
100007c0:	00002900 	call	10000290 <clearScreen>

		} // end of mode 3

	  } // end of while loop
100007c4:	003ee006 	br	10000348 <main+0x74>

100007c8 <__fixunssfsi>:
100007c8:	defffd04 	addi	sp,sp,-12
100007cc:	dc000015 	stw	r16,0(sp)
100007d0:	0413c034 	movhi	r16,20224
100007d4:	800b883a 	mov	r5,r16
100007d8:	dc400115 	stw	r17,4(sp)
100007dc:	dfc00215 	stw	ra,8(sp)
100007e0:	2023883a 	mov	r17,r4
100007e4:	00008280 	call	10000828 <__gesf2>
100007e8:	1000070e 	bge	r2,zero,10000808 <__fixunssfsi+0x40>
100007ec:	8809883a 	mov	r4,r17
100007f0:	000128c0 	call	1000128c <__fixsfsi>
100007f4:	dfc00217 	ldw	ra,8(sp)
100007f8:	dc400117 	ldw	r17,4(sp)
100007fc:	dc000017 	ldw	r16,0(sp)
10000800:	dec00304 	addi	sp,sp,12
10000804:	f800283a 	ret
10000808:	800b883a 	mov	r5,r16
1000080c:	8809883a 	mov	r4,r17
10000810:	0000da80 	call	10000da8 <__subsf3>
10000814:	1009883a 	mov	r4,r2
10000818:	000128c0 	call	1000128c <__fixsfsi>
1000081c:	00e00034 	movhi	r3,32768
10000820:	10c5883a 	add	r2,r2,r3
10000824:	003ff306 	br	100007f4 <__fixunssfsi+0x2c>

10000828 <__gesf2>:
10000828:	2004d5fa 	srli	r2,r4,23
1000082c:	2806d5fa 	srli	r3,r5,23
10000830:	01802034 	movhi	r6,128
10000834:	31bfffc4 	addi	r6,r6,-1
10000838:	10803fcc 	andi	r2,r2,255
1000083c:	01c03fc4 	movi	r7,255
10000840:	3110703a 	and	r8,r6,r4
10000844:	18c03fcc 	andi	r3,r3,255
10000848:	314c703a 	and	r6,r6,r5
1000084c:	2008d7fa 	srli	r4,r4,31
10000850:	280ad7fa 	srli	r5,r5,31
10000854:	11c01926 	beq	r2,r7,100008bc <__gesf2+0x94>
10000858:	01c03fc4 	movi	r7,255
1000085c:	19c00f26 	beq	r3,r7,1000089c <__gesf2+0x74>
10000860:	1000061e 	bne	r2,zero,1000087c <__gesf2+0x54>
10000864:	400f003a 	cmpeq	r7,r8,zero
10000868:	1800071e 	bne	r3,zero,10000888 <__gesf2+0x60>
1000086c:	3000061e 	bne	r6,zero,10000888 <__gesf2+0x60>
10000870:	0005883a 	mov	r2,zero
10000874:	40000e1e 	bne	r8,zero,100008b0 <__gesf2+0x88>
10000878:	f800283a 	ret
1000087c:	18000a1e 	bne	r3,zero,100008a8 <__gesf2+0x80>
10000880:	30000b26 	beq	r6,zero,100008b0 <__gesf2+0x88>
10000884:	000f883a 	mov	r7,zero
10000888:	29403fcc 	andi	r5,r5,255
1000088c:	38000726 	beq	r7,zero,100008ac <__gesf2+0x84>
10000890:	28000826 	beq	r5,zero,100008b4 <__gesf2+0x8c>
10000894:	00800044 	movi	r2,1
10000898:	f800283a 	ret
1000089c:	303ff026 	beq	r6,zero,10000860 <__gesf2+0x38>
100008a0:	00bfff84 	movi	r2,-2
100008a4:	f800283a 	ret
100008a8:	29403fcc 	andi	r5,r5,255
100008ac:	21400526 	beq	r4,r5,100008c4 <__gesf2+0x9c>
100008b0:	203ff826 	beq	r4,zero,10000894 <__gesf2+0x6c>
100008b4:	00bfffc4 	movi	r2,-1
100008b8:	f800283a 	ret
100008bc:	403fe626 	beq	r8,zero,10000858 <__gesf2+0x30>
100008c0:	003ff706 	br	100008a0 <__gesf2+0x78>
100008c4:	18bffa16 	blt	r3,r2,100008b0 <__gesf2+0x88>
100008c8:	10c00216 	blt	r2,r3,100008d4 <__gesf2+0xac>
100008cc:	323ff836 	bltu	r6,r8,100008b0 <__gesf2+0x88>
100008d0:	4180022e 	bgeu	r8,r6,100008dc <__gesf2+0xb4>
100008d4:	203fef1e 	bne	r4,zero,10000894 <__gesf2+0x6c>
100008d8:	003ff606 	br	100008b4 <__gesf2+0x8c>
100008dc:	0005883a 	mov	r2,zero
100008e0:	f800283a 	ret

100008e4 <__lesf2>:
100008e4:	2004d5fa 	srli	r2,r4,23
100008e8:	280cd5fa 	srli	r6,r5,23
100008ec:	00c02034 	movhi	r3,128
100008f0:	18ffffc4 	addi	r3,r3,-1
100008f4:	10803fcc 	andi	r2,r2,255
100008f8:	01c03fc4 	movi	r7,255
100008fc:	1910703a 	and	r8,r3,r4
10000900:	31803fcc 	andi	r6,r6,255
10000904:	1946703a 	and	r3,r3,r5
10000908:	2008d7fa 	srli	r4,r4,31
1000090c:	280ad7fa 	srli	r5,r5,31
10000910:	11c01b26 	beq	r2,r7,10000980 <__lesf2+0x9c>
10000914:	01c03fc4 	movi	r7,255
10000918:	31c01126 	beq	r6,r7,10000960 <__lesf2+0x7c>
1000091c:	1000071e 	bne	r2,zero,1000093c <__lesf2+0x58>
10000920:	400f003a 	cmpeq	r7,r8,zero
10000924:	21003fcc 	andi	r4,r4,255
10000928:	3000081e 	bne	r6,zero,1000094c <__lesf2+0x68>
1000092c:	1800071e 	bne	r3,zero,1000094c <__lesf2+0x68>
10000930:	0005883a 	mov	r2,zero
10000934:	40000f1e 	bne	r8,zero,10000974 <__lesf2+0x90>
10000938:	f800283a 	ret
1000093c:	21003fcc 	andi	r4,r4,255
10000940:	30000a1e 	bne	r6,zero,1000096c <__lesf2+0x88>
10000944:	18000b26 	beq	r3,zero,10000974 <__lesf2+0x90>
10000948:	000f883a 	mov	r7,zero
1000094c:	29403fcc 	andi	r5,r5,255
10000950:	38000726 	beq	r7,zero,10000970 <__lesf2+0x8c>
10000954:	28000826 	beq	r5,zero,10000978 <__lesf2+0x94>
10000958:	00800044 	movi	r2,1
1000095c:	f800283a 	ret
10000960:	183fee26 	beq	r3,zero,1000091c <__lesf2+0x38>
10000964:	00800084 	movi	r2,2
10000968:	f800283a 	ret
1000096c:	29403fcc 	andi	r5,r5,255
10000970:	21400626 	beq	r4,r5,1000098c <__lesf2+0xa8>
10000974:	203ff826 	beq	r4,zero,10000958 <__lesf2+0x74>
10000978:	00bfffc4 	movi	r2,-1
1000097c:	f800283a 	ret
10000980:	403fe426 	beq	r8,zero,10000914 <__lesf2+0x30>
10000984:	00800084 	movi	r2,2
10000988:	f800283a 	ret
1000098c:	30bff916 	blt	r6,r2,10000974 <__lesf2+0x90>
10000990:	11800216 	blt	r2,r6,1000099c <__lesf2+0xb8>
10000994:	1a3ff736 	bltu	r3,r8,10000974 <__lesf2+0x90>
10000998:	40c0022e 	bgeu	r8,r3,100009a4 <__lesf2+0xc0>
1000099c:	203fee1e 	bne	r4,zero,10000958 <__lesf2+0x74>
100009a0:	003ff506 	br	10000978 <__lesf2+0x94>
100009a4:	0005883a 	mov	r2,zero
100009a8:	f800283a 	ret

100009ac <__mulsf3>:
100009ac:	defff504 	addi	sp,sp,-44
100009b0:	dc000115 	stw	r16,4(sp)
100009b4:	2020d5fa 	srli	r16,r4,23
100009b8:	dd400615 	stw	r21,24(sp)
100009bc:	202ad7fa 	srli	r21,r4,31
100009c0:	dc800315 	stw	r18,12(sp)
100009c4:	04802034 	movhi	r18,128
100009c8:	df000915 	stw	fp,36(sp)
100009cc:	dd000515 	stw	r20,20(sp)
100009d0:	94bfffc4 	addi	r18,r18,-1
100009d4:	dfc00a15 	stw	ra,40(sp)
100009d8:	ddc00815 	stw	r23,32(sp)
100009dc:	dd800715 	stw	r22,28(sp)
100009e0:	dcc00415 	stw	r19,16(sp)
100009e4:	dc400215 	stw	r17,8(sp)
100009e8:	84003fcc 	andi	r16,r16,255
100009ec:	9124703a 	and	r18,r18,r4
100009f0:	a829883a 	mov	r20,r21
100009f4:	af003fcc 	andi	fp,r21,255
100009f8:	80005426 	beq	r16,zero,10000b4c <__mulsf3+0x1a0>
100009fc:	00803fc4 	movi	r2,255
10000a00:	80802f26 	beq	r16,r2,10000ac0 <__mulsf3+0x114>
10000a04:	91002034 	orhi	r4,r18,128
10000a08:	202490fa 	slli	r18,r4,3
10000a0c:	843fe044 	addi	r16,r16,-127
10000a10:	0023883a 	mov	r17,zero
10000a14:	002f883a 	mov	r23,zero
10000a18:	2804d5fa 	srli	r2,r5,23
10000a1c:	282cd7fa 	srli	r22,r5,31
10000a20:	01002034 	movhi	r4,128
10000a24:	213fffc4 	addi	r4,r4,-1
10000a28:	10803fcc 	andi	r2,r2,255
10000a2c:	2166703a 	and	r19,r4,r5
10000a30:	b1803fcc 	andi	r6,r22,255
10000a34:	10004c26 	beq	r2,zero,10000b68 <__mulsf3+0x1bc>
10000a38:	00c03fc4 	movi	r3,255
10000a3c:	10c04726 	beq	r2,r3,10000b5c <__mulsf3+0x1b0>
10000a40:	99002034 	orhi	r4,r19,128
10000a44:	202690fa 	slli	r19,r4,3
10000a48:	10bfe044 	addi	r2,r2,-127
10000a4c:	0007883a 	mov	r3,zero
10000a50:	80a1883a 	add	r16,r16,r2
10000a54:	010003c4 	movi	r4,15
10000a58:	1c44b03a 	or	r2,r3,r17
10000a5c:	b56af03a 	xor	r21,r22,r21
10000a60:	81c00044 	addi	r7,r16,1
10000a64:	20806b36 	bltu	r4,r2,10000c14 <__mulsf3+0x268>
10000a68:	100490ba 	slli	r2,r2,2
10000a6c:	01040034 	movhi	r4,4096
10000a70:	2102a004 	addi	r4,r4,2688
10000a74:	1105883a 	add	r2,r2,r4
10000a78:	10800017 	ldw	r2,0(r2)
10000a7c:	1000683a 	jmp	r2
10000a80:	10000c14 	ori	zero,r2,48
10000a84:	10000ad4 	ori	zero,r2,43
10000a88:	10000ad4 	ori	zero,r2,43
10000a8c:	10000ad0 	cmplti	zero,r2,43
10000a90:	10000bf8 	rdprs	zero,r2,47
10000a94:	10000bf8 	rdprs	zero,r2,47
10000a98:	10000be4 	muli	zero,r2,47
10000a9c:	10000ad0 	cmplti	zero,r2,43
10000aa0:	10000bf8 	rdprs	zero,r2,47
10000aa4:	10000be4 	muli	zero,r2,47
10000aa8:	10000bf8 	rdprs	zero,r2,47
10000aac:	10000ad0 	cmplti	zero,r2,43
10000ab0:	10000c04 	addi	zero,r2,48
10000ab4:	10000c04 	addi	zero,r2,48
10000ab8:	10000c04 	addi	zero,r2,48
10000abc:	10000ce0 	cmpeqi	zero,r2,51
10000ac0:	90003b1e 	bne	r18,zero,10000bb0 <__mulsf3+0x204>
10000ac4:	04400204 	movi	r17,8
10000ac8:	05c00084 	movi	r23,2
10000acc:	003fd206 	br	10000a18 <__mulsf3+0x6c>
10000ad0:	302b883a 	mov	r21,r6
10000ad4:	00800084 	movi	r2,2
10000ad8:	18802626 	beq	r3,r2,10000b74 <__mulsf3+0x1c8>
10000adc:	008000c4 	movi	r2,3
10000ae0:	1880ab26 	beq	r3,r2,10000d90 <__mulsf3+0x3e4>
10000ae4:	00800044 	movi	r2,1
10000ae8:	1880a21e 	bne	r3,r2,10000d74 <__mulsf3+0x3c8>
10000aec:	a829883a 	mov	r20,r21
10000af0:	0007883a 	mov	r3,zero
10000af4:	0009883a 	mov	r4,zero
10000af8:	18803fcc 	andi	r2,r3,255
10000afc:	100695fa 	slli	r3,r2,23
10000b00:	a0803fcc 	andi	r2,r20,255
10000b04:	100a97fa 	slli	r5,r2,31
10000b08:	00802034 	movhi	r2,128
10000b0c:	10bfffc4 	addi	r2,r2,-1
10000b10:	2084703a 	and	r2,r4,r2
10000b14:	10c4b03a 	or	r2,r2,r3
10000b18:	1144b03a 	or	r2,r2,r5
10000b1c:	dfc00a17 	ldw	ra,40(sp)
10000b20:	df000917 	ldw	fp,36(sp)
10000b24:	ddc00817 	ldw	r23,32(sp)
10000b28:	dd800717 	ldw	r22,28(sp)
10000b2c:	dd400617 	ldw	r21,24(sp)
10000b30:	dd000517 	ldw	r20,20(sp)
10000b34:	dcc00417 	ldw	r19,16(sp)
10000b38:	dc800317 	ldw	r18,12(sp)
10000b3c:	dc400217 	ldw	r17,8(sp)
10000b40:	dc000117 	ldw	r16,4(sp)
10000b44:	dec00b04 	addi	sp,sp,44
10000b48:	f800283a 	ret
10000b4c:	90000d1e 	bne	r18,zero,10000b84 <__mulsf3+0x1d8>
10000b50:	04400104 	movi	r17,4
10000b54:	05c00044 	movi	r23,1
10000b58:	003faf06 	br	10000a18 <__mulsf3+0x6c>
10000b5c:	9806c03a 	cmpne	r3,r19,zero
10000b60:	18c00084 	addi	r3,r3,2
10000b64:	003fba06 	br	10000a50 <__mulsf3+0xa4>
10000b68:	9800141e 	bne	r19,zero,10000bbc <__mulsf3+0x210>
10000b6c:	00c00044 	movi	r3,1
10000b70:	003fb706 	br	10000a50 <__mulsf3+0xa4>
10000b74:	a829883a 	mov	r20,r21
10000b78:	00ffffc4 	movi	r3,-1
10000b7c:	0009883a 	mov	r4,zero
10000b80:	003fdd06 	br	10000af8 <__mulsf3+0x14c>
10000b84:	9009883a 	mov	r4,r18
10000b88:	d9400015 	stw	r5,0(sp)
10000b8c:	00014200 	call	10001420 <__clzsi2>
10000b90:	10fffec4 	addi	r3,r2,-5
10000b94:	10801d84 	addi	r2,r2,118
10000b98:	90e4983a 	sll	r18,r18,r3
10000b9c:	00a1c83a 	sub	r16,zero,r2
10000ba0:	0023883a 	mov	r17,zero
10000ba4:	002f883a 	mov	r23,zero
10000ba8:	d9400017 	ldw	r5,0(sp)
10000bac:	003f9a06 	br	10000a18 <__mulsf3+0x6c>
10000bb0:	04400304 	movi	r17,12
10000bb4:	05c000c4 	movi	r23,3
10000bb8:	003f9706 	br	10000a18 <__mulsf3+0x6c>
10000bbc:	9809883a 	mov	r4,r19
10000bc0:	d9800015 	stw	r6,0(sp)
10000bc4:	00014200 	call	10001420 <__clzsi2>
10000bc8:	10fffec4 	addi	r3,r2,-5
10000bcc:	10801d84 	addi	r2,r2,118
10000bd0:	98e6983a 	sll	r19,r19,r3
10000bd4:	0085c83a 	sub	r2,zero,r2
10000bd8:	0007883a 	mov	r3,zero
10000bdc:	d9800017 	ldw	r6,0(sp)
10000be0:	003f9b06 	br	10000a50 <__mulsf3+0xa4>
10000be4:	01002034 	movhi	r4,128
10000be8:	0029883a 	mov	r20,zero
10000bec:	213fffc4 	addi	r4,r4,-1
10000bf0:	00ffffc4 	movi	r3,-1
10000bf4:	003fc006 	br	10000af8 <__mulsf3+0x14c>
10000bf8:	9027883a 	mov	r19,r18
10000bfc:	b807883a 	mov	r3,r23
10000c00:	003fb406 	br	10000ad4 <__mulsf3+0x128>
10000c04:	9027883a 	mov	r19,r18
10000c08:	e02b883a 	mov	r21,fp
10000c0c:	b807883a 	mov	r3,r23
10000c10:	003fb006 	br	10000ad4 <__mulsf3+0x128>
10000c14:	9004d43a 	srli	r2,r18,16
10000c18:	9810d43a 	srli	r8,r19,16
10000c1c:	94bfffcc 	andi	r18,r18,65535
10000c20:	993fffcc 	andi	r4,r19,65535
10000c24:	910d383a 	mul	r6,r18,r4
10000c28:	20a7383a 	mul	r19,r4,r2
10000c2c:	9225383a 	mul	r18,r18,r8
10000c30:	3006d43a 	srli	r3,r6,16
10000c34:	1211383a 	mul	r8,r2,r8
10000c38:	94e5883a 	add	r18,r18,r19
10000c3c:	1c87883a 	add	r3,r3,r18
10000c40:	1cc0022e 	bgeu	r3,r19,10000c4c <__mulsf3+0x2a0>
10000c44:	00800074 	movhi	r2,1
10000c48:	4091883a 	add	r8,r8,r2
10000c4c:	1804943a 	slli	r2,r3,16
10000c50:	31bfffcc 	andi	r6,r6,65535
10000c54:	1806d43a 	srli	r3,r3,16
10000c58:	1185883a 	add	r2,r2,r6
10000c5c:	102691ba 	slli	r19,r2,6
10000c60:	1a07883a 	add	r3,r3,r8
10000c64:	1004d6ba 	srli	r2,r2,26
10000c68:	180891ba 	slli	r4,r3,6
10000c6c:	9826c03a 	cmpne	r19,r19,zero
10000c70:	9884b03a 	or	r2,r19,r2
10000c74:	1126b03a 	or	r19,r2,r4
10000c78:	9882002c 	andhi	r2,r19,2048
10000c7c:	10000426 	beq	r2,zero,10000c90 <__mulsf3+0x2e4>
10000c80:	9804d07a 	srli	r2,r19,1
10000c84:	9900004c 	andi	r4,r19,1
10000c88:	3821883a 	mov	r16,r7
10000c8c:	1126b03a 	or	r19,r2,r4
10000c90:	80c01fc4 	addi	r3,r16,127
10000c94:	00c0210e 	bge	zero,r3,10000d1c <__mulsf3+0x370>
10000c98:	988001cc 	andi	r2,r19,7
10000c9c:	10000426 	beq	r2,zero,10000cb0 <__mulsf3+0x304>
10000ca0:	988003cc 	andi	r2,r19,15
10000ca4:	01000104 	movi	r4,4
10000ca8:	11000126 	beq	r2,r4,10000cb0 <__mulsf3+0x304>
10000cac:	9927883a 	add	r19,r19,r4
10000cb0:	9882002c 	andhi	r2,r19,2048
10000cb4:	10000426 	beq	r2,zero,10000cc8 <__mulsf3+0x31c>
10000cb8:	00be0034 	movhi	r2,63488
10000cbc:	10bfffc4 	addi	r2,r2,-1
10000cc0:	80c02004 	addi	r3,r16,128
10000cc4:	98a6703a 	and	r19,r19,r2
10000cc8:	00803f84 	movi	r2,254
10000ccc:	10ffa916 	blt	r2,r3,10000b74 <__mulsf3+0x1c8>
10000cd0:	980891ba 	slli	r4,r19,6
10000cd4:	a829883a 	mov	r20,r21
10000cd8:	2008d27a 	srli	r4,r4,9
10000cdc:	003f8606 	br	10000af8 <__mulsf3+0x14c>
10000ce0:	9080102c 	andhi	r2,r18,64
10000ce4:	10000826 	beq	r2,zero,10000d08 <__mulsf3+0x35c>
10000ce8:	9880102c 	andhi	r2,r19,64
10000cec:	1000061e 	bne	r2,zero,10000d08 <__mulsf3+0x35c>
10000cf0:	00802034 	movhi	r2,128
10000cf4:	99001034 	orhi	r4,r19,64
10000cf8:	10bfffc4 	addi	r2,r2,-1
10000cfc:	b029883a 	mov	r20,r22
10000d00:	2088703a 	and	r4,r4,r2
10000d04:	003fba06 	br	10000bf0 <__mulsf3+0x244>
10000d08:	00802034 	movhi	r2,128
10000d0c:	91001034 	orhi	r4,r18,64
10000d10:	10bfffc4 	addi	r2,r2,-1
10000d14:	2088703a 	and	r4,r4,r2
10000d18:	003fb506 	br	10000bf0 <__mulsf3+0x244>
10000d1c:	00800044 	movi	r2,1
10000d20:	10c7c83a 	sub	r3,r2,r3
10000d24:	008006c4 	movi	r2,27
10000d28:	10ff7016 	blt	r2,r3,10000aec <__mulsf3+0x140>
10000d2c:	00800804 	movi	r2,32
10000d30:	10c5c83a 	sub	r2,r2,r3
10000d34:	9884983a 	sll	r2,r19,r2
10000d38:	98c6d83a 	srl	r3,r19,r3
10000d3c:	1004c03a 	cmpne	r2,r2,zero
10000d40:	1884b03a 	or	r2,r3,r2
10000d44:	10c001cc 	andi	r3,r2,7
10000d48:	18000426 	beq	r3,zero,10000d5c <__mulsf3+0x3b0>
10000d4c:	10c003cc 	andi	r3,r2,15
10000d50:	01000104 	movi	r4,4
10000d54:	19000126 	beq	r3,r4,10000d5c <__mulsf3+0x3b0>
10000d58:	1105883a 	add	r2,r2,r4
10000d5c:	10c1002c 	andhi	r3,r2,1024
10000d60:	18000626 	beq	r3,zero,10000d7c <__mulsf3+0x3d0>
10000d64:	a829883a 	mov	r20,r21
10000d68:	00c00044 	movi	r3,1
10000d6c:	0009883a 	mov	r4,zero
10000d70:	003f6106 	br	10000af8 <__mulsf3+0x14c>
10000d74:	3821883a 	mov	r16,r7
10000d78:	003fc506 	br	10000c90 <__mulsf3+0x2e4>
10000d7c:	100491ba 	slli	r2,r2,6
10000d80:	a829883a 	mov	r20,r21
10000d84:	0007883a 	mov	r3,zero
10000d88:	1008d27a 	srli	r4,r2,9
10000d8c:	003f5a06 	br	10000af8 <__mulsf3+0x14c>
10000d90:	00802034 	movhi	r2,128
10000d94:	99001034 	orhi	r4,r19,64
10000d98:	10bfffc4 	addi	r2,r2,-1
10000d9c:	a829883a 	mov	r20,r21
10000da0:	2088703a 	and	r4,r4,r2
10000da4:	003f9206 	br	10000bf0 <__mulsf3+0x244>

10000da8 <__subsf3>:
10000da8:	defffc04 	addi	sp,sp,-16
10000dac:	280cd5fa 	srli	r6,r5,23
10000db0:	dc000015 	stw	r16,0(sp)
10000db4:	01c02034 	movhi	r7,128
10000db8:	2020d5fa 	srli	r16,r4,23
10000dbc:	39ffffc4 	addi	r7,r7,-1
10000dc0:	3906703a 	and	r3,r7,r4
10000dc4:	dc400115 	stw	r17,4(sp)
10000dc8:	394e703a 	and	r7,r7,r5
10000dcc:	2022d7fa 	srli	r17,r4,31
10000dd0:	dfc00315 	stw	ra,12(sp)
10000dd4:	dc800215 	stw	r18,8(sp)
10000dd8:	31803fcc 	andi	r6,r6,255
10000ddc:	01003fc4 	movi	r4,255
10000de0:	84003fcc 	andi	r16,r16,255
10000de4:	180690fa 	slli	r3,r3,3
10000de8:	2804d7fa 	srli	r2,r5,31
10000dec:	380e90fa 	slli	r7,r7,3
10000df0:	31006d26 	beq	r6,r4,10000fa8 <__subsf3+0x200>
10000df4:	1080005c 	xori	r2,r2,1
10000df8:	8189c83a 	sub	r4,r16,r6
10000dfc:	14404f26 	beq	r2,r17,10000f3c <__subsf3+0x194>
10000e00:	0100770e 	bge	zero,r4,10000fe0 <__subsf3+0x238>
10000e04:	30001e1e 	bne	r6,zero,10000e80 <__subsf3+0xd8>
10000e08:	38006a1e 	bne	r7,zero,10000fb4 <__subsf3+0x20c>
10000e0c:	188001cc 	andi	r2,r3,7
10000e10:	10000426 	beq	r2,zero,10000e24 <__subsf3+0x7c>
10000e14:	188003cc 	andi	r2,r3,15
10000e18:	01000104 	movi	r4,4
10000e1c:	11000126 	beq	r2,r4,10000e24 <__subsf3+0x7c>
10000e20:	1907883a 	add	r3,r3,r4
10000e24:	1881002c 	andhi	r2,r3,1024
10000e28:	10003926 	beq	r2,zero,10000f10 <__subsf3+0x168>
10000e2c:	84000044 	addi	r16,r16,1
10000e30:	00803fc4 	movi	r2,255
10000e34:	80807526 	beq	r16,r2,1000100c <__subsf3+0x264>
10000e38:	180691ba 	slli	r3,r3,6
10000e3c:	8880004c 	andi	r2,r17,1
10000e40:	180ad27a 	srli	r5,r3,9
10000e44:	84003fcc 	andi	r16,r16,255
10000e48:	800695fa 	slli	r3,r16,23
10000e4c:	10803fcc 	andi	r2,r2,255
10000e50:	01002034 	movhi	r4,128
10000e54:	213fffc4 	addi	r4,r4,-1
10000e58:	100497fa 	slli	r2,r2,31
10000e5c:	2920703a 	and	r16,r5,r4
10000e60:	80e0b03a 	or	r16,r16,r3
10000e64:	8084b03a 	or	r2,r16,r2
10000e68:	dfc00317 	ldw	ra,12(sp)
10000e6c:	dc800217 	ldw	r18,8(sp)
10000e70:	dc400117 	ldw	r17,4(sp)
10000e74:	dc000017 	ldw	r16,0(sp)
10000e78:	dec00404 	addi	sp,sp,16
10000e7c:	f800283a 	ret
10000e80:	00803fc4 	movi	r2,255
10000e84:	80bfe126 	beq	r16,r2,10000e0c <__subsf3+0x64>
10000e88:	39c10034 	orhi	r7,r7,1024
10000e8c:	008006c4 	movi	r2,27
10000e90:	11007416 	blt	r2,r4,10001064 <__subsf3+0x2bc>
10000e94:	00800804 	movi	r2,32
10000e98:	1105c83a 	sub	r2,r2,r4
10000e9c:	3884983a 	sll	r2,r7,r2
10000ea0:	390ed83a 	srl	r7,r7,r4
10000ea4:	1008c03a 	cmpne	r4,r2,zero
10000ea8:	390eb03a 	or	r7,r7,r4
10000eac:	19c7c83a 	sub	r3,r3,r7
10000eb0:	1881002c 	andhi	r2,r3,1024
10000eb4:	10001426 	beq	r2,zero,10000f08 <__subsf3+0x160>
10000eb8:	04810034 	movhi	r18,1024
10000ebc:	94bfffc4 	addi	r18,r18,-1
10000ec0:	1ca4703a 	and	r18,r3,r18
10000ec4:	9009883a 	mov	r4,r18
10000ec8:	00014200 	call	10001420 <__clzsi2>
10000ecc:	10bffec4 	addi	r2,r2,-5
10000ed0:	90a4983a 	sll	r18,r18,r2
10000ed4:	14005116 	blt	r2,r16,1000101c <__subsf3+0x274>
10000ed8:	1405c83a 	sub	r2,r2,r16
10000edc:	10c00044 	addi	r3,r2,1
10000ee0:	00800804 	movi	r2,32
10000ee4:	10c5c83a 	sub	r2,r2,r3
10000ee8:	9084983a 	sll	r2,r18,r2
10000eec:	90e4d83a 	srl	r18,r18,r3
10000ef0:	0021883a 	mov	r16,zero
10000ef4:	1006c03a 	cmpne	r3,r2,zero
10000ef8:	90c6b03a 	or	r3,r18,r3
10000efc:	003fc306 	br	10000e0c <__subsf3+0x64>
10000f00:	2000e026 	beq	r4,zero,10001284 <__subsf3+0x4dc>
10000f04:	2007883a 	mov	r3,r4
10000f08:	188001cc 	andi	r2,r3,7
10000f0c:	103fc11e 	bne	r2,zero,10000e14 <__subsf3+0x6c>
10000f10:	180ad0fa 	srli	r5,r3,3
10000f14:	00c03fc4 	movi	r3,255
10000f18:	8880004c 	andi	r2,r17,1
10000f1c:	80c0031e 	bne	r16,r3,10000f2c <__subsf3+0x184>
10000f20:	28006d26 	beq	r5,zero,100010d8 <__subsf3+0x330>
10000f24:	29401034 	orhi	r5,r5,64
10000f28:	043fffc4 	movi	r16,-1
10000f2c:	00c02034 	movhi	r3,128
10000f30:	18ffffc4 	addi	r3,r3,-1
10000f34:	28ca703a 	and	r5,r5,r3
10000f38:	003fc206 	br	10000e44 <__subsf3+0x9c>
10000f3c:	01003c0e 	bge	zero,r4,10001030 <__subsf3+0x288>
10000f40:	30002126 	beq	r6,zero,10000fc8 <__subsf3+0x220>
10000f44:	01403fc4 	movi	r5,255
10000f48:	817fb026 	beq	r16,r5,10000e0c <__subsf3+0x64>
10000f4c:	39c10034 	orhi	r7,r7,1024
10000f50:	014006c4 	movi	r5,27
10000f54:	29007416 	blt	r5,r4,10001128 <__subsf3+0x380>
10000f58:	01400804 	movi	r5,32
10000f5c:	290bc83a 	sub	r5,r5,r4
10000f60:	394a983a 	sll	r5,r7,r5
10000f64:	390ed83a 	srl	r7,r7,r4
10000f68:	2808c03a 	cmpne	r4,r5,zero
10000f6c:	390eb03a 	or	r7,r7,r4
10000f70:	19c7883a 	add	r3,r3,r7
10000f74:	1901002c 	andhi	r4,r3,1024
10000f78:	20003826 	beq	r4,zero,1000105c <__subsf3+0x2b4>
10000f7c:	84000044 	addi	r16,r16,1
10000f80:	01003fc4 	movi	r4,255
10000f84:	81005426 	beq	r16,r4,100010d8 <__subsf3+0x330>
10000f88:	1023883a 	mov	r17,r2
10000f8c:	00bf0034 	movhi	r2,64512
10000f90:	10bfffc4 	addi	r2,r2,-1
10000f94:	1900004c 	andi	r4,r3,1
10000f98:	1886703a 	and	r3,r3,r2
10000f9c:	1806d07a 	srli	r3,r3,1
10000fa0:	1906b03a 	or	r3,r3,r4
10000fa4:	003f9906 	br	10000e0c <__subsf3+0x64>
10000fa8:	383f9226 	beq	r7,zero,10000df4 <__subsf3+0x4c>
10000fac:	10803fcc 	andi	r2,r2,255
10000fb0:	003f9106 	br	10000df8 <__subsf3+0x50>
10000fb4:	213fffc4 	addi	r4,r4,-1
10000fb8:	203fbc26 	beq	r4,zero,10000eac <__subsf3+0x104>
10000fbc:	00803fc4 	movi	r2,255
10000fc0:	80bfb21e 	bne	r16,r2,10000e8c <__subsf3+0xe4>
10000fc4:	003f9106 	br	10000e0c <__subsf3+0x64>
10000fc8:	383f9026 	beq	r7,zero,10000e0c <__subsf3+0x64>
10000fcc:	213fffc4 	addi	r4,r4,-1
10000fd0:	203fe726 	beq	r4,zero,10000f70 <__subsf3+0x1c8>
10000fd4:	01403fc4 	movi	r5,255
10000fd8:	817fdd1e 	bne	r16,r5,10000f50 <__subsf3+0x1a8>
10000fdc:	003f8b06 	br	10000e0c <__subsf3+0x64>
10000fe0:	2000221e 	bne	r4,zero,1000106c <__subsf3+0x2c4>
10000fe4:	81000044 	addi	r4,r16,1
10000fe8:	21003fcc 	andi	r4,r4,255
10000fec:	01400044 	movi	r5,1
10000ff0:	2900470e 	bge	r5,r4,10001110 <__subsf3+0x368>
10000ff4:	19e5c83a 	sub	r18,r3,r7
10000ff8:	9141002c 	andhi	r5,r18,1024
10000ffc:	28002d26 	beq	r5,zero,100010b4 <__subsf3+0x30c>
10001000:	38e5c83a 	sub	r18,r7,r3
10001004:	1023883a 	mov	r17,r2
10001008:	003fae06 	br	10000ec4 <__subsf3+0x11c>
1000100c:	8880004c 	andi	r2,r17,1
10001010:	043fffc4 	movi	r16,-1
10001014:	000b883a 	mov	r5,zero
10001018:	003f8a06 	br	10000e44 <__subsf3+0x9c>
1000101c:	00ff0034 	movhi	r3,64512
10001020:	18ffffc4 	addi	r3,r3,-1
10001024:	80a1c83a 	sub	r16,r16,r2
10001028:	90c6703a 	and	r3,r18,r3
1000102c:	003f7706 	br	10000e0c <__subsf3+0x64>
10001030:	2000431e 	bne	r4,zero,10001140 <__subsf3+0x398>
10001034:	81000044 	addi	r4,r16,1
10001038:	21803fcc 	andi	r6,r4,255
1000103c:	01400044 	movi	r5,1
10001040:	2980280e 	bge	r5,r6,100010e4 <__subsf3+0x33c>
10001044:	01403fc4 	movi	r5,255
10001048:	21402326 	beq	r4,r5,100010d8 <__subsf3+0x330>
1000104c:	19c7883a 	add	r3,r3,r7
10001050:	1806d07a 	srli	r3,r3,1
10001054:	2021883a 	mov	r16,r4
10001058:	003f6c06 	br	10000e0c <__subsf3+0x64>
1000105c:	1023883a 	mov	r17,r2
10001060:	003fa906 	br	10000f08 <__subsf3+0x160>
10001064:	01c00044 	movi	r7,1
10001068:	003f9006 	br	10000eac <__subsf3+0x104>
1000106c:	8000151e 	bne	r16,zero,100010c4 <__subsf3+0x31c>
10001070:	18002f26 	beq	r3,zero,10001130 <__subsf3+0x388>
10001074:	0108303a 	nor	r4,zero,r4
10001078:	20000a26 	beq	r4,zero,100010a4 <__subsf3+0x2fc>
1000107c:	01403fc4 	movi	r5,255
10001080:	31402b26 	beq	r6,r5,10001130 <__subsf3+0x388>
10001084:	014006c4 	movi	r5,27
10001088:	29006e16 	blt	r5,r4,10001244 <__subsf3+0x49c>
1000108c:	01400804 	movi	r5,32
10001090:	290bc83a 	sub	r5,r5,r4
10001094:	194a983a 	sll	r5,r3,r5
10001098:	1908d83a 	srl	r4,r3,r4
1000109c:	2806c03a 	cmpne	r3,r5,zero
100010a0:	20c6b03a 	or	r3,r4,r3
100010a4:	38c7c83a 	sub	r3,r7,r3
100010a8:	3021883a 	mov	r16,r6
100010ac:	1023883a 	mov	r17,r2
100010b0:	003f7f06 	br	10000eb0 <__subsf3+0x108>
100010b4:	903f831e 	bne	r18,zero,10000ec4 <__subsf3+0x11c>
100010b8:	0005883a 	mov	r2,zero
100010bc:	0021883a 	mov	r16,zero
100010c0:	003f9a06 	br	10000f2c <__subsf3+0x184>
100010c4:	01403fc4 	movi	r5,255
100010c8:	31401926 	beq	r6,r5,10001130 <__subsf3+0x388>
100010cc:	0109c83a 	sub	r4,zero,r4
100010d0:	18c10034 	orhi	r3,r3,1024
100010d4:	003feb06 	br	10001084 <__subsf3+0x2dc>
100010d8:	043fffc4 	movi	r16,-1
100010dc:	000b883a 	mov	r5,zero
100010e0:	003f5806 	br	10000e44 <__subsf3+0x9c>
100010e4:	8000481e 	bne	r16,zero,10001208 <__subsf3+0x460>
100010e8:	18006226 	beq	r3,zero,10001274 <__subsf3+0x4cc>
100010ec:	383f4726 	beq	r7,zero,10000e0c <__subsf3+0x64>
100010f0:	19c7883a 	add	r3,r3,r7
100010f4:	1881002c 	andhi	r2,r3,1024
100010f8:	103f8326 	beq	r2,zero,10000f08 <__subsf3+0x160>
100010fc:	00bf0034 	movhi	r2,64512
10001100:	10bfffc4 	addi	r2,r2,-1
10001104:	2821883a 	mov	r16,r5
10001108:	1886703a 	and	r3,r3,r2
1000110c:	003f3f06 	br	10000e0c <__subsf3+0x64>
10001110:	80001c1e 	bne	r16,zero,10001184 <__subsf3+0x3dc>
10001114:	1800261e 	bne	r3,zero,100011b0 <__subsf3+0x408>
10001118:	38004c26 	beq	r7,zero,1000124c <__subsf3+0x4a4>
1000111c:	3807883a 	mov	r3,r7
10001120:	1023883a 	mov	r17,r2
10001124:	003f3906 	br	10000e0c <__subsf3+0x64>
10001128:	01c00044 	movi	r7,1
1000112c:	003f9006 	br	10000f70 <__subsf3+0x1c8>
10001130:	3807883a 	mov	r3,r7
10001134:	3021883a 	mov	r16,r6
10001138:	1023883a 	mov	r17,r2
1000113c:	003f3306 	br	10000e0c <__subsf3+0x64>
10001140:	8000161e 	bne	r16,zero,1000119c <__subsf3+0x3f4>
10001144:	18002d26 	beq	r3,zero,100011fc <__subsf3+0x454>
10001148:	0108303a 	nor	r4,zero,r4
1000114c:	20000a26 	beq	r4,zero,10001178 <__subsf3+0x3d0>
10001150:	01403fc4 	movi	r5,255
10001154:	31402926 	beq	r6,r5,100011fc <__subsf3+0x454>
10001158:	014006c4 	movi	r5,27
1000115c:	29004716 	blt	r5,r4,1000127c <__subsf3+0x4d4>
10001160:	01400804 	movi	r5,32
10001164:	290bc83a 	sub	r5,r5,r4
10001168:	194a983a 	sll	r5,r3,r5
1000116c:	1908d83a 	srl	r4,r3,r4
10001170:	2806c03a 	cmpne	r3,r5,zero
10001174:	20c6b03a 	or	r3,r4,r3
10001178:	19c7883a 	add	r3,r3,r7
1000117c:	3021883a 	mov	r16,r6
10001180:	003f7c06 	br	10000f74 <__subsf3+0x1cc>
10001184:	1800111e 	bne	r3,zero,100011cc <__subsf3+0x424>
10001188:	38003326 	beq	r7,zero,10001258 <__subsf3+0x4b0>
1000118c:	3807883a 	mov	r3,r7
10001190:	1023883a 	mov	r17,r2
10001194:	04003fc4 	movi	r16,255
10001198:	003f1c06 	br	10000e0c <__subsf3+0x64>
1000119c:	01403fc4 	movi	r5,255
100011a0:	31401626 	beq	r6,r5,100011fc <__subsf3+0x454>
100011a4:	0109c83a 	sub	r4,zero,r4
100011a8:	18c10034 	orhi	r3,r3,1024
100011ac:	003fea06 	br	10001158 <__subsf3+0x3b0>
100011b0:	383f1626 	beq	r7,zero,10000e0c <__subsf3+0x64>
100011b4:	19c9c83a 	sub	r4,r3,r7
100011b8:	2141002c 	andhi	r5,r4,1024
100011bc:	283f5026 	beq	r5,zero,10000f00 <__subsf3+0x158>
100011c0:	38c7c83a 	sub	r3,r7,r3
100011c4:	1023883a 	mov	r17,r2
100011c8:	003f1006 	br	10000e0c <__subsf3+0x64>
100011cc:	38001b26 	beq	r7,zero,1000123c <__subsf3+0x494>
100011d0:	1806d0fa 	srli	r3,r3,3
100011d4:	1900102c 	andhi	r4,r3,64
100011d8:	20000526 	beq	r4,zero,100011f0 <__subsf3+0x448>
100011dc:	380ed0fa 	srli	r7,r7,3
100011e0:	3900102c 	andhi	r4,r7,64
100011e4:	2000021e 	bne	r4,zero,100011f0 <__subsf3+0x448>
100011e8:	3807883a 	mov	r3,r7
100011ec:	1023883a 	mov	r17,r2
100011f0:	180690fa 	slli	r3,r3,3
100011f4:	04003fc4 	movi	r16,255
100011f8:	003f0406 	br	10000e0c <__subsf3+0x64>
100011fc:	3807883a 	mov	r3,r7
10001200:	3021883a 	mov	r16,r6
10001204:	003f0106 	br	10000e0c <__subsf3+0x64>
10001208:	18001726 	beq	r3,zero,10001268 <__subsf3+0x4c0>
1000120c:	38000b26 	beq	r7,zero,1000123c <__subsf3+0x494>
10001210:	1806d0fa 	srli	r3,r3,3
10001214:	1900102c 	andhi	r4,r3,64
10001218:	20000426 	beq	r4,zero,1000122c <__subsf3+0x484>
1000121c:	380ed0fa 	srli	r7,r7,3
10001220:	3900102c 	andhi	r4,r7,64
10001224:	2000011e 	bne	r4,zero,1000122c <__subsf3+0x484>
10001228:	3807883a 	mov	r3,r7
1000122c:	180690fa 	slli	r3,r3,3
10001230:	1023883a 	mov	r17,r2
10001234:	04003fc4 	movi	r16,255
10001238:	003ef406 	br	10000e0c <__subsf3+0x64>
1000123c:	04003fc4 	movi	r16,255
10001240:	003ef206 	br	10000e0c <__subsf3+0x64>
10001244:	00c00044 	movi	r3,1
10001248:	003f9606 	br	100010a4 <__subsf3+0x2fc>
1000124c:	000b883a 	mov	r5,zero
10001250:	0005883a 	mov	r2,zero
10001254:	003f3506 	br	10000f2c <__subsf3+0x184>
10001258:	01402034 	movhi	r5,128
1000125c:	297fffc4 	addi	r5,r5,-1
10001260:	0005883a 	mov	r2,zero
10001264:	003f2f06 	br	10000f24 <__subsf3+0x17c>
10001268:	3807883a 	mov	r3,r7
1000126c:	04003fc4 	movi	r16,255
10001270:	003ee606 	br	10000e0c <__subsf3+0x64>
10001274:	3807883a 	mov	r3,r7
10001278:	003ee406 	br	10000e0c <__subsf3+0x64>
1000127c:	00c00044 	movi	r3,1
10001280:	003fbd06 	br	10001178 <__subsf3+0x3d0>
10001284:	0005883a 	mov	r2,zero
10001288:	003f2806 	br	10000f2c <__subsf3+0x184>

1000128c <__fixsfsi>:
1000128c:	200ad5fa 	srli	r5,r4,23
10001290:	00c02034 	movhi	r3,128
10001294:	18ffffc4 	addi	r3,r3,-1
10001298:	29403fcc 	andi	r5,r5,255
1000129c:	00801f84 	movi	r2,126
100012a0:	1906703a 	and	r3,r3,r4
100012a4:	2008d7fa 	srli	r4,r4,31
100012a8:	11400e0e 	bge	r2,r5,100012e4 <__fixsfsi+0x58>
100012ac:	00802744 	movi	r2,157
100012b0:	11400816 	blt	r2,r5,100012d4 <__fixsfsi+0x48>
100012b4:	00802544 	movi	r2,149
100012b8:	18c02034 	orhi	r3,r3,128
100012bc:	11400b0e 	bge	r2,r5,100012ec <__fixsfsi+0x60>
100012c0:	28bfda84 	addi	r2,r5,-150
100012c4:	1884983a 	sll	r2,r3,r2
100012c8:	20000726 	beq	r4,zero,100012e8 <__fixsfsi+0x5c>
100012cc:	0085c83a 	sub	r2,zero,r2
100012d0:	f800283a 	ret
100012d4:	00a00034 	movhi	r2,32768
100012d8:	10bfffc4 	addi	r2,r2,-1
100012dc:	2085883a 	add	r2,r4,r2
100012e0:	f800283a 	ret
100012e4:	0005883a 	mov	r2,zero
100012e8:	f800283a 	ret
100012ec:	00802584 	movi	r2,150
100012f0:	1145c83a 	sub	r2,r2,r5
100012f4:	1884d83a 	srl	r2,r3,r2
100012f8:	003ff306 	br	100012c8 <__fixsfsi+0x3c>

100012fc <__floatsisf>:
100012fc:	defffd04 	addi	sp,sp,-12
10001300:	dfc00215 	stw	ra,8(sp)
10001304:	dc400115 	stw	r17,4(sp)
10001308:	dc000015 	stw	r16,0(sp)
1000130c:	20003526 	beq	r4,zero,100013e4 <__floatsisf+0xe8>
10001310:	2021883a 	mov	r16,r4
10001314:	2022d7fa 	srli	r17,r4,31
10001318:	20003616 	blt	r4,zero,100013f4 <__floatsisf+0xf8>
1000131c:	8009883a 	mov	r4,r16
10001320:	00014200 	call	10001420 <__clzsi2>
10001324:	00c02784 	movi	r3,158
10001328:	1887c83a 	sub	r3,r3,r2
1000132c:	01002584 	movi	r4,150
10001330:	20c01416 	blt	r4,r3,10001384 <__floatsisf+0x88>
10001334:	20c9c83a 	sub	r4,r4,r3
10001338:	8120983a 	sll	r16,r16,r4
1000133c:	00802034 	movhi	r2,128
10001340:	10bfffc4 	addi	r2,r2,-1
10001344:	8809883a 	mov	r4,r17
10001348:	80a0703a 	and	r16,r16,r2
1000134c:	18803fcc 	andi	r2,r3,255
10001350:	100695fa 	slli	r3,r2,23
10001354:	20803fcc 	andi	r2,r4,255
10001358:	100897fa 	slli	r4,r2,31
1000135c:	00802034 	movhi	r2,128
10001360:	10bfffc4 	addi	r2,r2,-1
10001364:	8084703a 	and	r2,r16,r2
10001368:	10c4b03a 	or	r2,r2,r3
1000136c:	1104b03a 	or	r2,r2,r4
10001370:	dfc00217 	ldw	ra,8(sp)
10001374:	dc400117 	ldw	r17,4(sp)
10001378:	dc000017 	ldw	r16,0(sp)
1000137c:	dec00304 	addi	sp,sp,12
10001380:	f800283a 	ret
10001384:	01002644 	movi	r4,153
10001388:	20c01c16 	blt	r4,r3,100013fc <__floatsisf+0x100>
1000138c:	20c9c83a 	sub	r4,r4,r3
10001390:	8120983a 	sll	r16,r16,r4
10001394:	013f0034 	movhi	r4,64512
10001398:	213fffc4 	addi	r4,r4,-1
1000139c:	814001cc 	andi	r5,r16,7
100013a0:	8108703a 	and	r4,r16,r4
100013a4:	28000426 	beq	r5,zero,100013b8 <__floatsisf+0xbc>
100013a8:	840003cc 	andi	r16,r16,15
100013ac:	01400104 	movi	r5,4
100013b0:	81400126 	beq	r16,r5,100013b8 <__floatsisf+0xbc>
100013b4:	2149883a 	add	r4,r4,r5
100013b8:	2141002c 	andhi	r5,r4,1024
100013bc:	28000526 	beq	r5,zero,100013d4 <__floatsisf+0xd8>
100013c0:	00c027c4 	movi	r3,159
100013c4:	1887c83a 	sub	r3,r3,r2
100013c8:	00bf0034 	movhi	r2,64512
100013cc:	10bfffc4 	addi	r2,r2,-1
100013d0:	2088703a 	and	r4,r4,r2
100013d4:	202091ba 	slli	r16,r4,6
100013d8:	8809883a 	mov	r4,r17
100013dc:	8020d27a 	srli	r16,r16,9
100013e0:	003fda06 	br	1000134c <__floatsisf+0x50>
100013e4:	0009883a 	mov	r4,zero
100013e8:	0007883a 	mov	r3,zero
100013ec:	0021883a 	mov	r16,zero
100013f0:	003fd606 	br	1000134c <__floatsisf+0x50>
100013f4:	0121c83a 	sub	r16,zero,r4
100013f8:	003fc806 	br	1000131c <__floatsisf+0x20>
100013fc:	01002e44 	movi	r4,185
10001400:	20c9c83a 	sub	r4,r4,r3
10001404:	01400144 	movi	r5,5
10001408:	8108983a 	sll	r4,r16,r4
1000140c:	288bc83a 	sub	r5,r5,r2
10001410:	8160d83a 	srl	r16,r16,r5
10001414:	2008c03a 	cmpne	r4,r4,zero
10001418:	8120b03a 	or	r16,r16,r4
1000141c:	003fdd06 	br	10001394 <__floatsisf+0x98>

10001420 <__clzsi2>:
10001420:	00bfffd4 	movui	r2,65535
10001424:	11000536 	bltu	r2,r4,1000143c <__clzsi2+0x1c>
10001428:	00803fc4 	movi	r2,255
1000142c:	11000f36 	bltu	r2,r4,1000146c <__clzsi2+0x4c>
10001430:	00800804 	movi	r2,32
10001434:	0007883a 	mov	r3,zero
10001438:	00000506 	br	10001450 <__clzsi2+0x30>
1000143c:	00804034 	movhi	r2,256
10001440:	10bfffc4 	addi	r2,r2,-1
10001444:	11000c2e 	bgeu	r2,r4,10001478 <__clzsi2+0x58>
10001448:	00800204 	movi	r2,8
1000144c:	00c00604 	movi	r3,24
10001450:	20c8d83a 	srl	r4,r4,r3
10001454:	00c40774 	movhi	r3,4125
10001458:	18e7e504 	addi	r3,r3,-24684
1000145c:	1909883a 	add	r4,r3,r4
10001460:	20c00003 	ldbu	r3,0(r4)
10001464:	10c5c83a 	sub	r2,r2,r3
10001468:	f800283a 	ret
1000146c:	00800604 	movi	r2,24
10001470:	00c00204 	movi	r3,8
10001474:	003ff606 	br	10001450 <__clzsi2+0x30>
10001478:	00800404 	movi	r2,16
1000147c:	1007883a 	mov	r3,r2
10001480:	003ff306 	br	10001450 <__clzsi2+0x30>

10001484 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10001484:	defffc04 	addi	sp,sp,-16
10001488:	df000315 	stw	fp,12(sp)
1000148c:	df000304 	addi	fp,sp,12
10001490:	e13ffd15 	stw	r4,-12(fp)
10001494:	e17ffe15 	stw	r5,-8(fp)
10001498:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000149c:	e0fffe17 	ldw	r3,-8(fp)
100014a0:	e0bffd17 	ldw	r2,-12(fp)
100014a4:	18800c26 	beq	r3,r2,100014d8 <alt_load_section+0x54>
  {
    while( to != end )
100014a8:	00000806 	br	100014cc <alt_load_section+0x48>
    {
      *to++ = *from++;
100014ac:	e0bffe17 	ldw	r2,-8(fp)
100014b0:	10c00104 	addi	r3,r2,4
100014b4:	e0fffe15 	stw	r3,-8(fp)
100014b8:	e0fffd17 	ldw	r3,-12(fp)
100014bc:	19000104 	addi	r4,r3,4
100014c0:	e13ffd15 	stw	r4,-12(fp)
100014c4:	18c00017 	ldw	r3,0(r3)
100014c8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
100014cc:	e0fffe17 	ldw	r3,-8(fp)
100014d0:	e0bfff17 	ldw	r2,-4(fp)
100014d4:	18bff51e 	bne	r3,r2,100014ac <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
100014d8:	0001883a 	nop
100014dc:	e037883a 	mov	sp,fp
100014e0:	df000017 	ldw	fp,0(sp)
100014e4:	dec00104 	addi	sp,sp,4
100014e8:	f800283a 	ret

100014ec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
100014ec:	defffe04 	addi	sp,sp,-8
100014f0:	dfc00115 	stw	ra,4(sp)
100014f4:	df000015 	stw	fp,0(sp)
100014f8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
100014fc:	01840774 	movhi	r6,4125
10001500:	31af2204 	addi	r6,r6,-17272
10001504:	01440774 	movhi	r5,4125
10001508:	29684f04 	addi	r5,r5,-24260
1000150c:	01040774 	movhi	r4,4125
10001510:	212f2204 	addi	r4,r4,-17272
10001514:	00014840 	call	10001484 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10001518:	01840034 	movhi	r6,4096
1000151c:	31809104 	addi	r6,r6,580
10001520:	01440034 	movhi	r5,4096
10001524:	29400804 	addi	r5,r5,32
10001528:	01040034 	movhi	r4,4096
1000152c:	21000804 	addi	r4,r4,32
10001530:	00014840 	call	10001484 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10001534:	01840774 	movhi	r6,4125
10001538:	31a84f04 	addi	r6,r6,-24260
1000153c:	01440034 	movhi	r5,4096
10001540:	295fbb04 	addi	r5,r5,32492
10001544:	01040034 	movhi	r4,4096
10001548:	211fbb04 	addi	r4,r4,32492
1000154c:	00014840 	call	10001484 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10001550:	00038840 	call	10003884 <alt_dcache_flush_all>
  alt_icache_flush_all();
10001554:	0003b280 	call	10003b28 <alt_icache_flush_all>
}
10001558:	0001883a 	nop
1000155c:	e037883a 	mov	sp,fp
10001560:	dfc00117 	ldw	ra,4(sp)
10001564:	df000017 	ldw	fp,0(sp)
10001568:	dec00204 	addi	sp,sp,8
1000156c:	f800283a 	ret

10001570 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10001570:	defffd04 	addi	sp,sp,-12
10001574:	dfc00215 	stw	ra,8(sp)
10001578:	df000115 	stw	fp,4(sp)
1000157c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10001580:	0009883a 	mov	r4,zero
10001584:	000165c0 	call	1000165c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10001588:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000158c:	00016940 	call	10001694 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10001590:	01840774 	movhi	r6,4125
10001594:	31a82504 	addi	r6,r6,-24428
10001598:	01440774 	movhi	r5,4125
1000159c:	29682504 	addi	r5,r5,-24428
100015a0:	01040774 	movhi	r4,4125
100015a4:	21282504 	addi	r4,r4,-24428
100015a8:	0003ec00 	call	10003ec0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
100015ac:	00039d80 	call	100039d8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
100015b0:	01040034 	movhi	r4,4096
100015b4:	210e8e04 	addi	r4,r4,14904
100015b8:	00046940 	call	10004694 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
100015bc:	d0a6e117 	ldw	r2,-25724(gp)
100015c0:	d0e6e217 	ldw	r3,-25720(gp)
100015c4:	d126e317 	ldw	r4,-25716(gp)
100015c8:	200d883a 	mov	r6,r4
100015cc:	180b883a 	mov	r5,r3
100015d0:	1009883a 	mov	r4,r2
100015d4:	00002d40 	call	100002d4 <main>
100015d8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
100015dc:	01000044 	movi	r4,1
100015e0:	00037b40 	call	100037b4 <close>
  exit (result);
100015e4:	e13fff17 	ldw	r4,-4(fp)
100015e8:	00046a80 	call	100046a8 <exit>

100015ec <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
100015ec:	defffd04 	addi	sp,sp,-12
100015f0:	dfc00215 	stw	ra,8(sp)
100015f4:	df000115 	stw	fp,4(sp)
100015f8:	df000104 	addi	fp,sp,4
100015fc:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
10001600:	d0a00a17 	ldw	r2,-32728(gp)
10001604:	10800217 	ldw	r2,8(r2)
10001608:	100b883a 	mov	r5,r2
1000160c:	e13fff17 	ldw	r4,-4(fp)
10001610:	000477c0 	call	1000477c <fputs>
#endif
#endif
}
10001614:	e037883a 	mov	sp,fp
10001618:	dfc00117 	ldw	ra,4(sp)
1000161c:	df000017 	ldw	fp,0(sp)
10001620:	dec00204 	addi	sp,sp,8
10001624:	f800283a 	ret

10001628 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10001628:	defffd04 	addi	sp,sp,-12
1000162c:	dfc00215 	stw	ra,8(sp)
10001630:	df000115 	stw	fp,4(sp)
10001634:	df000104 	addi	fp,sp,4
10001638:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000163c:	d1600204 	addi	r5,gp,-32760
10001640:	e13fff17 	ldw	r4,-4(fp)
10001644:	00039340 	call	10003934 <alt_dev_llist_insert>
}
10001648:	e037883a 	mov	sp,fp
1000164c:	dfc00117 	ldw	ra,4(sp)
10001650:	df000017 	ldw	fp,0(sp)
10001654:	dec00204 	addi	sp,sp,8
10001658:	f800283a 	ret

1000165c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000165c:	defffd04 	addi	sp,sp,-12
10001660:	dfc00215 	stw	ra,8(sp)
10001664:	df000115 	stw	fp,4(sp)
10001668:	df000104 	addi	fp,sp,4
1000166c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( PROCESSOR, processor);
10001670:	00043980 	call	10004398 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10001674:	00800044 	movi	r2,1
10001678:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000167c:	0001883a 	nop
10001680:	e037883a 	mov	sp,fp
10001684:	dfc00117 	ldw	ra,4(sp)
10001688:	df000017 	ldw	fp,0(sp)
1000168c:	dec00204 	addi	sp,sp,8
10001690:	f800283a 	ret

10001694 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10001694:	defffd04 	addi	sp,sp,-12
10001698:	dfc00215 	stw	ra,8(sp)
1000169c:	df000115 	stw	fp,4(sp)
100016a0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
100016a4:	000d883a 	mov	r6,zero
100016a8:	000b883a 	mov	r5,zero
100016ac:	01040774 	movhi	r4,4125
100016b0:	21285904 	addi	r4,r4,-24220
100016b4:	0001bb40 	call	10001bb4 <altera_avalon_jtag_uart_init>
100016b8:	01040774 	movhi	r4,4125
100016bc:	21284f04 	addi	r4,r4,-24260
100016c0:	00016280 	call	10001628 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA_0, video_character_buffer_with_dma_0);
100016c4:	00840774 	movhi	r2,4125
100016c8:	10ac6704 	addi	r2,r2,-20068
100016cc:	10800a17 	ldw	r2,40(r2)
100016d0:	10800104 	addi	r2,r2,4
100016d4:	10800017 	ldw	r2,0(r2)
100016d8:	10ffffcc 	andi	r3,r2,65535
100016dc:	00840774 	movhi	r2,4125
100016e0:	10ac6704 	addi	r2,r2,-20068
100016e4:	10c00c15 	stw	r3,48(r2)
100016e8:	00840774 	movhi	r2,4125
100016ec:	10ac6704 	addi	r2,r2,-20068
100016f0:	10800a17 	ldw	r2,40(r2)
100016f4:	10800104 	addi	r2,r2,4
100016f8:	10800017 	ldw	r2,0(r2)
100016fc:	1006d43a 	srli	r3,r2,16
10001700:	00840774 	movhi	r2,4125
10001704:	10ac6704 	addi	r2,r2,-20068
10001708:	10c00d15 	stw	r3,52(r2)
1000170c:	00840774 	movhi	r2,4125
10001710:	10ac6704 	addi	r2,r2,-20068
10001714:	10800c17 	ldw	r2,48(r2)
10001718:	10801068 	cmpgeui	r2,r2,65
1000171c:	1000081e 	bne	r2,zero,10001740 <alt_sys_init+0xac>
10001720:	00840774 	movhi	r2,4125
10001724:	10ac6704 	addi	r2,r2,-20068
10001728:	00c00fc4 	movi	r3,63
1000172c:	10c00f15 	stw	r3,60(r2)
10001730:	00840774 	movhi	r2,4125
10001734:	10ac6704 	addi	r2,r2,-20068
10001738:	00c00184 	movi	r3,6
1000173c:	10c01015 	stw	r3,64(r2)
10001740:	00840774 	movhi	r2,4125
10001744:	10ac6704 	addi	r2,r2,-20068
10001748:	10800d17 	ldw	r2,52(r2)
1000174c:	10800868 	cmpgeui	r2,r2,33
10001750:	1000041e 	bne	r2,zero,10001764 <alt_sys_init+0xd0>
10001754:	00840774 	movhi	r2,4125
10001758:	10ac6704 	addi	r2,r2,-20068
1000175c:	00c007c4 	movi	r3,31
10001760:	10c01115 	stw	r3,68(r2)
10001764:	01040774 	movhi	r4,4125
10001768:	212c6704 	addi	r4,r4,-20068
1000176c:	00024b80 	call	100024b8 <alt_up_char_buffer_init>
10001770:	01040774 	movhi	r4,4125
10001774:	212c6704 	addi	r4,r4,-20068
10001778:	00016280 	call	10001628 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( DMA_BUFFER, dma_buffer);
1000177c:	00840774 	movhi	r2,4125
10001780:	10ac7904 	addi	r2,r2,-19996
10001784:	10800a17 	ldw	r2,40(r2)
10001788:	10800017 	ldw	r2,0(r2)
1000178c:	1007883a 	mov	r3,r2
10001790:	00840774 	movhi	r2,4125
10001794:	10ac7904 	addi	r2,r2,-19996
10001798:	10c00b15 	stw	r3,44(r2)
1000179c:	00840774 	movhi	r2,4125
100017a0:	10ac7904 	addi	r2,r2,-19996
100017a4:	10800a17 	ldw	r2,40(r2)
100017a8:	10800104 	addi	r2,r2,4
100017ac:	10800017 	ldw	r2,0(r2)
100017b0:	1007883a 	mov	r3,r2
100017b4:	00840774 	movhi	r2,4125
100017b8:	10ac7904 	addi	r2,r2,-19996
100017bc:	10c00c15 	stw	r3,48(r2)
100017c0:	00840774 	movhi	r2,4125
100017c4:	10ac7904 	addi	r2,r2,-19996
100017c8:	10800a17 	ldw	r2,40(r2)
100017cc:	10800204 	addi	r2,r2,8
100017d0:	10800017 	ldw	r2,0(r2)
100017d4:	10ffffcc 	andi	r3,r2,65535
100017d8:	00840774 	movhi	r2,4125
100017dc:	10ac7904 	addi	r2,r2,-19996
100017e0:	10c00f15 	stw	r3,60(r2)
100017e4:	00840774 	movhi	r2,4125
100017e8:	10ac7904 	addi	r2,r2,-19996
100017ec:	10800a17 	ldw	r2,40(r2)
100017f0:	10800204 	addi	r2,r2,8
100017f4:	10800017 	ldw	r2,0(r2)
100017f8:	1006d43a 	srli	r3,r2,16
100017fc:	00840774 	movhi	r2,4125
10001800:	10ac7904 	addi	r2,r2,-19996
10001804:	10c01015 	stw	r3,64(r2)
10001808:	00840774 	movhi	r2,4125
1000180c:	10ac7904 	addi	r2,r2,-19996
10001810:	10800a17 	ldw	r2,40(r2)
10001814:	10800304 	addi	r2,r2,12
10001818:	10800017 	ldw	r2,0(r2)
1000181c:	1005d07a 	srai	r2,r2,1
10001820:	10c0004c 	andi	r3,r2,1
10001824:	00840774 	movhi	r2,4125
10001828:	10ac7904 	addi	r2,r2,-19996
1000182c:	10c00d15 	stw	r3,52(r2)
10001830:	00840774 	movhi	r2,4125
10001834:	10ac7904 	addi	r2,r2,-19996
10001838:	10800a17 	ldw	r2,40(r2)
1000183c:	10800304 	addi	r2,r2,12
10001840:	10800017 	ldw	r2,0(r2)
10001844:	1005d13a 	srai	r2,r2,4
10001848:	10c003cc 	andi	r3,r2,15
1000184c:	00840774 	movhi	r2,4125
10001850:	10ac7904 	addi	r2,r2,-19996
10001854:	10c00e15 	stw	r3,56(r2)
10001858:	00840774 	movhi	r2,4125
1000185c:	10ac7904 	addi	r2,r2,-19996
10001860:	10800a17 	ldw	r2,40(r2)
10001864:	10800304 	addi	r2,r2,12
10001868:	10800017 	ldw	r2,0(r2)
1000186c:	1005d43a 	srai	r2,r2,16
10001870:	e0bfff05 	stb	r2,-4(fp)
10001874:	00840774 	movhi	r2,4125
10001878:	10ac7904 	addi	r2,r2,-19996
1000187c:	10800a17 	ldw	r2,40(r2)
10001880:	10800304 	addi	r2,r2,12
10001884:	10800017 	ldw	r2,0(r2)
10001888:	1004d63a 	srli	r2,r2,24
1000188c:	e0bfff45 	stb	r2,-3(fp)
10001890:	00840774 	movhi	r2,4125
10001894:	10ac7904 	addi	r2,r2,-19996
10001898:	10800e17 	ldw	r2,56(r2)
1000189c:	10800058 	cmpnei	r2,r2,1
100018a0:	1000041e 	bne	r2,zero,100018b4 <alt_sys_init+0x220>
100018a4:	00840774 	movhi	r2,4125
100018a8:	10ac7904 	addi	r2,r2,-19996
100018ac:	10001115 	stw	zero,68(r2)
100018b0:	00000e06 	br	100018ec <alt_sys_init+0x258>
100018b4:	00840774 	movhi	r2,4125
100018b8:	10ac7904 	addi	r2,r2,-19996
100018bc:	10800e17 	ldw	r2,56(r2)
100018c0:	10800098 	cmpnei	r2,r2,2
100018c4:	1000051e 	bne	r2,zero,100018dc <alt_sys_init+0x248>
100018c8:	00840774 	movhi	r2,4125
100018cc:	10ac7904 	addi	r2,r2,-19996
100018d0:	00c00044 	movi	r3,1
100018d4:	10c01115 	stw	r3,68(r2)
100018d8:	00000406 	br	100018ec <alt_sys_init+0x258>
100018dc:	00840774 	movhi	r2,4125
100018e0:	10ac7904 	addi	r2,r2,-19996
100018e4:	00c00084 	movi	r3,2
100018e8:	10c01115 	stw	r3,68(r2)
100018ec:	e0bfff03 	ldbu	r2,-4(fp)
100018f0:	00c00804 	movi	r3,32
100018f4:	1885c83a 	sub	r2,r3,r2
100018f8:	00ffffc4 	movi	r3,-1
100018fc:	1886d83a 	srl	r3,r3,r2
10001900:	00840774 	movhi	r2,4125
10001904:	10ac7904 	addi	r2,r2,-19996
10001908:	10c01215 	stw	r3,72(r2)
1000190c:	e0ffff03 	ldbu	r3,-4(fp)
10001910:	00840774 	movhi	r2,4125
10001914:	10ac7904 	addi	r2,r2,-19996
10001918:	10801117 	ldw	r2,68(r2)
1000191c:	1887883a 	add	r3,r3,r2
10001920:	00840774 	movhi	r2,4125
10001924:	10ac7904 	addi	r2,r2,-19996
10001928:	10c01315 	stw	r3,76(r2)
1000192c:	e0bfff43 	ldbu	r2,-3(fp)
10001930:	00c00804 	movi	r3,32
10001934:	1885c83a 	sub	r2,r3,r2
10001938:	00ffffc4 	movi	r3,-1
1000193c:	1886d83a 	srl	r3,r3,r2
10001940:	00840774 	movhi	r2,4125
10001944:	10ac7904 	addi	r2,r2,-19996
10001948:	10c01415 	stw	r3,80(r2)
1000194c:	01040774 	movhi	r4,4125
10001950:	212c7904 	addi	r4,r4,-19996
10001954:	00016280 	call	10001628 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( RGB_RESAMPLER, rgb_resampler);
10001958:	00840774 	movhi	r2,4125
1000195c:	10ac8e04 	addi	r2,r2,-19912
10001960:	10800a17 	ldw	r2,40(r2)
10001964:	10800017 	ldw	r2,0(r2)
10001968:	10c003cc 	andi	r3,r2,15
1000196c:	00840774 	movhi	r2,4125
10001970:	10ac8e04 	addi	r2,r2,-19912
10001974:	10c00b15 	stw	r3,44(r2)
10001978:	00840774 	movhi	r2,4125
1000197c:	10ac8e04 	addi	r2,r2,-19912
10001980:	10800a17 	ldw	r2,40(r2)
10001984:	10800017 	ldw	r2,0(r2)
10001988:	1005d13a 	srai	r2,r2,4
1000198c:	10c0004c 	andi	r3,r2,1
10001990:	00840774 	movhi	r2,4125
10001994:	10ac8e04 	addi	r2,r2,-19912
10001998:	10c00c15 	stw	r3,48(r2)
1000199c:	00840774 	movhi	r2,4125
100019a0:	10ac8e04 	addi	r2,r2,-19912
100019a4:	10800a17 	ldw	r2,40(r2)
100019a8:	10800017 	ldw	r2,0(r2)
100019ac:	1005d17a 	srai	r2,r2,5
100019b0:	10c0004c 	andi	r3,r2,1
100019b4:	00840774 	movhi	r2,4125
100019b8:	10ac8e04 	addi	r2,r2,-19912
100019bc:	10c00d15 	stw	r3,52(r2)
100019c0:	00840774 	movhi	r2,4125
100019c4:	10ac8e04 	addi	r2,r2,-19912
100019c8:	10800a17 	ldw	r2,40(r2)
100019cc:	10800017 	ldw	r2,0(r2)
100019d0:	1005d43a 	srai	r2,r2,16
100019d4:	10c003cc 	andi	r3,r2,15
100019d8:	00840774 	movhi	r2,4125
100019dc:	10ac8e04 	addi	r2,r2,-19912
100019e0:	10c00e15 	stw	r3,56(r2)
100019e4:	00840774 	movhi	r2,4125
100019e8:	10ac8e04 	addi	r2,r2,-19912
100019ec:	10800a17 	ldw	r2,40(r2)
100019f0:	10800017 	ldw	r2,0(r2)
100019f4:	1005d53a 	srai	r2,r2,20
100019f8:	10c0004c 	andi	r3,r2,1
100019fc:	00840774 	movhi	r2,4125
10001a00:	10ac8e04 	addi	r2,r2,-19912
10001a04:	10c00f15 	stw	r3,60(r2)
10001a08:	00840774 	movhi	r2,4125
10001a0c:	10ac8e04 	addi	r2,r2,-19912
10001a10:	10800a17 	ldw	r2,40(r2)
10001a14:	10800017 	ldw	r2,0(r2)
10001a18:	1005d57a 	srai	r2,r2,21
10001a1c:	10c0004c 	andi	r3,r2,1
10001a20:	00840774 	movhi	r2,4125
10001a24:	10ac8e04 	addi	r2,r2,-19912
10001a28:	10c01015 	stw	r3,64(r2)
10001a2c:	01040774 	movhi	r4,4125
10001a30:	212c8e04 	addi	r4,r4,-19912
10001a34:	00016280 	call	10001628 <alt_dev_reg>
}
10001a38:	0001883a 	nop
10001a3c:	e037883a 	mov	sp,fp
10001a40:	dfc00117 	ldw	ra,4(sp)
10001a44:	df000017 	ldw	fp,0(sp)
10001a48:	dec00204 	addi	sp,sp,8
10001a4c:	f800283a 	ret

10001a50 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10001a50:	defffa04 	addi	sp,sp,-24
10001a54:	dfc00515 	stw	ra,20(sp)
10001a58:	df000415 	stw	fp,16(sp)
10001a5c:	df000404 	addi	fp,sp,16
10001a60:	e13ffd15 	stw	r4,-12(fp)
10001a64:	e17ffe15 	stw	r5,-8(fp)
10001a68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10001a6c:	e0bffd17 	ldw	r2,-12(fp)
10001a70:	10800017 	ldw	r2,0(r2)
10001a74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10001a78:	e0bffc17 	ldw	r2,-16(fp)
10001a7c:	10c00a04 	addi	r3,r2,40
10001a80:	e0bffd17 	ldw	r2,-12(fp)
10001a84:	10800217 	ldw	r2,8(r2)
10001a88:	100f883a 	mov	r7,r2
10001a8c:	e1bfff17 	ldw	r6,-4(fp)
10001a90:	e17ffe17 	ldw	r5,-8(fp)
10001a94:	1809883a 	mov	r4,r3
10001a98:	00020780 	call	10002078 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10001a9c:	e037883a 	mov	sp,fp
10001aa0:	dfc00117 	ldw	ra,4(sp)
10001aa4:	df000017 	ldw	fp,0(sp)
10001aa8:	dec00204 	addi	sp,sp,8
10001aac:	f800283a 	ret

10001ab0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10001ab0:	defffa04 	addi	sp,sp,-24
10001ab4:	dfc00515 	stw	ra,20(sp)
10001ab8:	df000415 	stw	fp,16(sp)
10001abc:	df000404 	addi	fp,sp,16
10001ac0:	e13ffd15 	stw	r4,-12(fp)
10001ac4:	e17ffe15 	stw	r5,-8(fp)
10001ac8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10001acc:	e0bffd17 	ldw	r2,-12(fp)
10001ad0:	10800017 	ldw	r2,0(r2)
10001ad4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10001ad8:	e0bffc17 	ldw	r2,-16(fp)
10001adc:	10c00a04 	addi	r3,r2,40
10001ae0:	e0bffd17 	ldw	r2,-12(fp)
10001ae4:	10800217 	ldw	r2,8(r2)
10001ae8:	100f883a 	mov	r7,r2
10001aec:	e1bfff17 	ldw	r6,-4(fp)
10001af0:	e17ffe17 	ldw	r5,-8(fp)
10001af4:	1809883a 	mov	r4,r3
10001af8:	00022940 	call	10002294 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10001afc:	e037883a 	mov	sp,fp
10001b00:	dfc00117 	ldw	ra,4(sp)
10001b04:	df000017 	ldw	fp,0(sp)
10001b08:	dec00204 	addi	sp,sp,8
10001b0c:	f800283a 	ret

10001b10 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10001b10:	defffc04 	addi	sp,sp,-16
10001b14:	dfc00315 	stw	ra,12(sp)
10001b18:	df000215 	stw	fp,8(sp)
10001b1c:	df000204 	addi	fp,sp,8
10001b20:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10001b24:	e0bfff17 	ldw	r2,-4(fp)
10001b28:	10800017 	ldw	r2,0(r2)
10001b2c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10001b30:	e0bffe17 	ldw	r2,-8(fp)
10001b34:	10c00a04 	addi	r3,r2,40
10001b38:	e0bfff17 	ldw	r2,-4(fp)
10001b3c:	10800217 	ldw	r2,8(r2)
10001b40:	100b883a 	mov	r5,r2
10001b44:	1809883a 	mov	r4,r3
10001b48:	0001f200 	call	10001f20 <altera_avalon_jtag_uart_close>
}
10001b4c:	e037883a 	mov	sp,fp
10001b50:	dfc00117 	ldw	ra,4(sp)
10001b54:	df000017 	ldw	fp,0(sp)
10001b58:	dec00204 	addi	sp,sp,8
10001b5c:	f800283a 	ret

10001b60 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10001b60:	defffa04 	addi	sp,sp,-24
10001b64:	dfc00515 	stw	ra,20(sp)
10001b68:	df000415 	stw	fp,16(sp)
10001b6c:	df000404 	addi	fp,sp,16
10001b70:	e13ffd15 	stw	r4,-12(fp)
10001b74:	e17ffe15 	stw	r5,-8(fp)
10001b78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10001b7c:	e0bffd17 	ldw	r2,-12(fp)
10001b80:	10800017 	ldw	r2,0(r2)
10001b84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10001b88:	e0bffc17 	ldw	r2,-16(fp)
10001b8c:	10800a04 	addi	r2,r2,40
10001b90:	e1bfff17 	ldw	r6,-4(fp)
10001b94:	e17ffe17 	ldw	r5,-8(fp)
10001b98:	1009883a 	mov	r4,r2
10001b9c:	0001f880 	call	10001f88 <altera_avalon_jtag_uart_ioctl>
}
10001ba0:	e037883a 	mov	sp,fp
10001ba4:	dfc00117 	ldw	ra,4(sp)
10001ba8:	df000017 	ldw	fp,0(sp)
10001bac:	dec00204 	addi	sp,sp,8
10001bb0:	f800283a 	ret

10001bb4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10001bb4:	defffa04 	addi	sp,sp,-24
10001bb8:	dfc00515 	stw	ra,20(sp)
10001bbc:	df000415 	stw	fp,16(sp)
10001bc0:	df000404 	addi	fp,sp,16
10001bc4:	e13ffd15 	stw	r4,-12(fp)
10001bc8:	e17ffe15 	stw	r5,-8(fp)
10001bcc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10001bd0:	e0bffd17 	ldw	r2,-12(fp)
10001bd4:	00c00044 	movi	r3,1
10001bd8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10001bdc:	e0bffd17 	ldw	r2,-12(fp)
10001be0:	10800017 	ldw	r2,0(r2)
10001be4:	10800104 	addi	r2,r2,4
10001be8:	1007883a 	mov	r3,r2
10001bec:	e0bffd17 	ldw	r2,-12(fp)
10001bf0:	10800817 	ldw	r2,32(r2)
10001bf4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10001bf8:	e0bffe17 	ldw	r2,-8(fp)
10001bfc:	e0ffff17 	ldw	r3,-4(fp)
10001c00:	d8000015 	stw	zero,0(sp)
10001c04:	e1fffd17 	ldw	r7,-12(fp)
10001c08:	01840034 	movhi	r6,4096
10001c0c:	31871d04 	addi	r6,r6,7284
10001c10:	180b883a 	mov	r5,r3
10001c14:	1009883a 	mov	r4,r2
10001c18:	0003b5c0 	call	10003b5c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10001c1c:	e0bffd17 	ldw	r2,-12(fp)
10001c20:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10001c24:	e0bffd17 	ldw	r2,-12(fp)
10001c28:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10001c2c:	d0e6e517 	ldw	r3,-25708(gp)
10001c30:	e1fffd17 	ldw	r7,-12(fp)
10001c34:	01840034 	movhi	r6,4096
10001c38:	3187a004 	addi	r6,r6,7808
10001c3c:	180b883a 	mov	r5,r3
10001c40:	1009883a 	mov	r4,r2
10001c44:	000364c0 	call	1000364c <alt_alarm_start>
10001c48:	1000040e 	bge	r2,zero,10001c5c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10001c4c:	e0fffd17 	ldw	r3,-12(fp)
10001c50:	00a00034 	movhi	r2,32768
10001c54:	10bfffc4 	addi	r2,r2,-1
10001c58:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10001c5c:	0001883a 	nop
10001c60:	e037883a 	mov	sp,fp
10001c64:	dfc00117 	ldw	ra,4(sp)
10001c68:	df000017 	ldw	fp,0(sp)
10001c6c:	dec00204 	addi	sp,sp,8
10001c70:	f800283a 	ret

10001c74 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10001c74:	defff804 	addi	sp,sp,-32
10001c78:	df000715 	stw	fp,28(sp)
10001c7c:	df000704 	addi	fp,sp,28
10001c80:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10001c84:	e0bfff17 	ldw	r2,-4(fp)
10001c88:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10001c8c:	e0bffb17 	ldw	r2,-20(fp)
10001c90:	10800017 	ldw	r2,0(r2)
10001c94:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10001c98:	e0bffc17 	ldw	r2,-16(fp)
10001c9c:	10800104 	addi	r2,r2,4
10001ca0:	10800037 	ldwio	r2,0(r2)
10001ca4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10001ca8:	e0bffd17 	ldw	r2,-12(fp)
10001cac:	1080c00c 	andi	r2,r2,768
10001cb0:	10006d26 	beq	r2,zero,10001e68 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10001cb4:	e0bffd17 	ldw	r2,-12(fp)
10001cb8:	1080400c 	andi	r2,r2,256
10001cbc:	10003526 	beq	r2,zero,10001d94 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10001cc0:	00800074 	movhi	r2,1
10001cc4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10001cc8:	e0bffb17 	ldw	r2,-20(fp)
10001ccc:	10800a17 	ldw	r2,40(r2)
10001cd0:	10800044 	addi	r2,r2,1
10001cd4:	1081ffcc 	andi	r2,r2,2047
10001cd8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10001cdc:	e0bffb17 	ldw	r2,-20(fp)
10001ce0:	10c00b17 	ldw	r3,44(r2)
10001ce4:	e0bffe17 	ldw	r2,-8(fp)
10001ce8:	18801526 	beq	r3,r2,10001d40 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10001cec:	e0bffc17 	ldw	r2,-16(fp)
10001cf0:	10800037 	ldwio	r2,0(r2)
10001cf4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10001cf8:	e0bff917 	ldw	r2,-28(fp)
10001cfc:	10a0000c 	andi	r2,r2,32768
10001d00:	10001126 	beq	r2,zero,10001d48 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10001d04:	e0bffb17 	ldw	r2,-20(fp)
10001d08:	10800a17 	ldw	r2,40(r2)
10001d0c:	e0fff917 	ldw	r3,-28(fp)
10001d10:	1809883a 	mov	r4,r3
10001d14:	e0fffb17 	ldw	r3,-20(fp)
10001d18:	1885883a 	add	r2,r3,r2
10001d1c:	10800e04 	addi	r2,r2,56
10001d20:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10001d24:	e0bffb17 	ldw	r2,-20(fp)
10001d28:	10800a17 	ldw	r2,40(r2)
10001d2c:	10800044 	addi	r2,r2,1
10001d30:	10c1ffcc 	andi	r3,r2,2047
10001d34:	e0bffb17 	ldw	r2,-20(fp)
10001d38:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10001d3c:	003fe206 	br	10001cc8 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10001d40:	0001883a 	nop
10001d44:	00000106 	br	10001d4c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10001d48:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10001d4c:	e0bff917 	ldw	r2,-28(fp)
10001d50:	10bfffec 	andhi	r2,r2,65535
10001d54:	10000f26 	beq	r2,zero,10001d94 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10001d58:	e0bffb17 	ldw	r2,-20(fp)
10001d5c:	10c00817 	ldw	r3,32(r2)
10001d60:	00bfff84 	movi	r2,-2
10001d64:	1886703a 	and	r3,r3,r2
10001d68:	e0bffb17 	ldw	r2,-20(fp)
10001d6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10001d70:	e0bffc17 	ldw	r2,-16(fp)
10001d74:	10800104 	addi	r2,r2,4
10001d78:	1007883a 	mov	r3,r2
10001d7c:	e0bffb17 	ldw	r2,-20(fp)
10001d80:	10800817 	ldw	r2,32(r2)
10001d84:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10001d88:	e0bffc17 	ldw	r2,-16(fp)
10001d8c:	10800104 	addi	r2,r2,4
10001d90:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10001d94:	e0bffd17 	ldw	r2,-12(fp)
10001d98:	1080800c 	andi	r2,r2,512
10001d9c:	103fbe26 	beq	r2,zero,10001c98 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10001da0:	e0bffd17 	ldw	r2,-12(fp)
10001da4:	1004d43a 	srli	r2,r2,16
10001da8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10001dac:	00001406 	br	10001e00 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10001db0:	e0bffc17 	ldw	r2,-16(fp)
10001db4:	e0fffb17 	ldw	r3,-20(fp)
10001db8:	18c00d17 	ldw	r3,52(r3)
10001dbc:	e13ffb17 	ldw	r4,-20(fp)
10001dc0:	20c7883a 	add	r3,r4,r3
10001dc4:	18c20e04 	addi	r3,r3,2104
10001dc8:	18c00003 	ldbu	r3,0(r3)
10001dcc:	18c03fcc 	andi	r3,r3,255
10001dd0:	18c0201c 	xori	r3,r3,128
10001dd4:	18ffe004 	addi	r3,r3,-128
10001dd8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10001ddc:	e0bffb17 	ldw	r2,-20(fp)
10001de0:	10800d17 	ldw	r2,52(r2)
10001de4:	10800044 	addi	r2,r2,1
10001de8:	10c1ffcc 	andi	r3,r2,2047
10001dec:	e0bffb17 	ldw	r2,-20(fp)
10001df0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10001df4:	e0bffa17 	ldw	r2,-24(fp)
10001df8:	10bfffc4 	addi	r2,r2,-1
10001dfc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10001e00:	e0bffa17 	ldw	r2,-24(fp)
10001e04:	10000526 	beq	r2,zero,10001e1c <altera_avalon_jtag_uart_irq+0x1a8>
10001e08:	e0bffb17 	ldw	r2,-20(fp)
10001e0c:	10c00d17 	ldw	r3,52(r2)
10001e10:	e0bffb17 	ldw	r2,-20(fp)
10001e14:	10800c17 	ldw	r2,48(r2)
10001e18:	18bfe51e 	bne	r3,r2,10001db0 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10001e1c:	e0bffa17 	ldw	r2,-24(fp)
10001e20:	103f9d26 	beq	r2,zero,10001c98 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10001e24:	e0bffb17 	ldw	r2,-20(fp)
10001e28:	10c00817 	ldw	r3,32(r2)
10001e2c:	00bfff44 	movi	r2,-3
10001e30:	1886703a 	and	r3,r3,r2
10001e34:	e0bffb17 	ldw	r2,-20(fp)
10001e38:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10001e3c:	e0bffb17 	ldw	r2,-20(fp)
10001e40:	10800017 	ldw	r2,0(r2)
10001e44:	10800104 	addi	r2,r2,4
10001e48:	1007883a 	mov	r3,r2
10001e4c:	e0bffb17 	ldw	r2,-20(fp)
10001e50:	10800817 	ldw	r2,32(r2)
10001e54:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10001e58:	e0bffc17 	ldw	r2,-16(fp)
10001e5c:	10800104 	addi	r2,r2,4
10001e60:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10001e64:	003f8c06 	br	10001c98 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10001e68:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10001e6c:	0001883a 	nop
10001e70:	e037883a 	mov	sp,fp
10001e74:	df000017 	ldw	fp,0(sp)
10001e78:	dec00104 	addi	sp,sp,4
10001e7c:	f800283a 	ret

10001e80 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10001e80:	defff804 	addi	sp,sp,-32
10001e84:	df000715 	stw	fp,28(sp)
10001e88:	df000704 	addi	fp,sp,28
10001e8c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10001e90:	e0bffb17 	ldw	r2,-20(fp)
10001e94:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10001e98:	e0bff917 	ldw	r2,-28(fp)
10001e9c:	10800017 	ldw	r2,0(r2)
10001ea0:	10800104 	addi	r2,r2,4
10001ea4:	10800037 	ldwio	r2,0(r2)
10001ea8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10001eac:	e0bffa17 	ldw	r2,-24(fp)
10001eb0:	1081000c 	andi	r2,r2,1024
10001eb4:	10000b26 	beq	r2,zero,10001ee4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10001eb8:	e0bff917 	ldw	r2,-28(fp)
10001ebc:	10800017 	ldw	r2,0(r2)
10001ec0:	10800104 	addi	r2,r2,4
10001ec4:	1007883a 	mov	r3,r2
10001ec8:	e0bff917 	ldw	r2,-28(fp)
10001ecc:	10800817 	ldw	r2,32(r2)
10001ed0:	10810014 	ori	r2,r2,1024
10001ed4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10001ed8:	e0bff917 	ldw	r2,-28(fp)
10001edc:	10000915 	stw	zero,36(r2)
10001ee0:	00000a06 	br	10001f0c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10001ee4:	e0bff917 	ldw	r2,-28(fp)
10001ee8:	10c00917 	ldw	r3,36(r2)
10001eec:	00a00034 	movhi	r2,32768
10001ef0:	10bfff04 	addi	r2,r2,-4
10001ef4:	10c00536 	bltu	r2,r3,10001f0c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10001ef8:	e0bff917 	ldw	r2,-28(fp)
10001efc:	10800917 	ldw	r2,36(r2)
10001f00:	10c00044 	addi	r3,r2,1
10001f04:	e0bff917 	ldw	r2,-28(fp)
10001f08:	10c00915 	stw	r3,36(r2)
10001f0c:	d0a6e517 	ldw	r2,-25708(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10001f10:	e037883a 	mov	sp,fp
10001f14:	df000017 	ldw	fp,0(sp)
10001f18:	dec00104 	addi	sp,sp,4
10001f1c:	f800283a 	ret

10001f20 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10001f20:	defffd04 	addi	sp,sp,-12
10001f24:	df000215 	stw	fp,8(sp)
10001f28:	df000204 	addi	fp,sp,8
10001f2c:	e13ffe15 	stw	r4,-8(fp)
10001f30:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10001f34:	00000506 	br	10001f4c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10001f38:	e0bfff17 	ldw	r2,-4(fp)
10001f3c:	1090000c 	andi	r2,r2,16384
10001f40:	10000226 	beq	r2,zero,10001f4c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10001f44:	00bffd44 	movi	r2,-11
10001f48:	00000b06 	br	10001f78 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10001f4c:	e0bffe17 	ldw	r2,-8(fp)
10001f50:	10c00d17 	ldw	r3,52(r2)
10001f54:	e0bffe17 	ldw	r2,-8(fp)
10001f58:	10800c17 	ldw	r2,48(r2)
10001f5c:	18800526 	beq	r3,r2,10001f74 <altera_avalon_jtag_uart_close+0x54>
10001f60:	e0bffe17 	ldw	r2,-8(fp)
10001f64:	10c00917 	ldw	r3,36(r2)
10001f68:	e0bffe17 	ldw	r2,-8(fp)
10001f6c:	10800117 	ldw	r2,4(r2)
10001f70:	18bff136 	bltu	r3,r2,10001f38 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10001f74:	0005883a 	mov	r2,zero
}
10001f78:	e037883a 	mov	sp,fp
10001f7c:	df000017 	ldw	fp,0(sp)
10001f80:	dec00104 	addi	sp,sp,4
10001f84:	f800283a 	ret

10001f88 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10001f88:	defffa04 	addi	sp,sp,-24
10001f8c:	df000515 	stw	fp,20(sp)
10001f90:	df000504 	addi	fp,sp,20
10001f94:	e13ffd15 	stw	r4,-12(fp)
10001f98:	e17ffe15 	stw	r5,-8(fp)
10001f9c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10001fa0:	00bff9c4 	movi	r2,-25
10001fa4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10001fa8:	e0bffe17 	ldw	r2,-8(fp)
10001fac:	10da8060 	cmpeqi	r3,r2,27137
10001fb0:	1800031e 	bne	r3,zero,10001fc0 <altera_avalon_jtag_uart_ioctl+0x38>
10001fb4:	109a80a0 	cmpeqi	r2,r2,27138
10001fb8:	1000181e 	bne	r2,zero,1000201c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10001fbc:	00002906 	br	10002064 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10001fc0:	e0bffd17 	ldw	r2,-12(fp)
10001fc4:	10c00117 	ldw	r3,4(r2)
10001fc8:	00a00034 	movhi	r2,32768
10001fcc:	10bfffc4 	addi	r2,r2,-1
10001fd0:	18802126 	beq	r3,r2,10002058 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10001fd4:	e0bfff17 	ldw	r2,-4(fp)
10001fd8:	10800017 	ldw	r2,0(r2)
10001fdc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10001fe0:	e0bffc17 	ldw	r2,-16(fp)
10001fe4:	10800090 	cmplti	r2,r2,2
10001fe8:	1000061e 	bne	r2,zero,10002004 <altera_avalon_jtag_uart_ioctl+0x7c>
10001fec:	e0fffc17 	ldw	r3,-16(fp)
10001ff0:	00a00034 	movhi	r2,32768
10001ff4:	10bfffc4 	addi	r2,r2,-1
10001ff8:	18800226 	beq	r3,r2,10002004 <altera_avalon_jtag_uart_ioctl+0x7c>
10001ffc:	e0bffc17 	ldw	r2,-16(fp)
10002000:	00000206 	br	1000200c <altera_avalon_jtag_uart_ioctl+0x84>
10002004:	00a00034 	movhi	r2,32768
10002008:	10bfff84 	addi	r2,r2,-2
1000200c:	e0fffd17 	ldw	r3,-12(fp)
10002010:	18800115 	stw	r2,4(r3)
      rc = 0;
10002014:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10002018:	00000f06 	br	10002058 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000201c:	e0bffd17 	ldw	r2,-12(fp)
10002020:	10c00117 	ldw	r3,4(r2)
10002024:	00a00034 	movhi	r2,32768
10002028:	10bfffc4 	addi	r2,r2,-1
1000202c:	18800c26 	beq	r3,r2,10002060 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10002030:	e0bffd17 	ldw	r2,-12(fp)
10002034:	10c00917 	ldw	r3,36(r2)
10002038:	e0bffd17 	ldw	r2,-12(fp)
1000203c:	10800117 	ldw	r2,4(r2)
10002040:	1885803a 	cmpltu	r2,r3,r2
10002044:	10c03fcc 	andi	r3,r2,255
10002048:	e0bfff17 	ldw	r2,-4(fp)
1000204c:	10c00015 	stw	r3,0(r2)
      rc = 0;
10002050:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10002054:	00000206 	br	10002060 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10002058:	0001883a 	nop
1000205c:	00000106 	br	10002064 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10002060:	0001883a 	nop

  default:
    break;
  }

  return rc;
10002064:	e0bffb17 	ldw	r2,-20(fp)
}
10002068:	e037883a 	mov	sp,fp
1000206c:	df000017 	ldw	fp,0(sp)
10002070:	dec00104 	addi	sp,sp,4
10002074:	f800283a 	ret

10002078 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10002078:	defff304 	addi	sp,sp,-52
1000207c:	dfc00c15 	stw	ra,48(sp)
10002080:	df000b15 	stw	fp,44(sp)
10002084:	df000b04 	addi	fp,sp,44
10002088:	e13ffc15 	stw	r4,-16(fp)
1000208c:	e17ffd15 	stw	r5,-12(fp)
10002090:	e1bffe15 	stw	r6,-8(fp)
10002094:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10002098:	e0bffd17 	ldw	r2,-12(fp)
1000209c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100020a0:	00004706 	br	100021c0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100020a4:	e0bffc17 	ldw	r2,-16(fp)
100020a8:	10800a17 	ldw	r2,40(r2)
100020ac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
100020b0:	e0bffc17 	ldw	r2,-16(fp)
100020b4:	10800b17 	ldw	r2,44(r2)
100020b8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
100020bc:	e0fff717 	ldw	r3,-36(fp)
100020c0:	e0bff817 	ldw	r2,-32(fp)
100020c4:	18800536 	bltu	r3,r2,100020dc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100020c8:	e0fff717 	ldw	r3,-36(fp)
100020cc:	e0bff817 	ldw	r2,-32(fp)
100020d0:	1885c83a 	sub	r2,r3,r2
100020d4:	e0bff615 	stw	r2,-40(fp)
100020d8:	00000406 	br	100020ec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100020dc:	00c20004 	movi	r3,2048
100020e0:	e0bff817 	ldw	r2,-32(fp)
100020e4:	1885c83a 	sub	r2,r3,r2
100020e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100020ec:	e0bff617 	ldw	r2,-40(fp)
100020f0:	10001e26 	beq	r2,zero,1000216c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
100020f4:	e0fffe17 	ldw	r3,-8(fp)
100020f8:	e0bff617 	ldw	r2,-40(fp)
100020fc:	1880022e 	bgeu	r3,r2,10002108 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10002100:	e0bffe17 	ldw	r2,-8(fp)
10002104:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10002108:	e0bffc17 	ldw	r2,-16(fp)
1000210c:	10c00e04 	addi	r3,r2,56
10002110:	e0bff817 	ldw	r2,-32(fp)
10002114:	1885883a 	add	r2,r3,r2
10002118:	e1bff617 	ldw	r6,-40(fp)
1000211c:	100b883a 	mov	r5,r2
10002120:	e13ff517 	ldw	r4,-44(fp)
10002124:	00055bc0 	call	100055bc <memcpy>
      ptr   += n;
10002128:	e0fff517 	ldw	r3,-44(fp)
1000212c:	e0bff617 	ldw	r2,-40(fp)
10002130:	1885883a 	add	r2,r3,r2
10002134:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10002138:	e0fffe17 	ldw	r3,-8(fp)
1000213c:	e0bff617 	ldw	r2,-40(fp)
10002140:	1885c83a 	sub	r2,r3,r2
10002144:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10002148:	e0fff817 	ldw	r3,-32(fp)
1000214c:	e0bff617 	ldw	r2,-40(fp)
10002150:	1885883a 	add	r2,r3,r2
10002154:	10c1ffcc 	andi	r3,r2,2047
10002158:	e0bffc17 	ldw	r2,-16(fp)
1000215c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10002160:	e0bffe17 	ldw	r2,-8(fp)
10002164:	00bfcf16 	blt	zero,r2,100020a4 <altera_avalon_jtag_uart_read+0x2c>
10002168:	00000106 	br	10002170 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1000216c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10002170:	e0fff517 	ldw	r3,-44(fp)
10002174:	e0bffd17 	ldw	r2,-12(fp)
10002178:	1880141e 	bne	r3,r2,100021cc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000217c:	e0bfff17 	ldw	r2,-4(fp)
10002180:	1090000c 	andi	r2,r2,16384
10002184:	1000131e 	bne	r2,zero,100021d4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10002188:	0001883a 	nop
1000218c:	e0bffc17 	ldw	r2,-16(fp)
10002190:	10c00a17 	ldw	r3,40(r2)
10002194:	e0bff717 	ldw	r2,-36(fp)
10002198:	1880051e 	bne	r3,r2,100021b0 <altera_avalon_jtag_uart_read+0x138>
1000219c:	e0bffc17 	ldw	r2,-16(fp)
100021a0:	10c00917 	ldw	r3,36(r2)
100021a4:	e0bffc17 	ldw	r2,-16(fp)
100021a8:	10800117 	ldw	r2,4(r2)
100021ac:	18bff736 	bltu	r3,r2,1000218c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
100021b0:	e0bffc17 	ldw	r2,-16(fp)
100021b4:	10c00a17 	ldw	r3,40(r2)
100021b8:	e0bff717 	ldw	r2,-36(fp)
100021bc:	18800726 	beq	r3,r2,100021dc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100021c0:	e0bffe17 	ldw	r2,-8(fp)
100021c4:	00bfb716 	blt	zero,r2,100020a4 <altera_avalon_jtag_uart_read+0x2c>
100021c8:	00000506 	br	100021e0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
100021cc:	0001883a 	nop
100021d0:	00000306 	br	100021e0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
100021d4:	0001883a 	nop
100021d8:	00000106 	br	100021e0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
100021dc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100021e0:	e0fff517 	ldw	r3,-44(fp)
100021e4:	e0bffd17 	ldw	r2,-12(fp)
100021e8:	18801826 	beq	r3,r2,1000224c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100021ec:	0005303a 	rdctl	r2,status
100021f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100021f4:	e0fffb17 	ldw	r3,-20(fp)
100021f8:	00bfff84 	movi	r2,-2
100021fc:	1884703a 	and	r2,r3,r2
10002200:	1001703a 	wrctl	status,r2
  
  return context;
10002204:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10002208:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000220c:	e0bffc17 	ldw	r2,-16(fp)
10002210:	10800817 	ldw	r2,32(r2)
10002214:	10c00054 	ori	r3,r2,1
10002218:	e0bffc17 	ldw	r2,-16(fp)
1000221c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10002220:	e0bffc17 	ldw	r2,-16(fp)
10002224:	10800017 	ldw	r2,0(r2)
10002228:	10800104 	addi	r2,r2,4
1000222c:	1007883a 	mov	r3,r2
10002230:	e0bffc17 	ldw	r2,-16(fp)
10002234:	10800817 	ldw	r2,32(r2)
10002238:	18800035 	stwio	r2,0(r3)
1000223c:	e0bffa17 	ldw	r2,-24(fp)
10002240:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10002244:	e0bff917 	ldw	r2,-28(fp)
10002248:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000224c:	e0fff517 	ldw	r3,-44(fp)
10002250:	e0bffd17 	ldw	r2,-12(fp)
10002254:	18800426 	beq	r3,r2,10002268 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10002258:	e0fff517 	ldw	r3,-44(fp)
1000225c:	e0bffd17 	ldw	r2,-12(fp)
10002260:	1885c83a 	sub	r2,r3,r2
10002264:	00000606 	br	10002280 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10002268:	e0bfff17 	ldw	r2,-4(fp)
1000226c:	1090000c 	andi	r2,r2,16384
10002270:	10000226 	beq	r2,zero,1000227c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10002274:	00bffd44 	movi	r2,-11
10002278:	00000106 	br	10002280 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1000227c:	00bffec4 	movi	r2,-5
}
10002280:	e037883a 	mov	sp,fp
10002284:	dfc00117 	ldw	ra,4(sp)
10002288:	df000017 	ldw	fp,0(sp)
1000228c:	dec00204 	addi	sp,sp,8
10002290:	f800283a 	ret

10002294 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10002294:	defff304 	addi	sp,sp,-52
10002298:	dfc00c15 	stw	ra,48(sp)
1000229c:	df000b15 	stw	fp,44(sp)
100022a0:	df000b04 	addi	fp,sp,44
100022a4:	e13ffc15 	stw	r4,-16(fp)
100022a8:	e17ffd15 	stw	r5,-12(fp)
100022ac:	e1bffe15 	stw	r6,-8(fp)
100022b0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100022b4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100022b8:	e0bffd17 	ldw	r2,-12(fp)
100022bc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100022c0:	00003706 	br	100023a0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100022c4:	e0bffc17 	ldw	r2,-16(fp)
100022c8:	10800c17 	ldw	r2,48(r2)
100022cc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
100022d0:	e0bffc17 	ldw	r2,-16(fp)
100022d4:	10800d17 	ldw	r2,52(r2)
100022d8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100022dc:	e0fff917 	ldw	r3,-28(fp)
100022e0:	e0bff517 	ldw	r2,-44(fp)
100022e4:	1880062e 	bgeu	r3,r2,10002300 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
100022e8:	e0fff517 	ldw	r3,-44(fp)
100022ec:	e0bff917 	ldw	r2,-28(fp)
100022f0:	1885c83a 	sub	r2,r3,r2
100022f4:	10bfffc4 	addi	r2,r2,-1
100022f8:	e0bff615 	stw	r2,-40(fp)
100022fc:	00000b06 	br	1000232c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10002300:	e0bff517 	ldw	r2,-44(fp)
10002304:	10000526 	beq	r2,zero,1000231c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10002308:	00c20004 	movi	r3,2048
1000230c:	e0bff917 	ldw	r2,-28(fp)
10002310:	1885c83a 	sub	r2,r3,r2
10002314:	e0bff615 	stw	r2,-40(fp)
10002318:	00000406 	br	1000232c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000231c:	00c1ffc4 	movi	r3,2047
10002320:	e0bff917 	ldw	r2,-28(fp)
10002324:	1885c83a 	sub	r2,r3,r2
10002328:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000232c:	e0bff617 	ldw	r2,-40(fp)
10002330:	10001e26 	beq	r2,zero,100023ac <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10002334:	e0fffe17 	ldw	r3,-8(fp)
10002338:	e0bff617 	ldw	r2,-40(fp)
1000233c:	1880022e 	bgeu	r3,r2,10002348 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10002340:	e0bffe17 	ldw	r2,-8(fp)
10002344:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10002348:	e0bffc17 	ldw	r2,-16(fp)
1000234c:	10c20e04 	addi	r3,r2,2104
10002350:	e0bff917 	ldw	r2,-28(fp)
10002354:	1885883a 	add	r2,r3,r2
10002358:	e1bff617 	ldw	r6,-40(fp)
1000235c:	e17ffd17 	ldw	r5,-12(fp)
10002360:	1009883a 	mov	r4,r2
10002364:	00055bc0 	call	100055bc <memcpy>
      ptr   += n;
10002368:	e0fffd17 	ldw	r3,-12(fp)
1000236c:	e0bff617 	ldw	r2,-40(fp)
10002370:	1885883a 	add	r2,r3,r2
10002374:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10002378:	e0fffe17 	ldw	r3,-8(fp)
1000237c:	e0bff617 	ldw	r2,-40(fp)
10002380:	1885c83a 	sub	r2,r3,r2
10002384:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10002388:	e0fff917 	ldw	r3,-28(fp)
1000238c:	e0bff617 	ldw	r2,-40(fp)
10002390:	1885883a 	add	r2,r3,r2
10002394:	10c1ffcc 	andi	r3,r2,2047
10002398:	e0bffc17 	ldw	r2,-16(fp)
1000239c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100023a0:	e0bffe17 	ldw	r2,-8(fp)
100023a4:	00bfc716 	blt	zero,r2,100022c4 <altera_avalon_jtag_uart_write+0x30>
100023a8:	00000106 	br	100023b0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
100023ac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100023b0:	0005303a 	rdctl	r2,status
100023b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100023b8:	e0fffb17 	ldw	r3,-20(fp)
100023bc:	00bfff84 	movi	r2,-2
100023c0:	1884703a 	and	r2,r3,r2
100023c4:	1001703a 	wrctl	status,r2
  
  return context;
100023c8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100023cc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100023d0:	e0bffc17 	ldw	r2,-16(fp)
100023d4:	10800817 	ldw	r2,32(r2)
100023d8:	10c00094 	ori	r3,r2,2
100023dc:	e0bffc17 	ldw	r2,-16(fp)
100023e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100023e4:	e0bffc17 	ldw	r2,-16(fp)
100023e8:	10800017 	ldw	r2,0(r2)
100023ec:	10800104 	addi	r2,r2,4
100023f0:	1007883a 	mov	r3,r2
100023f4:	e0bffc17 	ldw	r2,-16(fp)
100023f8:	10800817 	ldw	r2,32(r2)
100023fc:	18800035 	stwio	r2,0(r3)
10002400:	e0bffa17 	ldw	r2,-24(fp)
10002404:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10002408:	e0bff817 	ldw	r2,-32(fp)
1000240c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10002410:	e0bffe17 	ldw	r2,-8(fp)
10002414:	0080100e 	bge	zero,r2,10002458 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10002418:	e0bfff17 	ldw	r2,-4(fp)
1000241c:	1090000c 	andi	r2,r2,16384
10002420:	1000101e 	bne	r2,zero,10002464 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10002424:	0001883a 	nop
10002428:	e0bffc17 	ldw	r2,-16(fp)
1000242c:	10c00d17 	ldw	r3,52(r2)
10002430:	e0bff517 	ldw	r2,-44(fp)
10002434:	1880051e 	bne	r3,r2,1000244c <altera_avalon_jtag_uart_write+0x1b8>
10002438:	e0bffc17 	ldw	r2,-16(fp)
1000243c:	10c00917 	ldw	r3,36(r2)
10002440:	e0bffc17 	ldw	r2,-16(fp)
10002444:	10800117 	ldw	r2,4(r2)
10002448:	18bff736 	bltu	r3,r2,10002428 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000244c:	e0bffc17 	ldw	r2,-16(fp)
10002450:	10800917 	ldw	r2,36(r2)
10002454:	1000051e 	bne	r2,zero,1000246c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10002458:	e0bffe17 	ldw	r2,-8(fp)
1000245c:	00bfd016 	blt	zero,r2,100023a0 <altera_avalon_jtag_uart_write+0x10c>
10002460:	00000306 	br	10002470 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10002464:	0001883a 	nop
10002468:	00000106 	br	10002470 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1000246c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10002470:	e0fffd17 	ldw	r3,-12(fp)
10002474:	e0bff717 	ldw	r2,-36(fp)
10002478:	18800426 	beq	r3,r2,1000248c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1000247c:	e0fffd17 	ldw	r3,-12(fp)
10002480:	e0bff717 	ldw	r2,-36(fp)
10002484:	1885c83a 	sub	r2,r3,r2
10002488:	00000606 	br	100024a4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1000248c:	e0bfff17 	ldw	r2,-4(fp)
10002490:	1090000c 	andi	r2,r2,16384
10002494:	10000226 	beq	r2,zero,100024a0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10002498:	00bffd44 	movi	r2,-11
1000249c:	00000106 	br	100024a4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
100024a0:	00bffec4 	movi	r2,-5
}
100024a4:	e037883a 	mov	sp,fp
100024a8:	dfc00117 	ldw	ra,4(sp)
100024ac:	df000017 	ldw	fp,0(sp)
100024b0:	dec00204 	addi	sp,sp,8
100024b4:	f800283a 	ret

100024b8 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
100024b8:	defffc04 	addi	sp,sp,-16
100024bc:	dfc00315 	stw	ra,12(sp)
100024c0:	df000215 	stw	fp,8(sp)
100024c4:	df000204 	addi	fp,sp,8
100024c8:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
100024cc:	e0bfff17 	ldw	r2,-4(fp)
100024d0:	10800217 	ldw	r2,8(r2)
100024d4:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
100024d8:	00000b06 	br	10002508 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
100024dc:	01440774 	movhi	r5,4125
100024e0:	29684404 	addi	r5,r5,-24304
100024e4:	e13ffe17 	ldw	r4,-8(fp)
100024e8:	0005e180 	call	10005e18 <strcmp>
100024ec:	1000031e 	bne	r2,zero,100024fc <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
100024f0:	e0bffe17 	ldw	r2,-8(fp)
100024f4:	10000005 	stb	zero,0(r2)
			break;
100024f8:	00000906 	br	10002520 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
100024fc:	e0bffe17 	ldw	r2,-8(fp)
10002500:	10800044 	addi	r2,r2,1
10002504:	e0bffe15 	stw	r2,-8(fp)
10002508:	e0bffe17 	ldw	r2,-8(fp)
1000250c:	10800003 	ldbu	r2,0(r2)
10002510:	10803fcc 	andi	r2,r2,255
10002514:	1080201c 	xori	r2,r2,128
10002518:	10bfe004 	addi	r2,r2,-128
1000251c:	103fef1e 	bne	r2,zero,100024dc <alt_up_char_buffer_init+0x24>
			(*name) = '\0';
			break;
		}
	}
	
	return;
10002520:	0001883a 	nop
}
10002524:	e037883a 	mov	sp,fp
10002528:	dfc00117 	ldw	ra,4(sp)
1000252c:	df000017 	ldw	fp,0(sp)
10002530:	dec00204 	addi	sp,sp,8
10002534:	f800283a 	ret

10002538 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
10002538:	defffc04 	addi	sp,sp,-16
1000253c:	dfc00315 	stw	ra,12(sp)
10002540:	df000215 	stw	fp,8(sp)
10002544:	df000204 	addi	fp,sp,8
10002548:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
1000254c:	d1600204 	addi	r5,gp,-32760
10002550:	e13fff17 	ldw	r4,-4(fp)
10002554:	0003a980 	call	10003a98 <alt_find_dev>
10002558:	e0bffe15 	stw	r2,-8(fp)

  return dev;
1000255c:	e0bffe17 	ldw	r2,-8(fp)
}
10002560:	e037883a 	mov	sp,fp
10002564:	dfc00117 	ldw	ra,4(sp)
10002568:	df000017 	ldw	fp,0(sp)
1000256c:	dec00204 	addi	sp,sp,8
10002570:	f800283a 	ret

10002574 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
10002574:	defffa04 	addi	sp,sp,-24
10002578:	df000515 	stw	fp,20(sp)
1000257c:	df000504 	addi	fp,sp,20
10002580:	e13ffc15 	stw	r4,-16(fp)
10002584:	2805883a 	mov	r2,r5
10002588:	e1bffe15 	stw	r6,-8(fp)
1000258c:	e1ffff15 	stw	r7,-4(fp)
10002590:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
10002594:	e0bffc17 	ldw	r2,-16(fp)
10002598:	10800c17 	ldw	r2,48(r2)
1000259c:	e0fffe17 	ldw	r3,-8(fp)
100025a0:	1880042e 	bgeu	r3,r2,100025b4 <alt_up_char_buffer_draw+0x40>
100025a4:	e0bffc17 	ldw	r2,-16(fp)
100025a8:	10800d17 	ldw	r2,52(r2)
100025ac:	e0ffff17 	ldw	r3,-4(fp)
100025b0:	18800236 	bltu	r3,r2,100025bc <alt_up_char_buffer_draw+0x48>
		return -1;
100025b4:	00bfffc4 	movi	r2,-1
100025b8:	00001d06 	br	10002630 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
100025bc:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
100025c0:	e0bffc17 	ldw	r2,-16(fp)
100025c4:	10c00f17 	ldw	r3,60(r2)
100025c8:	e0bffe17 	ldw	r2,-8(fp)
100025cc:	1886703a 	and	r3,r3,r2
100025d0:	e0bffc17 	ldw	r2,-16(fp)
100025d4:	10800e17 	ldw	r2,56(r2)
100025d8:	1884983a 	sll	r2,r3,r2
100025dc:	e0fffb17 	ldw	r3,-20(fp)
100025e0:	1884b03a 	or	r2,r3,r2
100025e4:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
100025e8:	e0bffc17 	ldw	r2,-16(fp)
100025ec:	10c01117 	ldw	r3,68(r2)
100025f0:	e0bfff17 	ldw	r2,-4(fp)
100025f4:	1886703a 	and	r3,r3,r2
100025f8:	e0bffc17 	ldw	r2,-16(fp)
100025fc:	10801017 	ldw	r2,64(r2)
10002600:	1884983a 	sll	r2,r3,r2
10002604:	e0fffb17 	ldw	r3,-20(fp)
10002608:	1884b03a 	or	r2,r3,r2
1000260c:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
10002610:	e0bffc17 	ldw	r2,-16(fp)
10002614:	10c00b17 	ldw	r3,44(r2)
10002618:	e0bffb17 	ldw	r2,-20(fp)
1000261c:	1885883a 	add	r2,r3,r2
10002620:	1007883a 	mov	r3,r2
10002624:	e0bffd03 	ldbu	r2,-12(fp)
10002628:	18800025 	stbio	r2,0(r3)

	return 0;
1000262c:	0005883a 	mov	r2,zero
}
10002630:	e037883a 	mov	sp,fp
10002634:	df000017 	ldw	fp,0(sp)
10002638:	dec00104 	addi	sp,sp,4
1000263c:	f800283a 	ret

10002640 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
10002640:	defffa04 	addi	sp,sp,-24
10002644:	df000515 	stw	fp,20(sp)
10002648:	df000504 	addi	fp,sp,20
1000264c:	e13ffc15 	stw	r4,-16(fp)
10002650:	e17ffd15 	stw	r5,-12(fp)
10002654:	e1bffe15 	stw	r6,-8(fp)
10002658:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
1000265c:	e0bffc17 	ldw	r2,-16(fp)
10002660:	10800c17 	ldw	r2,48(r2)
10002664:	e0fffe17 	ldw	r3,-8(fp)
10002668:	1880042e 	bgeu	r3,r2,1000267c <alt_up_char_buffer_string+0x3c>
1000266c:	e0bffc17 	ldw	r2,-16(fp)
10002670:	10800d17 	ldw	r2,52(r2)
10002674:	e0ffff17 	ldw	r3,-4(fp)
10002678:	18800236 	bltu	r3,r2,10002684 <alt_up_char_buffer_string+0x44>
		return -1;
1000267c:	00bfffc4 	movi	r2,-1
10002680:	00002a06 	br	1000272c <alt_up_char_buffer_string+0xec>
	
	unsigned int offset = 0;
10002684:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
10002688:	e0bffc17 	ldw	r2,-16(fp)
1000268c:	10801017 	ldw	r2,64(r2)
10002690:	e0ffff17 	ldw	r3,-4(fp)
10002694:	1886983a 	sll	r3,r3,r2
10002698:	e0bffe17 	ldw	r2,-8(fp)
1000269c:	1885883a 	add	r2,r3,r2
100026a0:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
100026a4:	00001a06 	br	10002710 <alt_up_char_buffer_string+0xd0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
100026a8:	e0bffc17 	ldw	r2,-16(fp)
100026ac:	10c00b17 	ldw	r3,44(r2)
100026b0:	e0bffb17 	ldw	r2,-20(fp)
100026b4:	1885883a 	add	r2,r3,r2
100026b8:	1007883a 	mov	r3,r2
100026bc:	e0bffd17 	ldw	r2,-12(fp)
100026c0:	10800003 	ldbu	r2,0(r2)
100026c4:	10803fcc 	andi	r2,r2,255
100026c8:	1080201c 	xori	r2,r2,128
100026cc:	10bfe004 	addi	r2,r2,-128
100026d0:	18800025 	stbio	r2,0(r3)
		++ptr;
100026d4:	e0bffd17 	ldw	r2,-12(fp)
100026d8:	10800044 	addi	r2,r2,1
100026dc:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
100026e0:	e0bffe17 	ldw	r2,-8(fp)
100026e4:	10800044 	addi	r2,r2,1
100026e8:	e0bffe15 	stw	r2,-8(fp)
100026ec:	e0bffc17 	ldw	r2,-16(fp)
100026f0:	10800c17 	ldw	r2,48(r2)
100026f4:	e0fffe17 	ldw	r3,-8(fp)
100026f8:	18800236 	bltu	r3,r2,10002704 <alt_up_char_buffer_string+0xc4>
			return -1;
100026fc:	00bfffc4 	movi	r2,-1
10002700:	00000a06 	br	1000272c <alt_up_char_buffer_string+0xec>
		++offset;
10002704:	e0bffb17 	ldw	r2,-20(fp)
10002708:	10800044 	addi	r2,r2,1
1000270c:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
10002710:	e0bffd17 	ldw	r2,-12(fp)
10002714:	10800003 	ldbu	r2,0(r2)
10002718:	10803fcc 	andi	r2,r2,255
1000271c:	1080201c 	xori	r2,r2,128
10002720:	10bfe004 	addi	r2,r2,-128
10002724:	103fe01e 	bne	r2,zero,100026a8 <alt_up_char_buffer_string+0x68>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
10002728:	0005883a 	mov	r2,zero
}
1000272c:	e037883a 	mov	sp,fp
10002730:	df000017 	ldw	fp,0(sp)
10002734:	dec00104 	addi	sp,sp,4
10002738:	f800283a 	ret

1000273c <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
1000273c:	defffe04 	addi	sp,sp,-8
10002740:	df000115 	stw	fp,4(sp)
10002744:	df000104 	addi	fp,sp,4
10002748:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
1000274c:	e0bfff17 	ldw	r2,-4(fp)
10002750:	10800a17 	ldw	r2,40(r2)
10002754:	10800084 	addi	r2,r2,2
10002758:	1007883a 	mov	r3,r2
1000275c:	00800044 	movi	r2,1
10002760:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
10002764:	0001883a 	nop
10002768:	e0bfff17 	ldw	r2,-4(fp)
1000276c:	10800a17 	ldw	r2,40(r2)
10002770:	10800084 	addi	r2,r2,2
10002774:	10800023 	ldbuio	r2,0(r2)
10002778:	10803fcc 	andi	r2,r2,255
1000277c:	1080004c 	andi	r2,r2,1
10002780:	103ff91e 	bne	r2,zero,10002768 <alt_up_char_buffer_clear+0x2c>
	return 0;
10002784:	0005883a 	mov	r2,zero
}
10002788:	e037883a 	mov	sp,fp
1000278c:	df000017 	ldw	fp,0(sp)
10002790:	dec00104 	addi	sp,sp,4
10002794:	f800283a 	ret

10002798 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
10002798:	defffc04 	addi	sp,sp,-16
1000279c:	dfc00315 	stw	ra,12(sp)
100027a0:	df000215 	stw	fp,8(sp)
100027a4:	df000204 	addi	fp,sp,8
100027a8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
100027ac:	d1600204 	addi	r5,gp,-32760
100027b0:	e13fff17 	ldw	r4,-4(fp)
100027b4:	0003a980 	call	10003a98 <alt_find_dev>
100027b8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
100027bc:	e0bffe17 	ldw	r2,-8(fp)
}
100027c0:	e037883a 	mov	sp,fp
100027c4:	dfc00117 	ldw	ra,4(sp)
100027c8:	df000017 	ldw	fp,0(sp)
100027cc:	dec00204 	addi	sp,sp,8
100027d0:	f800283a 	ret

100027d4 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
100027d4:	defffa04 	addi	sp,sp,-24
100027d8:	df000515 	stw	fp,20(sp)
100027dc:	df000504 	addi	fp,sp,20
100027e0:	e13ffc15 	stw	r4,-16(fp)
100027e4:	e17ffd15 	stw	r5,-12(fp)
100027e8:	e1bffe15 	stw	r6,-8(fp)
100027ec:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
100027f0:	e0bffc17 	ldw	r2,-16(fp)
100027f4:	10800f17 	ldw	r2,60(r2)
100027f8:	e0fffe17 	ldw	r3,-8(fp)
100027fc:	1880042e 	bgeu	r3,r2,10002810 <alt_up_pixel_buffer_dma_draw+0x3c>
10002800:	e0bffc17 	ldw	r2,-16(fp)
10002804:	10801017 	ldw	r2,64(r2)
10002808:	e0ffff17 	ldw	r3,-4(fp)
1000280c:	18800236 	bltu	r3,r2,10002818 <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
10002810:	00bfffc4 	movi	r2,-1
10002814:	00005006 	br	10002958 <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
10002818:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
1000281c:	e0bffc17 	ldw	r2,-16(fp)
10002820:	10800d17 	ldw	r2,52(r2)
10002824:	1000151e 	bne	r2,zero,1000287c <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
10002828:	e0bffc17 	ldw	r2,-16(fp)
1000282c:	10c01217 	ldw	r3,72(r2)
10002830:	e0bffe17 	ldw	r2,-8(fp)
10002834:	1886703a 	and	r3,r3,r2
10002838:	e0bffc17 	ldw	r2,-16(fp)
1000283c:	10801117 	ldw	r2,68(r2)
10002840:	1884983a 	sll	r2,r3,r2
10002844:	e0fffb17 	ldw	r3,-20(fp)
10002848:	1885883a 	add	r2,r3,r2
1000284c:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
10002850:	e0bffc17 	ldw	r2,-16(fp)
10002854:	10c01417 	ldw	r3,80(r2)
10002858:	e0bfff17 	ldw	r2,-4(fp)
1000285c:	1886703a 	and	r3,r3,r2
10002860:	e0bffc17 	ldw	r2,-16(fp)
10002864:	10801317 	ldw	r2,76(r2)
10002868:	1884983a 	sll	r2,r3,r2
1000286c:	e0fffb17 	ldw	r3,-20(fp)
10002870:	1885883a 	add	r2,r3,r2
10002874:	e0bffb15 	stw	r2,-20(fp)
10002878:	00001706 	br	100028d8 <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
1000287c:	e0bffc17 	ldw	r2,-16(fp)
10002880:	10c01217 	ldw	r3,72(r2)
10002884:	e0bffe17 	ldw	r2,-8(fp)
10002888:	1886703a 	and	r3,r3,r2
1000288c:	e0bffc17 	ldw	r2,-16(fp)
10002890:	10801117 	ldw	r2,68(r2)
10002894:	1884983a 	sll	r2,r3,r2
10002898:	e0fffb17 	ldw	r3,-20(fp)
1000289c:	1885883a 	add	r2,r3,r2
100028a0:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
100028a4:	e0bffc17 	ldw	r2,-16(fp)
100028a8:	10c01417 	ldw	r3,80(r2)
100028ac:	e0bfff17 	ldw	r2,-4(fp)
100028b0:	1886703a 	and	r3,r3,r2
100028b4:	e0bffc17 	ldw	r2,-16(fp)
100028b8:	10800f17 	ldw	r2,60(r2)
100028bc:	1887383a 	mul	r3,r3,r2
100028c0:	e0bffc17 	ldw	r2,-16(fp)
100028c4:	10801117 	ldw	r2,68(r2)
100028c8:	1884983a 	sll	r2,r3,r2
100028cc:	e0fffb17 	ldw	r3,-20(fp)
100028d0:	1885883a 	add	r2,r3,r2
100028d4:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
100028d8:	e0bffc17 	ldw	r2,-16(fp)
100028dc:	10800e17 	ldw	r2,56(r2)
100028e0:	10800058 	cmpnei	r2,r2,1
100028e4:	1000081e 	bne	r2,zero,10002908 <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
100028e8:	e0bffc17 	ldw	r2,-16(fp)
100028ec:	10c00c17 	ldw	r3,48(r2)
100028f0:	e0bffb17 	ldw	r2,-20(fp)
100028f4:	1885883a 	add	r2,r3,r2
100028f8:	1007883a 	mov	r3,r2
100028fc:	e0bffd17 	ldw	r2,-12(fp)
10002900:	18800025 	stbio	r2,0(r3)
10002904:	00001306 	br	10002954 <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10002908:	e0bffc17 	ldw	r2,-16(fp)
1000290c:	10800e17 	ldw	r2,56(r2)
10002910:	10800098 	cmpnei	r2,r2,2
10002914:	1000081e 	bne	r2,zero,10002938 <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
10002918:	e0bffc17 	ldw	r2,-16(fp)
1000291c:	10c00c17 	ldw	r3,48(r2)
10002920:	e0bffb17 	ldw	r2,-20(fp)
10002924:	1885883a 	add	r2,r3,r2
10002928:	1007883a 	mov	r3,r2
1000292c:	e0bffd17 	ldw	r2,-12(fp)
10002930:	1880002d 	sthio	r2,0(r3)
10002934:	00000706 	br	10002954 <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
10002938:	e0bffc17 	ldw	r2,-16(fp)
1000293c:	10c00c17 	ldw	r3,48(r2)
10002940:	e0bffb17 	ldw	r2,-20(fp)
10002944:	1885883a 	add	r2,r3,r2
10002948:	1007883a 	mov	r3,r2
1000294c:	e0bffd17 	ldw	r2,-12(fp)
10002950:	18800035 	stwio	r2,0(r3)
	}

	return 0;
10002954:	0005883a 	mov	r2,zero
}
10002958:	e037883a 	mov	sp,fp
1000295c:	df000017 	ldw	fp,0(sp)
10002960:	dec00104 	addi	sp,sp,4
10002964:	f800283a 	ret

10002968 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
10002968:	defffd04 	addi	sp,sp,-12
1000296c:	df000215 	stw	fp,8(sp)
10002970:	df000204 	addi	fp,sp,8
10002974:	e13ffe15 	stw	r4,-8(fp)
10002978:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
1000297c:	e0bffe17 	ldw	r2,-8(fp)
10002980:	10800a17 	ldw	r2,40(r2)
10002984:	10800104 	addi	r2,r2,4
10002988:	1007883a 	mov	r3,r2
1000298c:	e0bfff17 	ldw	r2,-4(fp)
10002990:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
10002994:	e0bffe17 	ldw	r2,-8(fp)
10002998:	10800a17 	ldw	r2,40(r2)
1000299c:	10800104 	addi	r2,r2,4
100029a0:	10800037 	ldwio	r2,0(r2)
100029a4:	1007883a 	mov	r3,r2
100029a8:	e0bffe17 	ldw	r2,-8(fp)
100029ac:	10c00c15 	stw	r3,48(r2)
	return 0;
100029b0:	0005883a 	mov	r2,zero
}
100029b4:	e037883a 	mov	sp,fp
100029b8:	df000017 	ldw	fp,0(sp)
100029bc:	dec00104 	addi	sp,sp,4
100029c0:	f800283a 	ret

100029c4 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
100029c4:	defffd04 	addi	sp,sp,-12
100029c8:	df000215 	stw	fp,8(sp)
100029cc:	dc000115 	stw	r16,4(sp)
100029d0:	df000204 	addi	fp,sp,8
100029d4:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
100029d8:	e0bffe17 	ldw	r2,-8(fp)
100029dc:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
100029e0:	e0bffe17 	ldw	r2,-8(fp)
100029e4:	10800a17 	ldw	r2,40(r2)
100029e8:	1007883a 	mov	r3,r2
100029ec:	00800044 	movi	r2,1
100029f0:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
100029f4:	e0bffe17 	ldw	r2,-8(fp)
100029f8:	10c00b17 	ldw	r3,44(r2)
100029fc:	e0bffe17 	ldw	r2,-8(fp)
10002a00:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
10002a04:	e0bffe17 	ldw	r2,-8(fp)
10002a08:	14000b15 	stw	r16,44(r2)
	return 0;
10002a0c:	0005883a 	mov	r2,zero
}
10002a10:	e6ffff04 	addi	sp,fp,-4
10002a14:	df000117 	ldw	fp,4(sp)
10002a18:	dc000017 	ldw	r16,0(sp)
10002a1c:	dec00204 	addi	sp,sp,8
10002a20:	f800283a 	ret

10002a24 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
10002a24:	defffe04 	addi	sp,sp,-8
10002a28:	df000115 	stw	fp,4(sp)
10002a2c:	df000104 	addi	fp,sp,4
10002a30:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
10002a34:	e0bfff17 	ldw	r2,-4(fp)
10002a38:	10800a17 	ldw	r2,40(r2)
10002a3c:	10800304 	addi	r2,r2,12
10002a40:	10800037 	ldwio	r2,0(r2)
10002a44:	1080004c 	andi	r2,r2,1
}
10002a48:	e037883a 	mov	sp,fp
10002a4c:	df000017 	ldw	fp,0(sp)
10002a50:	dec00104 	addi	sp,sp,4
10002a54:	f800283a 	ret

10002a58 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
10002a58:	defff704 	addi	sp,sp,-36
10002a5c:	df000815 	stw	fp,32(sp)
10002a60:	dd400715 	stw	r21,28(sp)
10002a64:	dd000615 	stw	r20,24(sp)
10002a68:	dcc00515 	stw	r19,20(sp)
10002a6c:	dc800415 	stw	r18,16(sp)
10002a70:	dc400315 	stw	r17,12(sp)
10002a74:	dc000215 	stw	r16,8(sp)
10002a78:	df000804 	addi	fp,sp,32
10002a7c:	e13ff815 	stw	r4,-32(fp)
10002a80:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
10002a84:	e0bff917 	ldw	r2,-28(fp)
10002a88:	10800058 	cmpnei	r2,r2,1
10002a8c:	1000031e 	bne	r2,zero,10002a9c <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
10002a90:	e0bff817 	ldw	r2,-32(fp)
10002a94:	14400c17 	ldw	r17,48(r2)
10002a98:	00000206 	br	10002aa4 <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
10002a9c:	e0bff817 	ldw	r2,-32(fp)
10002aa0:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
10002aa4:	e0bff817 	ldw	r2,-32(fp)
10002aa8:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10002aac:	e0bff817 	ldw	r2,-32(fp)
10002ab0:	10800e17 	ldw	r2,56(r2)
10002ab4:	10800098 	cmpnei	r2,r2,2
10002ab8:	1000031e 	bne	r2,zero,10002ac8 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
10002abc:	8405883a 	add	r2,r16,r16
10002ac0:	1021883a 	mov	r16,r2
10002ac4:	00000306 	br	10002ad4 <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
10002ac8:	8405883a 	add	r2,r16,r16
10002acc:	1085883a 	add	r2,r2,r2
10002ad0:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
10002ad4:	e0bff817 	ldw	r2,-32(fp)
10002ad8:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
10002adc:	e0bff817 	ldw	r2,-32(fp)
10002ae0:	10800d17 	ldw	r2,52(r2)
10002ae4:	1000111e 	bne	r2,zero,10002b2c <alt_up_pixel_buffer_dma_clear_screen+0xd4>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
10002ae8:	e0bff817 	ldw	r2,-32(fp)
10002aec:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
10002af0:	0029883a 	mov	r20,zero
10002af4:	00000b06 	br	10002b24 <alt_up_pixel_buffer_dma_clear_screen+0xcc>
		{
			for (x = 0; x < limit_x; x = x + 4)
10002af8:	0027883a 	mov	r19,zero
10002afc:	00000406 	br	10002b10 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
10002b00:	9c45883a 	add	r2,r19,r17
10002b04:	0007883a 	mov	r3,zero
10002b08:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
10002b0c:	9cc00104 	addi	r19,r19,4
10002b10:	9c3ffb36 	bltu	r19,r16,10002b00 <alt_up_pixel_buffer_dma_clear_screen+0xa8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
10002b14:	00800044 	movi	r2,1
10002b18:	1544983a 	sll	r2,r2,r21
10002b1c:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
10002b20:	a5000044 	addi	r20,r20,1
10002b24:	a4bff436 	bltu	r20,r18,10002af8 <alt_up_pixel_buffer_dma_clear_screen+0xa0>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
10002b28:	00000a06 	br	10002b54 <alt_up_pixel_buffer_dma_clear_screen+0xfc>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
10002b2c:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
10002b30:	0021883a 	mov	r16,zero
10002b34:	00000506 	br	10002b4c <alt_up_pixel_buffer_dma_clear_screen+0xf4>
		{
			IOWR_32DIRECT(addr, x, 0);
10002b38:	8005883a 	mov	r2,r16
10002b3c:	1445883a 	add	r2,r2,r17
10002b40:	0007883a 	mov	r3,zero
10002b44:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
10002b48:	84000104 	addi	r16,r16,4
10002b4c:	8005883a 	mov	r2,r16
10002b50:	14bff936 	bltu	r2,r18,10002b38 <alt_up_pixel_buffer_dma_clear_screen+0xe0>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
10002b54:	0001883a 	nop
10002b58:	e6fffa04 	addi	sp,fp,-24
10002b5c:	df000617 	ldw	fp,24(sp)
10002b60:	dd400517 	ldw	r21,20(sp)
10002b64:	dd000417 	ldw	r20,16(sp)
10002b68:	dcc00317 	ldw	r19,12(sp)
10002b6c:	dc800217 	ldw	r18,8(sp)
10002b70:	dc400117 	ldw	r17,4(sp)
10002b74:	dc000017 	ldw	r16,0(sp)
10002b78:	dec00704 	addi	sp,sp,28
10002b7c:	f800283a 	ret

10002b80 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
10002b80:	defff304 	addi	sp,sp,-52
10002b84:	df000c15 	stw	fp,48(sp)
10002b88:	ddc00b15 	stw	r23,44(sp)
10002b8c:	dd800a15 	stw	r22,40(sp)
10002b90:	dd400915 	stw	r21,36(sp)
10002b94:	dd000815 	stw	r20,32(sp)
10002b98:	dcc00715 	stw	r19,28(sp)
10002b9c:	dc800615 	stw	r18,24(sp)
10002ba0:	dc400515 	stw	r17,20(sp)
10002ba4:	dc000415 	stw	r16,16(sp)
10002ba8:	df000c04 	addi	fp,sp,48
10002bac:	e13ff415 	stw	r4,-48(fp)
10002bb0:	e17ff515 	stw	r5,-44(fp)
10002bb4:	e1bff615 	stw	r6,-40(fp)
10002bb8:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
10002bbc:	e0bff417 	ldw	r2,-48(fp)
10002bc0:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
10002bc4:	e0bff417 	ldw	r2,-48(fp)
10002bc8:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
10002bcc:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
10002bd0:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
10002bd4:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
10002bd8:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
10002bdc:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
10002be0:	a580032e 	bgeu	r20,r22,10002bf0 <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
10002be4:	b02b883a 	mov	r21,r22
		l_x = r_x;
10002be8:	a02d883a 	mov	r22,r20
		r_x = temp;
10002bec:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
10002bf0:	9c40032e 	bgeu	r19,r17,10002c00 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
10002bf4:	882b883a 	mov	r21,r17
		t_y = b_y;
10002bf8:	9823883a 	mov	r17,r19
		b_y = temp;
10002bfc:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
10002c00:	b480892e 	bgeu	r22,r18,10002e28 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
10002c04:	8c00882e 	bgeu	r17,r16,10002e28 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
10002c08:	a4800136 	bltu	r20,r18,10002c10 <alt_up_pixel_buffer_dma_draw_box+0x90>
	{
		r_x = limit_x - 1;
10002c0c:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
10002c10:	9c000136 	bltu	r19,r16,10002c18 <alt_up_pixel_buffer_dma_draw_box+0x98>
	{
		b_y = limit_y - 1;
10002c14:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
10002c18:	e0800317 	ldw	r2,12(fp)
10002c1c:	10800058 	cmpnei	r2,r2,1
10002c20:	1000031e 	bne	r2,zero,10002c30 <alt_up_pixel_buffer_dma_draw_box+0xb0>
		addr = pixel_buffer->back_buffer_start_address;
10002c24:	e0bff417 	ldw	r2,-48(fp)
10002c28:	14000c17 	ldw	r16,48(r2)
10002c2c:	00000206 	br	10002c38 <alt_up_pixel_buffer_dma_draw_box+0xb8>
	else
		addr = pixel_buffer->buffer_start_address;
10002c30:	e0bff417 	ldw	r2,-48(fp)
10002c34:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
10002c38:	e0bff417 	ldw	r2,-48(fp)
10002c3c:	10800d17 	ldw	r2,52(r2)
10002c40:	10003c1e 	bne	r2,zero,10002d34 <alt_up_pixel_buffer_dma_draw_box+0x1b4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
10002c44:	e0bff417 	ldw	r2,-48(fp)
10002c48:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
10002c4c:	8d44983a 	sll	r2,r17,r21
10002c50:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10002c54:	e0bff417 	ldw	r2,-48(fp)
10002c58:	10800e17 	ldw	r2,56(r2)
10002c5c:	10800058 	cmpnei	r2,r2,1
10002c60:	10000f1e 	bne	r2,zero,10002ca0 <alt_up_pixel_buffer_dma_draw_box+0x120>
			for (y = t_y; y <= b_y; y++)
10002c64:	8825883a 	mov	r18,r17
10002c68:	00000b06 	br	10002c98 <alt_up_pixel_buffer_dma_draw_box+0x118>
			{
				for (x = l_x; x <= r_x; x++)
10002c6c:	b023883a 	mov	r17,r22
10002c70:	00000406 	br	10002c84 <alt_up_pixel_buffer_dma_draw_box+0x104>
				{
					IOWR_8DIRECT(addr, x, local_color);
10002c74:	8c05883a 	add	r2,r17,r16
10002c78:	b807883a 	mov	r3,r23
10002c7c:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10002c80:	8c400044 	addi	r17,r17,1
10002c84:	a47ffb2e 	bgeu	r20,r17,10002c74 <alt_up_pixel_buffer_dma_draw_box+0xf4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
10002c88:	00800044 	movi	r2,1
10002c8c:	1544983a 	sll	r2,r2,r21
10002c90:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
10002c94:	94800044 	addi	r18,r18,1
10002c98:	9cbff42e 	bgeu	r19,r18,10002c6c <alt_up_pixel_buffer_dma_draw_box+0xec>
10002c9c:	00006306 	br	10002e2c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10002ca0:	e0bff417 	ldw	r2,-48(fp)
10002ca4:	10800e17 	ldw	r2,56(r2)
10002ca8:	10800098 	cmpnei	r2,r2,2
10002cac:	1000101e 	bne	r2,zero,10002cf0 <alt_up_pixel_buffer_dma_draw_box+0x170>
			for (y = t_y; y <= b_y; y++)
10002cb0:	8825883a 	mov	r18,r17
10002cb4:	00000c06 	br	10002ce8 <alt_up_pixel_buffer_dma_draw_box+0x168>
			{
				for (x = l_x; x <= r_x; x++)
10002cb8:	b023883a 	mov	r17,r22
10002cbc:	00000506 	br	10002cd4 <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
10002cc0:	8c45883a 	add	r2,r17,r17
10002cc4:	1405883a 	add	r2,r2,r16
10002cc8:	b807883a 	mov	r3,r23
10002ccc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10002cd0:	8c400044 	addi	r17,r17,1
10002cd4:	a47ffa2e 	bgeu	r20,r17,10002cc0 <alt_up_pixel_buffer_dma_draw_box+0x140>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
10002cd8:	00800044 	movi	r2,1
10002cdc:	1544983a 	sll	r2,r2,r21
10002ce0:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
10002ce4:	94800044 	addi	r18,r18,1
10002ce8:	9cbff32e 	bgeu	r19,r18,10002cb8 <alt_up_pixel_buffer_dma_draw_box+0x138>
10002cec:	00004f06 	br	10002e2c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
10002cf0:	8825883a 	mov	r18,r17
10002cf4:	00000d06 	br	10002d2c <alt_up_pixel_buffer_dma_draw_box+0x1ac>
			{
				for (x = l_x; x <= r_x; x++)
10002cf8:	b023883a 	mov	r17,r22
10002cfc:	00000606 	br	10002d18 <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
10002d00:	8c45883a 	add	r2,r17,r17
10002d04:	1085883a 	add	r2,r2,r2
10002d08:	1405883a 	add	r2,r2,r16
10002d0c:	b807883a 	mov	r3,r23
10002d10:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10002d14:	8c400044 	addi	r17,r17,1
10002d18:	a47ff92e 	bgeu	r20,r17,10002d00 <alt_up_pixel_buffer_dma_draw_box+0x180>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
10002d1c:	00800044 	movi	r2,1
10002d20:	1544983a 	sll	r2,r2,r21
10002d24:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
10002d28:	94800044 	addi	r18,r18,1
10002d2c:	9cbff22e 	bgeu	r19,r18,10002cf8 <alt_up_pixel_buffer_dma_draw_box+0x178>
10002d30:	00003e06 	br	10002e2c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10002d34:	e0bff417 	ldw	r2,-48(fp)
10002d38:	10800e17 	ldw	r2,56(r2)
10002d3c:	10800058 	cmpnei	r2,r2,1
10002d40:	10000f1e 	bne	r2,zero,10002d80 <alt_up_pixel_buffer_dma_draw_box+0x200>
			addr = addr + t_y * limit_x;
10002d44:	8c85383a 	mul	r2,r17,r18
10002d48:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
10002d4c:	882b883a 	mov	r21,r17
10002d50:	00000906 	br	10002d78 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
			{
				for (x = l_x; x <= r_x; x++)
10002d54:	b023883a 	mov	r17,r22
10002d58:	00000406 	br	10002d6c <alt_up_pixel_buffer_dma_draw_box+0x1ec>
				{
					IOWR_8DIRECT(addr, x, local_color);
10002d5c:	8c05883a 	add	r2,r17,r16
10002d60:	b807883a 	mov	r3,r23
10002d64:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10002d68:	8c400044 	addi	r17,r17,1
10002d6c:	a47ffb2e 	bgeu	r20,r17,10002d5c <alt_up_pixel_buffer_dma_draw_box+0x1dc>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
10002d70:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10002d74:	ad400044 	addi	r21,r21,1
10002d78:	9d7ff62e 	bgeu	r19,r21,10002d54 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
10002d7c:	00002b06 	br	10002e2c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10002d80:	e0bff417 	ldw	r2,-48(fp)
10002d84:	10800e17 	ldw	r2,56(r2)
10002d88:	10800098 	cmpnei	r2,r2,2
10002d8c:	1000121e 	bne	r2,zero,10002dd8 <alt_up_pixel_buffer_dma_draw_box+0x258>
			limit_x = limit_x << 1;
10002d90:	9485883a 	add	r2,r18,r18
10002d94:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
10002d98:	8c85383a 	mul	r2,r17,r18
10002d9c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
10002da0:	882b883a 	mov	r21,r17
10002da4:	00000a06 	br	10002dd0 <alt_up_pixel_buffer_dma_draw_box+0x250>
			{
				for (x = l_x; x <= r_x; x++)
10002da8:	b023883a 	mov	r17,r22
10002dac:	00000506 	br	10002dc4 <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
10002db0:	8c45883a 	add	r2,r17,r17
10002db4:	1405883a 	add	r2,r2,r16
10002db8:	b807883a 	mov	r3,r23
10002dbc:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10002dc0:	8c400044 	addi	r17,r17,1
10002dc4:	a47ffa2e 	bgeu	r20,r17,10002db0 <alt_up_pixel_buffer_dma_draw_box+0x230>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
10002dc8:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10002dcc:	ad400044 	addi	r21,r21,1
10002dd0:	9d7ff52e 	bgeu	r19,r21,10002da8 <alt_up_pixel_buffer_dma_draw_box+0x228>
10002dd4:	00001506 	br	10002e2c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
10002dd8:	9485883a 	add	r2,r18,r18
10002ddc:	1085883a 	add	r2,r2,r2
10002de0:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
10002de4:	8c85383a 	mul	r2,r17,r18
10002de8:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
10002dec:	882b883a 	mov	r21,r17
10002df0:	00000b06 	br	10002e20 <alt_up_pixel_buffer_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
10002df4:	b023883a 	mov	r17,r22
10002df8:	00000606 	br	10002e14 <alt_up_pixel_buffer_dma_draw_box+0x294>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
10002dfc:	8c45883a 	add	r2,r17,r17
10002e00:	1085883a 	add	r2,r2,r2
10002e04:	1405883a 	add	r2,r2,r16
10002e08:	b807883a 	mov	r3,r23
10002e0c:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10002e10:	8c400044 	addi	r17,r17,1
10002e14:	a47ff92e 	bgeu	r20,r17,10002dfc <alt_up_pixel_buffer_dma_draw_box+0x27c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
10002e18:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10002e1c:	ad400044 	addi	r21,r21,1
10002e20:	9d7ff42e 	bgeu	r19,r21,10002df4 <alt_up_pixel_buffer_dma_draw_box+0x274>
10002e24:	00000106 	br	10002e2c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
10002e28:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
10002e2c:	e6fff804 	addi	sp,fp,-32
10002e30:	df000817 	ldw	fp,32(sp)
10002e34:	ddc00717 	ldw	r23,28(sp)
10002e38:	dd800617 	ldw	r22,24(sp)
10002e3c:	dd400517 	ldw	r21,20(sp)
10002e40:	dd000417 	ldw	r20,16(sp)
10002e44:	dcc00317 	ldw	r19,12(sp)
10002e48:	dc800217 	ldw	r18,8(sp)
10002e4c:	dc400117 	ldw	r17,4(sp)
10002e50:	dc000017 	ldw	r16,0(sp)
10002e54:	dec00904 	addi	sp,sp,36
10002e58:	f800283a 	ret

10002e5c <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
10002e5c:	defff404 	addi	sp,sp,-48
10002e60:	df000b15 	stw	fp,44(sp)
10002e64:	dd800a15 	stw	r22,40(sp)
10002e68:	dd400915 	stw	r21,36(sp)
10002e6c:	dd000815 	stw	r20,32(sp)
10002e70:	dcc00715 	stw	r19,28(sp)
10002e74:	dc800615 	stw	r18,24(sp)
10002e78:	dc400515 	stw	r17,20(sp)
10002e7c:	dc000415 	stw	r16,16(sp)
10002e80:	df000b04 	addi	fp,sp,44
10002e84:	e13ff515 	stw	r4,-44(fp)
10002e88:	e17ff615 	stw	r5,-40(fp)
10002e8c:	e1bff715 	stw	r6,-36(fp)
10002e90:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
10002e94:	e0bff517 	ldw	r2,-44(fp)
10002e98:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
10002e9c:	e0bff517 	ldw	r2,-44(fp)
10002ea0:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
10002ea4:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
10002ea8:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
10002eac:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
10002eb0:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
10002eb4:	9c40032e 	bgeu	r19,r17,10002ec4 <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
10002eb8:	882d883a 	mov	r22,r17
		l_x = r_x;
10002ebc:	9823883a 	mov	r17,r19
		r_x = temp;
10002ec0:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
10002ec4:	8c805d2e 	bgeu	r17,r18,1000303c <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
10002ec8:	a4005c2e 	bgeu	r20,r16,1000303c <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
10002ecc:	9c800136 	bltu	r19,r18,10002ed4 <alt_up_pixel_buffer_dma_draw_hline+0x78>
	{
		r_x = limit_x - 1;
10002ed0:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
10002ed4:	e0800217 	ldw	r2,8(fp)
10002ed8:	10800058 	cmpnei	r2,r2,1
10002edc:	1000031e 	bne	r2,zero,10002eec <alt_up_pixel_buffer_dma_draw_hline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
10002ee0:	e0bff517 	ldw	r2,-44(fp)
10002ee4:	14000c17 	ldw	r16,48(r2)
10002ee8:	00000206 	br	10002ef4 <alt_up_pixel_buffer_dma_draw_hline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
10002eec:	e0bff517 	ldw	r2,-44(fp)
10002ef0:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
10002ef4:	e0bff517 	ldw	r2,-44(fp)
10002ef8:	10800d17 	ldw	r2,52(r2)
10002efc:	1000231e 	bne	r2,zero,10002f8c <alt_up_pixel_buffer_dma_draw_hline+0x130>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
10002f00:	e0bff517 	ldw	r2,-44(fp)
10002f04:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
10002f08:	a484983a 	sll	r2,r20,r18
10002f0c:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10002f10:	e0bff517 	ldw	r2,-44(fp)
10002f14:	10800e17 	ldw	r2,56(r2)
10002f18:	10800058 	cmpnei	r2,r2,1
10002f1c:	1000071e 	bne	r2,zero,10002f3c <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			for (x = l_x; x <= r_x; x++)
10002f20:	00000406 	br	10002f34 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
			{
				IOWR_8DIRECT(addr, x, local_color);
10002f24:	8c05883a 	add	r2,r17,r16
10002f28:	a807883a 	mov	r3,r21
10002f2c:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
10002f30:	8c400044 	addi	r17,r17,1
10002f34:	9c7ffb2e 	bgeu	r19,r17,10002f24 <alt_up_pixel_buffer_dma_draw_hline+0xc8>
10002f38:	00004106 	br	10003040 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10002f3c:	e0bff517 	ldw	r2,-44(fp)
10002f40:	10800e17 	ldw	r2,56(r2)
10002f44:	10800098 	cmpnei	r2,r2,2
10002f48:	10000e1e 	bne	r2,zero,10002f84 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
10002f4c:	00000506 	br	10002f64 <alt_up_pixel_buffer_dma_draw_hline+0x108>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
10002f50:	8c45883a 	add	r2,r17,r17
10002f54:	1405883a 	add	r2,r2,r16
10002f58:	a807883a 	mov	r3,r21
10002f5c:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
10002f60:	8c400044 	addi	r17,r17,1
10002f64:	9c7ffa2e 	bgeu	r19,r17,10002f50 <alt_up_pixel_buffer_dma_draw_hline+0xf4>
10002f68:	00003506 	br	10003040 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
10002f6c:	8c45883a 	add	r2,r17,r17
10002f70:	1085883a 	add	r2,r2,r2
10002f74:	1405883a 	add	r2,r2,r16
10002f78:	a807883a 	mov	r3,r21
10002f7c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
10002f80:	8c400044 	addi	r17,r17,1
10002f84:	9c7ff92e 	bgeu	r19,r17,10002f6c <alt_up_pixel_buffer_dma_draw_hline+0x110>
10002f88:	00002d06 	br	10003040 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10002f8c:	e0bff517 	ldw	r2,-44(fp)
10002f90:	10800e17 	ldw	r2,56(r2)
10002f94:	10800058 	cmpnei	r2,r2,1
10002f98:	1000091e 	bne	r2,zero,10002fc0 <alt_up_pixel_buffer_dma_draw_hline+0x164>
			addr = addr + line_y * limit_x;
10002f9c:	a485383a 	mul	r2,r20,r18
10002fa0:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
10002fa4:	00000406 	br	10002fb8 <alt_up_pixel_buffer_dma_draw_hline+0x15c>
			{
				IOWR_8DIRECT(addr, x, local_color);
10002fa8:	8c05883a 	add	r2,r17,r16
10002fac:	a807883a 	mov	r3,r21
10002fb0:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
10002fb4:	8c400044 	addi	r17,r17,1
10002fb8:	9c7ffb2e 	bgeu	r19,r17,10002fa8 <alt_up_pixel_buffer_dma_draw_hline+0x14c>
10002fbc:	00002006 	br	10003040 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10002fc0:	e0bff517 	ldw	r2,-44(fp)
10002fc4:	10800e17 	ldw	r2,56(r2)
10002fc8:	10800098 	cmpnei	r2,r2,2
10002fcc:	10000c1e 	bne	r2,zero,10003000 <alt_up_pixel_buffer_dma_draw_hline+0x1a4>
			limit_x = limit_x << 1;
10002fd0:	9485883a 	add	r2,r18,r18
10002fd4:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
10002fd8:	a485383a 	mul	r2,r20,r18
10002fdc:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
10002fe0:	00000506 	br	10002ff8 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
10002fe4:	8c45883a 	add	r2,r17,r17
10002fe8:	1405883a 	add	r2,r2,r16
10002fec:	a807883a 	mov	r3,r21
10002ff0:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
10002ff4:	8c400044 	addi	r17,r17,1
10002ff8:	9c7ffa2e 	bgeu	r19,r17,10002fe4 <alt_up_pixel_buffer_dma_draw_hline+0x188>
10002ffc:	00001006 	br	10003040 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
10003000:	9485883a 	add	r2,r18,r18
10003004:	1085883a 	add	r2,r2,r2
10003008:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
1000300c:	a485383a 	mul	r2,r20,r18
10003010:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
10003014:	00000606 	br	10003030 <alt_up_pixel_buffer_dma_draw_hline+0x1d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
10003018:	8c45883a 	add	r2,r17,r17
1000301c:	1085883a 	add	r2,r2,r2
10003020:	1405883a 	add	r2,r2,r16
10003024:	a807883a 	mov	r3,r21
10003028:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
1000302c:	8c400044 	addi	r17,r17,1
10003030:	9c7ff92e 	bgeu	r19,r17,10003018 <alt_up_pixel_buffer_dma_draw_hline+0x1bc>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
10003034:	84a1883a 	add	r16,r16,r18
10003038:	00000106 	br	10003040 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
1000303c:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
10003040:	e6fff904 	addi	sp,fp,-28
10003044:	df000717 	ldw	fp,28(sp)
10003048:	dd800617 	ldw	r22,24(sp)
1000304c:	dd400517 	ldw	r21,20(sp)
10003050:	dd000417 	ldw	r20,16(sp)
10003054:	dcc00317 	ldw	r19,12(sp)
10003058:	dc800217 	ldw	r18,8(sp)
1000305c:	dc400117 	ldw	r17,4(sp)
10003060:	dc000017 	ldw	r16,0(sp)
10003064:	dec00804 	addi	sp,sp,32
10003068:	f800283a 	ret

1000306c <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
1000306c:	defff404 	addi	sp,sp,-48
10003070:	df000b15 	stw	fp,44(sp)
10003074:	dd800a15 	stw	r22,40(sp)
10003078:	dd400915 	stw	r21,36(sp)
1000307c:	dd000815 	stw	r20,32(sp)
10003080:	dcc00715 	stw	r19,28(sp)
10003084:	dc800615 	stw	r18,24(sp)
10003088:	dc400515 	stw	r17,20(sp)
1000308c:	dc000415 	stw	r16,16(sp)
10003090:	df000b04 	addi	fp,sp,44
10003094:	e13ff515 	stw	r4,-44(fp)
10003098:	e17ff615 	stw	r5,-40(fp)
1000309c:	e1bff715 	stw	r6,-36(fp)
100030a0:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
100030a4:	e0bff517 	ldw	r2,-44(fp)
100030a8:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
100030ac:	e0bff517 	ldw	r2,-44(fp)
100030b0:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
100030b4:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
100030b8:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
100030bc:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
100030c0:	e5800117 	ldw	r22,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
100030c4:	9d00032e 	bgeu	r19,r20,100030d4 <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
100030c8:	a02b883a 	mov	r21,r20
		t_y = b_y;
100030cc:	9829883a 	mov	r20,r19
		b_y = temp;
100030d0:	a827883a 	mov	r19,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
100030d4:	94406c2e 	bgeu	r18,r17,10003288 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
100030d8:	a4006b2e 	bgeu	r20,r16,10003288 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
100030dc:	9c000136 	bltu	r19,r16,100030e4 <alt_up_pixel_buffer_dma_draw_vline+0x78>
	{
		b_y = limit_y - 1;
100030e0:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
100030e4:	e0800217 	ldw	r2,8(fp)
100030e8:	10800058 	cmpnei	r2,r2,1
100030ec:	1000031e 	bne	r2,zero,100030fc <alt_up_pixel_buffer_dma_draw_vline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
100030f0:	e0bff517 	ldw	r2,-44(fp)
100030f4:	14000c17 	ldw	r16,48(r2)
100030f8:	00000206 	br	10003104 <alt_up_pixel_buffer_dma_draw_vline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
100030fc:	e0bff517 	ldw	r2,-44(fp)
10003100:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
10003104:	e0bff517 	ldw	r2,-44(fp)
10003108:	10800d17 	ldw	r2,52(r2)
1000310c:	1000301e 	bne	r2,zero,100031d0 <alt_up_pixel_buffer_dma_draw_vline+0x164>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
10003110:	e0bff517 	ldw	r2,-44(fp)
10003114:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
10003118:	a544983a 	sll	r2,r20,r21
1000311c:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10003120:	e0bff517 	ldw	r2,-44(fp)
10003124:	10800e17 	ldw	r2,56(r2)
10003128:	10800058 	cmpnei	r2,r2,1
1000312c:	10000b1e 	bne	r2,zero,1000315c <alt_up_pixel_buffer_dma_draw_vline+0xf0>
			for (y = t_y; y <= b_y; y++)
10003130:	a023883a 	mov	r17,r20
10003134:	00000706 	br	10003154 <alt_up_pixel_buffer_dma_draw_vline+0xe8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
10003138:	9405883a 	add	r2,r18,r16
1000313c:	b007883a 	mov	r3,r22
10003140:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
10003144:	00800044 	movi	r2,1
10003148:	1544983a 	sll	r2,r2,r21
1000314c:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
10003150:	8c400044 	addi	r17,r17,1
10003154:	9c7ff82e 	bgeu	r19,r17,10003138 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
10003158:	00004c06 	br	1000328c <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
1000315c:	e0bff517 	ldw	r2,-44(fp)
10003160:	10800e17 	ldw	r2,56(r2)
10003164:	10800098 	cmpnei	r2,r2,2
10003168:	10000c1e 	bne	r2,zero,1000319c <alt_up_pixel_buffer_dma_draw_vline+0x130>
			for (y = t_y; y <= b_y; y++)
1000316c:	a023883a 	mov	r17,r20
10003170:	00000806 	br	10003194 <alt_up_pixel_buffer_dma_draw_vline+0x128>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
10003174:	9485883a 	add	r2,r18,r18
10003178:	1405883a 	add	r2,r2,r16
1000317c:	b007883a 	mov	r3,r22
10003180:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
10003184:	00800044 	movi	r2,1
10003188:	1544983a 	sll	r2,r2,r21
1000318c:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
10003190:	8c400044 	addi	r17,r17,1
10003194:	9c7ff72e 	bgeu	r19,r17,10003174 <alt_up_pixel_buffer_dma_draw_vline+0x108>
10003198:	00003c06 	br	1000328c <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
1000319c:	a023883a 	mov	r17,r20
100031a0:	00000906 	br	100031c8 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
100031a4:	9485883a 	add	r2,r18,r18
100031a8:	1085883a 	add	r2,r2,r2
100031ac:	1405883a 	add	r2,r2,r16
100031b0:	b007883a 	mov	r3,r22
100031b4:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
100031b8:	00800044 	movi	r2,1
100031bc:	1544983a 	sll	r2,r2,r21
100031c0:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
100031c4:	8c400044 	addi	r17,r17,1
100031c8:	9c7ff62e 	bgeu	r19,r17,100031a4 <alt_up_pixel_buffer_dma_draw_vline+0x138>
100031cc:	00002f06 	br	1000328c <alt_up_pixel_buffer_dma_draw_vline+0x220>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
100031d0:	e0bff517 	ldw	r2,-44(fp)
100031d4:	10800e17 	ldw	r2,56(r2)
100031d8:	10800058 	cmpnei	r2,r2,1
100031dc:	10000a1e 	bne	r2,zero,10003208 <alt_up_pixel_buffer_dma_draw_vline+0x19c>
			addr = addr + t_y * limit_x;
100031e0:	a445383a 	mul	r2,r20,r17
100031e4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
100031e8:	00000506 	br	10003200 <alt_up_pixel_buffer_dma_draw_vline+0x194>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
100031ec:	9405883a 	add	r2,r18,r16
100031f0:	b007883a 	mov	r3,r22
100031f4:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
100031f8:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
100031fc:	a5000044 	addi	r20,r20,1
10003200:	9d3ffa2e 	bgeu	r19,r20,100031ec <alt_up_pixel_buffer_dma_draw_vline+0x180>
10003204:	00002106 	br	1000328c <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10003208:	e0bff517 	ldw	r2,-44(fp)
1000320c:	10800e17 	ldw	r2,56(r2)
10003210:	10800098 	cmpnei	r2,r2,2
10003214:	10000d1e 	bne	r2,zero,1000324c <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
			limit_x = limit_x << 1;
10003218:	8c45883a 	add	r2,r17,r17
1000321c:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
10003220:	a445383a 	mul	r2,r20,r17
10003224:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
10003228:	00000606 	br	10003244 <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
1000322c:	9485883a 	add	r2,r18,r18
10003230:	1405883a 	add	r2,r2,r16
10003234:	b007883a 	mov	r3,r22
10003238:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
1000323c:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10003240:	a5000044 	addi	r20,r20,1
10003244:	9d3ff92e 	bgeu	r19,r20,1000322c <alt_up_pixel_buffer_dma_draw_vline+0x1c0>
10003248:	00001006 	br	1000328c <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
1000324c:	8c45883a 	add	r2,r17,r17
10003250:	1085883a 	add	r2,r2,r2
10003254:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
10003258:	a445383a 	mul	r2,r20,r17
1000325c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
10003260:	00000706 	br	10003280 <alt_up_pixel_buffer_dma_draw_vline+0x214>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
10003264:	9485883a 	add	r2,r18,r18
10003268:	1085883a 	add	r2,r2,r2
1000326c:	1405883a 	add	r2,r2,r16
10003270:	b007883a 	mov	r3,r22
10003274:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
10003278:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
1000327c:	a5000044 	addi	r20,r20,1
10003280:	9d3ff82e 	bgeu	r19,r20,10003264 <alt_up_pixel_buffer_dma_draw_vline+0x1f8>
10003284:	00000106 	br	1000328c <alt_up_pixel_buffer_dma_draw_vline+0x220>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
10003288:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
1000328c:	e6fff904 	addi	sp,fp,-28
10003290:	df000717 	ldw	fp,28(sp)
10003294:	dd800617 	ldw	r22,24(sp)
10003298:	dd400517 	ldw	r21,20(sp)
1000329c:	dd000417 	ldw	r20,16(sp)
100032a0:	dcc00317 	ldw	r19,12(sp)
100032a4:	dc800217 	ldw	r18,8(sp)
100032a8:	dc400117 	ldw	r17,4(sp)
100032ac:	dc000017 	ldw	r16,0(sp)
100032b0:	dec00804 	addi	sp,sp,32
100032b4:	f800283a 	ret

100032b8 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
100032b8:	defff804 	addi	sp,sp,-32
100032bc:	dfc00715 	stw	ra,28(sp)
100032c0:	df000615 	stw	fp,24(sp)
100032c4:	df000604 	addi	fp,sp,24
100032c8:	e13ffc15 	stw	r4,-16(fp)
100032cc:	e17ffd15 	stw	r5,-12(fp)
100032d0:	e1bffe15 	stw	r6,-8(fp)
100032d4:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
100032d8:	e0800417 	ldw	r2,16(fp)
100032dc:	d8800115 	stw	r2,4(sp)
100032e0:	e0800317 	ldw	r2,12(fp)
100032e4:	d8800015 	stw	r2,0(sp)
100032e8:	e1fffe17 	ldw	r7,-8(fp)
100032ec:	e1bfff17 	ldw	r6,-4(fp)
100032f0:	e17ffd17 	ldw	r5,-12(fp)
100032f4:	e13ffc17 	ldw	r4,-16(fp)
100032f8:	0002e5c0 	call	10002e5c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
100032fc:	e0800417 	ldw	r2,16(fp)
10003300:	d8800115 	stw	r2,4(sp)
10003304:	e0800317 	ldw	r2,12(fp)
10003308:	d8800015 	stw	r2,0(sp)
1000330c:	e1c00217 	ldw	r7,8(fp)
10003310:	e1bfff17 	ldw	r6,-4(fp)
10003314:	e17ffd17 	ldw	r5,-12(fp)
10003318:	e13ffc17 	ldw	r4,-16(fp)
1000331c:	0002e5c0 	call	10002e5c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
10003320:	e0800417 	ldw	r2,16(fp)
10003324:	d8800115 	stw	r2,4(sp)
10003328:	e0800317 	ldw	r2,12(fp)
1000332c:	d8800015 	stw	r2,0(sp)
10003330:	e1c00217 	ldw	r7,8(fp)
10003334:	e1bffe17 	ldw	r6,-8(fp)
10003338:	e17ffd17 	ldw	r5,-12(fp)
1000333c:	e13ffc17 	ldw	r4,-16(fp)
10003340:	000306c0 	call	1000306c <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
10003344:	e0800417 	ldw	r2,16(fp)
10003348:	d8800115 	stw	r2,4(sp)
1000334c:	e0800317 	ldw	r2,12(fp)
10003350:	d8800015 	stw	r2,0(sp)
10003354:	e1c00217 	ldw	r7,8(fp)
10003358:	e1bffe17 	ldw	r6,-8(fp)
1000335c:	e17fff17 	ldw	r5,-4(fp)
10003360:	e13ffc17 	ldw	r4,-16(fp)
10003364:	000306c0 	call	1000306c <alt_up_pixel_buffer_dma_draw_vline>
}
10003368:	0001883a 	nop
1000336c:	e037883a 	mov	sp,fp
10003370:	dfc00117 	ldw	ra,4(sp)
10003374:	df000017 	ldw	fp,0(sp)
10003378:	dec00204 	addi	sp,sp,8
1000337c:	f800283a 	ret

10003380 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
10003380:	deffff04 	addi	sp,sp,-4
10003384:	df000015 	stw	fp,0(sp)
10003388:	d839883a 	mov	fp,sp
1000338c:	2005883a 	mov	r2,r4
10003390:	3007883a 	mov	r3,r6
10003394:	3809883a 	mov	r4,r7
10003398:	e1800117 	ldw	r6,4(fp)
1000339c:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
100033a0:	3800051e 	bne	r7,zero,100033b8 <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
100033a4:	2909383a 	mul	r4,r5,r4
100033a8:	20c7883a 	add	r3,r4,r3
100033ac:	1885883a 	add	r2,r3,r2
100033b0:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
100033b4:	00000e06 	br	100033f0 <helper_plot_pixel+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
100033b8:	39c00058 	cmpnei	r7,r7,1
100033bc:	3800061e 	bne	r7,zero,100033d8 <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
100033c0:	2909383a 	mul	r4,r5,r4
100033c4:	20c7883a 	add	r3,r4,r3
100033c8:	18c7883a 	add	r3,r3,r3
100033cc:	1885883a 	add	r2,r3,r2
100033d0:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
100033d4:	00000606 	br	100033f0 <helper_plot_pixel+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
100033d8:	2909383a 	mul	r4,r5,r4
100033dc:	20c7883a 	add	r3,r4,r3
100033e0:	18c7883a 	add	r3,r3,r3
100033e4:	18c7883a 	add	r3,r3,r3
100033e8:	1885883a 	add	r2,r3,r2
100033ec:	11800035 	stwio	r6,0(r2)
}
100033f0:	0001883a 	nop
100033f4:	e037883a 	mov	sp,fp
100033f8:	df000017 	ldw	fp,0(sp)
100033fc:	dec00104 	addi	sp,sp,4
10003400:	f800283a 	ret

10003404 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
10003404:	deffeb04 	addi	sp,sp,-84
10003408:	dfc01415 	stw	ra,80(sp)
1000340c:	df001315 	stw	fp,76(sp)
10003410:	ddc01215 	stw	r23,72(sp)
10003414:	dd801115 	stw	r22,68(sp)
10003418:	dd401015 	stw	r21,64(sp)
1000341c:	dd000f15 	stw	r20,60(sp)
10003420:	dcc00e15 	stw	r19,56(sp)
10003424:	dc800d15 	stw	r18,52(sp)
10003428:	dc400c15 	stw	r17,48(sp)
1000342c:	dc000b15 	stw	r16,44(sp)
10003430:	df001304 	addi	fp,sp,76
10003434:	e13fef15 	stw	r4,-68(fp)
10003438:	e17ff015 	stw	r5,-64(fp)
1000343c:	e1bff115 	stw	r6,-60(fp)
10003440:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
10003444:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
10003448:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
1000344c:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
10003450:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
10003454:	a4c5c83a 	sub	r2,r20,r19
10003458:	1000010e 	bge	r2,zero,10003460 <alt_up_pixel_buffer_dma_draw_line+0x5c>
1000345c:	0085c83a 	sub	r2,zero,r2
10003460:	1007883a 	mov	r3,r2
10003464:	9445c83a 	sub	r2,r18,r17
10003468:	1000010e 	bge	r2,zero,10003470 <alt_up_pixel_buffer_dma_draw_line+0x6c>
1000346c:	0085c83a 	sub	r2,zero,r2
10003470:	10c4803a 	cmplt	r2,r2,r3
10003474:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
10003478:	e0bfef17 	ldw	r2,-68(fp)
1000347c:	10800e17 	ldw	r2,56(r2)
10003480:	10800060 	cmpeqi	r2,r2,1
10003484:	1000081e 	bne	r2,zero,100034a8 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
10003488:	e0bfef17 	ldw	r2,-68(fp)
1000348c:	10800e17 	ldw	r2,56(r2)
10003490:	10800098 	cmpnei	r2,r2,2
10003494:	1000021e 	bne	r2,zero,100034a0 <alt_up_pixel_buffer_dma_draw_line+0x9c>
10003498:	00800044 	movi	r2,1
1000349c:	00000306 	br	100034ac <alt_up_pixel_buffer_dma_draw_line+0xa8>
100034a0:	00800084 	movi	r2,2
100034a4:	00000106 	br	100034ac <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
100034a8:	0005883a 	mov	r2,zero
100034ac:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
100034b0:	e0800317 	ldw	r2,12(fp)
100034b4:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
100034b8:	e0bfef17 	ldw	r2,-68(fp)
100034bc:	10800d17 	ldw	r2,52(r2)
100034c0:	1000071e 	bne	r2,zero,100034e0 <alt_up_pixel_buffer_dma_draw_line+0xdc>
100034c4:	e0bfef17 	ldw	r2,-68(fp)
100034c8:	10801317 	ldw	r2,76(r2)
100034cc:	e0fff417 	ldw	r3,-48(fp)
100034d0:	10c5c83a 	sub	r2,r2,r3
100034d4:	00c00044 	movi	r3,1
100034d8:	1884983a 	sll	r2,r3,r2
100034dc:	00000206 	br	100034e8 <alt_up_pixel_buffer_dma_draw_line+0xe4>
100034e0:	e0bfef17 	ldw	r2,-68(fp)
100034e4:	10800f17 	ldw	r2,60(r2)
100034e8:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
100034ec:	e0800417 	ldw	r2,16(fp)
100034f0:	10800058 	cmpnei	r2,r2,1
100034f4:	1000031e 	bne	r2,zero,10003504 <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
100034f8:	e0bfef17 	ldw	r2,-68(fp)
100034fc:	15c00c17 	ldw	r23,48(r2)
10003500:	00000206 	br	1000350c <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
10003504:	e0bfef17 	ldw	r2,-68(fp)
10003508:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
1000350c:	e0bff307 	ldb	r2,-52(fp)
10003510:	0080060e 	bge	zero,r2,1000352c <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
10003514:	8821883a 	mov	r16,r17
		x_0 = y_0;
10003518:	9823883a 	mov	r17,r19
		y_0 = error;
1000351c:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
10003520:	9021883a 	mov	r16,r18
		x_1 = y_1;
10003524:	a025883a 	mov	r18,r20
		y_1 = error;
10003528:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
1000352c:	9440060e 	bge	r18,r17,10003548 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
10003530:	8821883a 	mov	r16,r17
		x_0 = x_1;
10003534:	9023883a 	mov	r17,r18
		x_1 = error;
10003538:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
1000353c:	9821883a 	mov	r16,r19
		y_0 = y_1;
10003540:	a027883a 	mov	r19,r20
		y_1 = error;
10003544:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
10003548:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
1000354c:	a4c5c83a 	sub	r2,r20,r19
10003550:	1000010e 	bge	r2,zero,10003558 <alt_up_pixel_buffer_dma_draw_line+0x154>
10003554:	0085c83a 	sub	r2,zero,r2
10003558:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
1000355c:	a804d7fa 	srli	r2,r21,31
10003560:	1545883a 	add	r2,r2,r21
10003564:	1005d07a 	srai	r2,r2,1
10003568:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
1000356c:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
10003570:	9d00020e 	bge	r19,r20,1000357c <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
10003574:	04c00044 	movi	r19,1
10003578:	00000106 	br	10003580 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
1000357c:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
10003580:	e0bff307 	ldb	r2,-52(fp)
10003584:	10800058 	cmpnei	r2,r2,1
10003588:	1000211e 	bne	r2,zero,10003610 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
1000358c:	00000f06 	br	100035cc <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
10003590:	e0bff417 	ldw	r2,-48(fp)
10003594:	d8800115 	stw	r2,4(sp)
10003598:	e0bff517 	ldw	r2,-44(fp)
1000359c:	d8800015 	stw	r2,0(sp)
100035a0:	880f883a 	mov	r7,r17
100035a4:	b00d883a 	mov	r6,r22
100035a8:	e17ff617 	ldw	r5,-40(fp)
100035ac:	b809883a 	mov	r4,r23
100035b0:	00033800 	call	10003380 <helper_plot_pixel>
			error = error + deltay;
100035b4:	e0bff717 	ldw	r2,-36(fp)
100035b8:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
100035bc:	0400020e 	bge	zero,r16,100035c8 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
100035c0:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
100035c4:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
100035c8:	8c400044 	addi	r17,r17,1
100035cc:	947ff00e 	bge	r18,r17,10003590 <alt_up_pixel_buffer_dma_draw_line+0x18c>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
100035d0:	00001006 	br	10003614 <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
100035d4:	e0bff417 	ldw	r2,-48(fp)
100035d8:	d8800115 	stw	r2,4(sp)
100035dc:	e0bff517 	ldw	r2,-44(fp)
100035e0:	d8800015 	stw	r2,0(sp)
100035e4:	b00f883a 	mov	r7,r22
100035e8:	880d883a 	mov	r6,r17
100035ec:	e17ff617 	ldw	r5,-40(fp)
100035f0:	b809883a 	mov	r4,r23
100035f4:	00033800 	call	10003380 <helper_plot_pixel>
			error = error + deltay;
100035f8:	e0bff717 	ldw	r2,-36(fp)
100035fc:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
10003600:	0400020e 	bge	zero,r16,1000360c <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
10003604:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
10003608:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
1000360c:	8c400044 	addi	r17,r17,1
10003610:	947ff00e 	bge	r18,r17,100035d4 <alt_up_pixel_buffer_dma_draw_line+0x1d0>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
10003614:	0001883a 	nop
10003618:	e6fff804 	addi	sp,fp,-32
1000361c:	dfc00917 	ldw	ra,36(sp)
10003620:	df000817 	ldw	fp,32(sp)
10003624:	ddc00717 	ldw	r23,28(sp)
10003628:	dd800617 	ldw	r22,24(sp)
1000362c:	dd400517 	ldw	r21,20(sp)
10003630:	dd000417 	ldw	r20,16(sp)
10003634:	dcc00317 	ldw	r19,12(sp)
10003638:	dc800217 	ldw	r18,8(sp)
1000363c:	dc400117 	ldw	r17,4(sp)
10003640:	dc000017 	ldw	r16,0(sp)
10003644:	dec00a04 	addi	sp,sp,40
10003648:	f800283a 	ret

1000364c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000364c:	defff504 	addi	sp,sp,-44
10003650:	df000a15 	stw	fp,40(sp)
10003654:	df000a04 	addi	fp,sp,40
10003658:	e13ffc15 	stw	r4,-16(fp)
1000365c:	e17ffd15 	stw	r5,-12(fp)
10003660:	e1bffe15 	stw	r6,-8(fp)
10003664:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10003668:	e03ff615 	stw	zero,-40(fp)
1000366c:	d0a6e517 	ldw	r2,-25708(gp)
  
  if (alt_ticks_per_second ())
10003670:	10003c26 	beq	r2,zero,10003764 <alt_alarm_start+0x118>
  {
    if (alarm)
10003674:	e0bffc17 	ldw	r2,-16(fp)
10003678:	10003826 	beq	r2,zero,1000375c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1000367c:	e0bffc17 	ldw	r2,-16(fp)
10003680:	e0fffe17 	ldw	r3,-8(fp)
10003684:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10003688:	e0bffc17 	ldw	r2,-16(fp)
1000368c:	e0ffff17 	ldw	r3,-4(fp)
10003690:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10003694:	0005303a 	rdctl	r2,status
10003698:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000369c:	e0fff917 	ldw	r3,-28(fp)
100036a0:	00bfff84 	movi	r2,-2
100036a4:	1884703a 	and	r2,r3,r2
100036a8:	1001703a 	wrctl	status,r2
  
  return context;
100036ac:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
100036b0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
100036b4:	d0a6e617 	ldw	r2,-25704(gp)
      
      current_nticks = alt_nticks();
100036b8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
100036bc:	e0fffd17 	ldw	r3,-12(fp)
100036c0:	e0bff617 	ldw	r2,-40(fp)
100036c4:	1885883a 	add	r2,r3,r2
100036c8:	10c00044 	addi	r3,r2,1
100036cc:	e0bffc17 	ldw	r2,-16(fp)
100036d0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
100036d4:	e0bffc17 	ldw	r2,-16(fp)
100036d8:	10c00217 	ldw	r3,8(r2)
100036dc:	e0bff617 	ldw	r2,-40(fp)
100036e0:	1880042e 	bgeu	r3,r2,100036f4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
100036e4:	e0bffc17 	ldw	r2,-16(fp)
100036e8:	00c00044 	movi	r3,1
100036ec:	10c00405 	stb	r3,16(r2)
100036f0:	00000206 	br	100036fc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
100036f4:	e0bffc17 	ldw	r2,-16(fp)
100036f8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
100036fc:	e0bffc17 	ldw	r2,-16(fp)
10003700:	d0e00704 	addi	r3,gp,-32740
10003704:	e0fffa15 	stw	r3,-24(fp)
10003708:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000370c:	e0bffb17 	ldw	r2,-20(fp)
10003710:	e0fffa17 	ldw	r3,-24(fp)
10003714:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10003718:	e0bffa17 	ldw	r2,-24(fp)
1000371c:	10c00017 	ldw	r3,0(r2)
10003720:	e0bffb17 	ldw	r2,-20(fp)
10003724:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10003728:	e0bffa17 	ldw	r2,-24(fp)
1000372c:	10800017 	ldw	r2,0(r2)
10003730:	e0fffb17 	ldw	r3,-20(fp)
10003734:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10003738:	e0bffa17 	ldw	r2,-24(fp)
1000373c:	e0fffb17 	ldw	r3,-20(fp)
10003740:	10c00015 	stw	r3,0(r2)
10003744:	e0bff817 	ldw	r2,-32(fp)
10003748:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000374c:	e0bff717 	ldw	r2,-36(fp)
10003750:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10003754:	0005883a 	mov	r2,zero
10003758:	00000306 	br	10003768 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
1000375c:	00bffa84 	movi	r2,-22
10003760:	00000106 	br	10003768 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10003764:	00bfde84 	movi	r2,-134
  }
}
10003768:	e037883a 	mov	sp,fp
1000376c:	df000017 	ldw	fp,0(sp)
10003770:	dec00104 	addi	sp,sp,4
10003774:	f800283a 	ret

10003778 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10003778:	defffe04 	addi	sp,sp,-8
1000377c:	dfc00115 	stw	ra,4(sp)
10003780:	df000015 	stw	fp,0(sp)
10003784:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10003788:	d0a00517 	ldw	r2,-32748(gp)
1000378c:	10000326 	beq	r2,zero,1000379c <alt_get_errno+0x24>
10003790:	d0a00517 	ldw	r2,-32748(gp)
10003794:	103ee83a 	callr	r2
10003798:	00000106 	br	100037a0 <alt_get_errno+0x28>
1000379c:	d0a6e804 	addi	r2,gp,-25696
}
100037a0:	e037883a 	mov	sp,fp
100037a4:	dfc00117 	ldw	ra,4(sp)
100037a8:	df000017 	ldw	fp,0(sp)
100037ac:	dec00204 	addi	sp,sp,8
100037b0:	f800283a 	ret

100037b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
100037b4:	defffb04 	addi	sp,sp,-20
100037b8:	dfc00415 	stw	ra,16(sp)
100037bc:	df000315 	stw	fp,12(sp)
100037c0:	df000304 	addi	fp,sp,12
100037c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
100037c8:	e0bfff17 	ldw	r2,-4(fp)
100037cc:	10000616 	blt	r2,zero,100037e8 <close+0x34>
100037d0:	e0bfff17 	ldw	r2,-4(fp)
100037d4:	10c00324 	muli	r3,r2,12
100037d8:	00840774 	movhi	r2,4125
100037dc:	10aca904 	addi	r2,r2,-19804
100037e0:	1885883a 	add	r2,r3,r2
100037e4:	00000106 	br	100037ec <close+0x38>
100037e8:	0005883a 	mov	r2,zero
100037ec:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
100037f0:	e0bffd17 	ldw	r2,-12(fp)
100037f4:	10001926 	beq	r2,zero,1000385c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
100037f8:	e0bffd17 	ldw	r2,-12(fp)
100037fc:	10800017 	ldw	r2,0(r2)
10003800:	10800417 	ldw	r2,16(r2)
10003804:	10000626 	beq	r2,zero,10003820 <close+0x6c>
10003808:	e0bffd17 	ldw	r2,-12(fp)
1000380c:	10800017 	ldw	r2,0(r2)
10003810:	10800417 	ldw	r2,16(r2)
10003814:	e13ffd17 	ldw	r4,-12(fp)
10003818:	103ee83a 	callr	r2
1000381c:	00000106 	br	10003824 <close+0x70>
10003820:	0005883a 	mov	r2,zero
10003824:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10003828:	e13fff17 	ldw	r4,-4(fp)
1000382c:	00041900 	call	10004190 <alt_release_fd>
    if (rval < 0)
10003830:	e0bffe17 	ldw	r2,-8(fp)
10003834:	1000070e 	bge	r2,zero,10003854 <close+0xa0>
    {
      ALT_ERRNO = -rval;
10003838:	00037780 	call	10003778 <alt_get_errno>
1000383c:	1007883a 	mov	r3,r2
10003840:	e0bffe17 	ldw	r2,-8(fp)
10003844:	0085c83a 	sub	r2,zero,r2
10003848:	18800015 	stw	r2,0(r3)
      return -1;
1000384c:	00bfffc4 	movi	r2,-1
10003850:	00000706 	br	10003870 <close+0xbc>
    }
    return 0;
10003854:	0005883a 	mov	r2,zero
10003858:	00000506 	br	10003870 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000385c:	00037780 	call	10003778 <alt_get_errno>
10003860:	1007883a 	mov	r3,r2
10003864:	00801444 	movi	r2,81
10003868:	18800015 	stw	r2,0(r3)
    return -1;
1000386c:	00bfffc4 	movi	r2,-1
  }
}
10003870:	e037883a 	mov	sp,fp
10003874:	dfc00117 	ldw	ra,4(sp)
10003878:	df000017 	ldw	fp,0(sp)
1000387c:	dec00204 	addi	sp,sp,8
10003880:	f800283a 	ret

10003884 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10003884:	defffe04 	addi	sp,sp,-8
10003888:	df000115 	stw	fp,4(sp)
1000388c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10003890:	e03fff15 	stw	zero,-4(fp)
10003894:	00000506 	br	100038ac <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
10003898:	e0bfff17 	ldw	r2,-4(fp)
1000389c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
100038a0:	e0bfff17 	ldw	r2,-4(fp)
100038a4:	10800804 	addi	r2,r2,32
100038a8:	e0bfff15 	stw	r2,-4(fp)
100038ac:	e0bfff17 	ldw	r2,-4(fp)
100038b0:	10840030 	cmpltui	r2,r2,4096
100038b4:	103ff81e 	bne	r2,zero,10003898 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100038b8:	0001883a 	nop
100038bc:	e037883a 	mov	sp,fp
100038c0:	df000017 	ldw	fp,0(sp)
100038c4:	dec00104 	addi	sp,sp,4
100038c8:	f800283a 	ret

100038cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
100038cc:	defffc04 	addi	sp,sp,-16
100038d0:	df000315 	stw	fp,12(sp)
100038d4:	df000304 	addi	fp,sp,12
100038d8:	e13ffd15 	stw	r4,-12(fp)
100038dc:	e17ffe15 	stw	r5,-8(fp)
100038e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
100038e4:	e0bfff17 	ldw	r2,-4(fp)
}
100038e8:	e037883a 	mov	sp,fp
100038ec:	df000017 	ldw	fp,0(sp)
100038f0:	dec00104 	addi	sp,sp,4
100038f4:	f800283a 	ret

100038f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100038f8:	defffe04 	addi	sp,sp,-8
100038fc:	dfc00115 	stw	ra,4(sp)
10003900:	df000015 	stw	fp,0(sp)
10003904:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10003908:	d0a00517 	ldw	r2,-32748(gp)
1000390c:	10000326 	beq	r2,zero,1000391c <alt_get_errno+0x24>
10003910:	d0a00517 	ldw	r2,-32748(gp)
10003914:	103ee83a 	callr	r2
10003918:	00000106 	br	10003920 <alt_get_errno+0x28>
1000391c:	d0a6e804 	addi	r2,gp,-25696
}
10003920:	e037883a 	mov	sp,fp
10003924:	dfc00117 	ldw	ra,4(sp)
10003928:	df000017 	ldw	fp,0(sp)
1000392c:	dec00204 	addi	sp,sp,8
10003930:	f800283a 	ret

10003934 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10003934:	defffa04 	addi	sp,sp,-24
10003938:	dfc00515 	stw	ra,20(sp)
1000393c:	df000415 	stw	fp,16(sp)
10003940:	df000404 	addi	fp,sp,16
10003944:	e13ffe15 	stw	r4,-8(fp)
10003948:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000394c:	e0bffe17 	ldw	r2,-8(fp)
10003950:	10000326 	beq	r2,zero,10003960 <alt_dev_llist_insert+0x2c>
10003954:	e0bffe17 	ldw	r2,-8(fp)
10003958:	10800217 	ldw	r2,8(r2)
1000395c:	1000061e 	bne	r2,zero,10003978 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10003960:	00038f80 	call	100038f8 <alt_get_errno>
10003964:	1007883a 	mov	r3,r2
10003968:	00800584 	movi	r2,22
1000396c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10003970:	00bffa84 	movi	r2,-22
10003974:	00001306 	br	100039c4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10003978:	e0bffe17 	ldw	r2,-8(fp)
1000397c:	e0ffff17 	ldw	r3,-4(fp)
10003980:	e0fffc15 	stw	r3,-16(fp)
10003984:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10003988:	e0bffd17 	ldw	r2,-12(fp)
1000398c:	e0fffc17 	ldw	r3,-16(fp)
10003990:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10003994:	e0bffc17 	ldw	r2,-16(fp)
10003998:	10c00017 	ldw	r3,0(r2)
1000399c:	e0bffd17 	ldw	r2,-12(fp)
100039a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100039a4:	e0bffc17 	ldw	r2,-16(fp)
100039a8:	10800017 	ldw	r2,0(r2)
100039ac:	e0fffd17 	ldw	r3,-12(fp)
100039b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100039b4:	e0bffc17 	ldw	r2,-16(fp)
100039b8:	e0fffd17 	ldw	r3,-12(fp)
100039bc:	10c00015 	stw	r3,0(r2)

  return 0;  
100039c0:	0005883a 	mov	r2,zero
}
100039c4:	e037883a 	mov	sp,fp
100039c8:	dfc00117 	ldw	ra,4(sp)
100039cc:	df000017 	ldw	fp,0(sp)
100039d0:	dec00204 	addi	sp,sp,8
100039d4:	f800283a 	ret

100039d8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100039d8:	defffd04 	addi	sp,sp,-12
100039dc:	dfc00215 	stw	ra,8(sp)
100039e0:	df000115 	stw	fp,4(sp)
100039e4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100039e8:	00840034 	movhi	r2,4096
100039ec:	109fba04 	addi	r2,r2,32488
100039f0:	e0bfff15 	stw	r2,-4(fp)
100039f4:	00000606 	br	10003a10 <_do_ctors+0x38>
        (*ctor) (); 
100039f8:	e0bfff17 	ldw	r2,-4(fp)
100039fc:	10800017 	ldw	r2,0(r2)
10003a00:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10003a04:	e0bfff17 	ldw	r2,-4(fp)
10003a08:	10bfff04 	addi	r2,r2,-4
10003a0c:	e0bfff15 	stw	r2,-4(fp)
10003a10:	e0ffff17 	ldw	r3,-4(fp)
10003a14:	00840034 	movhi	r2,4096
10003a18:	109fbb04 	addi	r2,r2,32492
10003a1c:	18bff62e 	bgeu	r3,r2,100039f8 <_do_ctors+0x20>
        (*ctor) (); 
}
10003a20:	0001883a 	nop
10003a24:	e037883a 	mov	sp,fp
10003a28:	dfc00117 	ldw	ra,4(sp)
10003a2c:	df000017 	ldw	fp,0(sp)
10003a30:	dec00204 	addi	sp,sp,8
10003a34:	f800283a 	ret

10003a38 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10003a38:	defffd04 	addi	sp,sp,-12
10003a3c:	dfc00215 	stw	ra,8(sp)
10003a40:	df000115 	stw	fp,4(sp)
10003a44:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10003a48:	00840034 	movhi	r2,4096
10003a4c:	109fba04 	addi	r2,r2,32488
10003a50:	e0bfff15 	stw	r2,-4(fp)
10003a54:	00000606 	br	10003a70 <_do_dtors+0x38>
        (*dtor) (); 
10003a58:	e0bfff17 	ldw	r2,-4(fp)
10003a5c:	10800017 	ldw	r2,0(r2)
10003a60:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10003a64:	e0bfff17 	ldw	r2,-4(fp)
10003a68:	10bfff04 	addi	r2,r2,-4
10003a6c:	e0bfff15 	stw	r2,-4(fp)
10003a70:	e0ffff17 	ldw	r3,-4(fp)
10003a74:	00840034 	movhi	r2,4096
10003a78:	109fbb04 	addi	r2,r2,32492
10003a7c:	18bff62e 	bgeu	r3,r2,10003a58 <_do_dtors+0x20>
        (*dtor) (); 
}
10003a80:	0001883a 	nop
10003a84:	e037883a 	mov	sp,fp
10003a88:	dfc00117 	ldw	ra,4(sp)
10003a8c:	df000017 	ldw	fp,0(sp)
10003a90:	dec00204 	addi	sp,sp,8
10003a94:	f800283a 	ret

10003a98 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10003a98:	defffa04 	addi	sp,sp,-24
10003a9c:	dfc00515 	stw	ra,20(sp)
10003aa0:	df000415 	stw	fp,16(sp)
10003aa4:	df000404 	addi	fp,sp,16
10003aa8:	e13ffe15 	stw	r4,-8(fp)
10003aac:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10003ab0:	e0bfff17 	ldw	r2,-4(fp)
10003ab4:	10800017 	ldw	r2,0(r2)
10003ab8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10003abc:	e13ffe17 	ldw	r4,-8(fp)
10003ac0:	0005ef40 	call	10005ef4 <strlen>
10003ac4:	10800044 	addi	r2,r2,1
10003ac8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10003acc:	00000d06 	br	10003b04 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10003ad0:	e0bffc17 	ldw	r2,-16(fp)
10003ad4:	10800217 	ldw	r2,8(r2)
10003ad8:	e0fffd17 	ldw	r3,-12(fp)
10003adc:	180d883a 	mov	r6,r3
10003ae0:	e17ffe17 	ldw	r5,-8(fp)
10003ae4:	1009883a 	mov	r4,r2
10003ae8:	00055400 	call	10005540 <memcmp>
10003aec:	1000021e 	bne	r2,zero,10003af8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10003af0:	e0bffc17 	ldw	r2,-16(fp)
10003af4:	00000706 	br	10003b14 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10003af8:	e0bffc17 	ldw	r2,-16(fp)
10003afc:	10800017 	ldw	r2,0(r2)
10003b00:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10003b04:	e0fffc17 	ldw	r3,-16(fp)
10003b08:	e0bfff17 	ldw	r2,-4(fp)
10003b0c:	18bff01e 	bne	r3,r2,10003ad0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10003b10:	0005883a 	mov	r2,zero
}
10003b14:	e037883a 	mov	sp,fp
10003b18:	dfc00117 	ldw	ra,4(sp)
10003b1c:	df000017 	ldw	fp,0(sp)
10003b20:	dec00204 	addi	sp,sp,8
10003b24:	f800283a 	ret

10003b28 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10003b28:	defffe04 	addi	sp,sp,-8
10003b2c:	dfc00115 	stw	ra,4(sp)
10003b30:	df000015 	stw	fp,0(sp)
10003b34:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
10003b38:	01440004 	movi	r5,4096
10003b3c:	0009883a 	mov	r4,zero
10003b40:	00045680 	call	10004568 <alt_icache_flush>
#endif
}
10003b44:	0001883a 	nop
10003b48:	e037883a 	mov	sp,fp
10003b4c:	dfc00117 	ldw	ra,4(sp)
10003b50:	df000017 	ldw	fp,0(sp)
10003b54:	dec00204 	addi	sp,sp,8
10003b58:	f800283a 	ret

10003b5c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10003b5c:	defff904 	addi	sp,sp,-28
10003b60:	dfc00615 	stw	ra,24(sp)
10003b64:	df000515 	stw	fp,20(sp)
10003b68:	df000504 	addi	fp,sp,20
10003b6c:	e13ffc15 	stw	r4,-16(fp)
10003b70:	e17ffd15 	stw	r5,-12(fp)
10003b74:	e1bffe15 	stw	r6,-8(fp)
10003b78:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10003b7c:	e0800217 	ldw	r2,8(fp)
10003b80:	d8800015 	stw	r2,0(sp)
10003b84:	e1ffff17 	ldw	r7,-4(fp)
10003b88:	e1bffe17 	ldw	r6,-8(fp)
10003b8c:	e17ffd17 	ldw	r5,-12(fp)
10003b90:	e13ffc17 	ldw	r4,-16(fp)
10003b94:	0003d0c0 	call	10003d0c <alt_iic_isr_register>
}  
10003b98:	e037883a 	mov	sp,fp
10003b9c:	dfc00117 	ldw	ra,4(sp)
10003ba0:	df000017 	ldw	fp,0(sp)
10003ba4:	dec00204 	addi	sp,sp,8
10003ba8:	f800283a 	ret

10003bac <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10003bac:	defff904 	addi	sp,sp,-28
10003bb0:	df000615 	stw	fp,24(sp)
10003bb4:	df000604 	addi	fp,sp,24
10003bb8:	e13ffe15 	stw	r4,-8(fp)
10003bbc:	e17fff15 	stw	r5,-4(fp)
10003bc0:	e0bfff17 	ldw	r2,-4(fp)
10003bc4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10003bc8:	0005303a 	rdctl	r2,status
10003bcc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10003bd0:	e0fffb17 	ldw	r3,-20(fp)
10003bd4:	00bfff84 	movi	r2,-2
10003bd8:	1884703a 	and	r2,r3,r2
10003bdc:	1001703a 	wrctl	status,r2
  
  return context;
10003be0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10003be4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10003be8:	00c00044 	movi	r3,1
10003bec:	e0bffa17 	ldw	r2,-24(fp)
10003bf0:	1884983a 	sll	r2,r3,r2
10003bf4:	1007883a 	mov	r3,r2
10003bf8:	d0a6e417 	ldw	r2,-25712(gp)
10003bfc:	1884b03a 	or	r2,r3,r2
10003c00:	d0a6e415 	stw	r2,-25712(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10003c04:	d0a6e417 	ldw	r2,-25712(gp)
10003c08:	100170fa 	wrctl	ienable,r2
10003c0c:	e0bffc17 	ldw	r2,-16(fp)
10003c10:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10003c14:	e0bffd17 	ldw	r2,-12(fp)
10003c18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10003c1c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10003c20:	0001883a 	nop
}
10003c24:	e037883a 	mov	sp,fp
10003c28:	df000017 	ldw	fp,0(sp)
10003c2c:	dec00104 	addi	sp,sp,4
10003c30:	f800283a 	ret

10003c34 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10003c34:	defff904 	addi	sp,sp,-28
10003c38:	df000615 	stw	fp,24(sp)
10003c3c:	df000604 	addi	fp,sp,24
10003c40:	e13ffe15 	stw	r4,-8(fp)
10003c44:	e17fff15 	stw	r5,-4(fp)
10003c48:	e0bfff17 	ldw	r2,-4(fp)
10003c4c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10003c50:	0005303a 	rdctl	r2,status
10003c54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10003c58:	e0fffb17 	ldw	r3,-20(fp)
10003c5c:	00bfff84 	movi	r2,-2
10003c60:	1884703a 	and	r2,r3,r2
10003c64:	1001703a 	wrctl	status,r2
  
  return context;
10003c68:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10003c6c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10003c70:	00c00044 	movi	r3,1
10003c74:	e0bffa17 	ldw	r2,-24(fp)
10003c78:	1884983a 	sll	r2,r3,r2
10003c7c:	0084303a 	nor	r2,zero,r2
10003c80:	1007883a 	mov	r3,r2
10003c84:	d0a6e417 	ldw	r2,-25712(gp)
10003c88:	1884703a 	and	r2,r3,r2
10003c8c:	d0a6e415 	stw	r2,-25712(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10003c90:	d0a6e417 	ldw	r2,-25712(gp)
10003c94:	100170fa 	wrctl	ienable,r2
10003c98:	e0bffc17 	ldw	r2,-16(fp)
10003c9c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10003ca0:	e0bffd17 	ldw	r2,-12(fp)
10003ca4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10003ca8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10003cac:	0001883a 	nop
}
10003cb0:	e037883a 	mov	sp,fp
10003cb4:	df000017 	ldw	fp,0(sp)
10003cb8:	dec00104 	addi	sp,sp,4
10003cbc:	f800283a 	ret

10003cc0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10003cc0:	defffc04 	addi	sp,sp,-16
10003cc4:	df000315 	stw	fp,12(sp)
10003cc8:	df000304 	addi	fp,sp,12
10003ccc:	e13ffe15 	stw	r4,-8(fp)
10003cd0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10003cd4:	000530fa 	rdctl	r2,ienable
10003cd8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10003cdc:	00c00044 	movi	r3,1
10003ce0:	e0bfff17 	ldw	r2,-4(fp)
10003ce4:	1884983a 	sll	r2,r3,r2
10003ce8:	1007883a 	mov	r3,r2
10003cec:	e0bffd17 	ldw	r2,-12(fp)
10003cf0:	1884703a 	and	r2,r3,r2
10003cf4:	1004c03a 	cmpne	r2,r2,zero
10003cf8:	10803fcc 	andi	r2,r2,255
}
10003cfc:	e037883a 	mov	sp,fp
10003d00:	df000017 	ldw	fp,0(sp)
10003d04:	dec00104 	addi	sp,sp,4
10003d08:	f800283a 	ret

10003d0c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10003d0c:	defff504 	addi	sp,sp,-44
10003d10:	dfc00a15 	stw	ra,40(sp)
10003d14:	df000915 	stw	fp,36(sp)
10003d18:	df000904 	addi	fp,sp,36
10003d1c:	e13ffc15 	stw	r4,-16(fp)
10003d20:	e17ffd15 	stw	r5,-12(fp)
10003d24:	e1bffe15 	stw	r6,-8(fp)
10003d28:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10003d2c:	00bffa84 	movi	r2,-22
10003d30:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10003d34:	e0bffd17 	ldw	r2,-12(fp)
10003d38:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10003d3c:	e0bff817 	ldw	r2,-32(fp)
10003d40:	10800808 	cmpgei	r2,r2,32
10003d44:	1000271e 	bne	r2,zero,10003de4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10003d48:	0005303a 	rdctl	r2,status
10003d4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10003d50:	e0fffb17 	ldw	r3,-20(fp)
10003d54:	00bfff84 	movi	r2,-2
10003d58:	1884703a 	and	r2,r3,r2
10003d5c:	1001703a 	wrctl	status,r2
  
  return context;
10003d60:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10003d64:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10003d68:	00840774 	movhi	r2,4125
10003d6c:	10b60a04 	addi	r2,r2,-10200
10003d70:	e0fff817 	ldw	r3,-32(fp)
10003d74:	180690fa 	slli	r3,r3,3
10003d78:	10c5883a 	add	r2,r2,r3
10003d7c:	e0fffe17 	ldw	r3,-8(fp)
10003d80:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10003d84:	00840774 	movhi	r2,4125
10003d88:	10b60a04 	addi	r2,r2,-10200
10003d8c:	e0fff817 	ldw	r3,-32(fp)
10003d90:	180690fa 	slli	r3,r3,3
10003d94:	10c5883a 	add	r2,r2,r3
10003d98:	10800104 	addi	r2,r2,4
10003d9c:	e0ffff17 	ldw	r3,-4(fp)
10003da0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10003da4:	e0bffe17 	ldw	r2,-8(fp)
10003da8:	10000526 	beq	r2,zero,10003dc0 <alt_iic_isr_register+0xb4>
10003dac:	e0bff817 	ldw	r2,-32(fp)
10003db0:	100b883a 	mov	r5,r2
10003db4:	e13ffc17 	ldw	r4,-16(fp)
10003db8:	0003bac0 	call	10003bac <alt_ic_irq_enable>
10003dbc:	00000406 	br	10003dd0 <alt_iic_isr_register+0xc4>
10003dc0:	e0bff817 	ldw	r2,-32(fp)
10003dc4:	100b883a 	mov	r5,r2
10003dc8:	e13ffc17 	ldw	r4,-16(fp)
10003dcc:	0003c340 	call	10003c34 <alt_ic_irq_disable>
10003dd0:	e0bff715 	stw	r2,-36(fp)
10003dd4:	e0bffa17 	ldw	r2,-24(fp)
10003dd8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10003ddc:	e0bff917 	ldw	r2,-28(fp)
10003de0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10003de4:	e0bff717 	ldw	r2,-36(fp)
}
10003de8:	e037883a 	mov	sp,fp
10003dec:	dfc00117 	ldw	ra,4(sp)
10003df0:	df000017 	ldw	fp,0(sp)
10003df4:	dec00204 	addi	sp,sp,8
10003df8:	f800283a 	ret

10003dfc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10003dfc:	defff904 	addi	sp,sp,-28
10003e00:	dfc00615 	stw	ra,24(sp)
10003e04:	df000515 	stw	fp,20(sp)
10003e08:	df000504 	addi	fp,sp,20
10003e0c:	e13ffc15 	stw	r4,-16(fp)
10003e10:	e17ffd15 	stw	r5,-12(fp)
10003e14:	e1bffe15 	stw	r6,-8(fp)
10003e18:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10003e1c:	e1bfff17 	ldw	r6,-4(fp)
10003e20:	e17ffe17 	ldw	r5,-8(fp)
10003e24:	e13ffd17 	ldw	r4,-12(fp)
10003e28:	000403c0 	call	1000403c <open>
10003e2c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10003e30:	e0bffb17 	ldw	r2,-20(fp)
10003e34:	10001c16 	blt	r2,zero,10003ea8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
10003e38:	00840774 	movhi	r2,4125
10003e3c:	10aca904 	addi	r2,r2,-19804
10003e40:	e0fffb17 	ldw	r3,-20(fp)
10003e44:	18c00324 	muli	r3,r3,12
10003e48:	10c5883a 	add	r2,r2,r3
10003e4c:	10c00017 	ldw	r3,0(r2)
10003e50:	e0bffc17 	ldw	r2,-16(fp)
10003e54:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10003e58:	00840774 	movhi	r2,4125
10003e5c:	10aca904 	addi	r2,r2,-19804
10003e60:	e0fffb17 	ldw	r3,-20(fp)
10003e64:	18c00324 	muli	r3,r3,12
10003e68:	10c5883a 	add	r2,r2,r3
10003e6c:	10800104 	addi	r2,r2,4
10003e70:	10c00017 	ldw	r3,0(r2)
10003e74:	e0bffc17 	ldw	r2,-16(fp)
10003e78:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10003e7c:	00840774 	movhi	r2,4125
10003e80:	10aca904 	addi	r2,r2,-19804
10003e84:	e0fffb17 	ldw	r3,-20(fp)
10003e88:	18c00324 	muli	r3,r3,12
10003e8c:	10c5883a 	add	r2,r2,r3
10003e90:	10800204 	addi	r2,r2,8
10003e94:	10c00017 	ldw	r3,0(r2)
10003e98:	e0bffc17 	ldw	r2,-16(fp)
10003e9c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10003ea0:	e13ffb17 	ldw	r4,-20(fp)
10003ea4:	00041900 	call	10004190 <alt_release_fd>
  }
} 
10003ea8:	0001883a 	nop
10003eac:	e037883a 	mov	sp,fp
10003eb0:	dfc00117 	ldw	ra,4(sp)
10003eb4:	df000017 	ldw	fp,0(sp)
10003eb8:	dec00204 	addi	sp,sp,8
10003ebc:	f800283a 	ret

10003ec0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10003ec0:	defffb04 	addi	sp,sp,-20
10003ec4:	dfc00415 	stw	ra,16(sp)
10003ec8:	df000315 	stw	fp,12(sp)
10003ecc:	df000304 	addi	fp,sp,12
10003ed0:	e13ffd15 	stw	r4,-12(fp)
10003ed4:	e17ffe15 	stw	r5,-8(fp)
10003ed8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10003edc:	01c07fc4 	movi	r7,511
10003ee0:	01800044 	movi	r6,1
10003ee4:	e17ffd17 	ldw	r5,-12(fp)
10003ee8:	01040774 	movhi	r4,4125
10003eec:	212cac04 	addi	r4,r4,-19792
10003ef0:	0003dfc0 	call	10003dfc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10003ef4:	01c07fc4 	movi	r7,511
10003ef8:	000d883a 	mov	r6,zero
10003efc:	e17ffe17 	ldw	r5,-8(fp)
10003f00:	01040774 	movhi	r4,4125
10003f04:	212ca904 	addi	r4,r4,-19804
10003f08:	0003dfc0 	call	10003dfc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10003f0c:	01c07fc4 	movi	r7,511
10003f10:	01800044 	movi	r6,1
10003f14:	e17fff17 	ldw	r5,-4(fp)
10003f18:	01040774 	movhi	r4,4125
10003f1c:	212caf04 	addi	r4,r4,-19780
10003f20:	0003dfc0 	call	10003dfc <alt_open_fd>
}  
10003f24:	0001883a 	nop
10003f28:	e037883a 	mov	sp,fp
10003f2c:	dfc00117 	ldw	ra,4(sp)
10003f30:	df000017 	ldw	fp,0(sp)
10003f34:	dec00204 	addi	sp,sp,8
10003f38:	f800283a 	ret

10003f3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10003f3c:	defffe04 	addi	sp,sp,-8
10003f40:	dfc00115 	stw	ra,4(sp)
10003f44:	df000015 	stw	fp,0(sp)
10003f48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10003f4c:	d0a00517 	ldw	r2,-32748(gp)
10003f50:	10000326 	beq	r2,zero,10003f60 <alt_get_errno+0x24>
10003f54:	d0a00517 	ldw	r2,-32748(gp)
10003f58:	103ee83a 	callr	r2
10003f5c:	00000106 	br	10003f64 <alt_get_errno+0x28>
10003f60:	d0a6e804 	addi	r2,gp,-25696
}
10003f64:	e037883a 	mov	sp,fp
10003f68:	dfc00117 	ldw	ra,4(sp)
10003f6c:	df000017 	ldw	fp,0(sp)
10003f70:	dec00204 	addi	sp,sp,8
10003f74:	f800283a 	ret

10003f78 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10003f78:	defffd04 	addi	sp,sp,-12
10003f7c:	df000215 	stw	fp,8(sp)
10003f80:	df000204 	addi	fp,sp,8
10003f84:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10003f88:	e0bfff17 	ldw	r2,-4(fp)
10003f8c:	10800217 	ldw	r2,8(r2)
10003f90:	10d00034 	orhi	r3,r2,16384
10003f94:	e0bfff17 	ldw	r2,-4(fp)
10003f98:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10003f9c:	e03ffe15 	stw	zero,-8(fp)
10003fa0:	00001d06 	br	10004018 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10003fa4:	00840774 	movhi	r2,4125
10003fa8:	10aca904 	addi	r2,r2,-19804
10003fac:	e0fffe17 	ldw	r3,-8(fp)
10003fb0:	18c00324 	muli	r3,r3,12
10003fb4:	10c5883a 	add	r2,r2,r3
10003fb8:	10c00017 	ldw	r3,0(r2)
10003fbc:	e0bfff17 	ldw	r2,-4(fp)
10003fc0:	10800017 	ldw	r2,0(r2)
10003fc4:	1880111e 	bne	r3,r2,1000400c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10003fc8:	00840774 	movhi	r2,4125
10003fcc:	10aca904 	addi	r2,r2,-19804
10003fd0:	e0fffe17 	ldw	r3,-8(fp)
10003fd4:	18c00324 	muli	r3,r3,12
10003fd8:	10c5883a 	add	r2,r2,r3
10003fdc:	10800204 	addi	r2,r2,8
10003fe0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10003fe4:	1000090e 	bge	r2,zero,1000400c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10003fe8:	e0bffe17 	ldw	r2,-8(fp)
10003fec:	10c00324 	muli	r3,r2,12
10003ff0:	00840774 	movhi	r2,4125
10003ff4:	10aca904 	addi	r2,r2,-19804
10003ff8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10003ffc:	e0bfff17 	ldw	r2,-4(fp)
10004000:	18800226 	beq	r3,r2,1000400c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10004004:	00bffcc4 	movi	r2,-13
10004008:	00000806 	br	1000402c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000400c:	e0bffe17 	ldw	r2,-8(fp)
10004010:	10800044 	addi	r2,r2,1
10004014:	e0bffe15 	stw	r2,-8(fp)
10004018:	d0a00417 	ldw	r2,-32752(gp)
1000401c:	1007883a 	mov	r3,r2
10004020:	e0bffe17 	ldw	r2,-8(fp)
10004024:	18bfdf2e 	bgeu	r3,r2,10003fa4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10004028:	0005883a 	mov	r2,zero
}
1000402c:	e037883a 	mov	sp,fp
10004030:	df000017 	ldw	fp,0(sp)
10004034:	dec00104 	addi	sp,sp,4
10004038:	f800283a 	ret

1000403c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000403c:	defff604 	addi	sp,sp,-40
10004040:	dfc00915 	stw	ra,36(sp)
10004044:	df000815 	stw	fp,32(sp)
10004048:	df000804 	addi	fp,sp,32
1000404c:	e13ffd15 	stw	r4,-12(fp)
10004050:	e17ffe15 	stw	r5,-8(fp)
10004054:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10004058:	00bfffc4 	movi	r2,-1
1000405c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10004060:	00bffb44 	movi	r2,-19
10004064:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10004068:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000406c:	d1600204 	addi	r5,gp,-32760
10004070:	e13ffd17 	ldw	r4,-12(fp)
10004074:	0003a980 	call	10003a98 <alt_find_dev>
10004078:	e0bff815 	stw	r2,-32(fp)
1000407c:	e0bff817 	ldw	r2,-32(fp)
10004080:	1000051e 	bne	r2,zero,10004098 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10004084:	e13ffd17 	ldw	r4,-12(fp)
10004088:	00043bc0 	call	100043bc <alt_find_file>
1000408c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10004090:	00800044 	movi	r2,1
10004094:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10004098:	e0bff817 	ldw	r2,-32(fp)
1000409c:	10002926 	beq	r2,zero,10004144 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
100040a0:	e13ff817 	ldw	r4,-32(fp)
100040a4:	00044c40 	call	100044c4 <alt_get_fd>
100040a8:	e0bff915 	stw	r2,-28(fp)
100040ac:	e0bff917 	ldw	r2,-28(fp)
100040b0:	1000030e 	bge	r2,zero,100040c0 <open+0x84>
    {
      status = index;
100040b4:	e0bff917 	ldw	r2,-28(fp)
100040b8:	e0bffa15 	stw	r2,-24(fp)
100040bc:	00002306 	br	1000414c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
100040c0:	e0bff917 	ldw	r2,-28(fp)
100040c4:	10c00324 	muli	r3,r2,12
100040c8:	00840774 	movhi	r2,4125
100040cc:	10aca904 	addi	r2,r2,-19804
100040d0:	1885883a 	add	r2,r3,r2
100040d4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
100040d8:	e0fffe17 	ldw	r3,-8(fp)
100040dc:	00900034 	movhi	r2,16384
100040e0:	10bfffc4 	addi	r2,r2,-1
100040e4:	1886703a 	and	r3,r3,r2
100040e8:	e0bffc17 	ldw	r2,-16(fp)
100040ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
100040f0:	e0bffb17 	ldw	r2,-20(fp)
100040f4:	1000051e 	bne	r2,zero,1000410c <open+0xd0>
100040f8:	e13ffc17 	ldw	r4,-16(fp)
100040fc:	0003f780 	call	10003f78 <alt_file_locked>
10004100:	e0bffa15 	stw	r2,-24(fp)
10004104:	e0bffa17 	ldw	r2,-24(fp)
10004108:	10001016 	blt	r2,zero,1000414c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000410c:	e0bff817 	ldw	r2,-32(fp)
10004110:	10800317 	ldw	r2,12(r2)
10004114:	10000826 	beq	r2,zero,10004138 <open+0xfc>
10004118:	e0bff817 	ldw	r2,-32(fp)
1000411c:	10800317 	ldw	r2,12(r2)
10004120:	e1ffff17 	ldw	r7,-4(fp)
10004124:	e1bffe17 	ldw	r6,-8(fp)
10004128:	e17ffd17 	ldw	r5,-12(fp)
1000412c:	e13ffc17 	ldw	r4,-16(fp)
10004130:	103ee83a 	callr	r2
10004134:	00000106 	br	1000413c <open+0x100>
10004138:	0005883a 	mov	r2,zero
1000413c:	e0bffa15 	stw	r2,-24(fp)
10004140:	00000206 	br	1000414c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
10004144:	00bffb44 	movi	r2,-19
10004148:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1000414c:	e0bffa17 	ldw	r2,-24(fp)
10004150:	1000090e 	bge	r2,zero,10004178 <open+0x13c>
  {
    alt_release_fd (index);  
10004154:	e13ff917 	ldw	r4,-28(fp)
10004158:	00041900 	call	10004190 <alt_release_fd>
    ALT_ERRNO = -status;
1000415c:	0003f3c0 	call	10003f3c <alt_get_errno>
10004160:	1007883a 	mov	r3,r2
10004164:	e0bffa17 	ldw	r2,-24(fp)
10004168:	0085c83a 	sub	r2,zero,r2
1000416c:	18800015 	stw	r2,0(r3)
    return -1;
10004170:	00bfffc4 	movi	r2,-1
10004174:	00000106 	br	1000417c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
10004178:	e0bff917 	ldw	r2,-28(fp)
}
1000417c:	e037883a 	mov	sp,fp
10004180:	dfc00117 	ldw	ra,4(sp)
10004184:	df000017 	ldw	fp,0(sp)
10004188:	dec00204 	addi	sp,sp,8
1000418c:	f800283a 	ret

10004190 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10004190:	defffe04 	addi	sp,sp,-8
10004194:	df000115 	stw	fp,4(sp)
10004198:	df000104 	addi	fp,sp,4
1000419c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
100041a0:	e0bfff17 	ldw	r2,-4(fp)
100041a4:	108000d0 	cmplti	r2,r2,3
100041a8:	10000d1e 	bne	r2,zero,100041e0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
100041ac:	00840774 	movhi	r2,4125
100041b0:	10aca904 	addi	r2,r2,-19804
100041b4:	e0ffff17 	ldw	r3,-4(fp)
100041b8:	18c00324 	muli	r3,r3,12
100041bc:	10c5883a 	add	r2,r2,r3
100041c0:	10800204 	addi	r2,r2,8
100041c4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
100041c8:	00840774 	movhi	r2,4125
100041cc:	10aca904 	addi	r2,r2,-19804
100041d0:	e0ffff17 	ldw	r3,-4(fp)
100041d4:	18c00324 	muli	r3,r3,12
100041d8:	10c5883a 	add	r2,r2,r3
100041dc:	10000015 	stw	zero,0(r2)
  }
}
100041e0:	0001883a 	nop
100041e4:	e037883a 	mov	sp,fp
100041e8:	df000017 	ldw	fp,0(sp)
100041ec:	dec00104 	addi	sp,sp,4
100041f0:	f800283a 	ret

100041f4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
100041f4:	defffa04 	addi	sp,sp,-24
100041f8:	df000515 	stw	fp,20(sp)
100041fc:	df000504 	addi	fp,sp,20
10004200:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004204:	0005303a 	rdctl	r2,status
10004208:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000420c:	e0fffc17 	ldw	r3,-16(fp)
10004210:	00bfff84 	movi	r2,-2
10004214:	1884703a 	and	r2,r3,r2
10004218:	1001703a 	wrctl	status,r2
  
  return context;
1000421c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10004220:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10004224:	e0bfff17 	ldw	r2,-4(fp)
10004228:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000422c:	e0bffd17 	ldw	r2,-12(fp)
10004230:	10800017 	ldw	r2,0(r2)
10004234:	e0fffd17 	ldw	r3,-12(fp)
10004238:	18c00117 	ldw	r3,4(r3)
1000423c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10004240:	e0bffd17 	ldw	r2,-12(fp)
10004244:	10800117 	ldw	r2,4(r2)
10004248:	e0fffd17 	ldw	r3,-12(fp)
1000424c:	18c00017 	ldw	r3,0(r3)
10004250:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10004254:	e0bffd17 	ldw	r2,-12(fp)
10004258:	e0fffd17 	ldw	r3,-12(fp)
1000425c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10004260:	e0bffd17 	ldw	r2,-12(fp)
10004264:	e0fffd17 	ldw	r3,-12(fp)
10004268:	10c00015 	stw	r3,0(r2)
1000426c:	e0bffb17 	ldw	r2,-20(fp)
10004270:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004274:	e0bffe17 	ldw	r2,-8(fp)
10004278:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000427c:	0001883a 	nop
10004280:	e037883a 	mov	sp,fp
10004284:	df000017 	ldw	fp,0(sp)
10004288:	dec00104 	addi	sp,sp,4
1000428c:	f800283a 	ret

10004290 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10004290:	defffb04 	addi	sp,sp,-20
10004294:	dfc00415 	stw	ra,16(sp)
10004298:	df000315 	stw	fp,12(sp)
1000429c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100042a0:	d0a00717 	ldw	r2,-32740(gp)
100042a4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100042a8:	d0a6e617 	ldw	r2,-25704(gp)
100042ac:	10800044 	addi	r2,r2,1
100042b0:	d0a6e615 	stw	r2,-25704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100042b4:	00002e06 	br	10004370 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100042b8:	e0bffd17 	ldw	r2,-12(fp)
100042bc:	10800017 	ldw	r2,0(r2)
100042c0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100042c4:	e0bffd17 	ldw	r2,-12(fp)
100042c8:	10800403 	ldbu	r2,16(r2)
100042cc:	10803fcc 	andi	r2,r2,255
100042d0:	10000426 	beq	r2,zero,100042e4 <alt_tick+0x54>
100042d4:	d0a6e617 	ldw	r2,-25704(gp)
100042d8:	1000021e 	bne	r2,zero,100042e4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
100042dc:	e0bffd17 	ldw	r2,-12(fp)
100042e0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
100042e4:	e0bffd17 	ldw	r2,-12(fp)
100042e8:	10800217 	ldw	r2,8(r2)
100042ec:	d0e6e617 	ldw	r3,-25704(gp)
100042f0:	18801d36 	bltu	r3,r2,10004368 <alt_tick+0xd8>
100042f4:	e0bffd17 	ldw	r2,-12(fp)
100042f8:	10800403 	ldbu	r2,16(r2)
100042fc:	10803fcc 	andi	r2,r2,255
10004300:	1000191e 	bne	r2,zero,10004368 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10004304:	e0bffd17 	ldw	r2,-12(fp)
10004308:	10800317 	ldw	r2,12(r2)
1000430c:	e0fffd17 	ldw	r3,-12(fp)
10004310:	18c00517 	ldw	r3,20(r3)
10004314:	1809883a 	mov	r4,r3
10004318:	103ee83a 	callr	r2
1000431c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10004320:	e0bfff17 	ldw	r2,-4(fp)
10004324:	1000031e 	bne	r2,zero,10004334 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10004328:	e13ffd17 	ldw	r4,-12(fp)
1000432c:	00041f40 	call	100041f4 <alt_alarm_stop>
10004330:	00000d06 	br	10004368 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10004334:	e0bffd17 	ldw	r2,-12(fp)
10004338:	10c00217 	ldw	r3,8(r2)
1000433c:	e0bfff17 	ldw	r2,-4(fp)
10004340:	1887883a 	add	r3,r3,r2
10004344:	e0bffd17 	ldw	r2,-12(fp)
10004348:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1000434c:	e0bffd17 	ldw	r2,-12(fp)
10004350:	10c00217 	ldw	r3,8(r2)
10004354:	d0a6e617 	ldw	r2,-25704(gp)
10004358:	1880032e 	bgeu	r3,r2,10004368 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1000435c:	e0bffd17 	ldw	r2,-12(fp)
10004360:	00c00044 	movi	r3,1
10004364:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10004368:	e0bffe17 	ldw	r2,-8(fp)
1000436c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10004370:	e0fffd17 	ldw	r3,-12(fp)
10004374:	d0a00704 	addi	r2,gp,-32740
10004378:	18bfcf1e 	bne	r3,r2,100042b8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000437c:	0001883a 	nop
}
10004380:	0001883a 	nop
10004384:	e037883a 	mov	sp,fp
10004388:	dfc00117 	ldw	ra,4(sp)
1000438c:	df000017 	ldw	fp,0(sp)
10004390:	dec00204 	addi	sp,sp,8
10004394:	f800283a 	ret

10004398 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10004398:	deffff04 	addi	sp,sp,-4
1000439c:	df000015 	stw	fp,0(sp)
100043a0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100043a4:	000170fa 	wrctl	ienable,zero
}
100043a8:	0001883a 	nop
100043ac:	e037883a 	mov	sp,fp
100043b0:	df000017 	ldw	fp,0(sp)
100043b4:	dec00104 	addi	sp,sp,4
100043b8:	f800283a 	ret

100043bc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100043bc:	defffb04 	addi	sp,sp,-20
100043c0:	dfc00415 	stw	ra,16(sp)
100043c4:	df000315 	stw	fp,12(sp)
100043c8:	df000304 	addi	fp,sp,12
100043cc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100043d0:	d0a00017 	ldw	r2,-32768(gp)
100043d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100043d8:	00003106 	br	100044a0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
100043dc:	e0bffd17 	ldw	r2,-12(fp)
100043e0:	10800217 	ldw	r2,8(r2)
100043e4:	1009883a 	mov	r4,r2
100043e8:	0005ef40 	call	10005ef4 <strlen>
100043ec:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100043f0:	e0bffd17 	ldw	r2,-12(fp)
100043f4:	10c00217 	ldw	r3,8(r2)
100043f8:	e0bffe17 	ldw	r2,-8(fp)
100043fc:	10bfffc4 	addi	r2,r2,-1
10004400:	1885883a 	add	r2,r3,r2
10004404:	10800003 	ldbu	r2,0(r2)
10004408:	10803fcc 	andi	r2,r2,255
1000440c:	1080201c 	xori	r2,r2,128
10004410:	10bfe004 	addi	r2,r2,-128
10004414:	10800bd8 	cmpnei	r2,r2,47
10004418:	1000031e 	bne	r2,zero,10004428 <alt_find_file+0x6c>
    {
      len -= 1;
1000441c:	e0bffe17 	ldw	r2,-8(fp)
10004420:	10bfffc4 	addi	r2,r2,-1
10004424:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10004428:	e0bffe17 	ldw	r2,-8(fp)
1000442c:	e0ffff17 	ldw	r3,-4(fp)
10004430:	1885883a 	add	r2,r3,r2
10004434:	10800003 	ldbu	r2,0(r2)
10004438:	10803fcc 	andi	r2,r2,255
1000443c:	1080201c 	xori	r2,r2,128
10004440:	10bfe004 	addi	r2,r2,-128
10004444:	10800be0 	cmpeqi	r2,r2,47
10004448:	1000081e 	bne	r2,zero,1000446c <alt_find_file+0xb0>
1000444c:	e0bffe17 	ldw	r2,-8(fp)
10004450:	e0ffff17 	ldw	r3,-4(fp)
10004454:	1885883a 	add	r2,r3,r2
10004458:	10800003 	ldbu	r2,0(r2)
1000445c:	10803fcc 	andi	r2,r2,255
10004460:	1080201c 	xori	r2,r2,128
10004464:	10bfe004 	addi	r2,r2,-128
10004468:	10000a1e 	bne	r2,zero,10004494 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
1000446c:	e0bffd17 	ldw	r2,-12(fp)
10004470:	10800217 	ldw	r2,8(r2)
10004474:	e0fffe17 	ldw	r3,-8(fp)
10004478:	180d883a 	mov	r6,r3
1000447c:	e17fff17 	ldw	r5,-4(fp)
10004480:	1009883a 	mov	r4,r2
10004484:	00055400 	call	10005540 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10004488:	1000021e 	bne	r2,zero,10004494 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1000448c:	e0bffd17 	ldw	r2,-12(fp)
10004490:	00000706 	br	100044b0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10004494:	e0bffd17 	ldw	r2,-12(fp)
10004498:	10800017 	ldw	r2,0(r2)
1000449c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100044a0:	e0fffd17 	ldw	r3,-12(fp)
100044a4:	d0a00004 	addi	r2,gp,-32768
100044a8:	18bfcc1e 	bne	r3,r2,100043dc <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100044ac:	0005883a 	mov	r2,zero
}
100044b0:	e037883a 	mov	sp,fp
100044b4:	dfc00117 	ldw	ra,4(sp)
100044b8:	df000017 	ldw	fp,0(sp)
100044bc:	dec00204 	addi	sp,sp,8
100044c0:	f800283a 	ret

100044c4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100044c4:	defffc04 	addi	sp,sp,-16
100044c8:	df000315 	stw	fp,12(sp)
100044cc:	df000304 	addi	fp,sp,12
100044d0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
100044d4:	00bffa04 	movi	r2,-24
100044d8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100044dc:	e03ffd15 	stw	zero,-12(fp)
100044e0:	00001906 	br	10004548 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
100044e4:	00840774 	movhi	r2,4125
100044e8:	10aca904 	addi	r2,r2,-19804
100044ec:	e0fffd17 	ldw	r3,-12(fp)
100044f0:	18c00324 	muli	r3,r3,12
100044f4:	10c5883a 	add	r2,r2,r3
100044f8:	10800017 	ldw	r2,0(r2)
100044fc:	10000f1e 	bne	r2,zero,1000453c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
10004500:	00840774 	movhi	r2,4125
10004504:	10aca904 	addi	r2,r2,-19804
10004508:	e0fffd17 	ldw	r3,-12(fp)
1000450c:	18c00324 	muli	r3,r3,12
10004510:	10c5883a 	add	r2,r2,r3
10004514:	e0ffff17 	ldw	r3,-4(fp)
10004518:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000451c:	d0e00417 	ldw	r3,-32752(gp)
10004520:	e0bffd17 	ldw	r2,-12(fp)
10004524:	1880020e 	bge	r3,r2,10004530 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
10004528:	e0bffd17 	ldw	r2,-12(fp)
1000452c:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
10004530:	e0bffd17 	ldw	r2,-12(fp)
10004534:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10004538:	00000606 	br	10004554 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000453c:	e0bffd17 	ldw	r2,-12(fp)
10004540:	10800044 	addi	r2,r2,1
10004544:	e0bffd15 	stw	r2,-12(fp)
10004548:	e0bffd17 	ldw	r2,-12(fp)
1000454c:	10800810 	cmplti	r2,r2,32
10004550:	103fe41e 	bne	r2,zero,100044e4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10004554:	e0bffe17 	ldw	r2,-8(fp)
}
10004558:	e037883a 	mov	sp,fp
1000455c:	df000017 	ldw	fp,0(sp)
10004560:	dec00104 	addi	sp,sp,4
10004564:	f800283a 	ret

10004568 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10004568:	defffb04 	addi	sp,sp,-20
1000456c:	df000415 	stw	fp,16(sp)
10004570:	df000404 	addi	fp,sp,16
10004574:	e13ffe15 	stw	r4,-8(fp)
10004578:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
1000457c:	e0bfff17 	ldw	r2,-4(fp)
10004580:	10840070 	cmpltui	r2,r2,4097
10004584:	1000021e 	bne	r2,zero,10004590 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
10004588:	00840004 	movi	r2,4096
1000458c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
10004590:	e0fffe17 	ldw	r3,-8(fp)
10004594:	e0bfff17 	ldw	r2,-4(fp)
10004598:	1885883a 	add	r2,r3,r2
1000459c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
100045a0:	e0bffe17 	ldw	r2,-8(fp)
100045a4:	e0bffc15 	stw	r2,-16(fp)
100045a8:	00000506 	br	100045c0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
100045ac:	e0bffc17 	ldw	r2,-16(fp)
100045b0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
100045b4:	e0bffc17 	ldw	r2,-16(fp)
100045b8:	10800804 	addi	r2,r2,32
100045bc:	e0bffc15 	stw	r2,-16(fp)
100045c0:	e0fffc17 	ldw	r3,-16(fp)
100045c4:	e0bffd17 	ldw	r2,-12(fp)
100045c8:	18bff836 	bltu	r3,r2,100045ac <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
100045cc:	e0bffe17 	ldw	r2,-8(fp)
100045d0:	108007cc 	andi	r2,r2,31
100045d4:	10000226 	beq	r2,zero,100045e0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
100045d8:	e0bffc17 	ldw	r2,-16(fp)
100045dc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
100045e0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
100045e4:	0001883a 	nop
100045e8:	e037883a 	mov	sp,fp
100045ec:	df000017 	ldw	fp,0(sp)
100045f0:	dec00104 	addi	sp,sp,4
100045f4:	f800283a 	ret

100045f8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
100045f8:	defffe04 	addi	sp,sp,-8
100045fc:	df000115 	stw	fp,4(sp)
10004600:	df000104 	addi	fp,sp,4
10004604:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10004608:	e0bfff17 	ldw	r2,-4(fp)
1000460c:	10bffe84 	addi	r2,r2,-6
10004610:	10c00428 	cmpgeui	r3,r2,16
10004614:	18001a1e 	bne	r3,zero,10004680 <alt_exception_cause_generated_bad_addr+0x88>
10004618:	100690ba 	slli	r3,r2,2
1000461c:	00840034 	movhi	r2,4096
10004620:	10918c04 	addi	r2,r2,17968
10004624:	1885883a 	add	r2,r3,r2
10004628:	10800017 	ldw	r2,0(r2)
1000462c:	1000683a 	jmp	r2
10004630:	10004670 	cmpltui	zero,r2,281
10004634:	10004670 	cmpltui	zero,r2,281
10004638:	10004680 	call	11000468 <_gp+0xe2c818>
1000463c:	10004680 	call	11000468 <_gp+0xe2c818>
10004640:	10004680 	call	11000468 <_gp+0xe2c818>
10004644:	10004670 	cmpltui	zero,r2,281
10004648:	10004678 	rdprs	zero,r2,281
1000464c:	10004680 	call	11000468 <_gp+0xe2c818>
10004650:	10004670 	cmpltui	zero,r2,281
10004654:	10004670 	cmpltui	zero,r2,281
10004658:	10004680 	call	11000468 <_gp+0xe2c818>
1000465c:	10004670 	cmpltui	zero,r2,281
10004660:	10004678 	rdprs	zero,r2,281
10004664:	10004680 	call	11000468 <_gp+0xe2c818>
10004668:	10004680 	call	11000468 <_gp+0xe2c818>
1000466c:	10004670 	cmpltui	zero,r2,281
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10004670:	00800044 	movi	r2,1
10004674:	00000306 	br	10004684 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10004678:	0005883a 	mov	r2,zero
1000467c:	00000106 	br	10004684 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10004680:	0005883a 	mov	r2,zero
  }
}
10004684:	e037883a 	mov	sp,fp
10004688:	df000017 	ldw	fp,0(sp)
1000468c:	dec00104 	addi	sp,sp,4
10004690:	f800283a 	ret

10004694 <atexit>:
10004694:	200b883a 	mov	r5,r4
10004698:	000f883a 	mov	r7,zero
1000469c:	000d883a 	mov	r6,zero
100046a0:	0009883a 	mov	r4,zero
100046a4:	00060e01 	jmpi	100060e0 <__register_exitproc>

100046a8 <exit>:
100046a8:	defffe04 	addi	sp,sp,-8
100046ac:	000b883a 	mov	r5,zero
100046b0:	dc000015 	stw	r16,0(sp)
100046b4:	dfc00115 	stw	ra,4(sp)
100046b8:	2021883a 	mov	r16,r4
100046bc:	00061f80 	call	100061f8 <__call_exitprocs>
100046c0:	00840774 	movhi	r2,4125
100046c4:	10af1d04 	addi	r2,r2,-17292
100046c8:	11000017 	ldw	r4,0(r2)
100046cc:	20800f17 	ldw	r2,60(r4)
100046d0:	10000126 	beq	r2,zero,100046d8 <exit+0x30>
100046d4:	103ee83a 	callr	r2
100046d8:	8009883a 	mov	r4,r16
100046dc:	00078780 	call	10007878 <_exit>

100046e0 <_fputs_r>:
100046e0:	defff804 	addi	sp,sp,-32
100046e4:	dc400615 	stw	r17,24(sp)
100046e8:	2023883a 	mov	r17,r4
100046ec:	2809883a 	mov	r4,r5
100046f0:	dc000515 	stw	r16,20(sp)
100046f4:	dfc00715 	stw	ra,28(sp)
100046f8:	3021883a 	mov	r16,r6
100046fc:	d9400315 	stw	r5,12(sp)
10004700:	0005ef40 	call	10005ef4 <strlen>
10004704:	d8800215 	stw	r2,8(sp)
10004708:	d8800415 	stw	r2,16(sp)
1000470c:	d8800304 	addi	r2,sp,12
10004710:	d8800015 	stw	r2,0(sp)
10004714:	00800044 	movi	r2,1
10004718:	d8800115 	stw	r2,4(sp)
1000471c:	88000226 	beq	r17,zero,10004728 <_fputs_r+0x48>
10004720:	88800e17 	ldw	r2,56(r17)
10004724:	10001226 	beq	r2,zero,10004770 <_fputs_r+0x90>
10004728:	8080030b 	ldhu	r2,12(r16)
1000472c:	10c8000c 	andi	r3,r2,8192
10004730:	1800061e 	bne	r3,zero,1000474c <_fputs_r+0x6c>
10004734:	81001917 	ldw	r4,100(r16)
10004738:	00f7ffc4 	movi	r3,-8193
1000473c:	10880014 	ori	r2,r2,8192
10004740:	20c6703a 	and	r3,r4,r3
10004744:	8080030d 	sth	r2,12(r16)
10004748:	80c01915 	stw	r3,100(r16)
1000474c:	d80d883a 	mov	r6,sp
10004750:	800b883a 	mov	r5,r16
10004754:	8809883a 	mov	r4,r17
10004758:	00047940 	call	10004794 <__sfvwrite_r>
1000475c:	dfc00717 	ldw	ra,28(sp)
10004760:	dc400617 	ldw	r17,24(sp)
10004764:	dc000517 	ldw	r16,20(sp)
10004768:	dec00804 	addi	sp,sp,32
1000476c:	f800283a 	ret
10004770:	8809883a 	mov	r4,r17
10004774:	00069700 	call	10006970 <__sinit>
10004778:	003feb06 	br	10004728 <_fputs_r+0x48>

1000477c <fputs>:
1000477c:	00840774 	movhi	r2,4125
10004780:	10af1e04 	addi	r2,r2,-17288
10004784:	280d883a 	mov	r6,r5
10004788:	200b883a 	mov	r5,r4
1000478c:	11000017 	ldw	r4,0(r2)
10004790:	00046e01 	jmpi	100046e0 <_fputs_r>

10004794 <__sfvwrite_r>:
10004794:	30800217 	ldw	r2,8(r6)
10004798:	10006726 	beq	r2,zero,10004938 <__sfvwrite_r+0x1a4>
1000479c:	28c0030b 	ldhu	r3,12(r5)
100047a0:	defff404 	addi	sp,sp,-48
100047a4:	dd400715 	stw	r21,28(sp)
100047a8:	dd000615 	stw	r20,24(sp)
100047ac:	dc000215 	stw	r16,8(sp)
100047b0:	dfc00b15 	stw	ra,44(sp)
100047b4:	df000a15 	stw	fp,40(sp)
100047b8:	ddc00915 	stw	r23,36(sp)
100047bc:	dd800815 	stw	r22,32(sp)
100047c0:	dcc00515 	stw	r19,20(sp)
100047c4:	dc800415 	stw	r18,16(sp)
100047c8:	dc400315 	stw	r17,12(sp)
100047cc:	1880020c 	andi	r2,r3,8
100047d0:	2821883a 	mov	r16,r5
100047d4:	202b883a 	mov	r21,r4
100047d8:	3029883a 	mov	r20,r6
100047dc:	10002726 	beq	r2,zero,1000487c <__sfvwrite_r+0xe8>
100047e0:	28800417 	ldw	r2,16(r5)
100047e4:	10002526 	beq	r2,zero,1000487c <__sfvwrite_r+0xe8>
100047e8:	1880008c 	andi	r2,r3,2
100047ec:	a4400017 	ldw	r17,0(r20)
100047f0:	10002a26 	beq	r2,zero,1000489c <__sfvwrite_r+0x108>
100047f4:	05a00034 	movhi	r22,32768
100047f8:	0027883a 	mov	r19,zero
100047fc:	0025883a 	mov	r18,zero
10004800:	b5bf0004 	addi	r22,r22,-1024
10004804:	980d883a 	mov	r6,r19
10004808:	a809883a 	mov	r4,r21
1000480c:	90004626 	beq	r18,zero,10004928 <__sfvwrite_r+0x194>
10004810:	900f883a 	mov	r7,r18
10004814:	b480022e 	bgeu	r22,r18,10004820 <__sfvwrite_r+0x8c>
10004818:	01e00034 	movhi	r7,32768
1000481c:	39ff0004 	addi	r7,r7,-1024
10004820:	80800917 	ldw	r2,36(r16)
10004824:	81400717 	ldw	r5,28(r16)
10004828:	103ee83a 	callr	r2
1000482c:	0080570e 	bge	zero,r2,1000498c <__sfvwrite_r+0x1f8>
10004830:	a0c00217 	ldw	r3,8(r20)
10004834:	98a7883a 	add	r19,r19,r2
10004838:	90a5c83a 	sub	r18,r18,r2
1000483c:	1885c83a 	sub	r2,r3,r2
10004840:	a0800215 	stw	r2,8(r20)
10004844:	103fef1e 	bne	r2,zero,10004804 <__sfvwrite_r+0x70>
10004848:	0005883a 	mov	r2,zero
1000484c:	dfc00b17 	ldw	ra,44(sp)
10004850:	df000a17 	ldw	fp,40(sp)
10004854:	ddc00917 	ldw	r23,36(sp)
10004858:	dd800817 	ldw	r22,32(sp)
1000485c:	dd400717 	ldw	r21,28(sp)
10004860:	dd000617 	ldw	r20,24(sp)
10004864:	dcc00517 	ldw	r19,20(sp)
10004868:	dc800417 	ldw	r18,16(sp)
1000486c:	dc400317 	ldw	r17,12(sp)
10004870:	dc000217 	ldw	r16,8(sp)
10004874:	dec00c04 	addi	sp,sp,48
10004878:	f800283a 	ret
1000487c:	800b883a 	mov	r5,r16
10004880:	a809883a 	mov	r4,r21
10004884:	0005f8c0 	call	10005f8c <__swsetup_r>
10004888:	1000eb1e 	bne	r2,zero,10004c38 <__sfvwrite_r+0x4a4>
1000488c:	80c0030b 	ldhu	r3,12(r16)
10004890:	a4400017 	ldw	r17,0(r20)
10004894:	1880008c 	andi	r2,r3,2
10004898:	103fd61e 	bne	r2,zero,100047f4 <__sfvwrite_r+0x60>
1000489c:	1880004c 	andi	r2,r3,1
100048a0:	10003f1e 	bne	r2,zero,100049a0 <__sfvwrite_r+0x20c>
100048a4:	0039883a 	mov	fp,zero
100048a8:	0025883a 	mov	r18,zero
100048ac:	90001a26 	beq	r18,zero,10004918 <__sfvwrite_r+0x184>
100048b0:	1880800c 	andi	r2,r3,512
100048b4:	84c00217 	ldw	r19,8(r16)
100048b8:	10002126 	beq	r2,zero,10004940 <__sfvwrite_r+0x1ac>
100048bc:	982f883a 	mov	r23,r19
100048c0:	94c09336 	bltu	r18,r19,10004b10 <__sfvwrite_r+0x37c>
100048c4:	1881200c 	andi	r2,r3,1152
100048c8:	10009e1e 	bne	r2,zero,10004b44 <__sfvwrite_r+0x3b0>
100048cc:	81000017 	ldw	r4,0(r16)
100048d0:	b80d883a 	mov	r6,r23
100048d4:	e00b883a 	mov	r5,fp
100048d8:	00057040 	call	10005704 <memmove>
100048dc:	80c00217 	ldw	r3,8(r16)
100048e0:	81000017 	ldw	r4,0(r16)
100048e4:	9005883a 	mov	r2,r18
100048e8:	1ce7c83a 	sub	r19,r3,r19
100048ec:	25cf883a 	add	r7,r4,r23
100048f0:	84c00215 	stw	r19,8(r16)
100048f4:	81c00015 	stw	r7,0(r16)
100048f8:	a0c00217 	ldw	r3,8(r20)
100048fc:	e0b9883a 	add	fp,fp,r2
10004900:	90a5c83a 	sub	r18,r18,r2
10004904:	18a7c83a 	sub	r19,r3,r2
10004908:	a4c00215 	stw	r19,8(r20)
1000490c:	983fce26 	beq	r19,zero,10004848 <__sfvwrite_r+0xb4>
10004910:	80c0030b 	ldhu	r3,12(r16)
10004914:	903fe61e 	bne	r18,zero,100048b0 <__sfvwrite_r+0x11c>
10004918:	8f000017 	ldw	fp,0(r17)
1000491c:	8c800117 	ldw	r18,4(r17)
10004920:	8c400204 	addi	r17,r17,8
10004924:	003fe106 	br	100048ac <__sfvwrite_r+0x118>
10004928:	8cc00017 	ldw	r19,0(r17)
1000492c:	8c800117 	ldw	r18,4(r17)
10004930:	8c400204 	addi	r17,r17,8
10004934:	003fb306 	br	10004804 <__sfvwrite_r+0x70>
10004938:	0005883a 	mov	r2,zero
1000493c:	f800283a 	ret
10004940:	81000017 	ldw	r4,0(r16)
10004944:	80800417 	ldw	r2,16(r16)
10004948:	11005736 	bltu	r2,r4,10004aa8 <__sfvwrite_r+0x314>
1000494c:	85c00517 	ldw	r23,20(r16)
10004950:	95c05536 	bltu	r18,r23,10004aa8 <__sfvwrite_r+0x314>
10004954:	00a00034 	movhi	r2,32768
10004958:	10bfffc4 	addi	r2,r2,-1
1000495c:	9009883a 	mov	r4,r18
10004960:	1480012e 	bgeu	r2,r18,10004968 <__sfvwrite_r+0x1d4>
10004964:	1009883a 	mov	r4,r2
10004968:	b80b883a 	mov	r5,r23
1000496c:	00076c40 	call	100076c4 <__divsi3>
10004970:	15cf383a 	mul	r7,r2,r23
10004974:	81400717 	ldw	r5,28(r16)
10004978:	80800917 	ldw	r2,36(r16)
1000497c:	e00d883a 	mov	r6,fp
10004980:	a809883a 	mov	r4,r21
10004984:	103ee83a 	callr	r2
10004988:	00bfdb16 	blt	zero,r2,100048f8 <__sfvwrite_r+0x164>
1000498c:	8080030b 	ldhu	r2,12(r16)
10004990:	10801014 	ori	r2,r2,64
10004994:	8080030d 	sth	r2,12(r16)
10004998:	00bfffc4 	movi	r2,-1
1000499c:	003fab06 	br	1000484c <__sfvwrite_r+0xb8>
100049a0:	0027883a 	mov	r19,zero
100049a4:	0011883a 	mov	r8,zero
100049a8:	0039883a 	mov	fp,zero
100049ac:	0025883a 	mov	r18,zero
100049b0:	90001f26 	beq	r18,zero,10004a30 <__sfvwrite_r+0x29c>
100049b4:	40005a26 	beq	r8,zero,10004b20 <__sfvwrite_r+0x38c>
100049b8:	982d883a 	mov	r22,r19
100049bc:	94c0012e 	bgeu	r18,r19,100049c4 <__sfvwrite_r+0x230>
100049c0:	902d883a 	mov	r22,r18
100049c4:	81000017 	ldw	r4,0(r16)
100049c8:	80800417 	ldw	r2,16(r16)
100049cc:	b02f883a 	mov	r23,r22
100049d0:	81c00517 	ldw	r7,20(r16)
100049d4:	1100032e 	bgeu	r2,r4,100049e4 <__sfvwrite_r+0x250>
100049d8:	80c00217 	ldw	r3,8(r16)
100049dc:	38c7883a 	add	r3,r7,r3
100049e0:	1d801816 	blt	r3,r22,10004a44 <__sfvwrite_r+0x2b0>
100049e4:	b1c03e16 	blt	r22,r7,10004ae0 <__sfvwrite_r+0x34c>
100049e8:	80800917 	ldw	r2,36(r16)
100049ec:	81400717 	ldw	r5,28(r16)
100049f0:	e00d883a 	mov	r6,fp
100049f4:	da000115 	stw	r8,4(sp)
100049f8:	a809883a 	mov	r4,r21
100049fc:	103ee83a 	callr	r2
10004a00:	102f883a 	mov	r23,r2
10004a04:	da000117 	ldw	r8,4(sp)
10004a08:	00bfe00e 	bge	zero,r2,1000498c <__sfvwrite_r+0x1f8>
10004a0c:	9de7c83a 	sub	r19,r19,r23
10004a10:	98001f26 	beq	r19,zero,10004a90 <__sfvwrite_r+0x2fc>
10004a14:	a0800217 	ldw	r2,8(r20)
10004a18:	e5f9883a 	add	fp,fp,r23
10004a1c:	95e5c83a 	sub	r18,r18,r23
10004a20:	15efc83a 	sub	r23,r2,r23
10004a24:	a5c00215 	stw	r23,8(r20)
10004a28:	b83f8726 	beq	r23,zero,10004848 <__sfvwrite_r+0xb4>
10004a2c:	903fe11e 	bne	r18,zero,100049b4 <__sfvwrite_r+0x220>
10004a30:	8f000017 	ldw	fp,0(r17)
10004a34:	8c800117 	ldw	r18,4(r17)
10004a38:	0011883a 	mov	r8,zero
10004a3c:	8c400204 	addi	r17,r17,8
10004a40:	003fdb06 	br	100049b0 <__sfvwrite_r+0x21c>
10004a44:	180d883a 	mov	r6,r3
10004a48:	e00b883a 	mov	r5,fp
10004a4c:	da000115 	stw	r8,4(sp)
10004a50:	d8c00015 	stw	r3,0(sp)
10004a54:	00057040 	call	10005704 <memmove>
10004a58:	d8c00017 	ldw	r3,0(sp)
10004a5c:	80800017 	ldw	r2,0(r16)
10004a60:	800b883a 	mov	r5,r16
10004a64:	a809883a 	mov	r4,r21
10004a68:	10c5883a 	add	r2,r2,r3
10004a6c:	80800015 	stw	r2,0(r16)
10004a70:	d8c00015 	stw	r3,0(sp)
10004a74:	00065940 	call	10006594 <_fflush_r>
10004a78:	d8c00017 	ldw	r3,0(sp)
10004a7c:	da000117 	ldw	r8,4(sp)
10004a80:	103fc21e 	bne	r2,zero,1000498c <__sfvwrite_r+0x1f8>
10004a84:	182f883a 	mov	r23,r3
10004a88:	9de7c83a 	sub	r19,r19,r23
10004a8c:	983fe11e 	bne	r19,zero,10004a14 <__sfvwrite_r+0x280>
10004a90:	800b883a 	mov	r5,r16
10004a94:	a809883a 	mov	r4,r21
10004a98:	00065940 	call	10006594 <_fflush_r>
10004a9c:	103fbb1e 	bne	r2,zero,1000498c <__sfvwrite_r+0x1f8>
10004aa0:	0011883a 	mov	r8,zero
10004aa4:	003fdb06 	br	10004a14 <__sfvwrite_r+0x280>
10004aa8:	94c0012e 	bgeu	r18,r19,10004ab0 <__sfvwrite_r+0x31c>
10004aac:	9027883a 	mov	r19,r18
10004ab0:	980d883a 	mov	r6,r19
10004ab4:	e00b883a 	mov	r5,fp
10004ab8:	00057040 	call	10005704 <memmove>
10004abc:	80800217 	ldw	r2,8(r16)
10004ac0:	80c00017 	ldw	r3,0(r16)
10004ac4:	14c5c83a 	sub	r2,r2,r19
10004ac8:	1cc7883a 	add	r3,r3,r19
10004acc:	80800215 	stw	r2,8(r16)
10004ad0:	80c00015 	stw	r3,0(r16)
10004ad4:	10004326 	beq	r2,zero,10004be4 <__sfvwrite_r+0x450>
10004ad8:	9805883a 	mov	r2,r19
10004adc:	003f8606 	br	100048f8 <__sfvwrite_r+0x164>
10004ae0:	b00d883a 	mov	r6,r22
10004ae4:	e00b883a 	mov	r5,fp
10004ae8:	da000115 	stw	r8,4(sp)
10004aec:	00057040 	call	10005704 <memmove>
10004af0:	80800217 	ldw	r2,8(r16)
10004af4:	80c00017 	ldw	r3,0(r16)
10004af8:	da000117 	ldw	r8,4(sp)
10004afc:	1585c83a 	sub	r2,r2,r22
10004b00:	1dad883a 	add	r22,r3,r22
10004b04:	80800215 	stw	r2,8(r16)
10004b08:	85800015 	stw	r22,0(r16)
10004b0c:	003fbf06 	br	10004a0c <__sfvwrite_r+0x278>
10004b10:	81000017 	ldw	r4,0(r16)
10004b14:	9027883a 	mov	r19,r18
10004b18:	902f883a 	mov	r23,r18
10004b1c:	003f6c06 	br	100048d0 <__sfvwrite_r+0x13c>
10004b20:	900d883a 	mov	r6,r18
10004b24:	01400284 	movi	r5,10
10004b28:	e009883a 	mov	r4,fp
10004b2c:	000545c0 	call	1000545c <memchr>
10004b30:	10003e26 	beq	r2,zero,10004c2c <__sfvwrite_r+0x498>
10004b34:	10800044 	addi	r2,r2,1
10004b38:	1727c83a 	sub	r19,r2,fp
10004b3c:	02000044 	movi	r8,1
10004b40:	003f9d06 	br	100049b8 <__sfvwrite_r+0x224>
10004b44:	80800517 	ldw	r2,20(r16)
10004b48:	81400417 	ldw	r5,16(r16)
10004b4c:	81c00017 	ldw	r7,0(r16)
10004b50:	10a7883a 	add	r19,r2,r2
10004b54:	9885883a 	add	r2,r19,r2
10004b58:	1026d7fa 	srli	r19,r2,31
10004b5c:	396dc83a 	sub	r22,r7,r5
10004b60:	b1000044 	addi	r4,r22,1
10004b64:	9885883a 	add	r2,r19,r2
10004b68:	1027d07a 	srai	r19,r2,1
10004b6c:	2485883a 	add	r2,r4,r18
10004b70:	980d883a 	mov	r6,r19
10004b74:	9880022e 	bgeu	r19,r2,10004b80 <__sfvwrite_r+0x3ec>
10004b78:	1027883a 	mov	r19,r2
10004b7c:	100d883a 	mov	r6,r2
10004b80:	18c1000c 	andi	r3,r3,1024
10004b84:	18001c26 	beq	r3,zero,10004bf8 <__sfvwrite_r+0x464>
10004b88:	300b883a 	mov	r5,r6
10004b8c:	a809883a 	mov	r4,r21
10004b90:	0004c500 	call	10004c50 <_malloc_r>
10004b94:	102f883a 	mov	r23,r2
10004b98:	10002926 	beq	r2,zero,10004c40 <__sfvwrite_r+0x4ac>
10004b9c:	81400417 	ldw	r5,16(r16)
10004ba0:	b00d883a 	mov	r6,r22
10004ba4:	1009883a 	mov	r4,r2
10004ba8:	00055bc0 	call	100055bc <memcpy>
10004bac:	8080030b 	ldhu	r2,12(r16)
10004bb0:	00fedfc4 	movi	r3,-1153
10004bb4:	10c4703a 	and	r2,r2,r3
10004bb8:	10802014 	ori	r2,r2,128
10004bbc:	8080030d 	sth	r2,12(r16)
10004bc0:	bd89883a 	add	r4,r23,r22
10004bc4:	9d8fc83a 	sub	r7,r19,r22
10004bc8:	85c00415 	stw	r23,16(r16)
10004bcc:	84c00515 	stw	r19,20(r16)
10004bd0:	81000015 	stw	r4,0(r16)
10004bd4:	9027883a 	mov	r19,r18
10004bd8:	81c00215 	stw	r7,8(r16)
10004bdc:	902f883a 	mov	r23,r18
10004be0:	003f3b06 	br	100048d0 <__sfvwrite_r+0x13c>
10004be4:	800b883a 	mov	r5,r16
10004be8:	a809883a 	mov	r4,r21
10004bec:	00065940 	call	10006594 <_fflush_r>
10004bf0:	103fb926 	beq	r2,zero,10004ad8 <__sfvwrite_r+0x344>
10004bf4:	003f6506 	br	1000498c <__sfvwrite_r+0x1f8>
10004bf8:	a809883a 	mov	r4,r21
10004bfc:	00058600 	call	10005860 <_realloc_r>
10004c00:	102f883a 	mov	r23,r2
10004c04:	103fee1e 	bne	r2,zero,10004bc0 <__sfvwrite_r+0x42c>
10004c08:	81400417 	ldw	r5,16(r16)
10004c0c:	a809883a 	mov	r4,r21
10004c10:	0006ae40 	call	10006ae4 <_free_r>
10004c14:	8080030b 	ldhu	r2,12(r16)
10004c18:	00ffdfc4 	movi	r3,-129
10004c1c:	1884703a 	and	r2,r3,r2
10004c20:	00c00304 	movi	r3,12
10004c24:	a8c00015 	stw	r3,0(r21)
10004c28:	003f5906 	br	10004990 <__sfvwrite_r+0x1fc>
10004c2c:	94c00044 	addi	r19,r18,1
10004c30:	02000044 	movi	r8,1
10004c34:	003f6006 	br	100049b8 <__sfvwrite_r+0x224>
10004c38:	00bfffc4 	movi	r2,-1
10004c3c:	003f0306 	br	1000484c <__sfvwrite_r+0xb8>
10004c40:	00800304 	movi	r2,12
10004c44:	a8800015 	stw	r2,0(r21)
10004c48:	8080030b 	ldhu	r2,12(r16)
10004c4c:	003f5006 	br	10004990 <__sfvwrite_r+0x1fc>

10004c50 <_malloc_r>:
10004c50:	defff504 	addi	sp,sp,-44
10004c54:	dc800315 	stw	r18,12(sp)
10004c58:	dfc00a15 	stw	ra,40(sp)
10004c5c:	df000915 	stw	fp,36(sp)
10004c60:	ddc00815 	stw	r23,32(sp)
10004c64:	dd800715 	stw	r22,28(sp)
10004c68:	dd400615 	stw	r21,24(sp)
10004c6c:	dd000515 	stw	r20,20(sp)
10004c70:	dcc00415 	stw	r19,16(sp)
10004c74:	dc400215 	stw	r17,8(sp)
10004c78:	dc000115 	stw	r16,4(sp)
10004c7c:	288002c4 	addi	r2,r5,11
10004c80:	00c00584 	movi	r3,22
10004c84:	2025883a 	mov	r18,r4
10004c88:	18807f2e 	bgeu	r3,r2,10004e88 <_malloc_r+0x238>
10004c8c:	047ffe04 	movi	r17,-8
10004c90:	1462703a 	and	r17,r2,r17
10004c94:	8800a316 	blt	r17,zero,10004f24 <_malloc_r+0x2d4>
10004c98:	8940a236 	bltu	r17,r5,10004f24 <_malloc_r+0x2d4>
10004c9c:	0007b880 	call	10007b88 <__malloc_lock>
10004ca0:	00807dc4 	movi	r2,503
10004ca4:	1441e92e 	bgeu	r2,r17,1000544c <_malloc_r+0x7fc>
10004ca8:	8804d27a 	srli	r2,r17,9
10004cac:	1000a126 	beq	r2,zero,10004f34 <_malloc_r+0x2e4>
10004cb0:	00c00104 	movi	r3,4
10004cb4:	18811e36 	bltu	r3,r2,10005130 <_malloc_r+0x4e0>
10004cb8:	8804d1ba 	srli	r2,r17,6
10004cbc:	12000e44 	addi	r8,r2,57
10004cc0:	11c00e04 	addi	r7,r2,56
10004cc4:	4209883a 	add	r4,r8,r8
10004cc8:	04c40774 	movhi	r19,4125
10004ccc:	2109883a 	add	r4,r4,r4
10004cd0:	9cee1204 	addi	r19,r19,-18360
10004cd4:	2109883a 	add	r4,r4,r4
10004cd8:	9909883a 	add	r4,r19,r4
10004cdc:	24000117 	ldw	r16,4(r4)
10004ce0:	213ffe04 	addi	r4,r4,-8
10004ce4:	24009726 	beq	r4,r16,10004f44 <_malloc_r+0x2f4>
10004ce8:	80800117 	ldw	r2,4(r16)
10004cec:	01bfff04 	movi	r6,-4
10004cf0:	014003c4 	movi	r5,15
10004cf4:	1184703a 	and	r2,r2,r6
10004cf8:	1447c83a 	sub	r3,r2,r17
10004cfc:	28c00716 	blt	r5,r3,10004d1c <_malloc_r+0xcc>
10004d00:	1800920e 	bge	r3,zero,10004f4c <_malloc_r+0x2fc>
10004d04:	84000317 	ldw	r16,12(r16)
10004d08:	24008e26 	beq	r4,r16,10004f44 <_malloc_r+0x2f4>
10004d0c:	80800117 	ldw	r2,4(r16)
10004d10:	1184703a 	and	r2,r2,r6
10004d14:	1447c83a 	sub	r3,r2,r17
10004d18:	28fff90e 	bge	r5,r3,10004d00 <_malloc_r+0xb0>
10004d1c:	3809883a 	mov	r4,r7
10004d20:	01840774 	movhi	r6,4125
10004d24:	9c000417 	ldw	r16,16(r19)
10004d28:	31ae1204 	addi	r6,r6,-18360
10004d2c:	32000204 	addi	r8,r6,8
10004d30:	82013426 	beq	r16,r8,10005204 <_malloc_r+0x5b4>
10004d34:	80c00117 	ldw	r3,4(r16)
10004d38:	00bfff04 	movi	r2,-4
10004d3c:	188e703a 	and	r7,r3,r2
10004d40:	3c45c83a 	sub	r2,r7,r17
10004d44:	00c003c4 	movi	r3,15
10004d48:	18811f16 	blt	r3,r2,100051c8 <_malloc_r+0x578>
10004d4c:	32000515 	stw	r8,20(r6)
10004d50:	32000415 	stw	r8,16(r6)
10004d54:	10007f0e 	bge	r2,zero,10004f54 <_malloc_r+0x304>
10004d58:	00807fc4 	movi	r2,511
10004d5c:	11c0fd36 	bltu	r2,r7,10005154 <_malloc_r+0x504>
10004d60:	3806d0fa 	srli	r3,r7,3
10004d64:	01c00044 	movi	r7,1
10004d68:	30800117 	ldw	r2,4(r6)
10004d6c:	19400044 	addi	r5,r3,1
10004d70:	294b883a 	add	r5,r5,r5
10004d74:	1807d0ba 	srai	r3,r3,2
10004d78:	294b883a 	add	r5,r5,r5
10004d7c:	294b883a 	add	r5,r5,r5
10004d80:	298b883a 	add	r5,r5,r6
10004d84:	38c6983a 	sll	r3,r7,r3
10004d88:	29c00017 	ldw	r7,0(r5)
10004d8c:	2a7ffe04 	addi	r9,r5,-8
10004d90:	1886b03a 	or	r3,r3,r2
10004d94:	82400315 	stw	r9,12(r16)
10004d98:	81c00215 	stw	r7,8(r16)
10004d9c:	30c00115 	stw	r3,4(r6)
10004da0:	2c000015 	stw	r16,0(r5)
10004da4:	3c000315 	stw	r16,12(r7)
10004da8:	2005d0ba 	srai	r2,r4,2
10004dac:	01400044 	movi	r5,1
10004db0:	288a983a 	sll	r5,r5,r2
10004db4:	19406f36 	bltu	r3,r5,10004f74 <_malloc_r+0x324>
10004db8:	28c4703a 	and	r2,r5,r3
10004dbc:	10000a1e 	bne	r2,zero,10004de8 <_malloc_r+0x198>
10004dc0:	00bfff04 	movi	r2,-4
10004dc4:	294b883a 	add	r5,r5,r5
10004dc8:	2088703a 	and	r4,r4,r2
10004dcc:	28c4703a 	and	r2,r5,r3
10004dd0:	21000104 	addi	r4,r4,4
10004dd4:	1000041e 	bne	r2,zero,10004de8 <_malloc_r+0x198>
10004dd8:	294b883a 	add	r5,r5,r5
10004ddc:	28c4703a 	and	r2,r5,r3
10004de0:	21000104 	addi	r4,r4,4
10004de4:	103ffc26 	beq	r2,zero,10004dd8 <_malloc_r+0x188>
10004de8:	02bfff04 	movi	r10,-4
10004dec:	024003c4 	movi	r9,15
10004df0:	21800044 	addi	r6,r4,1
10004df4:	318d883a 	add	r6,r6,r6
10004df8:	318d883a 	add	r6,r6,r6
10004dfc:	318d883a 	add	r6,r6,r6
10004e00:	998d883a 	add	r6,r19,r6
10004e04:	333ffe04 	addi	r12,r6,-8
10004e08:	2017883a 	mov	r11,r4
10004e0c:	31800104 	addi	r6,r6,4
10004e10:	34000017 	ldw	r16,0(r6)
10004e14:	31fffd04 	addi	r7,r6,-12
10004e18:	81c0041e 	bne	r16,r7,10004e2c <_malloc_r+0x1dc>
10004e1c:	0000fb06 	br	1000520c <_malloc_r+0x5bc>
10004e20:	1801030e 	bge	r3,zero,10005230 <_malloc_r+0x5e0>
10004e24:	84000317 	ldw	r16,12(r16)
10004e28:	81c0f826 	beq	r16,r7,1000520c <_malloc_r+0x5bc>
10004e2c:	80800117 	ldw	r2,4(r16)
10004e30:	1284703a 	and	r2,r2,r10
10004e34:	1447c83a 	sub	r3,r2,r17
10004e38:	48fff90e 	bge	r9,r3,10004e20 <_malloc_r+0x1d0>
10004e3c:	80800317 	ldw	r2,12(r16)
10004e40:	81000217 	ldw	r4,8(r16)
10004e44:	89400054 	ori	r5,r17,1
10004e48:	81400115 	stw	r5,4(r16)
10004e4c:	20800315 	stw	r2,12(r4)
10004e50:	11000215 	stw	r4,8(r2)
10004e54:	8463883a 	add	r17,r16,r17
10004e58:	9c400515 	stw	r17,20(r19)
10004e5c:	9c400415 	stw	r17,16(r19)
10004e60:	18800054 	ori	r2,r3,1
10004e64:	88800115 	stw	r2,4(r17)
10004e68:	8a000315 	stw	r8,12(r17)
10004e6c:	8a000215 	stw	r8,8(r17)
10004e70:	88e3883a 	add	r17,r17,r3
10004e74:	88c00015 	stw	r3,0(r17)
10004e78:	9009883a 	mov	r4,r18
10004e7c:	0007bac0 	call	10007bac <__malloc_unlock>
10004e80:	80800204 	addi	r2,r16,8
10004e84:	00001b06 	br	10004ef4 <_malloc_r+0x2a4>
10004e88:	04400404 	movi	r17,16
10004e8c:	89402536 	bltu	r17,r5,10004f24 <_malloc_r+0x2d4>
10004e90:	0007b880 	call	10007b88 <__malloc_lock>
10004e94:	00800184 	movi	r2,6
10004e98:	01000084 	movi	r4,2
10004e9c:	04c40774 	movhi	r19,4125
10004ea0:	1085883a 	add	r2,r2,r2
10004ea4:	9cee1204 	addi	r19,r19,-18360
10004ea8:	1085883a 	add	r2,r2,r2
10004eac:	9885883a 	add	r2,r19,r2
10004eb0:	14000117 	ldw	r16,4(r2)
10004eb4:	10fffe04 	addi	r3,r2,-8
10004eb8:	80c0d926 	beq	r16,r3,10005220 <_malloc_r+0x5d0>
10004ebc:	80c00117 	ldw	r3,4(r16)
10004ec0:	81000317 	ldw	r4,12(r16)
10004ec4:	00bfff04 	movi	r2,-4
10004ec8:	1884703a 	and	r2,r3,r2
10004ecc:	81400217 	ldw	r5,8(r16)
10004ed0:	8085883a 	add	r2,r16,r2
10004ed4:	10c00117 	ldw	r3,4(r2)
10004ed8:	29000315 	stw	r4,12(r5)
10004edc:	21400215 	stw	r5,8(r4)
10004ee0:	18c00054 	ori	r3,r3,1
10004ee4:	10c00115 	stw	r3,4(r2)
10004ee8:	9009883a 	mov	r4,r18
10004eec:	0007bac0 	call	10007bac <__malloc_unlock>
10004ef0:	80800204 	addi	r2,r16,8
10004ef4:	dfc00a17 	ldw	ra,40(sp)
10004ef8:	df000917 	ldw	fp,36(sp)
10004efc:	ddc00817 	ldw	r23,32(sp)
10004f00:	dd800717 	ldw	r22,28(sp)
10004f04:	dd400617 	ldw	r21,24(sp)
10004f08:	dd000517 	ldw	r20,20(sp)
10004f0c:	dcc00417 	ldw	r19,16(sp)
10004f10:	dc800317 	ldw	r18,12(sp)
10004f14:	dc400217 	ldw	r17,8(sp)
10004f18:	dc000117 	ldw	r16,4(sp)
10004f1c:	dec00b04 	addi	sp,sp,44
10004f20:	f800283a 	ret
10004f24:	00800304 	movi	r2,12
10004f28:	90800015 	stw	r2,0(r18)
10004f2c:	0005883a 	mov	r2,zero
10004f30:	003ff006 	br	10004ef4 <_malloc_r+0x2a4>
10004f34:	01002004 	movi	r4,128
10004f38:	02001004 	movi	r8,64
10004f3c:	01c00fc4 	movi	r7,63
10004f40:	003f6106 	br	10004cc8 <_malloc_r+0x78>
10004f44:	4009883a 	mov	r4,r8
10004f48:	003f7506 	br	10004d20 <_malloc_r+0xd0>
10004f4c:	81000317 	ldw	r4,12(r16)
10004f50:	003fde06 	br	10004ecc <_malloc_r+0x27c>
10004f54:	81c5883a 	add	r2,r16,r7
10004f58:	11400117 	ldw	r5,4(r2)
10004f5c:	9009883a 	mov	r4,r18
10004f60:	29400054 	ori	r5,r5,1
10004f64:	11400115 	stw	r5,4(r2)
10004f68:	0007bac0 	call	10007bac <__malloc_unlock>
10004f6c:	80800204 	addi	r2,r16,8
10004f70:	003fe006 	br	10004ef4 <_malloc_r+0x2a4>
10004f74:	9c000217 	ldw	r16,8(r19)
10004f78:	00bfff04 	movi	r2,-4
10004f7c:	85800117 	ldw	r22,4(r16)
10004f80:	b0ac703a 	and	r22,r22,r2
10004f84:	b4400336 	bltu	r22,r17,10004f94 <_malloc_r+0x344>
10004f88:	b445c83a 	sub	r2,r22,r17
10004f8c:	00c003c4 	movi	r3,15
10004f90:	18805d16 	blt	r3,r2,10005108 <_malloc_r+0x4b8>
10004f94:	05c40774 	movhi	r23,4125
10004f98:	00840774 	movhi	r2,4125
10004f9c:	10b5ff04 	addi	r2,r2,-10244
10004fa0:	bdef1f04 	addi	r23,r23,-17284
10004fa4:	15400017 	ldw	r21,0(r2)
10004fa8:	b8c00017 	ldw	r3,0(r23)
10004fac:	00bfffc4 	movi	r2,-1
10004fb0:	858d883a 	add	r6,r16,r22
10004fb4:	8d6b883a 	add	r21,r17,r21
10004fb8:	1880ea26 	beq	r3,r2,10005364 <_malloc_r+0x714>
10004fbc:	ad4403c4 	addi	r21,r21,4111
10004fc0:	00bc0004 	movi	r2,-4096
10004fc4:	a8aa703a 	and	r21,r21,r2
10004fc8:	a80b883a 	mov	r5,r21
10004fcc:	9009883a 	mov	r4,r18
10004fd0:	d9800015 	stw	r6,0(sp)
10004fd4:	0005dc40 	call	10005dc4 <_sbrk_r>
10004fd8:	1029883a 	mov	r20,r2
10004fdc:	00bfffc4 	movi	r2,-1
10004fe0:	d9800017 	ldw	r6,0(sp)
10004fe4:	a080e826 	beq	r20,r2,10005388 <_malloc_r+0x738>
10004fe8:	a180a636 	bltu	r20,r6,10005284 <_malloc_r+0x634>
10004fec:	07040774 	movhi	fp,4125
10004ff0:	e7360004 	addi	fp,fp,-10240
10004ff4:	e0800017 	ldw	r2,0(fp)
10004ff8:	a887883a 	add	r3,r21,r2
10004ffc:	e0c00015 	stw	r3,0(fp)
10005000:	3500e626 	beq	r6,r20,1000539c <_malloc_r+0x74c>
10005004:	b9000017 	ldw	r4,0(r23)
10005008:	00bfffc4 	movi	r2,-1
1000500c:	2080ee26 	beq	r4,r2,100053c8 <_malloc_r+0x778>
10005010:	a185c83a 	sub	r2,r20,r6
10005014:	10c5883a 	add	r2,r2,r3
10005018:	e0800015 	stw	r2,0(fp)
1000501c:	a0c001cc 	andi	r3,r20,7
10005020:	1800bc26 	beq	r3,zero,10005314 <_malloc_r+0x6c4>
10005024:	a0e9c83a 	sub	r20,r20,r3
10005028:	00840204 	movi	r2,4104
1000502c:	a5000204 	addi	r20,r20,8
10005030:	10c7c83a 	sub	r3,r2,r3
10005034:	a545883a 	add	r2,r20,r21
10005038:	1083ffcc 	andi	r2,r2,4095
1000503c:	18abc83a 	sub	r21,r3,r2
10005040:	a80b883a 	mov	r5,r21
10005044:	9009883a 	mov	r4,r18
10005048:	0005dc40 	call	10005dc4 <_sbrk_r>
1000504c:	00ffffc4 	movi	r3,-1
10005050:	10c0e126 	beq	r2,r3,100053d8 <_malloc_r+0x788>
10005054:	1505c83a 	sub	r2,r2,r20
10005058:	1545883a 	add	r2,r2,r21
1000505c:	10800054 	ori	r2,r2,1
10005060:	e0c00017 	ldw	r3,0(fp)
10005064:	9d000215 	stw	r20,8(r19)
10005068:	a0800115 	stw	r2,4(r20)
1000506c:	a8c7883a 	add	r3,r21,r3
10005070:	e0c00015 	stw	r3,0(fp)
10005074:	84c00e26 	beq	r16,r19,100050b0 <_malloc_r+0x460>
10005078:	018003c4 	movi	r6,15
1000507c:	3580a72e 	bgeu	r6,r22,1000531c <_malloc_r+0x6cc>
10005080:	81400117 	ldw	r5,4(r16)
10005084:	013ffe04 	movi	r4,-8
10005088:	b0bffd04 	addi	r2,r22,-12
1000508c:	1104703a 	and	r2,r2,r4
10005090:	2900004c 	andi	r4,r5,1
10005094:	2088b03a 	or	r4,r4,r2
10005098:	81000115 	stw	r4,4(r16)
1000509c:	01400144 	movi	r5,5
100050a0:	8089883a 	add	r4,r16,r2
100050a4:	21400115 	stw	r5,4(r4)
100050a8:	21400215 	stw	r5,8(r4)
100050ac:	3080cd36 	bltu	r6,r2,100053e4 <_malloc_r+0x794>
100050b0:	00840774 	movhi	r2,4125
100050b4:	10b5fe04 	addi	r2,r2,-10248
100050b8:	11000017 	ldw	r4,0(r2)
100050bc:	20c0012e 	bgeu	r4,r3,100050c4 <_malloc_r+0x474>
100050c0:	10c00015 	stw	r3,0(r2)
100050c4:	00840774 	movhi	r2,4125
100050c8:	10b5fd04 	addi	r2,r2,-10252
100050cc:	11000017 	ldw	r4,0(r2)
100050d0:	9c000217 	ldw	r16,8(r19)
100050d4:	20c0012e 	bgeu	r4,r3,100050dc <_malloc_r+0x48c>
100050d8:	10c00015 	stw	r3,0(r2)
100050dc:	80c00117 	ldw	r3,4(r16)
100050e0:	00bfff04 	movi	r2,-4
100050e4:	1886703a 	and	r3,r3,r2
100050e8:	1c45c83a 	sub	r2,r3,r17
100050ec:	1c400236 	bltu	r3,r17,100050f8 <_malloc_r+0x4a8>
100050f0:	00c003c4 	movi	r3,15
100050f4:	18800416 	blt	r3,r2,10005108 <_malloc_r+0x4b8>
100050f8:	9009883a 	mov	r4,r18
100050fc:	0007bac0 	call	10007bac <__malloc_unlock>
10005100:	0005883a 	mov	r2,zero
10005104:	003f7b06 	br	10004ef4 <_malloc_r+0x2a4>
10005108:	88c00054 	ori	r3,r17,1
1000510c:	80c00115 	stw	r3,4(r16)
10005110:	8463883a 	add	r17,r16,r17
10005114:	10800054 	ori	r2,r2,1
10005118:	9c400215 	stw	r17,8(r19)
1000511c:	88800115 	stw	r2,4(r17)
10005120:	9009883a 	mov	r4,r18
10005124:	0007bac0 	call	10007bac <__malloc_unlock>
10005128:	80800204 	addi	r2,r16,8
1000512c:	003f7106 	br	10004ef4 <_malloc_r+0x2a4>
10005130:	00c00504 	movi	r3,20
10005134:	18804a2e 	bgeu	r3,r2,10005260 <_malloc_r+0x610>
10005138:	00c01504 	movi	r3,84
1000513c:	18806e36 	bltu	r3,r2,100052f8 <_malloc_r+0x6a8>
10005140:	8804d33a 	srli	r2,r17,12
10005144:	12001bc4 	addi	r8,r2,111
10005148:	11c01b84 	addi	r7,r2,110
1000514c:	4209883a 	add	r4,r8,r8
10005150:	003edd06 	br	10004cc8 <_malloc_r+0x78>
10005154:	3804d27a 	srli	r2,r7,9
10005158:	00c00104 	movi	r3,4
1000515c:	1880442e 	bgeu	r3,r2,10005270 <_malloc_r+0x620>
10005160:	00c00504 	movi	r3,20
10005164:	18808136 	bltu	r3,r2,1000536c <_malloc_r+0x71c>
10005168:	11401704 	addi	r5,r2,92
1000516c:	10c016c4 	addi	r3,r2,91
10005170:	294b883a 	add	r5,r5,r5
10005174:	294b883a 	add	r5,r5,r5
10005178:	294b883a 	add	r5,r5,r5
1000517c:	994b883a 	add	r5,r19,r5
10005180:	28800017 	ldw	r2,0(r5)
10005184:	01840774 	movhi	r6,4125
10005188:	297ffe04 	addi	r5,r5,-8
1000518c:	31ae1204 	addi	r6,r6,-18360
10005190:	28806526 	beq	r5,r2,10005328 <_malloc_r+0x6d8>
10005194:	01bfff04 	movi	r6,-4
10005198:	10c00117 	ldw	r3,4(r2)
1000519c:	1986703a 	and	r3,r3,r6
100051a0:	38c0022e 	bgeu	r7,r3,100051ac <_malloc_r+0x55c>
100051a4:	10800217 	ldw	r2,8(r2)
100051a8:	28bffb1e 	bne	r5,r2,10005198 <_malloc_r+0x548>
100051ac:	11400317 	ldw	r5,12(r2)
100051b0:	98c00117 	ldw	r3,4(r19)
100051b4:	81400315 	stw	r5,12(r16)
100051b8:	80800215 	stw	r2,8(r16)
100051bc:	2c000215 	stw	r16,8(r5)
100051c0:	14000315 	stw	r16,12(r2)
100051c4:	003ef806 	br	10004da8 <_malloc_r+0x158>
100051c8:	88c00054 	ori	r3,r17,1
100051cc:	80c00115 	stw	r3,4(r16)
100051d0:	8463883a 	add	r17,r16,r17
100051d4:	34400515 	stw	r17,20(r6)
100051d8:	34400415 	stw	r17,16(r6)
100051dc:	10c00054 	ori	r3,r2,1
100051e0:	8a000315 	stw	r8,12(r17)
100051e4:	8a000215 	stw	r8,8(r17)
100051e8:	88c00115 	stw	r3,4(r17)
100051ec:	88a3883a 	add	r17,r17,r2
100051f0:	88800015 	stw	r2,0(r17)
100051f4:	9009883a 	mov	r4,r18
100051f8:	0007bac0 	call	10007bac <__malloc_unlock>
100051fc:	80800204 	addi	r2,r16,8
10005200:	003f3c06 	br	10004ef4 <_malloc_r+0x2a4>
10005204:	30c00117 	ldw	r3,4(r6)
10005208:	003ee706 	br	10004da8 <_malloc_r+0x158>
1000520c:	5ac00044 	addi	r11,r11,1
10005210:	588000cc 	andi	r2,r11,3
10005214:	31800204 	addi	r6,r6,8
10005218:	103efd1e 	bne	r2,zero,10004e10 <_malloc_r+0x1c0>
1000521c:	00002406 	br	100052b0 <_malloc_r+0x660>
10005220:	14000317 	ldw	r16,12(r2)
10005224:	143f251e 	bne	r2,r16,10004ebc <_malloc_r+0x26c>
10005228:	21000084 	addi	r4,r4,2
1000522c:	003ebc06 	br	10004d20 <_malloc_r+0xd0>
10005230:	8085883a 	add	r2,r16,r2
10005234:	10c00117 	ldw	r3,4(r2)
10005238:	81000317 	ldw	r4,12(r16)
1000523c:	81400217 	ldw	r5,8(r16)
10005240:	18c00054 	ori	r3,r3,1
10005244:	10c00115 	stw	r3,4(r2)
10005248:	29000315 	stw	r4,12(r5)
1000524c:	21400215 	stw	r5,8(r4)
10005250:	9009883a 	mov	r4,r18
10005254:	0007bac0 	call	10007bac <__malloc_unlock>
10005258:	80800204 	addi	r2,r16,8
1000525c:	003f2506 	br	10004ef4 <_malloc_r+0x2a4>
10005260:	12001704 	addi	r8,r2,92
10005264:	11c016c4 	addi	r7,r2,91
10005268:	4209883a 	add	r4,r8,r8
1000526c:	003e9606 	br	10004cc8 <_malloc_r+0x78>
10005270:	3804d1ba 	srli	r2,r7,6
10005274:	11400e44 	addi	r5,r2,57
10005278:	10c00e04 	addi	r3,r2,56
1000527c:	294b883a 	add	r5,r5,r5
10005280:	003fbc06 	br	10005174 <_malloc_r+0x524>
10005284:	84ff5926 	beq	r16,r19,10004fec <_malloc_r+0x39c>
10005288:	00840774 	movhi	r2,4125
1000528c:	10ae1204 	addi	r2,r2,-18360
10005290:	14000217 	ldw	r16,8(r2)
10005294:	00bfff04 	movi	r2,-4
10005298:	80c00117 	ldw	r3,4(r16)
1000529c:	1886703a 	and	r3,r3,r2
100052a0:	003f9106 	br	100050e8 <_malloc_r+0x498>
100052a4:	60800217 	ldw	r2,8(r12)
100052a8:	213fffc4 	addi	r4,r4,-1
100052ac:	1300651e 	bne	r2,r12,10005444 <_malloc_r+0x7f4>
100052b0:	208000cc 	andi	r2,r4,3
100052b4:	633ffe04 	addi	r12,r12,-8
100052b8:	103ffa1e 	bne	r2,zero,100052a4 <_malloc_r+0x654>
100052bc:	98800117 	ldw	r2,4(r19)
100052c0:	0146303a 	nor	r3,zero,r5
100052c4:	1884703a 	and	r2,r3,r2
100052c8:	98800115 	stw	r2,4(r19)
100052cc:	294b883a 	add	r5,r5,r5
100052d0:	117f2836 	bltu	r2,r5,10004f74 <_malloc_r+0x324>
100052d4:	283f2726 	beq	r5,zero,10004f74 <_malloc_r+0x324>
100052d8:	2886703a 	and	r3,r5,r2
100052dc:	5809883a 	mov	r4,r11
100052e0:	183ec31e 	bne	r3,zero,10004df0 <_malloc_r+0x1a0>
100052e4:	294b883a 	add	r5,r5,r5
100052e8:	2886703a 	and	r3,r5,r2
100052ec:	21000104 	addi	r4,r4,4
100052f0:	183ffc26 	beq	r3,zero,100052e4 <_malloc_r+0x694>
100052f4:	003ebe06 	br	10004df0 <_malloc_r+0x1a0>
100052f8:	00c05504 	movi	r3,340
100052fc:	18801236 	bltu	r3,r2,10005348 <_malloc_r+0x6f8>
10005300:	8804d3fa 	srli	r2,r17,15
10005304:	12001e04 	addi	r8,r2,120
10005308:	11c01dc4 	addi	r7,r2,119
1000530c:	4209883a 	add	r4,r8,r8
10005310:	003e6d06 	br	10004cc8 <_malloc_r+0x78>
10005314:	00c40004 	movi	r3,4096
10005318:	003f4606 	br	10005034 <_malloc_r+0x3e4>
1000531c:	00800044 	movi	r2,1
10005320:	a0800115 	stw	r2,4(r20)
10005324:	003f7406 	br	100050f8 <_malloc_r+0x4a8>
10005328:	1805d0ba 	srai	r2,r3,2
1000532c:	01c00044 	movi	r7,1
10005330:	30c00117 	ldw	r3,4(r6)
10005334:	388e983a 	sll	r7,r7,r2
10005338:	2805883a 	mov	r2,r5
1000533c:	38c6b03a 	or	r3,r7,r3
10005340:	30c00115 	stw	r3,4(r6)
10005344:	003f9b06 	br	100051b4 <_malloc_r+0x564>
10005348:	00c15504 	movi	r3,1364
1000534c:	18801a36 	bltu	r3,r2,100053b8 <_malloc_r+0x768>
10005350:	8804d4ba 	srli	r2,r17,18
10005354:	12001f44 	addi	r8,r2,125
10005358:	11c01f04 	addi	r7,r2,124
1000535c:	4209883a 	add	r4,r8,r8
10005360:	003e5906 	br	10004cc8 <_malloc_r+0x78>
10005364:	ad400404 	addi	r21,r21,16
10005368:	003f1706 	br	10004fc8 <_malloc_r+0x378>
1000536c:	00c01504 	movi	r3,84
10005370:	18802336 	bltu	r3,r2,10005400 <_malloc_r+0x7b0>
10005374:	3804d33a 	srli	r2,r7,12
10005378:	11401bc4 	addi	r5,r2,111
1000537c:	10c01b84 	addi	r3,r2,110
10005380:	294b883a 	add	r5,r5,r5
10005384:	003f7b06 	br	10005174 <_malloc_r+0x524>
10005388:	9c000217 	ldw	r16,8(r19)
1000538c:	00bfff04 	movi	r2,-4
10005390:	80c00117 	ldw	r3,4(r16)
10005394:	1886703a 	and	r3,r3,r2
10005398:	003f5306 	br	100050e8 <_malloc_r+0x498>
1000539c:	3083ffcc 	andi	r2,r6,4095
100053a0:	103f181e 	bne	r2,zero,10005004 <_malloc_r+0x3b4>
100053a4:	99000217 	ldw	r4,8(r19)
100053a8:	b545883a 	add	r2,r22,r21
100053ac:	10800054 	ori	r2,r2,1
100053b0:	20800115 	stw	r2,4(r4)
100053b4:	003f3e06 	br	100050b0 <_malloc_r+0x460>
100053b8:	01003f84 	movi	r4,254
100053bc:	02001fc4 	movi	r8,127
100053c0:	01c01f84 	movi	r7,126
100053c4:	003e4006 	br	10004cc8 <_malloc_r+0x78>
100053c8:	00840774 	movhi	r2,4125
100053cc:	10af1f04 	addi	r2,r2,-17284
100053d0:	15000015 	stw	r20,0(r2)
100053d4:	003f1106 	br	1000501c <_malloc_r+0x3cc>
100053d8:	00800044 	movi	r2,1
100053dc:	002b883a 	mov	r21,zero
100053e0:	003f1f06 	br	10005060 <_malloc_r+0x410>
100053e4:	81400204 	addi	r5,r16,8
100053e8:	9009883a 	mov	r4,r18
100053ec:	0006ae40 	call	10006ae4 <_free_r>
100053f0:	00840774 	movhi	r2,4125
100053f4:	10b60004 	addi	r2,r2,-10240
100053f8:	10c00017 	ldw	r3,0(r2)
100053fc:	003f2c06 	br	100050b0 <_malloc_r+0x460>
10005400:	00c05504 	movi	r3,340
10005404:	18800536 	bltu	r3,r2,1000541c <_malloc_r+0x7cc>
10005408:	3804d3fa 	srli	r2,r7,15
1000540c:	11401e04 	addi	r5,r2,120
10005410:	10c01dc4 	addi	r3,r2,119
10005414:	294b883a 	add	r5,r5,r5
10005418:	003f5606 	br	10005174 <_malloc_r+0x524>
1000541c:	00c15504 	movi	r3,1364
10005420:	18800536 	bltu	r3,r2,10005438 <_malloc_r+0x7e8>
10005424:	3804d4ba 	srli	r2,r7,18
10005428:	11401f44 	addi	r5,r2,125
1000542c:	10c01f04 	addi	r3,r2,124
10005430:	294b883a 	add	r5,r5,r5
10005434:	003f4f06 	br	10005174 <_malloc_r+0x524>
10005438:	01403f84 	movi	r5,254
1000543c:	00c01f84 	movi	r3,126
10005440:	003f4c06 	br	10005174 <_malloc_r+0x524>
10005444:	98800117 	ldw	r2,4(r19)
10005448:	003fa006 	br	100052cc <_malloc_r+0x67c>
1000544c:	8808d0fa 	srli	r4,r17,3
10005450:	20800044 	addi	r2,r4,1
10005454:	1085883a 	add	r2,r2,r2
10005458:	003e9006 	br	10004e9c <_malloc_r+0x24c>

1000545c <memchr>:
1000545c:	208000cc 	andi	r2,r4,3
10005460:	280f883a 	mov	r7,r5
10005464:	10003426 	beq	r2,zero,10005538 <memchr+0xdc>
10005468:	30bfffc4 	addi	r2,r6,-1
1000546c:	30001a26 	beq	r6,zero,100054d8 <memchr+0x7c>
10005470:	20c00003 	ldbu	r3,0(r4)
10005474:	29803fcc 	andi	r6,r5,255
10005478:	30c0051e 	bne	r6,r3,10005490 <memchr+0x34>
1000547c:	00001806 	br	100054e0 <memchr+0x84>
10005480:	10001526 	beq	r2,zero,100054d8 <memchr+0x7c>
10005484:	20c00003 	ldbu	r3,0(r4)
10005488:	10bfffc4 	addi	r2,r2,-1
1000548c:	30c01426 	beq	r6,r3,100054e0 <memchr+0x84>
10005490:	21000044 	addi	r4,r4,1
10005494:	20c000cc 	andi	r3,r4,3
10005498:	183ff91e 	bne	r3,zero,10005480 <memchr+0x24>
1000549c:	020000c4 	movi	r8,3
100054a0:	40801136 	bltu	r8,r2,100054e8 <memchr+0x8c>
100054a4:	10000c26 	beq	r2,zero,100054d8 <memchr+0x7c>
100054a8:	20c00003 	ldbu	r3,0(r4)
100054ac:	29403fcc 	andi	r5,r5,255
100054b0:	28c00b26 	beq	r5,r3,100054e0 <memchr+0x84>
100054b4:	20c00044 	addi	r3,r4,1
100054b8:	39803fcc 	andi	r6,r7,255
100054bc:	2089883a 	add	r4,r4,r2
100054c0:	00000306 	br	100054d0 <memchr+0x74>
100054c4:	18c00044 	addi	r3,r3,1
100054c8:	197fffc3 	ldbu	r5,-1(r3)
100054cc:	31400526 	beq	r6,r5,100054e4 <memchr+0x88>
100054d0:	1805883a 	mov	r2,r3
100054d4:	20fffb1e 	bne	r4,r3,100054c4 <memchr+0x68>
100054d8:	0005883a 	mov	r2,zero
100054dc:	f800283a 	ret
100054e0:	2005883a 	mov	r2,r4
100054e4:	f800283a 	ret
100054e8:	28c03fcc 	andi	r3,r5,255
100054ec:	1812923a 	slli	r9,r3,8
100054f0:	02ffbff4 	movhi	r11,65279
100054f4:	02a02074 	movhi	r10,32897
100054f8:	48d2b03a 	or	r9,r9,r3
100054fc:	4806943a 	slli	r3,r9,16
10005500:	5affbfc4 	addi	r11,r11,-257
10005504:	52a02004 	addi	r10,r10,-32640
10005508:	48d2b03a 	or	r9,r9,r3
1000550c:	20c00017 	ldw	r3,0(r4)
10005510:	48c6f03a 	xor	r3,r9,r3
10005514:	1acd883a 	add	r6,r3,r11
10005518:	00c6303a 	nor	r3,zero,r3
1000551c:	30c6703a 	and	r3,r6,r3
10005520:	1a86703a 	and	r3,r3,r10
10005524:	183fe01e 	bne	r3,zero,100054a8 <memchr+0x4c>
10005528:	10bfff04 	addi	r2,r2,-4
1000552c:	21000104 	addi	r4,r4,4
10005530:	40bff636 	bltu	r8,r2,1000550c <memchr+0xb0>
10005534:	003fdb06 	br	100054a4 <memchr+0x48>
10005538:	3005883a 	mov	r2,r6
1000553c:	003fd706 	br	1000549c <memchr+0x40>

10005540 <memcmp>:
10005540:	01c000c4 	movi	r7,3
10005544:	3980192e 	bgeu	r7,r6,100055ac <memcmp+0x6c>
10005548:	2144b03a 	or	r2,r4,r5
1000554c:	11c4703a 	and	r2,r2,r7
10005550:	10000f26 	beq	r2,zero,10005590 <memcmp+0x50>
10005554:	20800003 	ldbu	r2,0(r4)
10005558:	28c00003 	ldbu	r3,0(r5)
1000555c:	10c0151e 	bne	r2,r3,100055b4 <memcmp+0x74>
10005560:	31bfff84 	addi	r6,r6,-2
10005564:	01ffffc4 	movi	r7,-1
10005568:	00000406 	br	1000557c <memcmp+0x3c>
1000556c:	20800003 	ldbu	r2,0(r4)
10005570:	28c00003 	ldbu	r3,0(r5)
10005574:	31bfffc4 	addi	r6,r6,-1
10005578:	10c00e1e 	bne	r2,r3,100055b4 <memcmp+0x74>
1000557c:	21000044 	addi	r4,r4,1
10005580:	29400044 	addi	r5,r5,1
10005584:	31fff91e 	bne	r6,r7,1000556c <memcmp+0x2c>
10005588:	0005883a 	mov	r2,zero
1000558c:	f800283a 	ret
10005590:	20c00017 	ldw	r3,0(r4)
10005594:	28800017 	ldw	r2,0(r5)
10005598:	18bfee1e 	bne	r3,r2,10005554 <memcmp+0x14>
1000559c:	31bfff04 	addi	r6,r6,-4
100055a0:	21000104 	addi	r4,r4,4
100055a4:	29400104 	addi	r5,r5,4
100055a8:	39bff936 	bltu	r7,r6,10005590 <memcmp+0x50>
100055ac:	303fe91e 	bne	r6,zero,10005554 <memcmp+0x14>
100055b0:	003ff506 	br	10005588 <memcmp+0x48>
100055b4:	10c5c83a 	sub	r2,r2,r3
100055b8:	f800283a 	ret

100055bc <memcpy>:
100055bc:	defffd04 	addi	sp,sp,-12
100055c0:	dfc00215 	stw	ra,8(sp)
100055c4:	dc400115 	stw	r17,4(sp)
100055c8:	dc000015 	stw	r16,0(sp)
100055cc:	00c003c4 	movi	r3,15
100055d0:	2005883a 	mov	r2,r4
100055d4:	1980452e 	bgeu	r3,r6,100056ec <memcpy+0x130>
100055d8:	2906b03a 	or	r3,r5,r4
100055dc:	18c000cc 	andi	r3,r3,3
100055e0:	1800441e 	bne	r3,zero,100056f4 <memcpy+0x138>
100055e4:	347ffc04 	addi	r17,r6,-16
100055e8:	8822d13a 	srli	r17,r17,4
100055ec:	28c00104 	addi	r3,r5,4
100055f0:	23400104 	addi	r13,r4,4
100055f4:	8820913a 	slli	r16,r17,4
100055f8:	2b000204 	addi	r12,r5,8
100055fc:	22c00204 	addi	r11,r4,8
10005600:	84000504 	addi	r16,r16,20
10005604:	2a800304 	addi	r10,r5,12
10005608:	22400304 	addi	r9,r4,12
1000560c:	2c21883a 	add	r16,r5,r16
10005610:	2811883a 	mov	r8,r5
10005614:	200f883a 	mov	r7,r4
10005618:	41000017 	ldw	r4,0(r8)
1000561c:	1fc00017 	ldw	ra,0(r3)
10005620:	63c00017 	ldw	r15,0(r12)
10005624:	39000015 	stw	r4,0(r7)
10005628:	53800017 	ldw	r14,0(r10)
1000562c:	6fc00015 	stw	ra,0(r13)
10005630:	5bc00015 	stw	r15,0(r11)
10005634:	4b800015 	stw	r14,0(r9)
10005638:	18c00404 	addi	r3,r3,16
1000563c:	39c00404 	addi	r7,r7,16
10005640:	42000404 	addi	r8,r8,16
10005644:	6b400404 	addi	r13,r13,16
10005648:	63000404 	addi	r12,r12,16
1000564c:	5ac00404 	addi	r11,r11,16
10005650:	52800404 	addi	r10,r10,16
10005654:	4a400404 	addi	r9,r9,16
10005658:	1c3fef1e 	bne	r3,r16,10005618 <memcpy+0x5c>
1000565c:	89c00044 	addi	r7,r17,1
10005660:	380e913a 	slli	r7,r7,4
10005664:	310003cc 	andi	r4,r6,15
10005668:	02c000c4 	movi	r11,3
1000566c:	11c7883a 	add	r3,r2,r7
10005670:	29cb883a 	add	r5,r5,r7
10005674:	5900212e 	bgeu	r11,r4,100056fc <memcpy+0x140>
10005678:	1813883a 	mov	r9,r3
1000567c:	2811883a 	mov	r8,r5
10005680:	200f883a 	mov	r7,r4
10005684:	42800017 	ldw	r10,0(r8)
10005688:	4a400104 	addi	r9,r9,4
1000568c:	39ffff04 	addi	r7,r7,-4
10005690:	4abfff15 	stw	r10,-4(r9)
10005694:	42000104 	addi	r8,r8,4
10005698:	59fffa36 	bltu	r11,r7,10005684 <memcpy+0xc8>
1000569c:	213fff04 	addi	r4,r4,-4
100056a0:	2008d0ba 	srli	r4,r4,2
100056a4:	318000cc 	andi	r6,r6,3
100056a8:	21000044 	addi	r4,r4,1
100056ac:	2109883a 	add	r4,r4,r4
100056b0:	2109883a 	add	r4,r4,r4
100056b4:	1907883a 	add	r3,r3,r4
100056b8:	290b883a 	add	r5,r5,r4
100056bc:	30000626 	beq	r6,zero,100056d8 <memcpy+0x11c>
100056c0:	198d883a 	add	r6,r3,r6
100056c4:	29c00003 	ldbu	r7,0(r5)
100056c8:	18c00044 	addi	r3,r3,1
100056cc:	29400044 	addi	r5,r5,1
100056d0:	19ffffc5 	stb	r7,-1(r3)
100056d4:	19bffb1e 	bne	r3,r6,100056c4 <memcpy+0x108>
100056d8:	dfc00217 	ldw	ra,8(sp)
100056dc:	dc400117 	ldw	r17,4(sp)
100056e0:	dc000017 	ldw	r16,0(sp)
100056e4:	dec00304 	addi	sp,sp,12
100056e8:	f800283a 	ret
100056ec:	2007883a 	mov	r3,r4
100056f0:	003ff206 	br	100056bc <memcpy+0x100>
100056f4:	2007883a 	mov	r3,r4
100056f8:	003ff106 	br	100056c0 <memcpy+0x104>
100056fc:	200d883a 	mov	r6,r4
10005700:	003fee06 	br	100056bc <memcpy+0x100>

10005704 <memmove>:
10005704:	2005883a 	mov	r2,r4
10005708:	29000b2e 	bgeu	r5,r4,10005738 <memmove+0x34>
1000570c:	298f883a 	add	r7,r5,r6
10005710:	21c0092e 	bgeu	r4,r7,10005738 <memmove+0x34>
10005714:	2187883a 	add	r3,r4,r6
10005718:	198bc83a 	sub	r5,r3,r6
1000571c:	30004826 	beq	r6,zero,10005840 <memmove+0x13c>
10005720:	39ffffc4 	addi	r7,r7,-1
10005724:	39000003 	ldbu	r4,0(r7)
10005728:	18ffffc4 	addi	r3,r3,-1
1000572c:	19000005 	stb	r4,0(r3)
10005730:	28fffb1e 	bne	r5,r3,10005720 <memmove+0x1c>
10005734:	f800283a 	ret
10005738:	00c003c4 	movi	r3,15
1000573c:	1980412e 	bgeu	r3,r6,10005844 <memmove+0x140>
10005740:	2886b03a 	or	r3,r5,r2
10005744:	18c000cc 	andi	r3,r3,3
10005748:	1800401e 	bne	r3,zero,1000584c <memmove+0x148>
1000574c:	33fffc04 	addi	r15,r6,-16
10005750:	781ed13a 	srli	r15,r15,4
10005754:	28c00104 	addi	r3,r5,4
10005758:	13400104 	addi	r13,r2,4
1000575c:	781c913a 	slli	r14,r15,4
10005760:	2b000204 	addi	r12,r5,8
10005764:	12c00204 	addi	r11,r2,8
10005768:	73800504 	addi	r14,r14,20
1000576c:	2a800304 	addi	r10,r5,12
10005770:	12400304 	addi	r9,r2,12
10005774:	2b9d883a 	add	r14,r5,r14
10005778:	2811883a 	mov	r8,r5
1000577c:	100f883a 	mov	r7,r2
10005780:	41000017 	ldw	r4,0(r8)
10005784:	39c00404 	addi	r7,r7,16
10005788:	18c00404 	addi	r3,r3,16
1000578c:	393ffc15 	stw	r4,-16(r7)
10005790:	193ffc17 	ldw	r4,-16(r3)
10005794:	6b400404 	addi	r13,r13,16
10005798:	5ac00404 	addi	r11,r11,16
1000579c:	693ffc15 	stw	r4,-16(r13)
100057a0:	61000017 	ldw	r4,0(r12)
100057a4:	4a400404 	addi	r9,r9,16
100057a8:	42000404 	addi	r8,r8,16
100057ac:	593ffc15 	stw	r4,-16(r11)
100057b0:	51000017 	ldw	r4,0(r10)
100057b4:	63000404 	addi	r12,r12,16
100057b8:	52800404 	addi	r10,r10,16
100057bc:	493ffc15 	stw	r4,-16(r9)
100057c0:	1bbfef1e 	bne	r3,r14,10005780 <memmove+0x7c>
100057c4:	79000044 	addi	r4,r15,1
100057c8:	2008913a 	slli	r4,r4,4
100057cc:	328003cc 	andi	r10,r6,15
100057d0:	02c000c4 	movi	r11,3
100057d4:	1107883a 	add	r3,r2,r4
100057d8:	290b883a 	add	r5,r5,r4
100057dc:	5a801e2e 	bgeu	r11,r10,10005858 <memmove+0x154>
100057e0:	1813883a 	mov	r9,r3
100057e4:	2811883a 	mov	r8,r5
100057e8:	500f883a 	mov	r7,r10
100057ec:	41000017 	ldw	r4,0(r8)
100057f0:	4a400104 	addi	r9,r9,4
100057f4:	39ffff04 	addi	r7,r7,-4
100057f8:	493fff15 	stw	r4,-4(r9)
100057fc:	42000104 	addi	r8,r8,4
10005800:	59fffa36 	bltu	r11,r7,100057ec <memmove+0xe8>
10005804:	513fff04 	addi	r4,r10,-4
10005808:	2008d0ba 	srli	r4,r4,2
1000580c:	318000cc 	andi	r6,r6,3
10005810:	21000044 	addi	r4,r4,1
10005814:	2109883a 	add	r4,r4,r4
10005818:	2109883a 	add	r4,r4,r4
1000581c:	1907883a 	add	r3,r3,r4
10005820:	290b883a 	add	r5,r5,r4
10005824:	30000b26 	beq	r6,zero,10005854 <memmove+0x150>
10005828:	198d883a 	add	r6,r3,r6
1000582c:	29c00003 	ldbu	r7,0(r5)
10005830:	18c00044 	addi	r3,r3,1
10005834:	29400044 	addi	r5,r5,1
10005838:	19ffffc5 	stb	r7,-1(r3)
1000583c:	19bffb1e 	bne	r3,r6,1000582c <memmove+0x128>
10005840:	f800283a 	ret
10005844:	1007883a 	mov	r3,r2
10005848:	003ff606 	br	10005824 <memmove+0x120>
1000584c:	1007883a 	mov	r3,r2
10005850:	003ff506 	br	10005828 <memmove+0x124>
10005854:	f800283a 	ret
10005858:	500d883a 	mov	r6,r10
1000585c:	003ff106 	br	10005824 <memmove+0x120>

10005860 <_realloc_r>:
10005860:	defff604 	addi	sp,sp,-40
10005864:	dc800215 	stw	r18,8(sp)
10005868:	dfc00915 	stw	ra,36(sp)
1000586c:	df000815 	stw	fp,32(sp)
10005870:	ddc00715 	stw	r23,28(sp)
10005874:	dd800615 	stw	r22,24(sp)
10005878:	dd400515 	stw	r21,20(sp)
1000587c:	dd000415 	stw	r20,16(sp)
10005880:	dcc00315 	stw	r19,12(sp)
10005884:	dc400115 	stw	r17,4(sp)
10005888:	dc000015 	stw	r16,0(sp)
1000588c:	3025883a 	mov	r18,r6
10005890:	2800b726 	beq	r5,zero,10005b70 <_realloc_r+0x310>
10005894:	282b883a 	mov	r21,r5
10005898:	2029883a 	mov	r20,r4
1000589c:	0007b880 	call	10007b88 <__malloc_lock>
100058a0:	a8bfff17 	ldw	r2,-4(r21)
100058a4:	043fff04 	movi	r16,-4
100058a8:	90c002c4 	addi	r3,r18,11
100058ac:	01000584 	movi	r4,22
100058b0:	acfffe04 	addi	r19,r21,-8
100058b4:	1420703a 	and	r16,r2,r16
100058b8:	20c0332e 	bgeu	r4,r3,10005988 <_realloc_r+0x128>
100058bc:	047ffe04 	movi	r17,-8
100058c0:	1c62703a 	and	r17,r3,r17
100058c4:	8807883a 	mov	r3,r17
100058c8:	88005816 	blt	r17,zero,10005a2c <_realloc_r+0x1cc>
100058cc:	8c805736 	bltu	r17,r18,10005a2c <_realloc_r+0x1cc>
100058d0:	80c0300e 	bge	r16,r3,10005994 <_realloc_r+0x134>
100058d4:	07040774 	movhi	fp,4125
100058d8:	e72e1204 	addi	fp,fp,-18360
100058dc:	e1c00217 	ldw	r7,8(fp)
100058e0:	9c09883a 	add	r4,r19,r16
100058e4:	22000117 	ldw	r8,4(r4)
100058e8:	21c06326 	beq	r4,r7,10005a78 <_realloc_r+0x218>
100058ec:	017fff84 	movi	r5,-2
100058f0:	414a703a 	and	r5,r8,r5
100058f4:	214b883a 	add	r5,r4,r5
100058f8:	29800117 	ldw	r6,4(r5)
100058fc:	3180004c 	andi	r6,r6,1
10005900:	30003f26 	beq	r6,zero,10005a00 <_realloc_r+0x1a0>
10005904:	1080004c 	andi	r2,r2,1
10005908:	10008326 	beq	r2,zero,10005b18 <_realloc_r+0x2b8>
1000590c:	900b883a 	mov	r5,r18
10005910:	a009883a 	mov	r4,r20
10005914:	0004c500 	call	10004c50 <_malloc_r>
10005918:	1025883a 	mov	r18,r2
1000591c:	10011e26 	beq	r2,zero,10005d98 <_realloc_r+0x538>
10005920:	a93fff17 	ldw	r4,-4(r21)
10005924:	10fffe04 	addi	r3,r2,-8
10005928:	00bfff84 	movi	r2,-2
1000592c:	2084703a 	and	r2,r4,r2
10005930:	9885883a 	add	r2,r19,r2
10005934:	1880ee26 	beq	r3,r2,10005cf0 <_realloc_r+0x490>
10005938:	81bfff04 	addi	r6,r16,-4
1000593c:	00800904 	movi	r2,36
10005940:	1180b836 	bltu	r2,r6,10005c24 <_realloc_r+0x3c4>
10005944:	00c004c4 	movi	r3,19
10005948:	19809636 	bltu	r3,r6,10005ba4 <_realloc_r+0x344>
1000594c:	9005883a 	mov	r2,r18
10005950:	a807883a 	mov	r3,r21
10005954:	19000017 	ldw	r4,0(r3)
10005958:	11000015 	stw	r4,0(r2)
1000595c:	19000117 	ldw	r4,4(r3)
10005960:	11000115 	stw	r4,4(r2)
10005964:	18c00217 	ldw	r3,8(r3)
10005968:	10c00215 	stw	r3,8(r2)
1000596c:	a80b883a 	mov	r5,r21
10005970:	a009883a 	mov	r4,r20
10005974:	0006ae40 	call	10006ae4 <_free_r>
10005978:	a009883a 	mov	r4,r20
1000597c:	0007bac0 	call	10007bac <__malloc_unlock>
10005980:	9005883a 	mov	r2,r18
10005984:	00001206 	br	100059d0 <_realloc_r+0x170>
10005988:	00c00404 	movi	r3,16
1000598c:	1823883a 	mov	r17,r3
10005990:	003fce06 	br	100058cc <_realloc_r+0x6c>
10005994:	a825883a 	mov	r18,r21
10005998:	8445c83a 	sub	r2,r16,r17
1000599c:	00c003c4 	movi	r3,15
100059a0:	18802636 	bltu	r3,r2,10005a3c <_realloc_r+0x1dc>
100059a4:	99800117 	ldw	r6,4(r19)
100059a8:	9c07883a 	add	r3,r19,r16
100059ac:	3180004c 	andi	r6,r6,1
100059b0:	3420b03a 	or	r16,r6,r16
100059b4:	9c000115 	stw	r16,4(r19)
100059b8:	18800117 	ldw	r2,4(r3)
100059bc:	10800054 	ori	r2,r2,1
100059c0:	18800115 	stw	r2,4(r3)
100059c4:	a009883a 	mov	r4,r20
100059c8:	0007bac0 	call	10007bac <__malloc_unlock>
100059cc:	9005883a 	mov	r2,r18
100059d0:	dfc00917 	ldw	ra,36(sp)
100059d4:	df000817 	ldw	fp,32(sp)
100059d8:	ddc00717 	ldw	r23,28(sp)
100059dc:	dd800617 	ldw	r22,24(sp)
100059e0:	dd400517 	ldw	r21,20(sp)
100059e4:	dd000417 	ldw	r20,16(sp)
100059e8:	dcc00317 	ldw	r19,12(sp)
100059ec:	dc800217 	ldw	r18,8(sp)
100059f0:	dc400117 	ldw	r17,4(sp)
100059f4:	dc000017 	ldw	r16,0(sp)
100059f8:	dec00a04 	addi	sp,sp,40
100059fc:	f800283a 	ret
10005a00:	017fff04 	movi	r5,-4
10005a04:	414a703a 	and	r5,r8,r5
10005a08:	814d883a 	add	r6,r16,r5
10005a0c:	30c01f16 	blt	r6,r3,10005a8c <_realloc_r+0x22c>
10005a10:	20800317 	ldw	r2,12(r4)
10005a14:	20c00217 	ldw	r3,8(r4)
10005a18:	a825883a 	mov	r18,r21
10005a1c:	3021883a 	mov	r16,r6
10005a20:	18800315 	stw	r2,12(r3)
10005a24:	10c00215 	stw	r3,8(r2)
10005a28:	003fdb06 	br	10005998 <_realloc_r+0x138>
10005a2c:	00800304 	movi	r2,12
10005a30:	a0800015 	stw	r2,0(r20)
10005a34:	0005883a 	mov	r2,zero
10005a38:	003fe506 	br	100059d0 <_realloc_r+0x170>
10005a3c:	98c00117 	ldw	r3,4(r19)
10005a40:	9c4b883a 	add	r5,r19,r17
10005a44:	11000054 	ori	r4,r2,1
10005a48:	18c0004c 	andi	r3,r3,1
10005a4c:	1c62b03a 	or	r17,r3,r17
10005a50:	9c400115 	stw	r17,4(r19)
10005a54:	29000115 	stw	r4,4(r5)
10005a58:	2885883a 	add	r2,r5,r2
10005a5c:	10c00117 	ldw	r3,4(r2)
10005a60:	29400204 	addi	r5,r5,8
10005a64:	a009883a 	mov	r4,r20
10005a68:	18c00054 	ori	r3,r3,1
10005a6c:	10c00115 	stw	r3,4(r2)
10005a70:	0006ae40 	call	10006ae4 <_free_r>
10005a74:	003fd306 	br	100059c4 <_realloc_r+0x164>
10005a78:	017fff04 	movi	r5,-4
10005a7c:	414a703a 	and	r5,r8,r5
10005a80:	89800404 	addi	r6,r17,16
10005a84:	8151883a 	add	r8,r16,r5
10005a88:	4180590e 	bge	r8,r6,10005bf0 <_realloc_r+0x390>
10005a8c:	1080004c 	andi	r2,r2,1
10005a90:	103f9e1e 	bne	r2,zero,1000590c <_realloc_r+0xac>
10005a94:	adbffe17 	ldw	r22,-8(r21)
10005a98:	00bfff04 	movi	r2,-4
10005a9c:	9dadc83a 	sub	r22,r19,r22
10005aa0:	b1800117 	ldw	r6,4(r22)
10005aa4:	3084703a 	and	r2,r6,r2
10005aa8:	20002026 	beq	r4,zero,10005b2c <_realloc_r+0x2cc>
10005aac:	80af883a 	add	r23,r16,r2
10005ab0:	b96f883a 	add	r23,r23,r5
10005ab4:	21c05f26 	beq	r4,r7,10005c34 <_realloc_r+0x3d4>
10005ab8:	b8c01c16 	blt	r23,r3,10005b2c <_realloc_r+0x2cc>
10005abc:	20800317 	ldw	r2,12(r4)
10005ac0:	20c00217 	ldw	r3,8(r4)
10005ac4:	81bfff04 	addi	r6,r16,-4
10005ac8:	01000904 	movi	r4,36
10005acc:	18800315 	stw	r2,12(r3)
10005ad0:	10c00215 	stw	r3,8(r2)
10005ad4:	b0c00217 	ldw	r3,8(r22)
10005ad8:	b0800317 	ldw	r2,12(r22)
10005adc:	b4800204 	addi	r18,r22,8
10005ae0:	18800315 	stw	r2,12(r3)
10005ae4:	10c00215 	stw	r3,8(r2)
10005ae8:	21801b36 	bltu	r4,r6,10005b58 <_realloc_r+0x2f8>
10005aec:	008004c4 	movi	r2,19
10005af0:	1180352e 	bgeu	r2,r6,10005bc8 <_realloc_r+0x368>
10005af4:	a8800017 	ldw	r2,0(r21)
10005af8:	b0800215 	stw	r2,8(r22)
10005afc:	a8800117 	ldw	r2,4(r21)
10005b00:	b0800315 	stw	r2,12(r22)
10005b04:	008006c4 	movi	r2,27
10005b08:	11807f36 	bltu	r2,r6,10005d08 <_realloc_r+0x4a8>
10005b0c:	b0800404 	addi	r2,r22,16
10005b10:	ad400204 	addi	r21,r21,8
10005b14:	00002d06 	br	10005bcc <_realloc_r+0x36c>
10005b18:	adbffe17 	ldw	r22,-8(r21)
10005b1c:	00bfff04 	movi	r2,-4
10005b20:	9dadc83a 	sub	r22,r19,r22
10005b24:	b1000117 	ldw	r4,4(r22)
10005b28:	2084703a 	and	r2,r4,r2
10005b2c:	b03f7726 	beq	r22,zero,1000590c <_realloc_r+0xac>
10005b30:	80af883a 	add	r23,r16,r2
10005b34:	b8ff7516 	blt	r23,r3,1000590c <_realloc_r+0xac>
10005b38:	b0800317 	ldw	r2,12(r22)
10005b3c:	b0c00217 	ldw	r3,8(r22)
10005b40:	81bfff04 	addi	r6,r16,-4
10005b44:	01000904 	movi	r4,36
10005b48:	18800315 	stw	r2,12(r3)
10005b4c:	10c00215 	stw	r3,8(r2)
10005b50:	b4800204 	addi	r18,r22,8
10005b54:	21bfe52e 	bgeu	r4,r6,10005aec <_realloc_r+0x28c>
10005b58:	a80b883a 	mov	r5,r21
10005b5c:	9009883a 	mov	r4,r18
10005b60:	00057040 	call	10005704 <memmove>
10005b64:	b821883a 	mov	r16,r23
10005b68:	b027883a 	mov	r19,r22
10005b6c:	003f8a06 	br	10005998 <_realloc_r+0x138>
10005b70:	300b883a 	mov	r5,r6
10005b74:	dfc00917 	ldw	ra,36(sp)
10005b78:	df000817 	ldw	fp,32(sp)
10005b7c:	ddc00717 	ldw	r23,28(sp)
10005b80:	dd800617 	ldw	r22,24(sp)
10005b84:	dd400517 	ldw	r21,20(sp)
10005b88:	dd000417 	ldw	r20,16(sp)
10005b8c:	dcc00317 	ldw	r19,12(sp)
10005b90:	dc800217 	ldw	r18,8(sp)
10005b94:	dc400117 	ldw	r17,4(sp)
10005b98:	dc000017 	ldw	r16,0(sp)
10005b9c:	dec00a04 	addi	sp,sp,40
10005ba0:	0004c501 	jmpi	10004c50 <_malloc_r>
10005ba4:	a8c00017 	ldw	r3,0(r21)
10005ba8:	90c00015 	stw	r3,0(r18)
10005bac:	a8c00117 	ldw	r3,4(r21)
10005bb0:	90c00115 	stw	r3,4(r18)
10005bb4:	00c006c4 	movi	r3,27
10005bb8:	19804536 	bltu	r3,r6,10005cd0 <_realloc_r+0x470>
10005bbc:	90800204 	addi	r2,r18,8
10005bc0:	a8c00204 	addi	r3,r21,8
10005bc4:	003f6306 	br	10005954 <_realloc_r+0xf4>
10005bc8:	9005883a 	mov	r2,r18
10005bcc:	a8c00017 	ldw	r3,0(r21)
10005bd0:	b821883a 	mov	r16,r23
10005bd4:	b027883a 	mov	r19,r22
10005bd8:	10c00015 	stw	r3,0(r2)
10005bdc:	a8c00117 	ldw	r3,4(r21)
10005be0:	10c00115 	stw	r3,4(r2)
10005be4:	a8c00217 	ldw	r3,8(r21)
10005be8:	10c00215 	stw	r3,8(r2)
10005bec:	003f6a06 	br	10005998 <_realloc_r+0x138>
10005bf0:	9c67883a 	add	r19,r19,r17
10005bf4:	4445c83a 	sub	r2,r8,r17
10005bf8:	e4c00215 	stw	r19,8(fp)
10005bfc:	10800054 	ori	r2,r2,1
10005c00:	98800115 	stw	r2,4(r19)
10005c04:	a8bfff17 	ldw	r2,-4(r21)
10005c08:	a009883a 	mov	r4,r20
10005c0c:	1080004c 	andi	r2,r2,1
10005c10:	1462b03a 	or	r17,r2,r17
10005c14:	ac7fff15 	stw	r17,-4(r21)
10005c18:	0007bac0 	call	10007bac <__malloc_unlock>
10005c1c:	a805883a 	mov	r2,r21
10005c20:	003f6b06 	br	100059d0 <_realloc_r+0x170>
10005c24:	a80b883a 	mov	r5,r21
10005c28:	9009883a 	mov	r4,r18
10005c2c:	00057040 	call	10005704 <memmove>
10005c30:	003f4e06 	br	1000596c <_realloc_r+0x10c>
10005c34:	89000404 	addi	r4,r17,16
10005c38:	b93fbc16 	blt	r23,r4,10005b2c <_realloc_r+0x2cc>
10005c3c:	b0800317 	ldw	r2,12(r22)
10005c40:	b0c00217 	ldw	r3,8(r22)
10005c44:	81bfff04 	addi	r6,r16,-4
10005c48:	01000904 	movi	r4,36
10005c4c:	18800315 	stw	r2,12(r3)
10005c50:	10c00215 	stw	r3,8(r2)
10005c54:	b4800204 	addi	r18,r22,8
10005c58:	21804336 	bltu	r4,r6,10005d68 <_realloc_r+0x508>
10005c5c:	008004c4 	movi	r2,19
10005c60:	11803f2e 	bgeu	r2,r6,10005d60 <_realloc_r+0x500>
10005c64:	a8800017 	ldw	r2,0(r21)
10005c68:	b0800215 	stw	r2,8(r22)
10005c6c:	a8800117 	ldw	r2,4(r21)
10005c70:	b0800315 	stw	r2,12(r22)
10005c74:	008006c4 	movi	r2,27
10005c78:	11803f36 	bltu	r2,r6,10005d78 <_realloc_r+0x518>
10005c7c:	b0800404 	addi	r2,r22,16
10005c80:	ad400204 	addi	r21,r21,8
10005c84:	a8c00017 	ldw	r3,0(r21)
10005c88:	10c00015 	stw	r3,0(r2)
10005c8c:	a8c00117 	ldw	r3,4(r21)
10005c90:	10c00115 	stw	r3,4(r2)
10005c94:	a8c00217 	ldw	r3,8(r21)
10005c98:	10c00215 	stw	r3,8(r2)
10005c9c:	b447883a 	add	r3,r22,r17
10005ca0:	bc45c83a 	sub	r2,r23,r17
10005ca4:	e0c00215 	stw	r3,8(fp)
10005ca8:	10800054 	ori	r2,r2,1
10005cac:	18800115 	stw	r2,4(r3)
10005cb0:	b0800117 	ldw	r2,4(r22)
10005cb4:	a009883a 	mov	r4,r20
10005cb8:	1080004c 	andi	r2,r2,1
10005cbc:	1462b03a 	or	r17,r2,r17
10005cc0:	b4400115 	stw	r17,4(r22)
10005cc4:	0007bac0 	call	10007bac <__malloc_unlock>
10005cc8:	9005883a 	mov	r2,r18
10005ccc:	003f4006 	br	100059d0 <_realloc_r+0x170>
10005cd0:	a8c00217 	ldw	r3,8(r21)
10005cd4:	90c00215 	stw	r3,8(r18)
10005cd8:	a8c00317 	ldw	r3,12(r21)
10005cdc:	90c00315 	stw	r3,12(r18)
10005ce0:	30801126 	beq	r6,r2,10005d28 <_realloc_r+0x4c8>
10005ce4:	90800404 	addi	r2,r18,16
10005ce8:	a8c00404 	addi	r3,r21,16
10005cec:	003f1906 	br	10005954 <_realloc_r+0xf4>
10005cf0:	90ffff17 	ldw	r3,-4(r18)
10005cf4:	00bfff04 	movi	r2,-4
10005cf8:	a825883a 	mov	r18,r21
10005cfc:	1884703a 	and	r2,r3,r2
10005d00:	80a1883a 	add	r16,r16,r2
10005d04:	003f2406 	br	10005998 <_realloc_r+0x138>
10005d08:	a8800217 	ldw	r2,8(r21)
10005d0c:	b0800415 	stw	r2,16(r22)
10005d10:	a8800317 	ldw	r2,12(r21)
10005d14:	b0800515 	stw	r2,20(r22)
10005d18:	31000a26 	beq	r6,r4,10005d44 <_realloc_r+0x4e4>
10005d1c:	b0800604 	addi	r2,r22,24
10005d20:	ad400404 	addi	r21,r21,16
10005d24:	003fa906 	br	10005bcc <_realloc_r+0x36c>
10005d28:	a9000417 	ldw	r4,16(r21)
10005d2c:	90800604 	addi	r2,r18,24
10005d30:	a8c00604 	addi	r3,r21,24
10005d34:	91000415 	stw	r4,16(r18)
10005d38:	a9000517 	ldw	r4,20(r21)
10005d3c:	91000515 	stw	r4,20(r18)
10005d40:	003f0406 	br	10005954 <_realloc_r+0xf4>
10005d44:	a8c00417 	ldw	r3,16(r21)
10005d48:	ad400604 	addi	r21,r21,24
10005d4c:	b0800804 	addi	r2,r22,32
10005d50:	b0c00615 	stw	r3,24(r22)
10005d54:	a8ffff17 	ldw	r3,-4(r21)
10005d58:	b0c00715 	stw	r3,28(r22)
10005d5c:	003f9b06 	br	10005bcc <_realloc_r+0x36c>
10005d60:	9005883a 	mov	r2,r18
10005d64:	003fc706 	br	10005c84 <_realloc_r+0x424>
10005d68:	a80b883a 	mov	r5,r21
10005d6c:	9009883a 	mov	r4,r18
10005d70:	00057040 	call	10005704 <memmove>
10005d74:	003fc906 	br	10005c9c <_realloc_r+0x43c>
10005d78:	a8800217 	ldw	r2,8(r21)
10005d7c:	b0800415 	stw	r2,16(r22)
10005d80:	a8800317 	ldw	r2,12(r21)
10005d84:	b0800515 	stw	r2,20(r22)
10005d88:	31000726 	beq	r6,r4,10005da8 <_realloc_r+0x548>
10005d8c:	b0800604 	addi	r2,r22,24
10005d90:	ad400404 	addi	r21,r21,16
10005d94:	003fbb06 	br	10005c84 <_realloc_r+0x424>
10005d98:	a009883a 	mov	r4,r20
10005d9c:	0007bac0 	call	10007bac <__malloc_unlock>
10005da0:	0005883a 	mov	r2,zero
10005da4:	003f0a06 	br	100059d0 <_realloc_r+0x170>
10005da8:	a8c00417 	ldw	r3,16(r21)
10005dac:	ad400604 	addi	r21,r21,24
10005db0:	b0800804 	addi	r2,r22,32
10005db4:	b0c00615 	stw	r3,24(r22)
10005db8:	a8ffff17 	ldw	r3,-4(r21)
10005dbc:	b0c00715 	stw	r3,28(r22)
10005dc0:	003fb006 	br	10005c84 <_realloc_r+0x424>

10005dc4 <_sbrk_r>:
10005dc4:	defffd04 	addi	sp,sp,-12
10005dc8:	dc000015 	stw	r16,0(sp)
10005dcc:	04040774 	movhi	r16,4125
10005dd0:	dc400115 	stw	r17,4(sp)
10005dd4:	8435fc04 	addi	r16,r16,-10256
10005dd8:	2023883a 	mov	r17,r4
10005ddc:	2809883a 	mov	r4,r5
10005de0:	dfc00215 	stw	ra,8(sp)
10005de4:	80000015 	stw	zero,0(r16)
10005de8:	0007d080 	call	10007d08 <sbrk>
10005dec:	00ffffc4 	movi	r3,-1
10005df0:	10c00526 	beq	r2,r3,10005e08 <_sbrk_r+0x44>
10005df4:	dfc00217 	ldw	ra,8(sp)
10005df8:	dc400117 	ldw	r17,4(sp)
10005dfc:	dc000017 	ldw	r16,0(sp)
10005e00:	dec00304 	addi	sp,sp,12
10005e04:	f800283a 	ret
10005e08:	80c00017 	ldw	r3,0(r16)
10005e0c:	183ff926 	beq	r3,zero,10005df4 <_sbrk_r+0x30>
10005e10:	88c00015 	stw	r3,0(r17)
10005e14:	003ff706 	br	10005df4 <_sbrk_r+0x30>

10005e18 <strcmp>:
10005e18:	2144b03a 	or	r2,r4,r5
10005e1c:	108000cc 	andi	r2,r2,3
10005e20:	1000171e 	bne	r2,zero,10005e80 <strcmp+0x68>
10005e24:	20800017 	ldw	r2,0(r4)
10005e28:	28c00017 	ldw	r3,0(r5)
10005e2c:	10c0141e 	bne	r2,r3,10005e80 <strcmp+0x68>
10005e30:	027fbff4 	movhi	r9,65279
10005e34:	4a7fbfc4 	addi	r9,r9,-257
10005e38:	0086303a 	nor	r3,zero,r2
10005e3c:	02202074 	movhi	r8,32897
10005e40:	1245883a 	add	r2,r2,r9
10005e44:	42202004 	addi	r8,r8,-32640
10005e48:	10c4703a 	and	r2,r2,r3
10005e4c:	1204703a 	and	r2,r2,r8
10005e50:	10000226 	beq	r2,zero,10005e5c <strcmp+0x44>
10005e54:	00002306 	br	10005ee4 <strcmp+0xcc>
10005e58:	1000221e 	bne	r2,zero,10005ee4 <strcmp+0xcc>
10005e5c:	21000104 	addi	r4,r4,4
10005e60:	20c00017 	ldw	r3,0(r4)
10005e64:	29400104 	addi	r5,r5,4
10005e68:	29800017 	ldw	r6,0(r5)
10005e6c:	1a4f883a 	add	r7,r3,r9
10005e70:	00c4303a 	nor	r2,zero,r3
10005e74:	3884703a 	and	r2,r7,r2
10005e78:	1204703a 	and	r2,r2,r8
10005e7c:	19bff626 	beq	r3,r6,10005e58 <strcmp+0x40>
10005e80:	20800003 	ldbu	r2,0(r4)
10005e84:	10c03fcc 	andi	r3,r2,255
10005e88:	18c0201c 	xori	r3,r3,128
10005e8c:	18ffe004 	addi	r3,r3,-128
10005e90:	18000c26 	beq	r3,zero,10005ec4 <strcmp+0xac>
10005e94:	29800007 	ldb	r6,0(r5)
10005e98:	19800326 	beq	r3,r6,10005ea8 <strcmp+0x90>
10005e9c:	00001306 	br	10005eec <strcmp+0xd4>
10005ea0:	29800007 	ldb	r6,0(r5)
10005ea4:	11800b1e 	bne	r2,r6,10005ed4 <strcmp+0xbc>
10005ea8:	21000044 	addi	r4,r4,1
10005eac:	20c00003 	ldbu	r3,0(r4)
10005eb0:	29400044 	addi	r5,r5,1
10005eb4:	18803fcc 	andi	r2,r3,255
10005eb8:	1080201c 	xori	r2,r2,128
10005ebc:	10bfe004 	addi	r2,r2,-128
10005ec0:	103ff71e 	bne	r2,zero,10005ea0 <strcmp+0x88>
10005ec4:	0007883a 	mov	r3,zero
10005ec8:	28800003 	ldbu	r2,0(r5)
10005ecc:	1885c83a 	sub	r2,r3,r2
10005ed0:	f800283a 	ret
10005ed4:	28800003 	ldbu	r2,0(r5)
10005ed8:	18c03fcc 	andi	r3,r3,255
10005edc:	1885c83a 	sub	r2,r3,r2
10005ee0:	f800283a 	ret
10005ee4:	0005883a 	mov	r2,zero
10005ee8:	f800283a 	ret
10005eec:	10c03fcc 	andi	r3,r2,255
10005ef0:	003ff506 	br	10005ec8 <strcmp+0xb0>

10005ef4 <strlen>:
10005ef4:	208000cc 	andi	r2,r4,3
10005ef8:	10002026 	beq	r2,zero,10005f7c <strlen+0x88>
10005efc:	20800007 	ldb	r2,0(r4)
10005f00:	10002026 	beq	r2,zero,10005f84 <strlen+0x90>
10005f04:	2005883a 	mov	r2,r4
10005f08:	00000206 	br	10005f14 <strlen+0x20>
10005f0c:	10c00007 	ldb	r3,0(r2)
10005f10:	18001826 	beq	r3,zero,10005f74 <strlen+0x80>
10005f14:	10800044 	addi	r2,r2,1
10005f18:	10c000cc 	andi	r3,r2,3
10005f1c:	183ffb1e 	bne	r3,zero,10005f0c <strlen+0x18>
10005f20:	10c00017 	ldw	r3,0(r2)
10005f24:	01ffbff4 	movhi	r7,65279
10005f28:	39ffbfc4 	addi	r7,r7,-257
10005f2c:	00ca303a 	nor	r5,zero,r3
10005f30:	01a02074 	movhi	r6,32897
10005f34:	19c7883a 	add	r3,r3,r7
10005f38:	31a02004 	addi	r6,r6,-32640
10005f3c:	1946703a 	and	r3,r3,r5
10005f40:	1986703a 	and	r3,r3,r6
10005f44:	1800091e 	bne	r3,zero,10005f6c <strlen+0x78>
10005f48:	10800104 	addi	r2,r2,4
10005f4c:	10c00017 	ldw	r3,0(r2)
10005f50:	19cb883a 	add	r5,r3,r7
10005f54:	00c6303a 	nor	r3,zero,r3
10005f58:	28c6703a 	and	r3,r5,r3
10005f5c:	1986703a 	and	r3,r3,r6
10005f60:	183ff926 	beq	r3,zero,10005f48 <strlen+0x54>
10005f64:	00000106 	br	10005f6c <strlen+0x78>
10005f68:	10800044 	addi	r2,r2,1
10005f6c:	10c00007 	ldb	r3,0(r2)
10005f70:	183ffd1e 	bne	r3,zero,10005f68 <strlen+0x74>
10005f74:	1105c83a 	sub	r2,r2,r4
10005f78:	f800283a 	ret
10005f7c:	2005883a 	mov	r2,r4
10005f80:	003fe706 	br	10005f20 <strlen+0x2c>
10005f84:	0005883a 	mov	r2,zero
10005f88:	f800283a 	ret

10005f8c <__swsetup_r>:
10005f8c:	00840774 	movhi	r2,4125
10005f90:	defffd04 	addi	sp,sp,-12
10005f94:	10af1e04 	addi	r2,r2,-17288
10005f98:	dc400115 	stw	r17,4(sp)
10005f9c:	2023883a 	mov	r17,r4
10005fa0:	11000017 	ldw	r4,0(r2)
10005fa4:	dc000015 	stw	r16,0(sp)
10005fa8:	dfc00215 	stw	ra,8(sp)
10005fac:	2821883a 	mov	r16,r5
10005fb0:	20000226 	beq	r4,zero,10005fbc <__swsetup_r+0x30>
10005fb4:	20800e17 	ldw	r2,56(r4)
10005fb8:	10003126 	beq	r2,zero,10006080 <__swsetup_r+0xf4>
10005fbc:	8080030b 	ldhu	r2,12(r16)
10005fc0:	10c0020c 	andi	r3,r2,8
10005fc4:	1009883a 	mov	r4,r2
10005fc8:	18000f26 	beq	r3,zero,10006008 <__swsetup_r+0x7c>
10005fcc:	80c00417 	ldw	r3,16(r16)
10005fd0:	18001526 	beq	r3,zero,10006028 <__swsetup_r+0x9c>
10005fd4:	1100004c 	andi	r4,r2,1
10005fd8:	20001c1e 	bne	r4,zero,1000604c <__swsetup_r+0xc0>
10005fdc:	1080008c 	andi	r2,r2,2
10005fe0:	1000291e 	bne	r2,zero,10006088 <__swsetup_r+0xfc>
10005fe4:	80800517 	ldw	r2,20(r16)
10005fe8:	80800215 	stw	r2,8(r16)
10005fec:	18001c26 	beq	r3,zero,10006060 <__swsetup_r+0xd4>
10005ff0:	0005883a 	mov	r2,zero
10005ff4:	dfc00217 	ldw	ra,8(sp)
10005ff8:	dc400117 	ldw	r17,4(sp)
10005ffc:	dc000017 	ldw	r16,0(sp)
10006000:	dec00304 	addi	sp,sp,12
10006004:	f800283a 	ret
10006008:	2080040c 	andi	r2,r4,16
1000600c:	10002e26 	beq	r2,zero,100060c8 <__swsetup_r+0x13c>
10006010:	2080010c 	andi	r2,r4,4
10006014:	10001e1e 	bne	r2,zero,10006090 <__swsetup_r+0x104>
10006018:	80c00417 	ldw	r3,16(r16)
1000601c:	20800214 	ori	r2,r4,8
10006020:	8080030d 	sth	r2,12(r16)
10006024:	183feb1e 	bne	r3,zero,10005fd4 <__swsetup_r+0x48>
10006028:	1100a00c 	andi	r4,r2,640
1000602c:	01408004 	movi	r5,512
10006030:	217fe826 	beq	r4,r5,10005fd4 <__swsetup_r+0x48>
10006034:	800b883a 	mov	r5,r16
10006038:	8809883a 	mov	r4,r17
1000603c:	0006f7c0 	call	10006f7c <__smakebuf_r>
10006040:	8080030b 	ldhu	r2,12(r16)
10006044:	80c00417 	ldw	r3,16(r16)
10006048:	003fe206 	br	10005fd4 <__swsetup_r+0x48>
1000604c:	80800517 	ldw	r2,20(r16)
10006050:	80000215 	stw	zero,8(r16)
10006054:	0085c83a 	sub	r2,zero,r2
10006058:	80800615 	stw	r2,24(r16)
1000605c:	183fe41e 	bne	r3,zero,10005ff0 <__swsetup_r+0x64>
10006060:	80c0030b 	ldhu	r3,12(r16)
10006064:	0005883a 	mov	r2,zero
10006068:	1900200c 	andi	r4,r3,128
1000606c:	203fe126 	beq	r4,zero,10005ff4 <__swsetup_r+0x68>
10006070:	18c01014 	ori	r3,r3,64
10006074:	80c0030d 	sth	r3,12(r16)
10006078:	00bfffc4 	movi	r2,-1
1000607c:	003fdd06 	br	10005ff4 <__swsetup_r+0x68>
10006080:	00069700 	call	10006970 <__sinit>
10006084:	003fcd06 	br	10005fbc <__swsetup_r+0x30>
10006088:	0005883a 	mov	r2,zero
1000608c:	003fd606 	br	10005fe8 <__swsetup_r+0x5c>
10006090:	81400c17 	ldw	r5,48(r16)
10006094:	28000626 	beq	r5,zero,100060b0 <__swsetup_r+0x124>
10006098:	80801004 	addi	r2,r16,64
1000609c:	28800326 	beq	r5,r2,100060ac <__swsetup_r+0x120>
100060a0:	8809883a 	mov	r4,r17
100060a4:	0006ae40 	call	10006ae4 <_free_r>
100060a8:	8100030b 	ldhu	r4,12(r16)
100060ac:	80000c15 	stw	zero,48(r16)
100060b0:	80c00417 	ldw	r3,16(r16)
100060b4:	00bff6c4 	movi	r2,-37
100060b8:	1108703a 	and	r4,r2,r4
100060bc:	80000115 	stw	zero,4(r16)
100060c0:	80c00015 	stw	r3,0(r16)
100060c4:	003fd506 	br	1000601c <__swsetup_r+0x90>
100060c8:	00800244 	movi	r2,9
100060cc:	88800015 	stw	r2,0(r17)
100060d0:	20801014 	ori	r2,r4,64
100060d4:	8080030d 	sth	r2,12(r16)
100060d8:	00bfffc4 	movi	r2,-1
100060dc:	003fc506 	br	10005ff4 <__swsetup_r+0x68>

100060e0 <__register_exitproc>:
100060e0:	defffa04 	addi	sp,sp,-24
100060e4:	dc000315 	stw	r16,12(sp)
100060e8:	04040774 	movhi	r16,4125
100060ec:	842f1d04 	addi	r16,r16,-17292
100060f0:	80c00017 	ldw	r3,0(r16)
100060f4:	dc400415 	stw	r17,16(sp)
100060f8:	dfc00515 	stw	ra,20(sp)
100060fc:	18805217 	ldw	r2,328(r3)
10006100:	2023883a 	mov	r17,r4
10006104:	10003726 	beq	r2,zero,100061e4 <__register_exitproc+0x104>
10006108:	10c00117 	ldw	r3,4(r2)
1000610c:	010007c4 	movi	r4,31
10006110:	20c00e16 	blt	r4,r3,1000614c <__register_exitproc+0x6c>
10006114:	1a000044 	addi	r8,r3,1
10006118:	8800221e 	bne	r17,zero,100061a4 <__register_exitproc+0xc4>
1000611c:	18c00084 	addi	r3,r3,2
10006120:	18c7883a 	add	r3,r3,r3
10006124:	18c7883a 	add	r3,r3,r3
10006128:	12000115 	stw	r8,4(r2)
1000612c:	10c7883a 	add	r3,r2,r3
10006130:	19400015 	stw	r5,0(r3)
10006134:	0005883a 	mov	r2,zero
10006138:	dfc00517 	ldw	ra,20(sp)
1000613c:	dc400417 	ldw	r17,16(sp)
10006140:	dc000317 	ldw	r16,12(sp)
10006144:	dec00604 	addi	sp,sp,24
10006148:	f800283a 	ret
1000614c:	00800034 	movhi	r2,0
10006150:	10800004 	addi	r2,r2,0
10006154:	10002626 	beq	r2,zero,100061f0 <__register_exitproc+0x110>
10006158:	01006404 	movi	r4,400
1000615c:	d9400015 	stw	r5,0(sp)
10006160:	d9800115 	stw	r6,4(sp)
10006164:	d9c00215 	stw	r7,8(sp)
10006168:	00000000 	call	10000000 <__alt_mem_sdram_controller>
1000616c:	d9400017 	ldw	r5,0(sp)
10006170:	d9800117 	ldw	r6,4(sp)
10006174:	d9c00217 	ldw	r7,8(sp)
10006178:	10001d26 	beq	r2,zero,100061f0 <__register_exitproc+0x110>
1000617c:	81000017 	ldw	r4,0(r16)
10006180:	10000115 	stw	zero,4(r2)
10006184:	02000044 	movi	r8,1
10006188:	22405217 	ldw	r9,328(r4)
1000618c:	0007883a 	mov	r3,zero
10006190:	12400015 	stw	r9,0(r2)
10006194:	20805215 	stw	r2,328(r4)
10006198:	10006215 	stw	zero,392(r2)
1000619c:	10006315 	stw	zero,396(r2)
100061a0:	883fde26 	beq	r17,zero,1000611c <__register_exitproc+0x3c>
100061a4:	18c9883a 	add	r4,r3,r3
100061a8:	2109883a 	add	r4,r4,r4
100061ac:	1109883a 	add	r4,r2,r4
100061b0:	21802215 	stw	r6,136(r4)
100061b4:	01800044 	movi	r6,1
100061b8:	12406217 	ldw	r9,392(r2)
100061bc:	30cc983a 	sll	r6,r6,r3
100061c0:	4992b03a 	or	r9,r9,r6
100061c4:	12406215 	stw	r9,392(r2)
100061c8:	21c04215 	stw	r7,264(r4)
100061cc:	01000084 	movi	r4,2
100061d0:	893fd21e 	bne	r17,r4,1000611c <__register_exitproc+0x3c>
100061d4:	11006317 	ldw	r4,396(r2)
100061d8:	218cb03a 	or	r6,r4,r6
100061dc:	11806315 	stw	r6,396(r2)
100061e0:	003fce06 	br	1000611c <__register_exitproc+0x3c>
100061e4:	18805304 	addi	r2,r3,332
100061e8:	18805215 	stw	r2,328(r3)
100061ec:	003fc606 	br	10006108 <__register_exitproc+0x28>
100061f0:	00bfffc4 	movi	r2,-1
100061f4:	003fd006 	br	10006138 <__register_exitproc+0x58>

100061f8 <__call_exitprocs>:
100061f8:	defff504 	addi	sp,sp,-44
100061fc:	df000915 	stw	fp,36(sp)
10006200:	dd400615 	stw	r21,24(sp)
10006204:	dc800315 	stw	r18,12(sp)
10006208:	dfc00a15 	stw	ra,40(sp)
1000620c:	ddc00815 	stw	r23,32(sp)
10006210:	dd800715 	stw	r22,28(sp)
10006214:	dd000515 	stw	r20,20(sp)
10006218:	dcc00415 	stw	r19,16(sp)
1000621c:	dc400215 	stw	r17,8(sp)
10006220:	dc000115 	stw	r16,4(sp)
10006224:	d9000015 	stw	r4,0(sp)
10006228:	2839883a 	mov	fp,r5
1000622c:	04800044 	movi	r18,1
10006230:	057fffc4 	movi	r21,-1
10006234:	00840774 	movhi	r2,4125
10006238:	10af1d04 	addi	r2,r2,-17292
1000623c:	12000017 	ldw	r8,0(r2)
10006240:	45005217 	ldw	r20,328(r8)
10006244:	44c05204 	addi	r19,r8,328
10006248:	a0001c26 	beq	r20,zero,100062bc <__call_exitprocs+0xc4>
1000624c:	a0800117 	ldw	r2,4(r20)
10006250:	15ffffc4 	addi	r23,r2,-1
10006254:	b8000d16 	blt	r23,zero,1000628c <__call_exitprocs+0x94>
10006258:	14000044 	addi	r16,r2,1
1000625c:	8421883a 	add	r16,r16,r16
10006260:	8421883a 	add	r16,r16,r16
10006264:	84402004 	addi	r17,r16,128
10006268:	a463883a 	add	r17,r20,r17
1000626c:	a421883a 	add	r16,r20,r16
10006270:	e0001e26 	beq	fp,zero,100062ec <__call_exitprocs+0xf4>
10006274:	80804017 	ldw	r2,256(r16)
10006278:	e0801c26 	beq	fp,r2,100062ec <__call_exitprocs+0xf4>
1000627c:	bdffffc4 	addi	r23,r23,-1
10006280:	843fff04 	addi	r16,r16,-4
10006284:	8c7fff04 	addi	r17,r17,-4
10006288:	bd7ff91e 	bne	r23,r21,10006270 <__call_exitprocs+0x78>
1000628c:	00800034 	movhi	r2,0
10006290:	10800004 	addi	r2,r2,0
10006294:	10000926 	beq	r2,zero,100062bc <__call_exitprocs+0xc4>
10006298:	a0800117 	ldw	r2,4(r20)
1000629c:	1000301e 	bne	r2,zero,10006360 <__call_exitprocs+0x168>
100062a0:	a0800017 	ldw	r2,0(r20)
100062a4:	10003226 	beq	r2,zero,10006370 <__call_exitprocs+0x178>
100062a8:	a009883a 	mov	r4,r20
100062ac:	98800015 	stw	r2,0(r19)
100062b0:	00000000 	call	10000000 <__alt_mem_sdram_controller>
100062b4:	9d000017 	ldw	r20,0(r19)
100062b8:	a03fe41e 	bne	r20,zero,1000624c <__call_exitprocs+0x54>
100062bc:	dfc00a17 	ldw	ra,40(sp)
100062c0:	df000917 	ldw	fp,36(sp)
100062c4:	ddc00817 	ldw	r23,32(sp)
100062c8:	dd800717 	ldw	r22,28(sp)
100062cc:	dd400617 	ldw	r21,24(sp)
100062d0:	dd000517 	ldw	r20,20(sp)
100062d4:	dcc00417 	ldw	r19,16(sp)
100062d8:	dc800317 	ldw	r18,12(sp)
100062dc:	dc400217 	ldw	r17,8(sp)
100062e0:	dc000117 	ldw	r16,4(sp)
100062e4:	dec00b04 	addi	sp,sp,44
100062e8:	f800283a 	ret
100062ec:	a0800117 	ldw	r2,4(r20)
100062f0:	80c00017 	ldw	r3,0(r16)
100062f4:	10bfffc4 	addi	r2,r2,-1
100062f8:	15c01426 	beq	r2,r23,1000634c <__call_exitprocs+0x154>
100062fc:	80000015 	stw	zero,0(r16)
10006300:	183fde26 	beq	r3,zero,1000627c <__call_exitprocs+0x84>
10006304:	95c8983a 	sll	r4,r18,r23
10006308:	a0806217 	ldw	r2,392(r20)
1000630c:	a5800117 	ldw	r22,4(r20)
10006310:	2084703a 	and	r2,r4,r2
10006314:	10000b26 	beq	r2,zero,10006344 <__call_exitprocs+0x14c>
10006318:	a0806317 	ldw	r2,396(r20)
1000631c:	2088703a 	and	r4,r4,r2
10006320:	20000c1e 	bne	r4,zero,10006354 <__call_exitprocs+0x15c>
10006324:	89400017 	ldw	r5,0(r17)
10006328:	d9000017 	ldw	r4,0(sp)
1000632c:	183ee83a 	callr	r3
10006330:	a0800117 	ldw	r2,4(r20)
10006334:	15bfbf1e 	bne	r2,r22,10006234 <__call_exitprocs+0x3c>
10006338:	98800017 	ldw	r2,0(r19)
1000633c:	153fcf26 	beq	r2,r20,1000627c <__call_exitprocs+0x84>
10006340:	003fbc06 	br	10006234 <__call_exitprocs+0x3c>
10006344:	183ee83a 	callr	r3
10006348:	003ff906 	br	10006330 <__call_exitprocs+0x138>
1000634c:	a5c00115 	stw	r23,4(r20)
10006350:	003feb06 	br	10006300 <__call_exitprocs+0x108>
10006354:	89000017 	ldw	r4,0(r17)
10006358:	183ee83a 	callr	r3
1000635c:	003ff406 	br	10006330 <__call_exitprocs+0x138>
10006360:	a0800017 	ldw	r2,0(r20)
10006364:	a027883a 	mov	r19,r20
10006368:	1029883a 	mov	r20,r2
1000636c:	003fb606 	br	10006248 <__call_exitprocs+0x50>
10006370:	0005883a 	mov	r2,zero
10006374:	003ffb06 	br	10006364 <__call_exitprocs+0x16c>

10006378 <__sflush_r>:
10006378:	2880030b 	ldhu	r2,12(r5)
1000637c:	defffb04 	addi	sp,sp,-20
10006380:	dcc00315 	stw	r19,12(sp)
10006384:	dc400115 	stw	r17,4(sp)
10006388:	dfc00415 	stw	ra,16(sp)
1000638c:	dc800215 	stw	r18,8(sp)
10006390:	dc000015 	stw	r16,0(sp)
10006394:	10c0020c 	andi	r3,r2,8
10006398:	2823883a 	mov	r17,r5
1000639c:	2027883a 	mov	r19,r4
100063a0:	1800311e 	bne	r3,zero,10006468 <__sflush_r+0xf0>
100063a4:	28c00117 	ldw	r3,4(r5)
100063a8:	10820014 	ori	r2,r2,2048
100063ac:	2880030d 	sth	r2,12(r5)
100063b0:	00c04b0e 	bge	zero,r3,100064e0 <__sflush_r+0x168>
100063b4:	8a000a17 	ldw	r8,40(r17)
100063b8:	40002326 	beq	r8,zero,10006448 <__sflush_r+0xd0>
100063bc:	9c000017 	ldw	r16,0(r19)
100063c0:	10c4000c 	andi	r3,r2,4096
100063c4:	98000015 	stw	zero,0(r19)
100063c8:	18004826 	beq	r3,zero,100064ec <__sflush_r+0x174>
100063cc:	89801417 	ldw	r6,80(r17)
100063d0:	10c0010c 	andi	r3,r2,4
100063d4:	18000626 	beq	r3,zero,100063f0 <__sflush_r+0x78>
100063d8:	88c00117 	ldw	r3,4(r17)
100063dc:	88800c17 	ldw	r2,48(r17)
100063e0:	30cdc83a 	sub	r6,r6,r3
100063e4:	10000226 	beq	r2,zero,100063f0 <__sflush_r+0x78>
100063e8:	88800f17 	ldw	r2,60(r17)
100063ec:	308dc83a 	sub	r6,r6,r2
100063f0:	89400717 	ldw	r5,28(r17)
100063f4:	000f883a 	mov	r7,zero
100063f8:	9809883a 	mov	r4,r19
100063fc:	403ee83a 	callr	r8
10006400:	00ffffc4 	movi	r3,-1
10006404:	10c04426 	beq	r2,r3,10006518 <__sflush_r+0x1a0>
10006408:	88c0030b 	ldhu	r3,12(r17)
1000640c:	89000417 	ldw	r4,16(r17)
10006410:	88000115 	stw	zero,4(r17)
10006414:	197dffcc 	andi	r5,r3,63487
10006418:	8940030d 	sth	r5,12(r17)
1000641c:	89000015 	stw	r4,0(r17)
10006420:	18c4000c 	andi	r3,r3,4096
10006424:	18002c1e 	bne	r3,zero,100064d8 <__sflush_r+0x160>
10006428:	89400c17 	ldw	r5,48(r17)
1000642c:	9c000015 	stw	r16,0(r19)
10006430:	28000526 	beq	r5,zero,10006448 <__sflush_r+0xd0>
10006434:	88801004 	addi	r2,r17,64
10006438:	28800226 	beq	r5,r2,10006444 <__sflush_r+0xcc>
1000643c:	9809883a 	mov	r4,r19
10006440:	0006ae40 	call	10006ae4 <_free_r>
10006444:	88000c15 	stw	zero,48(r17)
10006448:	0005883a 	mov	r2,zero
1000644c:	dfc00417 	ldw	ra,16(sp)
10006450:	dcc00317 	ldw	r19,12(sp)
10006454:	dc800217 	ldw	r18,8(sp)
10006458:	dc400117 	ldw	r17,4(sp)
1000645c:	dc000017 	ldw	r16,0(sp)
10006460:	dec00504 	addi	sp,sp,20
10006464:	f800283a 	ret
10006468:	2c800417 	ldw	r18,16(r5)
1000646c:	903ff626 	beq	r18,zero,10006448 <__sflush_r+0xd0>
10006470:	2c000017 	ldw	r16,0(r5)
10006474:	108000cc 	andi	r2,r2,3
10006478:	2c800015 	stw	r18,0(r5)
1000647c:	84a1c83a 	sub	r16,r16,r18
10006480:	1000131e 	bne	r2,zero,100064d0 <__sflush_r+0x158>
10006484:	28800517 	ldw	r2,20(r5)
10006488:	88800215 	stw	r2,8(r17)
1000648c:	04000316 	blt	zero,r16,1000649c <__sflush_r+0x124>
10006490:	003fed06 	br	10006448 <__sflush_r+0xd0>
10006494:	90a5883a 	add	r18,r18,r2
10006498:	043feb0e 	bge	zero,r16,10006448 <__sflush_r+0xd0>
1000649c:	88800917 	ldw	r2,36(r17)
100064a0:	89400717 	ldw	r5,28(r17)
100064a4:	800f883a 	mov	r7,r16
100064a8:	900d883a 	mov	r6,r18
100064ac:	9809883a 	mov	r4,r19
100064b0:	103ee83a 	callr	r2
100064b4:	80a1c83a 	sub	r16,r16,r2
100064b8:	00bff616 	blt	zero,r2,10006494 <__sflush_r+0x11c>
100064bc:	88c0030b 	ldhu	r3,12(r17)
100064c0:	00bfffc4 	movi	r2,-1
100064c4:	18c01014 	ori	r3,r3,64
100064c8:	88c0030d 	sth	r3,12(r17)
100064cc:	003fdf06 	br	1000644c <__sflush_r+0xd4>
100064d0:	0005883a 	mov	r2,zero
100064d4:	003fec06 	br	10006488 <__sflush_r+0x110>
100064d8:	88801415 	stw	r2,80(r17)
100064dc:	003fd206 	br	10006428 <__sflush_r+0xb0>
100064e0:	28c00f17 	ldw	r3,60(r5)
100064e4:	00ffb316 	blt	zero,r3,100063b4 <__sflush_r+0x3c>
100064e8:	003fd706 	br	10006448 <__sflush_r+0xd0>
100064ec:	89400717 	ldw	r5,28(r17)
100064f0:	000d883a 	mov	r6,zero
100064f4:	01c00044 	movi	r7,1
100064f8:	9809883a 	mov	r4,r19
100064fc:	403ee83a 	callr	r8
10006500:	100d883a 	mov	r6,r2
10006504:	00bfffc4 	movi	r2,-1
10006508:	30801426 	beq	r6,r2,1000655c <__sflush_r+0x1e4>
1000650c:	8880030b 	ldhu	r2,12(r17)
10006510:	8a000a17 	ldw	r8,40(r17)
10006514:	003fae06 	br	100063d0 <__sflush_r+0x58>
10006518:	98c00017 	ldw	r3,0(r19)
1000651c:	183fba26 	beq	r3,zero,10006408 <__sflush_r+0x90>
10006520:	01000744 	movi	r4,29
10006524:	19000626 	beq	r3,r4,10006540 <__sflush_r+0x1c8>
10006528:	01000584 	movi	r4,22
1000652c:	19000426 	beq	r3,r4,10006540 <__sflush_r+0x1c8>
10006530:	88c0030b 	ldhu	r3,12(r17)
10006534:	18c01014 	ori	r3,r3,64
10006538:	88c0030d 	sth	r3,12(r17)
1000653c:	003fc306 	br	1000644c <__sflush_r+0xd4>
10006540:	8880030b 	ldhu	r2,12(r17)
10006544:	88c00417 	ldw	r3,16(r17)
10006548:	88000115 	stw	zero,4(r17)
1000654c:	10bdffcc 	andi	r2,r2,63487
10006550:	8880030d 	sth	r2,12(r17)
10006554:	88c00015 	stw	r3,0(r17)
10006558:	003fb306 	br	10006428 <__sflush_r+0xb0>
1000655c:	98800017 	ldw	r2,0(r19)
10006560:	103fea26 	beq	r2,zero,1000650c <__sflush_r+0x194>
10006564:	00c00744 	movi	r3,29
10006568:	10c00226 	beq	r2,r3,10006574 <__sflush_r+0x1fc>
1000656c:	00c00584 	movi	r3,22
10006570:	10c0031e 	bne	r2,r3,10006580 <__sflush_r+0x208>
10006574:	9c000015 	stw	r16,0(r19)
10006578:	0005883a 	mov	r2,zero
1000657c:	003fb306 	br	1000644c <__sflush_r+0xd4>
10006580:	88c0030b 	ldhu	r3,12(r17)
10006584:	3005883a 	mov	r2,r6
10006588:	18c01014 	ori	r3,r3,64
1000658c:	88c0030d 	sth	r3,12(r17)
10006590:	003fae06 	br	1000644c <__sflush_r+0xd4>

10006594 <_fflush_r>:
10006594:	defffd04 	addi	sp,sp,-12
10006598:	dc000115 	stw	r16,4(sp)
1000659c:	dfc00215 	stw	ra,8(sp)
100065a0:	2021883a 	mov	r16,r4
100065a4:	20000226 	beq	r4,zero,100065b0 <_fflush_r+0x1c>
100065a8:	20800e17 	ldw	r2,56(r4)
100065ac:	10000c26 	beq	r2,zero,100065e0 <_fflush_r+0x4c>
100065b0:	2880030f 	ldh	r2,12(r5)
100065b4:	1000051e 	bne	r2,zero,100065cc <_fflush_r+0x38>
100065b8:	0005883a 	mov	r2,zero
100065bc:	dfc00217 	ldw	ra,8(sp)
100065c0:	dc000117 	ldw	r16,4(sp)
100065c4:	dec00304 	addi	sp,sp,12
100065c8:	f800283a 	ret
100065cc:	8009883a 	mov	r4,r16
100065d0:	dfc00217 	ldw	ra,8(sp)
100065d4:	dc000117 	ldw	r16,4(sp)
100065d8:	dec00304 	addi	sp,sp,12
100065dc:	00063781 	jmpi	10006378 <__sflush_r>
100065e0:	d9400015 	stw	r5,0(sp)
100065e4:	00069700 	call	10006970 <__sinit>
100065e8:	d9400017 	ldw	r5,0(sp)
100065ec:	003ff006 	br	100065b0 <_fflush_r+0x1c>

100065f0 <fflush>:
100065f0:	20000526 	beq	r4,zero,10006608 <fflush+0x18>
100065f4:	00840774 	movhi	r2,4125
100065f8:	10af1e04 	addi	r2,r2,-17288
100065fc:	200b883a 	mov	r5,r4
10006600:	11000017 	ldw	r4,0(r2)
10006604:	00065941 	jmpi	10006594 <_fflush_r>
10006608:	00840774 	movhi	r2,4125
1000660c:	10af1d04 	addi	r2,r2,-17292
10006610:	11000017 	ldw	r4,0(r2)
10006614:	01440034 	movhi	r5,4096
10006618:	29596504 	addi	r5,r5,26004
1000661c:	0006eb81 	jmpi	10006eb8 <_fwalk_reent>

10006620 <__fp_unlock>:
10006620:	0005883a 	mov	r2,zero
10006624:	f800283a 	ret

10006628 <_cleanup_r>:
10006628:	01440034 	movhi	r5,4096
1000662c:	295d1404 	addi	r5,r5,29776
10006630:	0006eb81 	jmpi	10006eb8 <_fwalk_reent>

10006634 <__sinit.part.1>:
10006634:	defff704 	addi	sp,sp,-36
10006638:	00c40034 	movhi	r3,4096
1000663c:	dfc00815 	stw	ra,32(sp)
10006640:	ddc00715 	stw	r23,28(sp)
10006644:	dd800615 	stw	r22,24(sp)
10006648:	dd400515 	stw	r21,20(sp)
1000664c:	dd000415 	stw	r20,16(sp)
10006650:	dcc00315 	stw	r19,12(sp)
10006654:	dc800215 	stw	r18,8(sp)
10006658:	dc400115 	stw	r17,4(sp)
1000665c:	dc000015 	stw	r16,0(sp)
10006660:	18d98a04 	addi	r3,r3,26152
10006664:	24000117 	ldw	r16,4(r4)
10006668:	20c00f15 	stw	r3,60(r4)
1000666c:	2080bb04 	addi	r2,r4,748
10006670:	00c000c4 	movi	r3,3
10006674:	20c0b915 	stw	r3,740(r4)
10006678:	2080ba15 	stw	r2,744(r4)
1000667c:	2000b815 	stw	zero,736(r4)
10006680:	05c00204 	movi	r23,8
10006684:	00800104 	movi	r2,4
10006688:	2025883a 	mov	r18,r4
1000668c:	b80d883a 	mov	r6,r23
10006690:	81001704 	addi	r4,r16,92
10006694:	000b883a 	mov	r5,zero
10006698:	80000015 	stw	zero,0(r16)
1000669c:	80000115 	stw	zero,4(r16)
100066a0:	80000215 	stw	zero,8(r16)
100066a4:	8080030d 	sth	r2,12(r16)
100066a8:	80001915 	stw	zero,100(r16)
100066ac:	8000038d 	sth	zero,14(r16)
100066b0:	80000415 	stw	zero,16(r16)
100066b4:	80000515 	stw	zero,20(r16)
100066b8:	80000615 	stw	zero,24(r16)
100066bc:	00071380 	call	10007138 <memset>
100066c0:	05840034 	movhi	r22,4096
100066c4:	94400217 	ldw	r17,8(r18)
100066c8:	05440034 	movhi	r21,4096
100066cc:	05040034 	movhi	r20,4096
100066d0:	04c40034 	movhi	r19,4096
100066d4:	b59c9804 	addi	r22,r22,29280
100066d8:	ad5caf04 	addi	r21,r21,29372
100066dc:	a51cce04 	addi	r20,r20,29496
100066e0:	9cdce504 	addi	r19,r19,29588
100066e4:	85800815 	stw	r22,32(r16)
100066e8:	85400915 	stw	r21,36(r16)
100066ec:	85000a15 	stw	r20,40(r16)
100066f0:	84c00b15 	stw	r19,44(r16)
100066f4:	84000715 	stw	r16,28(r16)
100066f8:	00800284 	movi	r2,10
100066fc:	8880030d 	sth	r2,12(r17)
10006700:	00800044 	movi	r2,1
10006704:	b80d883a 	mov	r6,r23
10006708:	89001704 	addi	r4,r17,92
1000670c:	000b883a 	mov	r5,zero
10006710:	88000015 	stw	zero,0(r17)
10006714:	88000115 	stw	zero,4(r17)
10006718:	88000215 	stw	zero,8(r17)
1000671c:	88001915 	stw	zero,100(r17)
10006720:	8880038d 	sth	r2,14(r17)
10006724:	88000415 	stw	zero,16(r17)
10006728:	88000515 	stw	zero,20(r17)
1000672c:	88000615 	stw	zero,24(r17)
10006730:	00071380 	call	10007138 <memset>
10006734:	94000317 	ldw	r16,12(r18)
10006738:	00800484 	movi	r2,18
1000673c:	8c400715 	stw	r17,28(r17)
10006740:	8d800815 	stw	r22,32(r17)
10006744:	8d400915 	stw	r21,36(r17)
10006748:	8d000a15 	stw	r20,40(r17)
1000674c:	8cc00b15 	stw	r19,44(r17)
10006750:	8080030d 	sth	r2,12(r16)
10006754:	00800084 	movi	r2,2
10006758:	80000015 	stw	zero,0(r16)
1000675c:	80000115 	stw	zero,4(r16)
10006760:	80000215 	stw	zero,8(r16)
10006764:	80001915 	stw	zero,100(r16)
10006768:	8080038d 	sth	r2,14(r16)
1000676c:	80000415 	stw	zero,16(r16)
10006770:	80000515 	stw	zero,20(r16)
10006774:	80000615 	stw	zero,24(r16)
10006778:	b80d883a 	mov	r6,r23
1000677c:	000b883a 	mov	r5,zero
10006780:	81001704 	addi	r4,r16,92
10006784:	00071380 	call	10007138 <memset>
10006788:	00800044 	movi	r2,1
1000678c:	84000715 	stw	r16,28(r16)
10006790:	85800815 	stw	r22,32(r16)
10006794:	85400915 	stw	r21,36(r16)
10006798:	85000a15 	stw	r20,40(r16)
1000679c:	84c00b15 	stw	r19,44(r16)
100067a0:	90800e15 	stw	r2,56(r18)
100067a4:	dfc00817 	ldw	ra,32(sp)
100067a8:	ddc00717 	ldw	r23,28(sp)
100067ac:	dd800617 	ldw	r22,24(sp)
100067b0:	dd400517 	ldw	r21,20(sp)
100067b4:	dd000417 	ldw	r20,16(sp)
100067b8:	dcc00317 	ldw	r19,12(sp)
100067bc:	dc800217 	ldw	r18,8(sp)
100067c0:	dc400117 	ldw	r17,4(sp)
100067c4:	dc000017 	ldw	r16,0(sp)
100067c8:	dec00904 	addi	sp,sp,36
100067cc:	f800283a 	ret

100067d0 <__fp_lock>:
100067d0:	0005883a 	mov	r2,zero
100067d4:	f800283a 	ret

100067d8 <__sfmoreglue>:
100067d8:	defffc04 	addi	sp,sp,-16
100067dc:	dc400115 	stw	r17,4(sp)
100067e0:	2c7fffc4 	addi	r17,r5,-1
100067e4:	8c401a24 	muli	r17,r17,104
100067e8:	dc800215 	stw	r18,8(sp)
100067ec:	2825883a 	mov	r18,r5
100067f0:	89401d04 	addi	r5,r17,116
100067f4:	dc000015 	stw	r16,0(sp)
100067f8:	dfc00315 	stw	ra,12(sp)
100067fc:	0004c500 	call	10004c50 <_malloc_r>
10006800:	1021883a 	mov	r16,r2
10006804:	10000726 	beq	r2,zero,10006824 <__sfmoreglue+0x4c>
10006808:	11000304 	addi	r4,r2,12
1000680c:	10000015 	stw	zero,0(r2)
10006810:	14800115 	stw	r18,4(r2)
10006814:	11000215 	stw	r4,8(r2)
10006818:	89801a04 	addi	r6,r17,104
1000681c:	000b883a 	mov	r5,zero
10006820:	00071380 	call	10007138 <memset>
10006824:	8005883a 	mov	r2,r16
10006828:	dfc00317 	ldw	ra,12(sp)
1000682c:	dc800217 	ldw	r18,8(sp)
10006830:	dc400117 	ldw	r17,4(sp)
10006834:	dc000017 	ldw	r16,0(sp)
10006838:	dec00404 	addi	sp,sp,16
1000683c:	f800283a 	ret

10006840 <__sfp>:
10006840:	defffb04 	addi	sp,sp,-20
10006844:	dc000015 	stw	r16,0(sp)
10006848:	04040774 	movhi	r16,4125
1000684c:	842f1d04 	addi	r16,r16,-17292
10006850:	dcc00315 	stw	r19,12(sp)
10006854:	2027883a 	mov	r19,r4
10006858:	81000017 	ldw	r4,0(r16)
1000685c:	dfc00415 	stw	ra,16(sp)
10006860:	dc800215 	stw	r18,8(sp)
10006864:	20800e17 	ldw	r2,56(r4)
10006868:	dc400115 	stw	r17,4(sp)
1000686c:	1000021e 	bne	r2,zero,10006878 <__sfp+0x38>
10006870:	00066340 	call	10006634 <__sinit.part.1>
10006874:	81000017 	ldw	r4,0(r16)
10006878:	2480b804 	addi	r18,r4,736
1000687c:	047fffc4 	movi	r17,-1
10006880:	91000117 	ldw	r4,4(r18)
10006884:	94000217 	ldw	r16,8(r18)
10006888:	213fffc4 	addi	r4,r4,-1
1000688c:	20000a16 	blt	r4,zero,100068b8 <__sfp+0x78>
10006890:	8080030f 	ldh	r2,12(r16)
10006894:	10000c26 	beq	r2,zero,100068c8 <__sfp+0x88>
10006898:	80c01d04 	addi	r3,r16,116
1000689c:	00000206 	br	100068a8 <__sfp+0x68>
100068a0:	18bfe60f 	ldh	r2,-104(r3)
100068a4:	10000826 	beq	r2,zero,100068c8 <__sfp+0x88>
100068a8:	213fffc4 	addi	r4,r4,-1
100068ac:	1c3ffd04 	addi	r16,r3,-12
100068b0:	18c01a04 	addi	r3,r3,104
100068b4:	247ffa1e 	bne	r4,r17,100068a0 <__sfp+0x60>
100068b8:	90800017 	ldw	r2,0(r18)
100068bc:	10001d26 	beq	r2,zero,10006934 <__sfp+0xf4>
100068c0:	1025883a 	mov	r18,r2
100068c4:	003fee06 	br	10006880 <__sfp+0x40>
100068c8:	00bfffc4 	movi	r2,-1
100068cc:	8080038d 	sth	r2,14(r16)
100068d0:	00800044 	movi	r2,1
100068d4:	8080030d 	sth	r2,12(r16)
100068d8:	80001915 	stw	zero,100(r16)
100068dc:	80000015 	stw	zero,0(r16)
100068e0:	80000215 	stw	zero,8(r16)
100068e4:	80000115 	stw	zero,4(r16)
100068e8:	80000415 	stw	zero,16(r16)
100068ec:	80000515 	stw	zero,20(r16)
100068f0:	80000615 	stw	zero,24(r16)
100068f4:	01800204 	movi	r6,8
100068f8:	000b883a 	mov	r5,zero
100068fc:	81001704 	addi	r4,r16,92
10006900:	00071380 	call	10007138 <memset>
10006904:	8005883a 	mov	r2,r16
10006908:	80000c15 	stw	zero,48(r16)
1000690c:	80000d15 	stw	zero,52(r16)
10006910:	80001115 	stw	zero,68(r16)
10006914:	80001215 	stw	zero,72(r16)
10006918:	dfc00417 	ldw	ra,16(sp)
1000691c:	dcc00317 	ldw	r19,12(sp)
10006920:	dc800217 	ldw	r18,8(sp)
10006924:	dc400117 	ldw	r17,4(sp)
10006928:	dc000017 	ldw	r16,0(sp)
1000692c:	dec00504 	addi	sp,sp,20
10006930:	f800283a 	ret
10006934:	01400104 	movi	r5,4
10006938:	9809883a 	mov	r4,r19
1000693c:	00067d80 	call	100067d8 <__sfmoreglue>
10006940:	90800015 	stw	r2,0(r18)
10006944:	103fde1e 	bne	r2,zero,100068c0 <__sfp+0x80>
10006948:	00800304 	movi	r2,12
1000694c:	98800015 	stw	r2,0(r19)
10006950:	0005883a 	mov	r2,zero
10006954:	003ff006 	br	10006918 <__sfp+0xd8>

10006958 <_cleanup>:
10006958:	00840774 	movhi	r2,4125
1000695c:	10af1d04 	addi	r2,r2,-17292
10006960:	11000017 	ldw	r4,0(r2)
10006964:	01440034 	movhi	r5,4096
10006968:	295d1404 	addi	r5,r5,29776
1000696c:	0006eb81 	jmpi	10006eb8 <_fwalk_reent>

10006970 <__sinit>:
10006970:	20800e17 	ldw	r2,56(r4)
10006974:	10000126 	beq	r2,zero,1000697c <__sinit+0xc>
10006978:	f800283a 	ret
1000697c:	00066341 	jmpi	10006634 <__sinit.part.1>

10006980 <__sfp_lock_acquire>:
10006980:	f800283a 	ret

10006984 <__sfp_lock_release>:
10006984:	f800283a 	ret

10006988 <__sinit_lock_acquire>:
10006988:	f800283a 	ret

1000698c <__sinit_lock_release>:
1000698c:	f800283a 	ret

10006990 <__fp_lock_all>:
10006990:	00840774 	movhi	r2,4125
10006994:	10af1e04 	addi	r2,r2,-17288
10006998:	11000017 	ldw	r4,0(r2)
1000699c:	01440034 	movhi	r5,4096
100069a0:	2959f404 	addi	r5,r5,26576
100069a4:	0006df41 	jmpi	10006df4 <_fwalk>

100069a8 <__fp_unlock_all>:
100069a8:	00840774 	movhi	r2,4125
100069ac:	10af1e04 	addi	r2,r2,-17288
100069b0:	11000017 	ldw	r4,0(r2)
100069b4:	01440034 	movhi	r5,4096
100069b8:	29598804 	addi	r5,r5,26144
100069bc:	0006df41 	jmpi	10006df4 <_fwalk>

100069c0 <_malloc_trim_r>:
100069c0:	defffb04 	addi	sp,sp,-20
100069c4:	dcc00315 	stw	r19,12(sp)
100069c8:	04c40774 	movhi	r19,4125
100069cc:	dc800215 	stw	r18,8(sp)
100069d0:	dc400115 	stw	r17,4(sp)
100069d4:	dc000015 	stw	r16,0(sp)
100069d8:	dfc00415 	stw	ra,16(sp)
100069dc:	2821883a 	mov	r16,r5
100069e0:	9cee1204 	addi	r19,r19,-18360
100069e4:	2025883a 	mov	r18,r4
100069e8:	0007b880 	call	10007b88 <__malloc_lock>
100069ec:	98800217 	ldw	r2,8(r19)
100069f0:	14400117 	ldw	r17,4(r2)
100069f4:	00bfff04 	movi	r2,-4
100069f8:	88a2703a 	and	r17,r17,r2
100069fc:	8c21c83a 	sub	r16,r17,r16
10006a00:	8403fbc4 	addi	r16,r16,4079
10006a04:	8020d33a 	srli	r16,r16,12
10006a08:	0083ffc4 	movi	r2,4095
10006a0c:	843fffc4 	addi	r16,r16,-1
10006a10:	8020933a 	slli	r16,r16,12
10006a14:	1400060e 	bge	r2,r16,10006a30 <_malloc_trim_r+0x70>
10006a18:	000b883a 	mov	r5,zero
10006a1c:	9009883a 	mov	r4,r18
10006a20:	0005dc40 	call	10005dc4 <_sbrk_r>
10006a24:	98c00217 	ldw	r3,8(r19)
10006a28:	1c47883a 	add	r3,r3,r17
10006a2c:	10c00a26 	beq	r2,r3,10006a58 <_malloc_trim_r+0x98>
10006a30:	9009883a 	mov	r4,r18
10006a34:	0007bac0 	call	10007bac <__malloc_unlock>
10006a38:	0005883a 	mov	r2,zero
10006a3c:	dfc00417 	ldw	ra,16(sp)
10006a40:	dcc00317 	ldw	r19,12(sp)
10006a44:	dc800217 	ldw	r18,8(sp)
10006a48:	dc400117 	ldw	r17,4(sp)
10006a4c:	dc000017 	ldw	r16,0(sp)
10006a50:	dec00504 	addi	sp,sp,20
10006a54:	f800283a 	ret
10006a58:	040bc83a 	sub	r5,zero,r16
10006a5c:	9009883a 	mov	r4,r18
10006a60:	0005dc40 	call	10005dc4 <_sbrk_r>
10006a64:	00ffffc4 	movi	r3,-1
10006a68:	10c00d26 	beq	r2,r3,10006aa0 <_malloc_trim_r+0xe0>
10006a6c:	00c40774 	movhi	r3,4125
10006a70:	18f60004 	addi	r3,r3,-10240
10006a74:	18800017 	ldw	r2,0(r3)
10006a78:	99000217 	ldw	r4,8(r19)
10006a7c:	8c23c83a 	sub	r17,r17,r16
10006a80:	8c400054 	ori	r17,r17,1
10006a84:	1421c83a 	sub	r16,r2,r16
10006a88:	24400115 	stw	r17,4(r4)
10006a8c:	9009883a 	mov	r4,r18
10006a90:	1c000015 	stw	r16,0(r3)
10006a94:	0007bac0 	call	10007bac <__malloc_unlock>
10006a98:	00800044 	movi	r2,1
10006a9c:	003fe706 	br	10006a3c <_malloc_trim_r+0x7c>
10006aa0:	000b883a 	mov	r5,zero
10006aa4:	9009883a 	mov	r4,r18
10006aa8:	0005dc40 	call	10005dc4 <_sbrk_r>
10006aac:	99000217 	ldw	r4,8(r19)
10006ab0:	014003c4 	movi	r5,15
10006ab4:	1107c83a 	sub	r3,r2,r4
10006ab8:	28ffdd0e 	bge	r5,r3,10006a30 <_malloc_trim_r+0x70>
10006abc:	01440774 	movhi	r5,4125
10006ac0:	296f1f04 	addi	r5,r5,-17284
10006ac4:	29400017 	ldw	r5,0(r5)
10006ac8:	18c00054 	ori	r3,r3,1
10006acc:	20c00115 	stw	r3,4(r4)
10006ad0:	00c40774 	movhi	r3,4125
10006ad4:	1145c83a 	sub	r2,r2,r5
10006ad8:	18f60004 	addi	r3,r3,-10240
10006adc:	18800015 	stw	r2,0(r3)
10006ae0:	003fd306 	br	10006a30 <_malloc_trim_r+0x70>

10006ae4 <_free_r>:
10006ae4:	28004126 	beq	r5,zero,10006bec <_free_r+0x108>
10006ae8:	defffd04 	addi	sp,sp,-12
10006aec:	dc400115 	stw	r17,4(sp)
10006af0:	dc000015 	stw	r16,0(sp)
10006af4:	2023883a 	mov	r17,r4
10006af8:	2821883a 	mov	r16,r5
10006afc:	dfc00215 	stw	ra,8(sp)
10006b00:	0007b880 	call	10007b88 <__malloc_lock>
10006b04:	81ffff17 	ldw	r7,-4(r16)
10006b08:	00bfff84 	movi	r2,-2
10006b0c:	01040774 	movhi	r4,4125
10006b10:	81bffe04 	addi	r6,r16,-8
10006b14:	3884703a 	and	r2,r7,r2
10006b18:	212e1204 	addi	r4,r4,-18360
10006b1c:	308b883a 	add	r5,r6,r2
10006b20:	2a400117 	ldw	r9,4(r5)
10006b24:	22000217 	ldw	r8,8(r4)
10006b28:	00ffff04 	movi	r3,-4
10006b2c:	48c6703a 	and	r3,r9,r3
10006b30:	2a005726 	beq	r5,r8,10006c90 <_free_r+0x1ac>
10006b34:	28c00115 	stw	r3,4(r5)
10006b38:	39c0004c 	andi	r7,r7,1
10006b3c:	3800091e 	bne	r7,zero,10006b64 <_free_r+0x80>
10006b40:	823ffe17 	ldw	r8,-8(r16)
10006b44:	22400204 	addi	r9,r4,8
10006b48:	320dc83a 	sub	r6,r6,r8
10006b4c:	31c00217 	ldw	r7,8(r6)
10006b50:	1205883a 	add	r2,r2,r8
10006b54:	3a406526 	beq	r7,r9,10006cec <_free_r+0x208>
10006b58:	32000317 	ldw	r8,12(r6)
10006b5c:	3a000315 	stw	r8,12(r7)
10006b60:	41c00215 	stw	r7,8(r8)
10006b64:	28cf883a 	add	r7,r5,r3
10006b68:	39c00117 	ldw	r7,4(r7)
10006b6c:	39c0004c 	andi	r7,r7,1
10006b70:	38003a26 	beq	r7,zero,10006c5c <_free_r+0x178>
10006b74:	10c00054 	ori	r3,r2,1
10006b78:	30c00115 	stw	r3,4(r6)
10006b7c:	3087883a 	add	r3,r6,r2
10006b80:	18800015 	stw	r2,0(r3)
10006b84:	00c07fc4 	movi	r3,511
10006b88:	18801936 	bltu	r3,r2,10006bf0 <_free_r+0x10c>
10006b8c:	1004d0fa 	srli	r2,r2,3
10006b90:	01c00044 	movi	r7,1
10006b94:	21400117 	ldw	r5,4(r4)
10006b98:	10c00044 	addi	r3,r2,1
10006b9c:	18c7883a 	add	r3,r3,r3
10006ba0:	1005d0ba 	srai	r2,r2,2
10006ba4:	18c7883a 	add	r3,r3,r3
10006ba8:	18c7883a 	add	r3,r3,r3
10006bac:	1907883a 	add	r3,r3,r4
10006bb0:	3884983a 	sll	r2,r7,r2
10006bb4:	19c00017 	ldw	r7,0(r3)
10006bb8:	1a3ffe04 	addi	r8,r3,-8
10006bbc:	1144b03a 	or	r2,r2,r5
10006bc0:	32000315 	stw	r8,12(r6)
10006bc4:	31c00215 	stw	r7,8(r6)
10006bc8:	20800115 	stw	r2,4(r4)
10006bcc:	19800015 	stw	r6,0(r3)
10006bd0:	39800315 	stw	r6,12(r7)
10006bd4:	8809883a 	mov	r4,r17
10006bd8:	dfc00217 	ldw	ra,8(sp)
10006bdc:	dc400117 	ldw	r17,4(sp)
10006be0:	dc000017 	ldw	r16,0(sp)
10006be4:	dec00304 	addi	sp,sp,12
10006be8:	0007bac1 	jmpi	10007bac <__malloc_unlock>
10006bec:	f800283a 	ret
10006bf0:	100ad27a 	srli	r5,r2,9
10006bf4:	00c00104 	movi	r3,4
10006bf8:	19404a36 	bltu	r3,r5,10006d24 <_free_r+0x240>
10006bfc:	100ad1ba 	srli	r5,r2,6
10006c00:	28c00e44 	addi	r3,r5,57
10006c04:	18c7883a 	add	r3,r3,r3
10006c08:	29400e04 	addi	r5,r5,56
10006c0c:	18c7883a 	add	r3,r3,r3
10006c10:	18c7883a 	add	r3,r3,r3
10006c14:	1909883a 	add	r4,r3,r4
10006c18:	20c00017 	ldw	r3,0(r4)
10006c1c:	01c40774 	movhi	r7,4125
10006c20:	213ffe04 	addi	r4,r4,-8
10006c24:	39ee1204 	addi	r7,r7,-18360
10006c28:	20c04426 	beq	r4,r3,10006d3c <_free_r+0x258>
10006c2c:	01ffff04 	movi	r7,-4
10006c30:	19400117 	ldw	r5,4(r3)
10006c34:	29ca703a 	and	r5,r5,r7
10006c38:	1140022e 	bgeu	r2,r5,10006c44 <_free_r+0x160>
10006c3c:	18c00217 	ldw	r3,8(r3)
10006c40:	20fffb1e 	bne	r4,r3,10006c30 <_free_r+0x14c>
10006c44:	19000317 	ldw	r4,12(r3)
10006c48:	31000315 	stw	r4,12(r6)
10006c4c:	30c00215 	stw	r3,8(r6)
10006c50:	21800215 	stw	r6,8(r4)
10006c54:	19800315 	stw	r6,12(r3)
10006c58:	003fde06 	br	10006bd4 <_free_r+0xf0>
10006c5c:	29c00217 	ldw	r7,8(r5)
10006c60:	10c5883a 	add	r2,r2,r3
10006c64:	00c40774 	movhi	r3,4125
10006c68:	18ee1404 	addi	r3,r3,-18352
10006c6c:	38c03b26 	beq	r7,r3,10006d5c <_free_r+0x278>
10006c70:	2a000317 	ldw	r8,12(r5)
10006c74:	11400054 	ori	r5,r2,1
10006c78:	3087883a 	add	r3,r6,r2
10006c7c:	3a000315 	stw	r8,12(r7)
10006c80:	41c00215 	stw	r7,8(r8)
10006c84:	31400115 	stw	r5,4(r6)
10006c88:	18800015 	stw	r2,0(r3)
10006c8c:	003fbd06 	br	10006b84 <_free_r+0xa0>
10006c90:	39c0004c 	andi	r7,r7,1
10006c94:	10c5883a 	add	r2,r2,r3
10006c98:	3800071e 	bne	r7,zero,10006cb8 <_free_r+0x1d4>
10006c9c:	81fffe17 	ldw	r7,-8(r16)
10006ca0:	31cdc83a 	sub	r6,r6,r7
10006ca4:	30c00317 	ldw	r3,12(r6)
10006ca8:	31400217 	ldw	r5,8(r6)
10006cac:	11c5883a 	add	r2,r2,r7
10006cb0:	28c00315 	stw	r3,12(r5)
10006cb4:	19400215 	stw	r5,8(r3)
10006cb8:	10c00054 	ori	r3,r2,1
10006cbc:	30c00115 	stw	r3,4(r6)
10006cc0:	00c40774 	movhi	r3,4125
10006cc4:	18ef2004 	addi	r3,r3,-17280
10006cc8:	18c00017 	ldw	r3,0(r3)
10006ccc:	21800215 	stw	r6,8(r4)
10006cd0:	10ffc036 	bltu	r2,r3,10006bd4 <_free_r+0xf0>
10006cd4:	00840774 	movhi	r2,4125
10006cd8:	10b5ff04 	addi	r2,r2,-10244
10006cdc:	11400017 	ldw	r5,0(r2)
10006ce0:	8809883a 	mov	r4,r17
10006ce4:	00069c00 	call	100069c0 <_malloc_trim_r>
10006ce8:	003fba06 	br	10006bd4 <_free_r+0xf0>
10006cec:	28c9883a 	add	r4,r5,r3
10006cf0:	21000117 	ldw	r4,4(r4)
10006cf4:	2100004c 	andi	r4,r4,1
10006cf8:	2000391e 	bne	r4,zero,10006de0 <_free_r+0x2fc>
10006cfc:	29c00217 	ldw	r7,8(r5)
10006d00:	29000317 	ldw	r4,12(r5)
10006d04:	1885883a 	add	r2,r3,r2
10006d08:	10c00054 	ori	r3,r2,1
10006d0c:	39000315 	stw	r4,12(r7)
10006d10:	21c00215 	stw	r7,8(r4)
10006d14:	30c00115 	stw	r3,4(r6)
10006d18:	308d883a 	add	r6,r6,r2
10006d1c:	30800015 	stw	r2,0(r6)
10006d20:	003fac06 	br	10006bd4 <_free_r+0xf0>
10006d24:	00c00504 	movi	r3,20
10006d28:	19401536 	bltu	r3,r5,10006d80 <_free_r+0x29c>
10006d2c:	28c01704 	addi	r3,r5,92
10006d30:	18c7883a 	add	r3,r3,r3
10006d34:	294016c4 	addi	r5,r5,91
10006d38:	003fb406 	br	10006c0c <_free_r+0x128>
10006d3c:	280bd0ba 	srai	r5,r5,2
10006d40:	00c00044 	movi	r3,1
10006d44:	38800117 	ldw	r2,4(r7)
10006d48:	194a983a 	sll	r5,r3,r5
10006d4c:	2007883a 	mov	r3,r4
10006d50:	2884b03a 	or	r2,r5,r2
10006d54:	38800115 	stw	r2,4(r7)
10006d58:	003fbb06 	br	10006c48 <_free_r+0x164>
10006d5c:	21800515 	stw	r6,20(r4)
10006d60:	21800415 	stw	r6,16(r4)
10006d64:	10c00054 	ori	r3,r2,1
10006d68:	31c00315 	stw	r7,12(r6)
10006d6c:	31c00215 	stw	r7,8(r6)
10006d70:	30c00115 	stw	r3,4(r6)
10006d74:	308d883a 	add	r6,r6,r2
10006d78:	30800015 	stw	r2,0(r6)
10006d7c:	003f9506 	br	10006bd4 <_free_r+0xf0>
10006d80:	00c01504 	movi	r3,84
10006d84:	19400536 	bltu	r3,r5,10006d9c <_free_r+0x2b8>
10006d88:	100ad33a 	srli	r5,r2,12
10006d8c:	28c01bc4 	addi	r3,r5,111
10006d90:	18c7883a 	add	r3,r3,r3
10006d94:	29401b84 	addi	r5,r5,110
10006d98:	003f9c06 	br	10006c0c <_free_r+0x128>
10006d9c:	00c05504 	movi	r3,340
10006da0:	19400536 	bltu	r3,r5,10006db8 <_free_r+0x2d4>
10006da4:	100ad3fa 	srli	r5,r2,15
10006da8:	28c01e04 	addi	r3,r5,120
10006dac:	18c7883a 	add	r3,r3,r3
10006db0:	29401dc4 	addi	r5,r5,119
10006db4:	003f9506 	br	10006c0c <_free_r+0x128>
10006db8:	00c15504 	movi	r3,1364
10006dbc:	19400536 	bltu	r3,r5,10006dd4 <_free_r+0x2f0>
10006dc0:	100ad4ba 	srli	r5,r2,18
10006dc4:	28c01f44 	addi	r3,r5,125
10006dc8:	18c7883a 	add	r3,r3,r3
10006dcc:	29401f04 	addi	r5,r5,124
10006dd0:	003f8e06 	br	10006c0c <_free_r+0x128>
10006dd4:	00c03f84 	movi	r3,254
10006dd8:	01401f84 	movi	r5,126
10006ddc:	003f8b06 	br	10006c0c <_free_r+0x128>
10006de0:	10c00054 	ori	r3,r2,1
10006de4:	30c00115 	stw	r3,4(r6)
10006de8:	308d883a 	add	r6,r6,r2
10006dec:	30800015 	stw	r2,0(r6)
10006df0:	003f7806 	br	10006bd4 <_free_r+0xf0>

10006df4 <_fwalk>:
10006df4:	defff704 	addi	sp,sp,-36
10006df8:	dd000415 	stw	r20,16(sp)
10006dfc:	dfc00815 	stw	ra,32(sp)
10006e00:	ddc00715 	stw	r23,28(sp)
10006e04:	dd800615 	stw	r22,24(sp)
10006e08:	dd400515 	stw	r21,20(sp)
10006e0c:	dcc00315 	stw	r19,12(sp)
10006e10:	dc800215 	stw	r18,8(sp)
10006e14:	dc400115 	stw	r17,4(sp)
10006e18:	dc000015 	stw	r16,0(sp)
10006e1c:	2500b804 	addi	r20,r4,736
10006e20:	a0002326 	beq	r20,zero,10006eb0 <_fwalk+0xbc>
10006e24:	282b883a 	mov	r21,r5
10006e28:	002f883a 	mov	r23,zero
10006e2c:	05800044 	movi	r22,1
10006e30:	04ffffc4 	movi	r19,-1
10006e34:	a4400117 	ldw	r17,4(r20)
10006e38:	a4800217 	ldw	r18,8(r20)
10006e3c:	8c7fffc4 	addi	r17,r17,-1
10006e40:	88000d16 	blt	r17,zero,10006e78 <_fwalk+0x84>
10006e44:	94000304 	addi	r16,r18,12
10006e48:	94800384 	addi	r18,r18,14
10006e4c:	8080000b 	ldhu	r2,0(r16)
10006e50:	8c7fffc4 	addi	r17,r17,-1
10006e54:	813ffd04 	addi	r4,r16,-12
10006e58:	b080042e 	bgeu	r22,r2,10006e6c <_fwalk+0x78>
10006e5c:	9080000f 	ldh	r2,0(r18)
10006e60:	14c00226 	beq	r2,r19,10006e6c <_fwalk+0x78>
10006e64:	a83ee83a 	callr	r21
10006e68:	b8aeb03a 	or	r23,r23,r2
10006e6c:	84001a04 	addi	r16,r16,104
10006e70:	94801a04 	addi	r18,r18,104
10006e74:	8cfff51e 	bne	r17,r19,10006e4c <_fwalk+0x58>
10006e78:	a5000017 	ldw	r20,0(r20)
10006e7c:	a03fed1e 	bne	r20,zero,10006e34 <_fwalk+0x40>
10006e80:	b805883a 	mov	r2,r23
10006e84:	dfc00817 	ldw	ra,32(sp)
10006e88:	ddc00717 	ldw	r23,28(sp)
10006e8c:	dd800617 	ldw	r22,24(sp)
10006e90:	dd400517 	ldw	r21,20(sp)
10006e94:	dd000417 	ldw	r20,16(sp)
10006e98:	dcc00317 	ldw	r19,12(sp)
10006e9c:	dc800217 	ldw	r18,8(sp)
10006ea0:	dc400117 	ldw	r17,4(sp)
10006ea4:	dc000017 	ldw	r16,0(sp)
10006ea8:	dec00904 	addi	sp,sp,36
10006eac:	f800283a 	ret
10006eb0:	002f883a 	mov	r23,zero
10006eb4:	003ff206 	br	10006e80 <_fwalk+0x8c>

10006eb8 <_fwalk_reent>:
10006eb8:	defff704 	addi	sp,sp,-36
10006ebc:	dd000415 	stw	r20,16(sp)
10006ec0:	dfc00815 	stw	ra,32(sp)
10006ec4:	ddc00715 	stw	r23,28(sp)
10006ec8:	dd800615 	stw	r22,24(sp)
10006ecc:	dd400515 	stw	r21,20(sp)
10006ed0:	dcc00315 	stw	r19,12(sp)
10006ed4:	dc800215 	stw	r18,8(sp)
10006ed8:	dc400115 	stw	r17,4(sp)
10006edc:	dc000015 	stw	r16,0(sp)
10006ee0:	2500b804 	addi	r20,r4,736
10006ee4:	a0002326 	beq	r20,zero,10006f74 <_fwalk_reent+0xbc>
10006ee8:	282b883a 	mov	r21,r5
10006eec:	2027883a 	mov	r19,r4
10006ef0:	002f883a 	mov	r23,zero
10006ef4:	05800044 	movi	r22,1
10006ef8:	04bfffc4 	movi	r18,-1
10006efc:	a4400117 	ldw	r17,4(r20)
10006f00:	a4000217 	ldw	r16,8(r20)
10006f04:	8c7fffc4 	addi	r17,r17,-1
10006f08:	88000c16 	blt	r17,zero,10006f3c <_fwalk_reent+0x84>
10006f0c:	84000304 	addi	r16,r16,12
10006f10:	8080000b 	ldhu	r2,0(r16)
10006f14:	8c7fffc4 	addi	r17,r17,-1
10006f18:	817ffd04 	addi	r5,r16,-12
10006f1c:	b080052e 	bgeu	r22,r2,10006f34 <_fwalk_reent+0x7c>
10006f20:	8080008f 	ldh	r2,2(r16)
10006f24:	9809883a 	mov	r4,r19
10006f28:	14800226 	beq	r2,r18,10006f34 <_fwalk_reent+0x7c>
10006f2c:	a83ee83a 	callr	r21
10006f30:	b8aeb03a 	or	r23,r23,r2
10006f34:	84001a04 	addi	r16,r16,104
10006f38:	8cbff51e 	bne	r17,r18,10006f10 <_fwalk_reent+0x58>
10006f3c:	a5000017 	ldw	r20,0(r20)
10006f40:	a03fee1e 	bne	r20,zero,10006efc <_fwalk_reent+0x44>
10006f44:	b805883a 	mov	r2,r23
10006f48:	dfc00817 	ldw	ra,32(sp)
10006f4c:	ddc00717 	ldw	r23,28(sp)
10006f50:	dd800617 	ldw	r22,24(sp)
10006f54:	dd400517 	ldw	r21,20(sp)
10006f58:	dd000417 	ldw	r20,16(sp)
10006f5c:	dcc00317 	ldw	r19,12(sp)
10006f60:	dc800217 	ldw	r18,8(sp)
10006f64:	dc400117 	ldw	r17,4(sp)
10006f68:	dc000017 	ldw	r16,0(sp)
10006f6c:	dec00904 	addi	sp,sp,36
10006f70:	f800283a 	ret
10006f74:	002f883a 	mov	r23,zero
10006f78:	003ff206 	br	10006f44 <_fwalk_reent+0x8c>

10006f7c <__smakebuf_r>:
10006f7c:	2880030b 	ldhu	r2,12(r5)
10006f80:	10c0008c 	andi	r3,r2,2
10006f84:	1800411e 	bne	r3,zero,1000708c <__smakebuf_r+0x110>
10006f88:	deffec04 	addi	sp,sp,-80
10006f8c:	dc000f15 	stw	r16,60(sp)
10006f90:	2821883a 	mov	r16,r5
10006f94:	2940038f 	ldh	r5,14(r5)
10006f98:	dc401015 	stw	r17,64(sp)
10006f9c:	dfc01315 	stw	ra,76(sp)
10006fa0:	dcc01215 	stw	r19,72(sp)
10006fa4:	dc801115 	stw	r18,68(sp)
10006fa8:	2023883a 	mov	r17,r4
10006fac:	28001c16 	blt	r5,zero,10007020 <__smakebuf_r+0xa4>
10006fb0:	d80d883a 	mov	r6,sp
10006fb4:	00075540 	call	10007554 <_fstat_r>
10006fb8:	10001816 	blt	r2,zero,1000701c <__smakebuf_r+0xa0>
10006fbc:	d8800117 	ldw	r2,4(sp)
10006fc0:	00e00014 	movui	r3,32768
10006fc4:	10bc000c 	andi	r2,r2,61440
10006fc8:	14c80020 	cmpeqi	r19,r2,8192
10006fcc:	10c03726 	beq	r2,r3,100070ac <__smakebuf_r+0x130>
10006fd0:	80c0030b 	ldhu	r3,12(r16)
10006fd4:	18c20014 	ori	r3,r3,2048
10006fd8:	80c0030d 	sth	r3,12(r16)
10006fdc:	00c80004 	movi	r3,8192
10006fe0:	10c0521e 	bne	r2,r3,1000712c <__smakebuf_r+0x1b0>
10006fe4:	8140038f 	ldh	r5,14(r16)
10006fe8:	8809883a 	mov	r4,r17
10006fec:	00075b00 	call	100075b0 <_isatty_r>
10006ff0:	10004c26 	beq	r2,zero,10007124 <__smakebuf_r+0x1a8>
10006ff4:	8080030b 	ldhu	r2,12(r16)
10006ff8:	80c010c4 	addi	r3,r16,67
10006ffc:	80c00015 	stw	r3,0(r16)
10007000:	10800054 	ori	r2,r2,1
10007004:	8080030d 	sth	r2,12(r16)
10007008:	00800044 	movi	r2,1
1000700c:	80c00415 	stw	r3,16(r16)
10007010:	80800515 	stw	r2,20(r16)
10007014:	04810004 	movi	r18,1024
10007018:	00000706 	br	10007038 <__smakebuf_r+0xbc>
1000701c:	8080030b 	ldhu	r2,12(r16)
10007020:	10c0200c 	andi	r3,r2,128
10007024:	18001f1e 	bne	r3,zero,100070a4 <__smakebuf_r+0x128>
10007028:	04810004 	movi	r18,1024
1000702c:	10820014 	ori	r2,r2,2048
10007030:	8080030d 	sth	r2,12(r16)
10007034:	0027883a 	mov	r19,zero
10007038:	900b883a 	mov	r5,r18
1000703c:	8809883a 	mov	r4,r17
10007040:	0004c500 	call	10004c50 <_malloc_r>
10007044:	10002c26 	beq	r2,zero,100070f8 <__smakebuf_r+0x17c>
10007048:	80c0030b 	ldhu	r3,12(r16)
1000704c:	01040034 	movhi	r4,4096
10007050:	21198a04 	addi	r4,r4,26152
10007054:	89000f15 	stw	r4,60(r17)
10007058:	18c02014 	ori	r3,r3,128
1000705c:	80c0030d 	sth	r3,12(r16)
10007060:	80800015 	stw	r2,0(r16)
10007064:	80800415 	stw	r2,16(r16)
10007068:	84800515 	stw	r18,20(r16)
1000706c:	98001a1e 	bne	r19,zero,100070d8 <__smakebuf_r+0x15c>
10007070:	dfc01317 	ldw	ra,76(sp)
10007074:	dcc01217 	ldw	r19,72(sp)
10007078:	dc801117 	ldw	r18,68(sp)
1000707c:	dc401017 	ldw	r17,64(sp)
10007080:	dc000f17 	ldw	r16,60(sp)
10007084:	dec01404 	addi	sp,sp,80
10007088:	f800283a 	ret
1000708c:	288010c4 	addi	r2,r5,67
10007090:	28800015 	stw	r2,0(r5)
10007094:	28800415 	stw	r2,16(r5)
10007098:	00800044 	movi	r2,1
1000709c:	28800515 	stw	r2,20(r5)
100070a0:	f800283a 	ret
100070a4:	04801004 	movi	r18,64
100070a8:	003fe006 	br	1000702c <__smakebuf_r+0xb0>
100070ac:	81000a17 	ldw	r4,40(r16)
100070b0:	00c40034 	movhi	r3,4096
100070b4:	18dcce04 	addi	r3,r3,29496
100070b8:	20ffc51e 	bne	r4,r3,10006fd0 <__smakebuf_r+0x54>
100070bc:	8080030b 	ldhu	r2,12(r16)
100070c0:	04810004 	movi	r18,1024
100070c4:	84801315 	stw	r18,76(r16)
100070c8:	1484b03a 	or	r2,r2,r18
100070cc:	8080030d 	sth	r2,12(r16)
100070d0:	0027883a 	mov	r19,zero
100070d4:	003fd806 	br	10007038 <__smakebuf_r+0xbc>
100070d8:	8140038f 	ldh	r5,14(r16)
100070dc:	8809883a 	mov	r4,r17
100070e0:	00075b00 	call	100075b0 <_isatty_r>
100070e4:	103fe226 	beq	r2,zero,10007070 <__smakebuf_r+0xf4>
100070e8:	8080030b 	ldhu	r2,12(r16)
100070ec:	10800054 	ori	r2,r2,1
100070f0:	8080030d 	sth	r2,12(r16)
100070f4:	003fde06 	br	10007070 <__smakebuf_r+0xf4>
100070f8:	8080030b 	ldhu	r2,12(r16)
100070fc:	10c0800c 	andi	r3,r2,512
10007100:	183fdb1e 	bne	r3,zero,10007070 <__smakebuf_r+0xf4>
10007104:	10800094 	ori	r2,r2,2
10007108:	80c010c4 	addi	r3,r16,67
1000710c:	8080030d 	sth	r2,12(r16)
10007110:	00800044 	movi	r2,1
10007114:	80c00015 	stw	r3,0(r16)
10007118:	80c00415 	stw	r3,16(r16)
1000711c:	80800515 	stw	r2,20(r16)
10007120:	003fd306 	br	10007070 <__smakebuf_r+0xf4>
10007124:	04810004 	movi	r18,1024
10007128:	003fc306 	br	10007038 <__smakebuf_r+0xbc>
1000712c:	0027883a 	mov	r19,zero
10007130:	04810004 	movi	r18,1024
10007134:	003fc006 	br	10007038 <__smakebuf_r+0xbc>

10007138 <memset>:
10007138:	20c000cc 	andi	r3,r4,3
1000713c:	2005883a 	mov	r2,r4
10007140:	18004426 	beq	r3,zero,10007254 <memset+0x11c>
10007144:	31ffffc4 	addi	r7,r6,-1
10007148:	30004026 	beq	r6,zero,1000724c <memset+0x114>
1000714c:	2813883a 	mov	r9,r5
10007150:	200d883a 	mov	r6,r4
10007154:	2007883a 	mov	r3,r4
10007158:	00000406 	br	1000716c <memset+0x34>
1000715c:	3a3fffc4 	addi	r8,r7,-1
10007160:	31800044 	addi	r6,r6,1
10007164:	38003926 	beq	r7,zero,1000724c <memset+0x114>
10007168:	400f883a 	mov	r7,r8
1000716c:	18c00044 	addi	r3,r3,1
10007170:	32400005 	stb	r9,0(r6)
10007174:	1a0000cc 	andi	r8,r3,3
10007178:	403ff81e 	bne	r8,zero,1000715c <memset+0x24>
1000717c:	010000c4 	movi	r4,3
10007180:	21c02d2e 	bgeu	r4,r7,10007238 <memset+0x100>
10007184:	29003fcc 	andi	r4,r5,255
10007188:	200c923a 	slli	r6,r4,8
1000718c:	3108b03a 	or	r4,r6,r4
10007190:	200c943a 	slli	r6,r4,16
10007194:	218cb03a 	or	r6,r4,r6
10007198:	010003c4 	movi	r4,15
1000719c:	21c0182e 	bgeu	r4,r7,10007200 <memset+0xc8>
100071a0:	3b3ffc04 	addi	r12,r7,-16
100071a4:	6018d13a 	srli	r12,r12,4
100071a8:	1a000104 	addi	r8,r3,4
100071ac:	1ac00204 	addi	r11,r3,8
100071b0:	6008913a 	slli	r4,r12,4
100071b4:	1a800304 	addi	r10,r3,12
100071b8:	1813883a 	mov	r9,r3
100071bc:	21000504 	addi	r4,r4,20
100071c0:	1909883a 	add	r4,r3,r4
100071c4:	49800015 	stw	r6,0(r9)
100071c8:	41800015 	stw	r6,0(r8)
100071cc:	59800015 	stw	r6,0(r11)
100071d0:	51800015 	stw	r6,0(r10)
100071d4:	42000404 	addi	r8,r8,16
100071d8:	4a400404 	addi	r9,r9,16
100071dc:	5ac00404 	addi	r11,r11,16
100071e0:	52800404 	addi	r10,r10,16
100071e4:	413ff71e 	bne	r8,r4,100071c4 <memset+0x8c>
100071e8:	63000044 	addi	r12,r12,1
100071ec:	6018913a 	slli	r12,r12,4
100071f0:	39c003cc 	andi	r7,r7,15
100071f4:	010000c4 	movi	r4,3
100071f8:	1b07883a 	add	r3,r3,r12
100071fc:	21c00e2e 	bgeu	r4,r7,10007238 <memset+0x100>
10007200:	1813883a 	mov	r9,r3
10007204:	3811883a 	mov	r8,r7
10007208:	010000c4 	movi	r4,3
1000720c:	49800015 	stw	r6,0(r9)
10007210:	423fff04 	addi	r8,r8,-4
10007214:	4a400104 	addi	r9,r9,4
10007218:	223ffc36 	bltu	r4,r8,1000720c <memset+0xd4>
1000721c:	393fff04 	addi	r4,r7,-4
10007220:	2008d0ba 	srli	r4,r4,2
10007224:	39c000cc 	andi	r7,r7,3
10007228:	21000044 	addi	r4,r4,1
1000722c:	2109883a 	add	r4,r4,r4
10007230:	2109883a 	add	r4,r4,r4
10007234:	1907883a 	add	r3,r3,r4
10007238:	38000526 	beq	r7,zero,10007250 <memset+0x118>
1000723c:	19cf883a 	add	r7,r3,r7
10007240:	19400005 	stb	r5,0(r3)
10007244:	18c00044 	addi	r3,r3,1
10007248:	38fffd1e 	bne	r7,r3,10007240 <memset+0x108>
1000724c:	f800283a 	ret
10007250:	f800283a 	ret
10007254:	2007883a 	mov	r3,r4
10007258:	300f883a 	mov	r7,r6
1000725c:	003fc706 	br	1000717c <memset+0x44>

10007260 <__sread>:
10007260:	defffe04 	addi	sp,sp,-8
10007264:	dc000015 	stw	r16,0(sp)
10007268:	2821883a 	mov	r16,r5
1000726c:	2940038f 	ldh	r5,14(r5)
10007270:	dfc00115 	stw	ra,4(sp)
10007274:	00076640 	call	10007664 <_read_r>
10007278:	10000716 	blt	r2,zero,10007298 <__sread+0x38>
1000727c:	80c01417 	ldw	r3,80(r16)
10007280:	1887883a 	add	r3,r3,r2
10007284:	80c01415 	stw	r3,80(r16)
10007288:	dfc00117 	ldw	ra,4(sp)
1000728c:	dc000017 	ldw	r16,0(sp)
10007290:	dec00204 	addi	sp,sp,8
10007294:	f800283a 	ret
10007298:	80c0030b 	ldhu	r3,12(r16)
1000729c:	18fbffcc 	andi	r3,r3,61439
100072a0:	80c0030d 	sth	r3,12(r16)
100072a4:	dfc00117 	ldw	ra,4(sp)
100072a8:	dc000017 	ldw	r16,0(sp)
100072ac:	dec00204 	addi	sp,sp,8
100072b0:	f800283a 	ret

100072b4 <__seofread>:
100072b4:	0005883a 	mov	r2,zero
100072b8:	f800283a 	ret

100072bc <__swrite>:
100072bc:	2880030b 	ldhu	r2,12(r5)
100072c0:	defffb04 	addi	sp,sp,-20
100072c4:	dcc00315 	stw	r19,12(sp)
100072c8:	dc800215 	stw	r18,8(sp)
100072cc:	dc400115 	stw	r17,4(sp)
100072d0:	dc000015 	stw	r16,0(sp)
100072d4:	dfc00415 	stw	ra,16(sp)
100072d8:	10c0400c 	andi	r3,r2,256
100072dc:	2821883a 	mov	r16,r5
100072e0:	2023883a 	mov	r17,r4
100072e4:	3025883a 	mov	r18,r6
100072e8:	3827883a 	mov	r19,r7
100072ec:	18000526 	beq	r3,zero,10007304 <__swrite+0x48>
100072f0:	2940038f 	ldh	r5,14(r5)
100072f4:	01c00084 	movi	r7,2
100072f8:	000d883a 	mov	r6,zero
100072fc:	00076040 	call	10007604 <_lseek_r>
10007300:	8080030b 	ldhu	r2,12(r16)
10007304:	8140038f 	ldh	r5,14(r16)
10007308:	10bbffcc 	andi	r2,r2,61439
1000730c:	980f883a 	mov	r7,r19
10007310:	900d883a 	mov	r6,r18
10007314:	8809883a 	mov	r4,r17
10007318:	8080030d 	sth	r2,12(r16)
1000731c:	dfc00417 	ldw	ra,16(sp)
10007320:	dcc00317 	ldw	r19,12(sp)
10007324:	dc800217 	ldw	r18,8(sp)
10007328:	dc400117 	ldw	r17,4(sp)
1000732c:	dc000017 	ldw	r16,0(sp)
10007330:	dec00504 	addi	sp,sp,20
10007334:	000739c1 	jmpi	1000739c <_write_r>

10007338 <__sseek>:
10007338:	defffe04 	addi	sp,sp,-8
1000733c:	dc000015 	stw	r16,0(sp)
10007340:	2821883a 	mov	r16,r5
10007344:	2940038f 	ldh	r5,14(r5)
10007348:	dfc00115 	stw	ra,4(sp)
1000734c:	00076040 	call	10007604 <_lseek_r>
10007350:	00ffffc4 	movi	r3,-1
10007354:	10c00826 	beq	r2,r3,10007378 <__sseek+0x40>
10007358:	80c0030b 	ldhu	r3,12(r16)
1000735c:	80801415 	stw	r2,80(r16)
10007360:	18c40014 	ori	r3,r3,4096
10007364:	80c0030d 	sth	r3,12(r16)
10007368:	dfc00117 	ldw	ra,4(sp)
1000736c:	dc000017 	ldw	r16,0(sp)
10007370:	dec00204 	addi	sp,sp,8
10007374:	f800283a 	ret
10007378:	80c0030b 	ldhu	r3,12(r16)
1000737c:	18fbffcc 	andi	r3,r3,61439
10007380:	80c0030d 	sth	r3,12(r16)
10007384:	dfc00117 	ldw	ra,4(sp)
10007388:	dc000017 	ldw	r16,0(sp)
1000738c:	dec00204 	addi	sp,sp,8
10007390:	f800283a 	ret

10007394 <__sclose>:
10007394:	2940038f 	ldh	r5,14(r5)
10007398:	00073fc1 	jmpi	100073fc <_close_r>

1000739c <_write_r>:
1000739c:	defffd04 	addi	sp,sp,-12
100073a0:	2805883a 	mov	r2,r5
100073a4:	dc000015 	stw	r16,0(sp)
100073a8:	04040774 	movhi	r16,4125
100073ac:	dc400115 	stw	r17,4(sp)
100073b0:	300b883a 	mov	r5,r6
100073b4:	8435fc04 	addi	r16,r16,-10256
100073b8:	2023883a 	mov	r17,r4
100073bc:	380d883a 	mov	r6,r7
100073c0:	1009883a 	mov	r4,r2
100073c4:	dfc00215 	stw	ra,8(sp)
100073c8:	80000015 	stw	zero,0(r16)
100073cc:	0007df40 	call	10007df4 <write>
100073d0:	00ffffc4 	movi	r3,-1
100073d4:	10c00526 	beq	r2,r3,100073ec <_write_r+0x50>
100073d8:	dfc00217 	ldw	ra,8(sp)
100073dc:	dc400117 	ldw	r17,4(sp)
100073e0:	dc000017 	ldw	r16,0(sp)
100073e4:	dec00304 	addi	sp,sp,12
100073e8:	f800283a 	ret
100073ec:	80c00017 	ldw	r3,0(r16)
100073f0:	183ff926 	beq	r3,zero,100073d8 <_write_r+0x3c>
100073f4:	88c00015 	stw	r3,0(r17)
100073f8:	003ff706 	br	100073d8 <_write_r+0x3c>

100073fc <_close_r>:
100073fc:	defffd04 	addi	sp,sp,-12
10007400:	dc000015 	stw	r16,0(sp)
10007404:	04040774 	movhi	r16,4125
10007408:	dc400115 	stw	r17,4(sp)
1000740c:	8435fc04 	addi	r16,r16,-10256
10007410:	2023883a 	mov	r17,r4
10007414:	2809883a 	mov	r4,r5
10007418:	dfc00215 	stw	ra,8(sp)
1000741c:	80000015 	stw	zero,0(r16)
10007420:	00037b40 	call	100037b4 <close>
10007424:	00ffffc4 	movi	r3,-1
10007428:	10c00526 	beq	r2,r3,10007440 <_close_r+0x44>
1000742c:	dfc00217 	ldw	ra,8(sp)
10007430:	dc400117 	ldw	r17,4(sp)
10007434:	dc000017 	ldw	r16,0(sp)
10007438:	dec00304 	addi	sp,sp,12
1000743c:	f800283a 	ret
10007440:	80c00017 	ldw	r3,0(r16)
10007444:	183ff926 	beq	r3,zero,1000742c <_close_r+0x30>
10007448:	88c00015 	stw	r3,0(r17)
1000744c:	003ff706 	br	1000742c <_close_r+0x30>

10007450 <_fclose_r>:
10007450:	28003926 	beq	r5,zero,10007538 <_fclose_r+0xe8>
10007454:	defffc04 	addi	sp,sp,-16
10007458:	dc400115 	stw	r17,4(sp)
1000745c:	dc000015 	stw	r16,0(sp)
10007460:	dfc00315 	stw	ra,12(sp)
10007464:	dc800215 	stw	r18,8(sp)
10007468:	2023883a 	mov	r17,r4
1000746c:	2821883a 	mov	r16,r5
10007470:	20000226 	beq	r4,zero,1000747c <_fclose_r+0x2c>
10007474:	20800e17 	ldw	r2,56(r4)
10007478:	10002726 	beq	r2,zero,10007518 <_fclose_r+0xc8>
1000747c:	8080030f 	ldh	r2,12(r16)
10007480:	1000071e 	bne	r2,zero,100074a0 <_fclose_r+0x50>
10007484:	0005883a 	mov	r2,zero
10007488:	dfc00317 	ldw	ra,12(sp)
1000748c:	dc800217 	ldw	r18,8(sp)
10007490:	dc400117 	ldw	r17,4(sp)
10007494:	dc000017 	ldw	r16,0(sp)
10007498:	dec00404 	addi	sp,sp,16
1000749c:	f800283a 	ret
100074a0:	800b883a 	mov	r5,r16
100074a4:	8809883a 	mov	r4,r17
100074a8:	00063780 	call	10006378 <__sflush_r>
100074ac:	1025883a 	mov	r18,r2
100074b0:	80800b17 	ldw	r2,44(r16)
100074b4:	10000426 	beq	r2,zero,100074c8 <_fclose_r+0x78>
100074b8:	81400717 	ldw	r5,28(r16)
100074bc:	8809883a 	mov	r4,r17
100074c0:	103ee83a 	callr	r2
100074c4:	10001616 	blt	r2,zero,10007520 <_fclose_r+0xd0>
100074c8:	8080030b 	ldhu	r2,12(r16)
100074cc:	1080200c 	andi	r2,r2,128
100074d0:	1000151e 	bne	r2,zero,10007528 <_fclose_r+0xd8>
100074d4:	81400c17 	ldw	r5,48(r16)
100074d8:	28000526 	beq	r5,zero,100074f0 <_fclose_r+0xa0>
100074dc:	80801004 	addi	r2,r16,64
100074e0:	28800226 	beq	r5,r2,100074ec <_fclose_r+0x9c>
100074e4:	8809883a 	mov	r4,r17
100074e8:	0006ae40 	call	10006ae4 <_free_r>
100074ec:	80000c15 	stw	zero,48(r16)
100074f0:	81401117 	ldw	r5,68(r16)
100074f4:	28000326 	beq	r5,zero,10007504 <_fclose_r+0xb4>
100074f8:	8809883a 	mov	r4,r17
100074fc:	0006ae40 	call	10006ae4 <_free_r>
10007500:	80001115 	stw	zero,68(r16)
10007504:	00069800 	call	10006980 <__sfp_lock_acquire>
10007508:	8000030d 	sth	zero,12(r16)
1000750c:	00069840 	call	10006984 <__sfp_lock_release>
10007510:	9005883a 	mov	r2,r18
10007514:	003fdc06 	br	10007488 <_fclose_r+0x38>
10007518:	00069700 	call	10006970 <__sinit>
1000751c:	003fd706 	br	1000747c <_fclose_r+0x2c>
10007520:	04bfffc4 	movi	r18,-1
10007524:	003fe806 	br	100074c8 <_fclose_r+0x78>
10007528:	81400417 	ldw	r5,16(r16)
1000752c:	8809883a 	mov	r4,r17
10007530:	0006ae40 	call	10006ae4 <_free_r>
10007534:	003fe706 	br	100074d4 <_fclose_r+0x84>
10007538:	0005883a 	mov	r2,zero
1000753c:	f800283a 	ret

10007540 <fclose>:
10007540:	00840774 	movhi	r2,4125
10007544:	10af1e04 	addi	r2,r2,-17288
10007548:	200b883a 	mov	r5,r4
1000754c:	11000017 	ldw	r4,0(r2)
10007550:	00074501 	jmpi	10007450 <_fclose_r>

10007554 <_fstat_r>:
10007554:	defffd04 	addi	sp,sp,-12
10007558:	2805883a 	mov	r2,r5
1000755c:	dc000015 	stw	r16,0(sp)
10007560:	04040774 	movhi	r16,4125
10007564:	dc400115 	stw	r17,4(sp)
10007568:	8435fc04 	addi	r16,r16,-10256
1000756c:	2023883a 	mov	r17,r4
10007570:	300b883a 	mov	r5,r6
10007574:	1009883a 	mov	r4,r2
10007578:	dfc00215 	stw	ra,8(sp)
1000757c:	80000015 	stw	zero,0(r16)
10007580:	00078e80 	call	100078e8 <fstat>
10007584:	00ffffc4 	movi	r3,-1
10007588:	10c00526 	beq	r2,r3,100075a0 <_fstat_r+0x4c>
1000758c:	dfc00217 	ldw	ra,8(sp)
10007590:	dc400117 	ldw	r17,4(sp)
10007594:	dc000017 	ldw	r16,0(sp)
10007598:	dec00304 	addi	sp,sp,12
1000759c:	f800283a 	ret
100075a0:	80c00017 	ldw	r3,0(r16)
100075a4:	183ff926 	beq	r3,zero,1000758c <_fstat_r+0x38>
100075a8:	88c00015 	stw	r3,0(r17)
100075ac:	003ff706 	br	1000758c <_fstat_r+0x38>

100075b0 <_isatty_r>:
100075b0:	defffd04 	addi	sp,sp,-12
100075b4:	dc000015 	stw	r16,0(sp)
100075b8:	04040774 	movhi	r16,4125
100075bc:	dc400115 	stw	r17,4(sp)
100075c0:	8435fc04 	addi	r16,r16,-10256
100075c4:	2023883a 	mov	r17,r4
100075c8:	2809883a 	mov	r4,r5
100075cc:	dfc00215 	stw	ra,8(sp)
100075d0:	80000015 	stw	zero,0(r16)
100075d4:	00079d40 	call	100079d4 <isatty>
100075d8:	00ffffc4 	movi	r3,-1
100075dc:	10c00526 	beq	r2,r3,100075f4 <_isatty_r+0x44>
100075e0:	dfc00217 	ldw	ra,8(sp)
100075e4:	dc400117 	ldw	r17,4(sp)
100075e8:	dc000017 	ldw	r16,0(sp)
100075ec:	dec00304 	addi	sp,sp,12
100075f0:	f800283a 	ret
100075f4:	80c00017 	ldw	r3,0(r16)
100075f8:	183ff926 	beq	r3,zero,100075e0 <_isatty_r+0x30>
100075fc:	88c00015 	stw	r3,0(r17)
10007600:	003ff706 	br	100075e0 <_isatty_r+0x30>

10007604 <_lseek_r>:
10007604:	defffd04 	addi	sp,sp,-12
10007608:	2805883a 	mov	r2,r5
1000760c:	dc000015 	stw	r16,0(sp)
10007610:	04040774 	movhi	r16,4125
10007614:	dc400115 	stw	r17,4(sp)
10007618:	300b883a 	mov	r5,r6
1000761c:	8435fc04 	addi	r16,r16,-10256
10007620:	2023883a 	mov	r17,r4
10007624:	380d883a 	mov	r6,r7
10007628:	1009883a 	mov	r4,r2
1000762c:	dfc00215 	stw	ra,8(sp)
10007630:	80000015 	stw	zero,0(r16)
10007634:	0007ab40 	call	10007ab4 <lseek>
10007638:	00ffffc4 	movi	r3,-1
1000763c:	10c00526 	beq	r2,r3,10007654 <_lseek_r+0x50>
10007640:	dfc00217 	ldw	ra,8(sp)
10007644:	dc400117 	ldw	r17,4(sp)
10007648:	dc000017 	ldw	r16,0(sp)
1000764c:	dec00304 	addi	sp,sp,12
10007650:	f800283a 	ret
10007654:	80c00017 	ldw	r3,0(r16)
10007658:	183ff926 	beq	r3,zero,10007640 <_lseek_r+0x3c>
1000765c:	88c00015 	stw	r3,0(r17)
10007660:	003ff706 	br	10007640 <_lseek_r+0x3c>

10007664 <_read_r>:
10007664:	defffd04 	addi	sp,sp,-12
10007668:	2805883a 	mov	r2,r5
1000766c:	dc000015 	stw	r16,0(sp)
10007670:	04040774 	movhi	r16,4125
10007674:	dc400115 	stw	r17,4(sp)
10007678:	300b883a 	mov	r5,r6
1000767c:	8435fc04 	addi	r16,r16,-10256
10007680:	2023883a 	mov	r17,r4
10007684:	380d883a 	mov	r6,r7
10007688:	1009883a 	mov	r4,r2
1000768c:	dfc00215 	stw	ra,8(sp)
10007690:	80000015 	stw	zero,0(r16)
10007694:	0007c0c0 	call	10007c0c <read>
10007698:	00ffffc4 	movi	r3,-1
1000769c:	10c00526 	beq	r2,r3,100076b4 <_read_r+0x50>
100076a0:	dfc00217 	ldw	ra,8(sp)
100076a4:	dc400117 	ldw	r17,4(sp)
100076a8:	dc000017 	ldw	r16,0(sp)
100076ac:	dec00304 	addi	sp,sp,12
100076b0:	f800283a 	ret
100076b4:	80c00017 	ldw	r3,0(r16)
100076b8:	183ff926 	beq	r3,zero,100076a0 <_read_r+0x3c>
100076bc:	88c00015 	stw	r3,0(r17)
100076c0:	003ff706 	br	100076a0 <_read_r+0x3c>

100076c4 <__divsi3>:
100076c4:	20001b16 	blt	r4,zero,10007734 <__divsi3+0x70>
100076c8:	000f883a 	mov	r7,zero
100076cc:	28001616 	blt	r5,zero,10007728 <__divsi3+0x64>
100076d0:	200d883a 	mov	r6,r4
100076d4:	29001a2e 	bgeu	r5,r4,10007740 <__divsi3+0x7c>
100076d8:	00800804 	movi	r2,32
100076dc:	00c00044 	movi	r3,1
100076e0:	00000106 	br	100076e8 <__divsi3+0x24>
100076e4:	10000d26 	beq	r2,zero,1000771c <__divsi3+0x58>
100076e8:	294b883a 	add	r5,r5,r5
100076ec:	10bfffc4 	addi	r2,r2,-1
100076f0:	18c7883a 	add	r3,r3,r3
100076f4:	293ffb36 	bltu	r5,r4,100076e4 <__divsi3+0x20>
100076f8:	0005883a 	mov	r2,zero
100076fc:	18000726 	beq	r3,zero,1000771c <__divsi3+0x58>
10007700:	0005883a 	mov	r2,zero
10007704:	31400236 	bltu	r6,r5,10007710 <__divsi3+0x4c>
10007708:	314dc83a 	sub	r6,r6,r5
1000770c:	10c4b03a 	or	r2,r2,r3
10007710:	1806d07a 	srli	r3,r3,1
10007714:	280ad07a 	srli	r5,r5,1
10007718:	183ffa1e 	bne	r3,zero,10007704 <__divsi3+0x40>
1000771c:	38000126 	beq	r7,zero,10007724 <__divsi3+0x60>
10007720:	0085c83a 	sub	r2,zero,r2
10007724:	f800283a 	ret
10007728:	014bc83a 	sub	r5,zero,r5
1000772c:	39c0005c 	xori	r7,r7,1
10007730:	003fe706 	br	100076d0 <__divsi3+0xc>
10007734:	0109c83a 	sub	r4,zero,r4
10007738:	01c00044 	movi	r7,1
1000773c:	003fe306 	br	100076cc <__divsi3+0x8>
10007740:	00c00044 	movi	r3,1
10007744:	003fee06 	br	10007700 <__divsi3+0x3c>

10007748 <__modsi3>:
10007748:	20001716 	blt	r4,zero,100077a8 <__modsi3+0x60>
1000774c:	000f883a 	mov	r7,zero
10007750:	2005883a 	mov	r2,r4
10007754:	28001216 	blt	r5,zero,100077a0 <__modsi3+0x58>
10007758:	2900162e 	bgeu	r5,r4,100077b4 <__modsi3+0x6c>
1000775c:	01800804 	movi	r6,32
10007760:	00c00044 	movi	r3,1
10007764:	00000106 	br	1000776c <__modsi3+0x24>
10007768:	30000a26 	beq	r6,zero,10007794 <__modsi3+0x4c>
1000776c:	294b883a 	add	r5,r5,r5
10007770:	31bfffc4 	addi	r6,r6,-1
10007774:	18c7883a 	add	r3,r3,r3
10007778:	293ffb36 	bltu	r5,r4,10007768 <__modsi3+0x20>
1000777c:	18000526 	beq	r3,zero,10007794 <__modsi3+0x4c>
10007780:	1806d07a 	srli	r3,r3,1
10007784:	11400136 	bltu	r2,r5,1000778c <__modsi3+0x44>
10007788:	1145c83a 	sub	r2,r2,r5
1000778c:	280ad07a 	srli	r5,r5,1
10007790:	183ffb1e 	bne	r3,zero,10007780 <__modsi3+0x38>
10007794:	38000126 	beq	r7,zero,1000779c <__modsi3+0x54>
10007798:	0085c83a 	sub	r2,zero,r2
1000779c:	f800283a 	ret
100077a0:	014bc83a 	sub	r5,zero,r5
100077a4:	003fec06 	br	10007758 <__modsi3+0x10>
100077a8:	0109c83a 	sub	r4,zero,r4
100077ac:	01c00044 	movi	r7,1
100077b0:	003fe706 	br	10007750 <__modsi3+0x8>
100077b4:	00c00044 	movi	r3,1
100077b8:	003ff106 	br	10007780 <__modsi3+0x38>

100077bc <__udivsi3>:
100077bc:	200d883a 	mov	r6,r4
100077c0:	2900152e 	bgeu	r5,r4,10007818 <__udivsi3+0x5c>
100077c4:	28001416 	blt	r5,zero,10007818 <__udivsi3+0x5c>
100077c8:	00800804 	movi	r2,32
100077cc:	00c00044 	movi	r3,1
100077d0:	00000206 	br	100077dc <__udivsi3+0x20>
100077d4:	10000e26 	beq	r2,zero,10007810 <__udivsi3+0x54>
100077d8:	28000516 	blt	r5,zero,100077f0 <__udivsi3+0x34>
100077dc:	294b883a 	add	r5,r5,r5
100077e0:	10bfffc4 	addi	r2,r2,-1
100077e4:	18c7883a 	add	r3,r3,r3
100077e8:	293ffa36 	bltu	r5,r4,100077d4 <__udivsi3+0x18>
100077ec:	18000826 	beq	r3,zero,10007810 <__udivsi3+0x54>
100077f0:	0005883a 	mov	r2,zero
100077f4:	31400236 	bltu	r6,r5,10007800 <__udivsi3+0x44>
100077f8:	314dc83a 	sub	r6,r6,r5
100077fc:	10c4b03a 	or	r2,r2,r3
10007800:	1806d07a 	srli	r3,r3,1
10007804:	280ad07a 	srli	r5,r5,1
10007808:	183ffa1e 	bne	r3,zero,100077f4 <__udivsi3+0x38>
1000780c:	f800283a 	ret
10007810:	0005883a 	mov	r2,zero
10007814:	f800283a 	ret
10007818:	00c00044 	movi	r3,1
1000781c:	003ff406 	br	100077f0 <__udivsi3+0x34>

10007820 <__umodsi3>:
10007820:	2005883a 	mov	r2,r4
10007824:	2900122e 	bgeu	r5,r4,10007870 <__umodsi3+0x50>
10007828:	28001116 	blt	r5,zero,10007870 <__umodsi3+0x50>
1000782c:	01800804 	movi	r6,32
10007830:	00c00044 	movi	r3,1
10007834:	00000206 	br	10007840 <__umodsi3+0x20>
10007838:	30000c26 	beq	r6,zero,1000786c <__umodsi3+0x4c>
1000783c:	28000516 	blt	r5,zero,10007854 <__umodsi3+0x34>
10007840:	294b883a 	add	r5,r5,r5
10007844:	31bfffc4 	addi	r6,r6,-1
10007848:	18c7883a 	add	r3,r3,r3
1000784c:	293ffa36 	bltu	r5,r4,10007838 <__umodsi3+0x18>
10007850:	18000626 	beq	r3,zero,1000786c <__umodsi3+0x4c>
10007854:	1806d07a 	srli	r3,r3,1
10007858:	11400136 	bltu	r2,r5,10007860 <__umodsi3+0x40>
1000785c:	1145c83a 	sub	r2,r2,r5
10007860:	280ad07a 	srli	r5,r5,1
10007864:	183ffb1e 	bne	r3,zero,10007854 <__umodsi3+0x34>
10007868:	f800283a 	ret
1000786c:	f800283a 	ret
10007870:	00c00044 	movi	r3,1
10007874:	003ff706 	br	10007854 <__umodsi3+0x34>

10007878 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10007878:	defffd04 	addi	sp,sp,-12
1000787c:	df000215 	stw	fp,8(sp)
10007880:	df000204 	addi	fp,sp,8
10007884:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10007888:	0001883a 	nop
1000788c:	e0bfff17 	ldw	r2,-4(fp)
10007890:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10007894:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10007898:	10000226 	beq	r2,zero,100078a4 <_exit+0x2c>
    ALT_SIM_FAIL();
1000789c:	002af070 	cmpltui	zero,zero,43969
100078a0:	00000106 	br	100078a8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
100078a4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
100078a8:	003fff06 	br	100078a8 <_exit+0x30>

100078ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100078ac:	defffe04 	addi	sp,sp,-8
100078b0:	dfc00115 	stw	ra,4(sp)
100078b4:	df000015 	stw	fp,0(sp)
100078b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100078bc:	d0a00517 	ldw	r2,-32748(gp)
100078c0:	10000326 	beq	r2,zero,100078d0 <alt_get_errno+0x24>
100078c4:	d0a00517 	ldw	r2,-32748(gp)
100078c8:	103ee83a 	callr	r2
100078cc:	00000106 	br	100078d4 <alt_get_errno+0x28>
100078d0:	d0a6e804 	addi	r2,gp,-25696
}
100078d4:	e037883a 	mov	sp,fp
100078d8:	dfc00117 	ldw	ra,4(sp)
100078dc:	df000017 	ldw	fp,0(sp)
100078e0:	dec00204 	addi	sp,sp,8
100078e4:	f800283a 	ret

100078e8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
100078e8:	defffb04 	addi	sp,sp,-20
100078ec:	dfc00415 	stw	ra,16(sp)
100078f0:	df000315 	stw	fp,12(sp)
100078f4:	df000304 	addi	fp,sp,12
100078f8:	e13ffe15 	stw	r4,-8(fp)
100078fc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10007900:	e0bffe17 	ldw	r2,-8(fp)
10007904:	10000616 	blt	r2,zero,10007920 <fstat+0x38>
10007908:	e0bffe17 	ldw	r2,-8(fp)
1000790c:	10c00324 	muli	r3,r2,12
10007910:	00840774 	movhi	r2,4125
10007914:	10aca904 	addi	r2,r2,-19804
10007918:	1885883a 	add	r2,r3,r2
1000791c:	00000106 	br	10007924 <fstat+0x3c>
10007920:	0005883a 	mov	r2,zero
10007924:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10007928:	e0bffd17 	ldw	r2,-12(fp)
1000792c:	10001026 	beq	r2,zero,10007970 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10007930:	e0bffd17 	ldw	r2,-12(fp)
10007934:	10800017 	ldw	r2,0(r2)
10007938:	10800817 	ldw	r2,32(r2)
1000793c:	10000726 	beq	r2,zero,1000795c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
10007940:	e0bffd17 	ldw	r2,-12(fp)
10007944:	10800017 	ldw	r2,0(r2)
10007948:	10800817 	ldw	r2,32(r2)
1000794c:	e17fff17 	ldw	r5,-4(fp)
10007950:	e13ffd17 	ldw	r4,-12(fp)
10007954:	103ee83a 	callr	r2
10007958:	00000a06 	br	10007984 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000795c:	e0bfff17 	ldw	r2,-4(fp)
10007960:	00c80004 	movi	r3,8192
10007964:	10c00115 	stw	r3,4(r2)
      return 0;
10007968:	0005883a 	mov	r2,zero
1000796c:	00000506 	br	10007984 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10007970:	00078ac0 	call	100078ac <alt_get_errno>
10007974:	1007883a 	mov	r3,r2
10007978:	00801444 	movi	r2,81
1000797c:	18800015 	stw	r2,0(r3)
    return -1;
10007980:	00bfffc4 	movi	r2,-1
  }
}
10007984:	e037883a 	mov	sp,fp
10007988:	dfc00117 	ldw	ra,4(sp)
1000798c:	df000017 	ldw	fp,0(sp)
10007990:	dec00204 	addi	sp,sp,8
10007994:	f800283a 	ret

10007998 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10007998:	defffe04 	addi	sp,sp,-8
1000799c:	dfc00115 	stw	ra,4(sp)
100079a0:	df000015 	stw	fp,0(sp)
100079a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100079a8:	d0a00517 	ldw	r2,-32748(gp)
100079ac:	10000326 	beq	r2,zero,100079bc <alt_get_errno+0x24>
100079b0:	d0a00517 	ldw	r2,-32748(gp)
100079b4:	103ee83a 	callr	r2
100079b8:	00000106 	br	100079c0 <alt_get_errno+0x28>
100079bc:	d0a6e804 	addi	r2,gp,-25696
}
100079c0:	e037883a 	mov	sp,fp
100079c4:	dfc00117 	ldw	ra,4(sp)
100079c8:	df000017 	ldw	fp,0(sp)
100079cc:	dec00204 	addi	sp,sp,8
100079d0:	f800283a 	ret

100079d4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
100079d4:	deffed04 	addi	sp,sp,-76
100079d8:	dfc01215 	stw	ra,72(sp)
100079dc:	df001115 	stw	fp,68(sp)
100079e0:	df001104 	addi	fp,sp,68
100079e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100079e8:	e0bfff17 	ldw	r2,-4(fp)
100079ec:	10000616 	blt	r2,zero,10007a08 <isatty+0x34>
100079f0:	e0bfff17 	ldw	r2,-4(fp)
100079f4:	10c00324 	muli	r3,r2,12
100079f8:	00840774 	movhi	r2,4125
100079fc:	10aca904 	addi	r2,r2,-19804
10007a00:	1885883a 	add	r2,r3,r2
10007a04:	00000106 	br	10007a0c <isatty+0x38>
10007a08:	0005883a 	mov	r2,zero
10007a0c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10007a10:	e0bfef17 	ldw	r2,-68(fp)
10007a14:	10000e26 	beq	r2,zero,10007a50 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10007a18:	e0bfef17 	ldw	r2,-68(fp)
10007a1c:	10800017 	ldw	r2,0(r2)
10007a20:	10800817 	ldw	r2,32(r2)
10007a24:	1000021e 	bne	r2,zero,10007a30 <isatty+0x5c>
    {
      return 1;
10007a28:	00800044 	movi	r2,1
10007a2c:	00000d06 	br	10007a64 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10007a30:	e0bff004 	addi	r2,fp,-64
10007a34:	100b883a 	mov	r5,r2
10007a38:	e13fff17 	ldw	r4,-4(fp)
10007a3c:	00078e80 	call	100078e8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10007a40:	e0bff117 	ldw	r2,-60(fp)
10007a44:	10880020 	cmpeqi	r2,r2,8192
10007a48:	10803fcc 	andi	r2,r2,255
10007a4c:	00000506 	br	10007a64 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10007a50:	00079980 	call	10007998 <alt_get_errno>
10007a54:	1007883a 	mov	r3,r2
10007a58:	00801444 	movi	r2,81
10007a5c:	18800015 	stw	r2,0(r3)
    return 0;
10007a60:	0005883a 	mov	r2,zero
  }
}
10007a64:	e037883a 	mov	sp,fp
10007a68:	dfc00117 	ldw	ra,4(sp)
10007a6c:	df000017 	ldw	fp,0(sp)
10007a70:	dec00204 	addi	sp,sp,8
10007a74:	f800283a 	ret

10007a78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10007a78:	defffe04 	addi	sp,sp,-8
10007a7c:	dfc00115 	stw	ra,4(sp)
10007a80:	df000015 	stw	fp,0(sp)
10007a84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10007a88:	d0a00517 	ldw	r2,-32748(gp)
10007a8c:	10000326 	beq	r2,zero,10007a9c <alt_get_errno+0x24>
10007a90:	d0a00517 	ldw	r2,-32748(gp)
10007a94:	103ee83a 	callr	r2
10007a98:	00000106 	br	10007aa0 <alt_get_errno+0x28>
10007a9c:	d0a6e804 	addi	r2,gp,-25696
}
10007aa0:	e037883a 	mov	sp,fp
10007aa4:	dfc00117 	ldw	ra,4(sp)
10007aa8:	df000017 	ldw	fp,0(sp)
10007aac:	dec00204 	addi	sp,sp,8
10007ab0:	f800283a 	ret

10007ab4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10007ab4:	defff904 	addi	sp,sp,-28
10007ab8:	dfc00615 	stw	ra,24(sp)
10007abc:	df000515 	stw	fp,20(sp)
10007ac0:	df000504 	addi	fp,sp,20
10007ac4:	e13ffd15 	stw	r4,-12(fp)
10007ac8:	e17ffe15 	stw	r5,-8(fp)
10007acc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10007ad0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10007ad4:	e0bffd17 	ldw	r2,-12(fp)
10007ad8:	10000616 	blt	r2,zero,10007af4 <lseek+0x40>
10007adc:	e0bffd17 	ldw	r2,-12(fp)
10007ae0:	10c00324 	muli	r3,r2,12
10007ae4:	00840774 	movhi	r2,4125
10007ae8:	10aca904 	addi	r2,r2,-19804
10007aec:	1885883a 	add	r2,r3,r2
10007af0:	00000106 	br	10007af8 <lseek+0x44>
10007af4:	0005883a 	mov	r2,zero
10007af8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10007afc:	e0bffc17 	ldw	r2,-16(fp)
10007b00:	10001026 	beq	r2,zero,10007b44 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10007b04:	e0bffc17 	ldw	r2,-16(fp)
10007b08:	10800017 	ldw	r2,0(r2)
10007b0c:	10800717 	ldw	r2,28(r2)
10007b10:	10000926 	beq	r2,zero,10007b38 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10007b14:	e0bffc17 	ldw	r2,-16(fp)
10007b18:	10800017 	ldw	r2,0(r2)
10007b1c:	10800717 	ldw	r2,28(r2)
10007b20:	e1bfff17 	ldw	r6,-4(fp)
10007b24:	e17ffe17 	ldw	r5,-8(fp)
10007b28:	e13ffc17 	ldw	r4,-16(fp)
10007b2c:	103ee83a 	callr	r2
10007b30:	e0bffb15 	stw	r2,-20(fp)
10007b34:	00000506 	br	10007b4c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10007b38:	00bfde84 	movi	r2,-134
10007b3c:	e0bffb15 	stw	r2,-20(fp)
10007b40:	00000206 	br	10007b4c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
10007b44:	00bfebc4 	movi	r2,-81
10007b48:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10007b4c:	e0bffb17 	ldw	r2,-20(fp)
10007b50:	1000070e 	bge	r2,zero,10007b70 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
10007b54:	0007a780 	call	10007a78 <alt_get_errno>
10007b58:	1007883a 	mov	r3,r2
10007b5c:	e0bffb17 	ldw	r2,-20(fp)
10007b60:	0085c83a 	sub	r2,zero,r2
10007b64:	18800015 	stw	r2,0(r3)
    rc = -1;
10007b68:	00bfffc4 	movi	r2,-1
10007b6c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10007b70:	e0bffb17 	ldw	r2,-20(fp)
}
10007b74:	e037883a 	mov	sp,fp
10007b78:	dfc00117 	ldw	ra,4(sp)
10007b7c:	df000017 	ldw	fp,0(sp)
10007b80:	dec00204 	addi	sp,sp,8
10007b84:	f800283a 	ret

10007b88 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10007b88:	defffe04 	addi	sp,sp,-8
10007b8c:	df000115 	stw	fp,4(sp)
10007b90:	df000104 	addi	fp,sp,4
10007b94:	e13fff15 	stw	r4,-4(fp)
}
10007b98:	0001883a 	nop
10007b9c:	e037883a 	mov	sp,fp
10007ba0:	df000017 	ldw	fp,0(sp)
10007ba4:	dec00104 	addi	sp,sp,4
10007ba8:	f800283a 	ret

10007bac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10007bac:	defffe04 	addi	sp,sp,-8
10007bb0:	df000115 	stw	fp,4(sp)
10007bb4:	df000104 	addi	fp,sp,4
10007bb8:	e13fff15 	stw	r4,-4(fp)
}
10007bbc:	0001883a 	nop
10007bc0:	e037883a 	mov	sp,fp
10007bc4:	df000017 	ldw	fp,0(sp)
10007bc8:	dec00104 	addi	sp,sp,4
10007bcc:	f800283a 	ret

10007bd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10007bd0:	defffe04 	addi	sp,sp,-8
10007bd4:	dfc00115 	stw	ra,4(sp)
10007bd8:	df000015 	stw	fp,0(sp)
10007bdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10007be0:	d0a00517 	ldw	r2,-32748(gp)
10007be4:	10000326 	beq	r2,zero,10007bf4 <alt_get_errno+0x24>
10007be8:	d0a00517 	ldw	r2,-32748(gp)
10007bec:	103ee83a 	callr	r2
10007bf0:	00000106 	br	10007bf8 <alt_get_errno+0x28>
10007bf4:	d0a6e804 	addi	r2,gp,-25696
}
10007bf8:	e037883a 	mov	sp,fp
10007bfc:	dfc00117 	ldw	ra,4(sp)
10007c00:	df000017 	ldw	fp,0(sp)
10007c04:	dec00204 	addi	sp,sp,8
10007c08:	f800283a 	ret

10007c0c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10007c0c:	defff904 	addi	sp,sp,-28
10007c10:	dfc00615 	stw	ra,24(sp)
10007c14:	df000515 	stw	fp,20(sp)
10007c18:	df000504 	addi	fp,sp,20
10007c1c:	e13ffd15 	stw	r4,-12(fp)
10007c20:	e17ffe15 	stw	r5,-8(fp)
10007c24:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10007c28:	e0bffd17 	ldw	r2,-12(fp)
10007c2c:	10000616 	blt	r2,zero,10007c48 <read+0x3c>
10007c30:	e0bffd17 	ldw	r2,-12(fp)
10007c34:	10c00324 	muli	r3,r2,12
10007c38:	00840774 	movhi	r2,4125
10007c3c:	10aca904 	addi	r2,r2,-19804
10007c40:	1885883a 	add	r2,r3,r2
10007c44:	00000106 	br	10007c4c <read+0x40>
10007c48:	0005883a 	mov	r2,zero
10007c4c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10007c50:	e0bffb17 	ldw	r2,-20(fp)
10007c54:	10002226 	beq	r2,zero,10007ce0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10007c58:	e0bffb17 	ldw	r2,-20(fp)
10007c5c:	10800217 	ldw	r2,8(r2)
10007c60:	108000cc 	andi	r2,r2,3
10007c64:	10800060 	cmpeqi	r2,r2,1
10007c68:	1000181e 	bne	r2,zero,10007ccc <read+0xc0>
        (fd->dev->read))
10007c6c:	e0bffb17 	ldw	r2,-20(fp)
10007c70:	10800017 	ldw	r2,0(r2)
10007c74:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10007c78:	10001426 	beq	r2,zero,10007ccc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10007c7c:	e0bffb17 	ldw	r2,-20(fp)
10007c80:	10800017 	ldw	r2,0(r2)
10007c84:	10800517 	ldw	r2,20(r2)
10007c88:	e0ffff17 	ldw	r3,-4(fp)
10007c8c:	180d883a 	mov	r6,r3
10007c90:	e17ffe17 	ldw	r5,-8(fp)
10007c94:	e13ffb17 	ldw	r4,-20(fp)
10007c98:	103ee83a 	callr	r2
10007c9c:	e0bffc15 	stw	r2,-16(fp)
10007ca0:	e0bffc17 	ldw	r2,-16(fp)
10007ca4:	1000070e 	bge	r2,zero,10007cc4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
10007ca8:	0007bd00 	call	10007bd0 <alt_get_errno>
10007cac:	1007883a 	mov	r3,r2
10007cb0:	e0bffc17 	ldw	r2,-16(fp)
10007cb4:	0085c83a 	sub	r2,zero,r2
10007cb8:	18800015 	stw	r2,0(r3)
          return -1;
10007cbc:	00bfffc4 	movi	r2,-1
10007cc0:	00000c06 	br	10007cf4 <read+0xe8>
        }
        return rval;
10007cc4:	e0bffc17 	ldw	r2,-16(fp)
10007cc8:	00000a06 	br	10007cf4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
10007ccc:	0007bd00 	call	10007bd0 <alt_get_errno>
10007cd0:	1007883a 	mov	r3,r2
10007cd4:	00800344 	movi	r2,13
10007cd8:	18800015 	stw	r2,0(r3)
10007cdc:	00000406 	br	10007cf0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10007ce0:	0007bd00 	call	10007bd0 <alt_get_errno>
10007ce4:	1007883a 	mov	r3,r2
10007ce8:	00801444 	movi	r2,81
10007cec:	18800015 	stw	r2,0(r3)
  }
  return -1;
10007cf0:	00bfffc4 	movi	r2,-1
}
10007cf4:	e037883a 	mov	sp,fp
10007cf8:	dfc00117 	ldw	ra,4(sp)
10007cfc:	df000017 	ldw	fp,0(sp)
10007d00:	dec00204 	addi	sp,sp,8
10007d04:	f800283a 	ret

10007d08 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10007d08:	defff904 	addi	sp,sp,-28
10007d0c:	df000615 	stw	fp,24(sp)
10007d10:	df000604 	addi	fp,sp,24
10007d14:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10007d18:	0005303a 	rdctl	r2,status
10007d1c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10007d20:	e0fffe17 	ldw	r3,-8(fp)
10007d24:	00bfff84 	movi	r2,-2
10007d28:	1884703a 	and	r2,r3,r2
10007d2c:	1001703a 	wrctl	status,r2
  
  return context;
10007d30:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10007d34:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10007d38:	d0a00d17 	ldw	r2,-32716(gp)
10007d3c:	10c000c4 	addi	r3,r2,3
10007d40:	00bfff04 	movi	r2,-4
10007d44:	1884703a 	and	r2,r3,r2
10007d48:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10007d4c:	d0e00d17 	ldw	r3,-32716(gp)
10007d50:	e0bfff17 	ldw	r2,-4(fp)
10007d54:	1887883a 	add	r3,r3,r2
10007d58:	00860034 	movhi	r2,6144
10007d5c:	10800004 	addi	r2,r2,0
10007d60:	10c0062e 	bgeu	r2,r3,10007d7c <sbrk+0x74>
10007d64:	e0bffb17 	ldw	r2,-20(fp)
10007d68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10007d6c:	e0bffa17 	ldw	r2,-24(fp)
10007d70:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10007d74:	00bfffc4 	movi	r2,-1
10007d78:	00000b06 	br	10007da8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10007d7c:	d0a00d17 	ldw	r2,-32716(gp)
10007d80:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10007d84:	d0e00d17 	ldw	r3,-32716(gp)
10007d88:	e0bfff17 	ldw	r2,-4(fp)
10007d8c:	1885883a 	add	r2,r3,r2
10007d90:	d0a00d15 	stw	r2,-32716(gp)
10007d94:	e0bffb17 	ldw	r2,-20(fp)
10007d98:	e0bffc15 	stw	r2,-16(fp)
10007d9c:	e0bffc17 	ldw	r2,-16(fp)
10007da0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10007da4:	e0bffd17 	ldw	r2,-12(fp)
} 
10007da8:	e037883a 	mov	sp,fp
10007dac:	df000017 	ldw	fp,0(sp)
10007db0:	dec00104 	addi	sp,sp,4
10007db4:	f800283a 	ret

10007db8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10007db8:	defffe04 	addi	sp,sp,-8
10007dbc:	dfc00115 	stw	ra,4(sp)
10007dc0:	df000015 	stw	fp,0(sp)
10007dc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10007dc8:	d0a00517 	ldw	r2,-32748(gp)
10007dcc:	10000326 	beq	r2,zero,10007ddc <alt_get_errno+0x24>
10007dd0:	d0a00517 	ldw	r2,-32748(gp)
10007dd4:	103ee83a 	callr	r2
10007dd8:	00000106 	br	10007de0 <alt_get_errno+0x28>
10007ddc:	d0a6e804 	addi	r2,gp,-25696
}
10007de0:	e037883a 	mov	sp,fp
10007de4:	dfc00117 	ldw	ra,4(sp)
10007de8:	df000017 	ldw	fp,0(sp)
10007dec:	dec00204 	addi	sp,sp,8
10007df0:	f800283a 	ret

10007df4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10007df4:	defff904 	addi	sp,sp,-28
10007df8:	dfc00615 	stw	ra,24(sp)
10007dfc:	df000515 	stw	fp,20(sp)
10007e00:	df000504 	addi	fp,sp,20
10007e04:	e13ffd15 	stw	r4,-12(fp)
10007e08:	e17ffe15 	stw	r5,-8(fp)
10007e0c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10007e10:	e0bffd17 	ldw	r2,-12(fp)
10007e14:	10000616 	blt	r2,zero,10007e30 <write+0x3c>
10007e18:	e0bffd17 	ldw	r2,-12(fp)
10007e1c:	10c00324 	muli	r3,r2,12
10007e20:	00840774 	movhi	r2,4125
10007e24:	10aca904 	addi	r2,r2,-19804
10007e28:	1885883a 	add	r2,r3,r2
10007e2c:	00000106 	br	10007e34 <write+0x40>
10007e30:	0005883a 	mov	r2,zero
10007e34:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10007e38:	e0bffb17 	ldw	r2,-20(fp)
10007e3c:	10002126 	beq	r2,zero,10007ec4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10007e40:	e0bffb17 	ldw	r2,-20(fp)
10007e44:	10800217 	ldw	r2,8(r2)
10007e48:	108000cc 	andi	r2,r2,3
10007e4c:	10001826 	beq	r2,zero,10007eb0 <write+0xbc>
10007e50:	e0bffb17 	ldw	r2,-20(fp)
10007e54:	10800017 	ldw	r2,0(r2)
10007e58:	10800617 	ldw	r2,24(r2)
10007e5c:	10001426 	beq	r2,zero,10007eb0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10007e60:	e0bffb17 	ldw	r2,-20(fp)
10007e64:	10800017 	ldw	r2,0(r2)
10007e68:	10800617 	ldw	r2,24(r2)
10007e6c:	e0ffff17 	ldw	r3,-4(fp)
10007e70:	180d883a 	mov	r6,r3
10007e74:	e17ffe17 	ldw	r5,-8(fp)
10007e78:	e13ffb17 	ldw	r4,-20(fp)
10007e7c:	103ee83a 	callr	r2
10007e80:	e0bffc15 	stw	r2,-16(fp)
10007e84:	e0bffc17 	ldw	r2,-16(fp)
10007e88:	1000070e 	bge	r2,zero,10007ea8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
10007e8c:	0007db80 	call	10007db8 <alt_get_errno>
10007e90:	1007883a 	mov	r3,r2
10007e94:	e0bffc17 	ldw	r2,-16(fp)
10007e98:	0085c83a 	sub	r2,zero,r2
10007e9c:	18800015 	stw	r2,0(r3)
        return -1;
10007ea0:	00bfffc4 	movi	r2,-1
10007ea4:	00000c06 	br	10007ed8 <write+0xe4>
      }
      return rval;
10007ea8:	e0bffc17 	ldw	r2,-16(fp)
10007eac:	00000a06 	br	10007ed8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
10007eb0:	0007db80 	call	10007db8 <alt_get_errno>
10007eb4:	1007883a 	mov	r3,r2
10007eb8:	00800344 	movi	r2,13
10007ebc:	18800015 	stw	r2,0(r3)
10007ec0:	00000406 	br	10007ed4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10007ec4:	0007db80 	call	10007db8 <alt_get_errno>
10007ec8:	1007883a 	mov	r3,r2
10007ecc:	00801444 	movi	r2,81
10007ed0:	18800015 	stw	r2,0(r3)
  }
  return -1;
10007ed4:	00bfffc4 	movi	r2,-1
}
10007ed8:	e037883a 	mov	sp,fp
10007edc:	dfc00117 	ldw	ra,4(sp)
10007ee0:	df000017 	ldw	fp,0(sp)
10007ee4:	dec00204 	addi	sp,sp,8
10007ee8:	f800283a 	ret
