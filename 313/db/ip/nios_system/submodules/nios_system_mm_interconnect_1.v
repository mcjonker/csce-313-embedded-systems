// nios_system_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module nios_system_mm_interconnect_1 (
		input  wire        sys_sdram_pll_sdram_clk_clk,                                            //                                       sys_sdram_pll_sdram_clk.clk
		input  wire        sys_sdram_pll_sys_clk_clk,                                              //                                         sys_sdram_pll_sys_clk.clk
		input  wire        jtag_reset_reset_bridge_in_reset_reset,                                 //                              jtag_reset_reset_bridge_in_reset.reset
		input  wire        processor_reset_reset_bridge_in_reset_reset,                            //                         processor_reset_reset_bridge_in_reset.reset
		input  wire        sdram_controller_reset_reset_bridge_in_reset_reset,                     //                  sdram_controller_reset_reset_bridge_in_reset.reset
		input  wire        video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset,    // video_character_buffer_with_dma_0_reset_reset_bridge_in_reset.reset
		input  wire [28:0] processor_data_master_address,                                          //                                         processor_data_master.address
		output wire        processor_data_master_waitrequest,                                      //                                                              .waitrequest
		input  wire [3:0]  processor_data_master_byteenable,                                       //                                                              .byteenable
		input  wire        processor_data_master_read,                                             //                                                              .read
		output wire [31:0] processor_data_master_readdata,                                         //                                                              .readdata
		output wire        processor_data_master_readdatavalid,                                    //                                                              .readdatavalid
		input  wire        processor_data_master_write,                                            //                                                              .write
		input  wire [31:0] processor_data_master_writedata,                                        //                                                              .writedata
		input  wire        processor_data_master_debugaccess,                                      //                                                              .debugaccess
		input  wire [28:0] processor_instruction_master_address,                                   //                                  processor_instruction_master.address
		output wire        processor_instruction_master_waitrequest,                               //                                                              .waitrequest
		input  wire        processor_instruction_master_read,                                      //                                                              .read
		output wire [31:0] processor_instruction_master_readdata,                                  //                                                              .readdata
		output wire        processor_instruction_master_readdatavalid,                             //                                                              .readdatavalid
		output wire [1:0]  dma_buffer_avalon_control_slave_address,                                //                               dma_buffer_avalon_control_slave.address
		output wire        dma_buffer_avalon_control_slave_write,                                  //                                                              .write
		output wire        dma_buffer_avalon_control_slave_read,                                   //                                                              .read
		input  wire [31:0] dma_buffer_avalon_control_slave_readdata,                               //                                                              .readdata
		output wire [31:0] dma_buffer_avalon_control_slave_writedata,                              //                                                              .writedata
		output wire [3:0]  dma_buffer_avalon_control_slave_byteenable,                             //                                                              .byteenable
		output wire [0:0]  jtag_avalon_jtag_slave_address,                                         //                                        jtag_avalon_jtag_slave.address
		output wire        jtag_avalon_jtag_slave_write,                                           //                                                              .write
		output wire        jtag_avalon_jtag_slave_read,                                            //                                                              .read
		input  wire [31:0] jtag_avalon_jtag_slave_readdata,                                        //                                                              .readdata
		output wire [31:0] jtag_avalon_jtag_slave_writedata,                                       //                                                              .writedata
		input  wire        jtag_avalon_jtag_slave_waitrequest,                                     //                                                              .waitrequest
		output wire        jtag_avalon_jtag_slave_chipselect,                                      //                                                              .chipselect
		output wire [8:0]  processor_debug_mem_slave_address,                                      //                                     processor_debug_mem_slave.address
		output wire        processor_debug_mem_slave_write,                                        //                                                              .write
		output wire        processor_debug_mem_slave_read,                                         //                                                              .read
		input  wire [31:0] processor_debug_mem_slave_readdata,                                     //                                                              .readdata
		output wire [31:0] processor_debug_mem_slave_writedata,                                    //                                                              .writedata
		output wire [3:0]  processor_debug_mem_slave_byteenable,                                   //                                                              .byteenable
		input  wire        processor_debug_mem_slave_waitrequest,                                  //                                                              .waitrequest
		output wire        processor_debug_mem_slave_debugaccess,                                  //                                                              .debugaccess
		output wire        rgb_resampler_avalon_rgb_slave_read,                                    //                                rgb_resampler_avalon_rgb_slave.read
		input  wire [31:0] rgb_resampler_avalon_rgb_slave_readdata,                                //                                                              .readdata
		output wire [24:0] sdram_controller_s1_address,                                            //                                           sdram_controller_s1.address
		output wire        sdram_controller_s1_write,                                              //                                                              .write
		output wire        sdram_controller_s1_read,                                               //                                                              .read
		input  wire [31:0] sdram_controller_s1_readdata,                                           //                                                              .readdata
		output wire [31:0] sdram_controller_s1_writedata,                                          //                                                              .writedata
		output wire [3:0]  sdram_controller_s1_byteenable,                                         //                                                              .byteenable
		input  wire        sdram_controller_s1_readdatavalid,                                      //                                                              .readdatavalid
		input  wire        sdram_controller_s1_waitrequest,                                        //                                                              .waitrequest
		output wire        sdram_controller_s1_chipselect,                                         //                                                              .chipselect
		output wire [1:0]  system_modes_s1_address,                                                //                                               system_modes_s1.address
		input  wire [31:0] system_modes_s1_readdata,                                               //                                                              .readdata
		output wire [12:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_address,     //    video_character_buffer_with_dma_0_avalon_char_buffer_slave.address
		output wire        video_character_buffer_with_dma_0_avalon_char_buffer_slave_write,       //                                                              .write
		output wire        video_character_buffer_with_dma_0_avalon_char_buffer_slave_read,        //                                                              .read
		input  wire [7:0]  video_character_buffer_with_dma_0_avalon_char_buffer_slave_readdata,    //                                                              .readdata
		output wire [7:0]  video_character_buffer_with_dma_0_avalon_char_buffer_slave_writedata,   //                                                              .writedata
		output wire [0:0]  video_character_buffer_with_dma_0_avalon_char_buffer_slave_byteenable,  //                                                              .byteenable
		input  wire        video_character_buffer_with_dma_0_avalon_char_buffer_slave_waitrequest, //                                                              .waitrequest
		output wire        video_character_buffer_with_dma_0_avalon_char_buffer_slave_chipselect,  //                                                              .chipselect
		output wire [0:0]  video_character_buffer_with_dma_0_avalon_char_control_slave_address,    //   video_character_buffer_with_dma_0_avalon_char_control_slave.address
		output wire        video_character_buffer_with_dma_0_avalon_char_control_slave_write,      //                                                              .write
		output wire        video_character_buffer_with_dma_0_avalon_char_control_slave_read,       //                                                              .read
		input  wire [31:0] video_character_buffer_with_dma_0_avalon_char_control_slave_readdata,   //                                                              .readdata
		output wire [31:0] video_character_buffer_with_dma_0_avalon_char_control_slave_writedata,  //                                                              .writedata
		output wire [3:0]  video_character_buffer_with_dma_0_avalon_char_control_slave_byteenable, //                                                              .byteenable
		output wire        video_character_buffer_with_dma_0_avalon_char_control_slave_chipselect  //                                                              .chipselect
	);

	wire          processor_data_master_translator_avalon_universal_master_0_waitrequest;                         // processor_data_master_agent:av_waitrequest -> processor_data_master_translator:uav_waitrequest
	wire   [31:0] processor_data_master_translator_avalon_universal_master_0_readdata;                            // processor_data_master_agent:av_readdata -> processor_data_master_translator:uav_readdata
	wire          processor_data_master_translator_avalon_universal_master_0_debugaccess;                         // processor_data_master_translator:uav_debugaccess -> processor_data_master_agent:av_debugaccess
	wire   [28:0] processor_data_master_translator_avalon_universal_master_0_address;                             // processor_data_master_translator:uav_address -> processor_data_master_agent:av_address
	wire          processor_data_master_translator_avalon_universal_master_0_read;                                // processor_data_master_translator:uav_read -> processor_data_master_agent:av_read
	wire    [3:0] processor_data_master_translator_avalon_universal_master_0_byteenable;                          // processor_data_master_translator:uav_byteenable -> processor_data_master_agent:av_byteenable
	wire          processor_data_master_translator_avalon_universal_master_0_readdatavalid;                       // processor_data_master_agent:av_readdatavalid -> processor_data_master_translator:uav_readdatavalid
	wire          processor_data_master_translator_avalon_universal_master_0_lock;                                // processor_data_master_translator:uav_lock -> processor_data_master_agent:av_lock
	wire          processor_data_master_translator_avalon_universal_master_0_write;                               // processor_data_master_translator:uav_write -> processor_data_master_agent:av_write
	wire   [31:0] processor_data_master_translator_avalon_universal_master_0_writedata;                           // processor_data_master_translator:uav_writedata -> processor_data_master_agent:av_writedata
	wire    [2:0] processor_data_master_translator_avalon_universal_master_0_burstcount;                          // processor_data_master_translator:uav_burstcount -> processor_data_master_agent:av_burstcount
	wire          processor_instruction_master_translator_avalon_universal_master_0_waitrequest;                  // processor_instruction_master_agent:av_waitrequest -> processor_instruction_master_translator:uav_waitrequest
	wire   [31:0] processor_instruction_master_translator_avalon_universal_master_0_readdata;                     // processor_instruction_master_agent:av_readdata -> processor_instruction_master_translator:uav_readdata
	wire          processor_instruction_master_translator_avalon_universal_master_0_debugaccess;                  // processor_instruction_master_translator:uav_debugaccess -> processor_instruction_master_agent:av_debugaccess
	wire   [28:0] processor_instruction_master_translator_avalon_universal_master_0_address;                      // processor_instruction_master_translator:uav_address -> processor_instruction_master_agent:av_address
	wire          processor_instruction_master_translator_avalon_universal_master_0_read;                         // processor_instruction_master_translator:uav_read -> processor_instruction_master_agent:av_read
	wire    [3:0] processor_instruction_master_translator_avalon_universal_master_0_byteenable;                   // processor_instruction_master_translator:uav_byteenable -> processor_instruction_master_agent:av_byteenable
	wire          processor_instruction_master_translator_avalon_universal_master_0_readdatavalid;                // processor_instruction_master_agent:av_readdatavalid -> processor_instruction_master_translator:uav_readdatavalid
	wire          processor_instruction_master_translator_avalon_universal_master_0_lock;                         // processor_instruction_master_translator:uav_lock -> processor_instruction_master_agent:av_lock
	wire          processor_instruction_master_translator_avalon_universal_master_0_write;                        // processor_instruction_master_translator:uav_write -> processor_instruction_master_agent:av_write
	wire   [31:0] processor_instruction_master_translator_avalon_universal_master_0_writedata;                    // processor_instruction_master_translator:uav_writedata -> processor_instruction_master_agent:av_writedata
	wire    [2:0] processor_instruction_master_translator_avalon_universal_master_0_burstcount;                   // processor_instruction_master_translator:uav_burstcount -> processor_instruction_master_agent:av_burstcount
	wire    [7:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdata;                   // video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_readdata -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_readdata
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_waitrequest;                // video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_waitrequest -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_waitrequest
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_debugaccess;                // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_debugaccess -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_debugaccess
	wire   [28:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_address;                    // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_address -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_address
	wire    [0:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_byteenable;                 // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_byteenable -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_byteenable
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_read;                       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_read -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_read
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdatavalid;              // video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_readdatavalid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_readdatavalid
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_lock;                       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_lock -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_lock
	wire    [7:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_writedata;                  // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_writedata -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_writedata
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_write;                      // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_write -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_write
	wire    [0:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_burstcount;                 // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_burstcount -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_burstcount
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_valid;               // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_source_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:in_valid
	wire   [78:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_data;                // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_source_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:in_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_ready;               // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:in_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_source_ready
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_startofpacket;       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_source_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:in_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_endofpacket;         // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_source_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:in_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_valid;            // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:out_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_sink_valid
	wire   [78:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_data;             // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:out_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_sink_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_ready;            // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_sink_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:out_ready
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_startofpacket;    // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:out_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_sink_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_endofpacket;      // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:out_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_sink_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_valid;          // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_src_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo:in_valid
	wire    [9:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_data;           // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_src_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo:in_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_ready;          // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo:in_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_src_ready
	wire   [31:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdata;                  // video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_readdata -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_readdata
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_waitrequest;               // video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_waitrequest -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_waitrequest
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_debugaccess;               // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_debugaccess -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_debugaccess
	wire   [28:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_address;                   // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_address -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_address
	wire    [3:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_byteenable;                // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_byteenable -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_byteenable
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_read;                      // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_read -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_read
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdatavalid;             // video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_readdatavalid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_readdatavalid
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_lock;                      // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_lock -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_lock
	wire   [31:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_writedata;                 // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_writedata -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_writedata
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_write;                     // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_write -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_write
	wire    [2:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_burstcount;                // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_burstcount -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_burstcount
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_valid;              // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_source_valid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:in_valid
	wire  [105:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_data;               // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_source_data -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:in_data
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_ready;              // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:in_ready -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_source_ready
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_startofpacket;      // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_source_startofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:in_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_endofpacket;        // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_source_endofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:in_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_valid;           // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:out_valid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_sink_valid
	wire  [105:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_data;            // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:out_data -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_sink_data
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_ready;           // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_sink_ready -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:out_ready
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_startofpacket;   // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:out_startofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_sink_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_endofpacket;     // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:out_endofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_sink_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_valid;         // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_src_valid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_data;          // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_src_data -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo:in_data
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_ready;         // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo:in_ready -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                                          // cmd_mux_001:src_valid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_valid
	wire  [104:0] cmd_mux_001_src_data;                                                                           // cmd_mux_001:src_data -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                          // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [7:0] cmd_mux_001_src_channel;                                                                        // cmd_mux_001:src_channel -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                                  // cmd_mux_001:src_startofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                    // cmd_mux_001:src_endofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_endofpacket
	wire   [31:0] dma_buffer_avalon_control_slave_agent_m0_readdata;                                              // dma_buffer_avalon_control_slave_translator:uav_readdata -> dma_buffer_avalon_control_slave_agent:m0_readdata
	wire          dma_buffer_avalon_control_slave_agent_m0_waitrequest;                                           // dma_buffer_avalon_control_slave_translator:uav_waitrequest -> dma_buffer_avalon_control_slave_agent:m0_waitrequest
	wire          dma_buffer_avalon_control_slave_agent_m0_debugaccess;                                           // dma_buffer_avalon_control_slave_agent:m0_debugaccess -> dma_buffer_avalon_control_slave_translator:uav_debugaccess
	wire   [28:0] dma_buffer_avalon_control_slave_agent_m0_address;                                               // dma_buffer_avalon_control_slave_agent:m0_address -> dma_buffer_avalon_control_slave_translator:uav_address
	wire    [3:0] dma_buffer_avalon_control_slave_agent_m0_byteenable;                                            // dma_buffer_avalon_control_slave_agent:m0_byteenable -> dma_buffer_avalon_control_slave_translator:uav_byteenable
	wire          dma_buffer_avalon_control_slave_agent_m0_read;                                                  // dma_buffer_avalon_control_slave_agent:m0_read -> dma_buffer_avalon_control_slave_translator:uav_read
	wire          dma_buffer_avalon_control_slave_agent_m0_readdatavalid;                                         // dma_buffer_avalon_control_slave_translator:uav_readdatavalid -> dma_buffer_avalon_control_slave_agent:m0_readdatavalid
	wire          dma_buffer_avalon_control_slave_agent_m0_lock;                                                  // dma_buffer_avalon_control_slave_agent:m0_lock -> dma_buffer_avalon_control_slave_translator:uav_lock
	wire   [31:0] dma_buffer_avalon_control_slave_agent_m0_writedata;                                             // dma_buffer_avalon_control_slave_agent:m0_writedata -> dma_buffer_avalon_control_slave_translator:uav_writedata
	wire          dma_buffer_avalon_control_slave_agent_m0_write;                                                 // dma_buffer_avalon_control_slave_agent:m0_write -> dma_buffer_avalon_control_slave_translator:uav_write
	wire    [2:0] dma_buffer_avalon_control_slave_agent_m0_burstcount;                                            // dma_buffer_avalon_control_slave_agent:m0_burstcount -> dma_buffer_avalon_control_slave_translator:uav_burstcount
	wire          dma_buffer_avalon_control_slave_agent_rf_source_valid;                                          // dma_buffer_avalon_control_slave_agent:rf_source_valid -> dma_buffer_avalon_control_slave_agent_rsp_fifo:in_valid
	wire  [105:0] dma_buffer_avalon_control_slave_agent_rf_source_data;                                           // dma_buffer_avalon_control_slave_agent:rf_source_data -> dma_buffer_avalon_control_slave_agent_rsp_fifo:in_data
	wire          dma_buffer_avalon_control_slave_agent_rf_source_ready;                                          // dma_buffer_avalon_control_slave_agent_rsp_fifo:in_ready -> dma_buffer_avalon_control_slave_agent:rf_source_ready
	wire          dma_buffer_avalon_control_slave_agent_rf_source_startofpacket;                                  // dma_buffer_avalon_control_slave_agent:rf_source_startofpacket -> dma_buffer_avalon_control_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_buffer_avalon_control_slave_agent_rf_source_endofpacket;                                    // dma_buffer_avalon_control_slave_agent:rf_source_endofpacket -> dma_buffer_avalon_control_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_buffer_avalon_control_slave_agent_rsp_fifo_out_valid;                                       // dma_buffer_avalon_control_slave_agent_rsp_fifo:out_valid -> dma_buffer_avalon_control_slave_agent:rf_sink_valid
	wire  [105:0] dma_buffer_avalon_control_slave_agent_rsp_fifo_out_data;                                        // dma_buffer_avalon_control_slave_agent_rsp_fifo:out_data -> dma_buffer_avalon_control_slave_agent:rf_sink_data
	wire          dma_buffer_avalon_control_slave_agent_rsp_fifo_out_ready;                                       // dma_buffer_avalon_control_slave_agent:rf_sink_ready -> dma_buffer_avalon_control_slave_agent_rsp_fifo:out_ready
	wire          dma_buffer_avalon_control_slave_agent_rsp_fifo_out_startofpacket;                               // dma_buffer_avalon_control_slave_agent_rsp_fifo:out_startofpacket -> dma_buffer_avalon_control_slave_agent:rf_sink_startofpacket
	wire          dma_buffer_avalon_control_slave_agent_rsp_fifo_out_endofpacket;                                 // dma_buffer_avalon_control_slave_agent_rsp_fifo:out_endofpacket -> dma_buffer_avalon_control_slave_agent:rf_sink_endofpacket
	wire          dma_buffer_avalon_control_slave_agent_rdata_fifo_src_valid;                                     // dma_buffer_avalon_control_slave_agent:rdata_fifo_src_valid -> dma_buffer_avalon_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] dma_buffer_avalon_control_slave_agent_rdata_fifo_src_data;                                      // dma_buffer_avalon_control_slave_agent:rdata_fifo_src_data -> dma_buffer_avalon_control_slave_agent_rdata_fifo:in_data
	wire          dma_buffer_avalon_control_slave_agent_rdata_fifo_src_ready;                                     // dma_buffer_avalon_control_slave_agent_rdata_fifo:in_ready -> dma_buffer_avalon_control_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                                                          // cmd_mux_002:src_valid -> dma_buffer_avalon_control_slave_agent:cp_valid
	wire  [104:0] cmd_mux_002_src_data;                                                                           // cmd_mux_002:src_data -> dma_buffer_avalon_control_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                          // dma_buffer_avalon_control_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [7:0] cmd_mux_002_src_channel;                                                                        // cmd_mux_002:src_channel -> dma_buffer_avalon_control_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                                  // cmd_mux_002:src_startofpacket -> dma_buffer_avalon_control_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                    // cmd_mux_002:src_endofpacket -> dma_buffer_avalon_control_slave_agent:cp_endofpacket
	wire   [31:0] jtag_avalon_jtag_slave_agent_m0_readdata;                                                       // jtag_avalon_jtag_slave_translator:uav_readdata -> jtag_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_avalon_jtag_slave_agent_m0_waitrequest;                                                    // jtag_avalon_jtag_slave_translator:uav_waitrequest -> jtag_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_avalon_jtag_slave_agent_m0_debugaccess;                                                    // jtag_avalon_jtag_slave_agent:m0_debugaccess -> jtag_avalon_jtag_slave_translator:uav_debugaccess
	wire   [28:0] jtag_avalon_jtag_slave_agent_m0_address;                                                        // jtag_avalon_jtag_slave_agent:m0_address -> jtag_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_avalon_jtag_slave_agent_m0_byteenable;                                                     // jtag_avalon_jtag_slave_agent:m0_byteenable -> jtag_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_avalon_jtag_slave_agent_m0_read;                                                           // jtag_avalon_jtag_slave_agent:m0_read -> jtag_avalon_jtag_slave_translator:uav_read
	wire          jtag_avalon_jtag_slave_agent_m0_readdatavalid;                                                  // jtag_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_avalon_jtag_slave_agent_m0_lock;                                                           // jtag_avalon_jtag_slave_agent:m0_lock -> jtag_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_avalon_jtag_slave_agent_m0_writedata;                                                      // jtag_avalon_jtag_slave_agent:m0_writedata -> jtag_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_avalon_jtag_slave_agent_m0_write;                                                          // jtag_avalon_jtag_slave_agent:m0_write -> jtag_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_avalon_jtag_slave_agent_m0_burstcount;                                                     // jtag_avalon_jtag_slave_agent:m0_burstcount -> jtag_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_avalon_jtag_slave_agent_rf_source_valid;                                                   // jtag_avalon_jtag_slave_agent:rf_source_valid -> jtag_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [105:0] jtag_avalon_jtag_slave_agent_rf_source_data;                                                    // jtag_avalon_jtag_slave_agent:rf_source_data -> jtag_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_avalon_jtag_slave_agent_rf_source_ready;                                                   // jtag_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_avalon_jtag_slave_agent_rf_source_startofpacket;                                           // jtag_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_avalon_jtag_slave_agent_rf_source_endofpacket;                                             // jtag_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                                // jtag_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_avalon_jtag_slave_agent:rf_sink_valid
	wire  [105:0] jtag_avalon_jtag_slave_agent_rsp_fifo_out_data;                                                 // jtag_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                                // jtag_avalon_jtag_slave_agent:rf_sink_ready -> jtag_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                                        // jtag_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                          // jtag_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                              // jtag_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_avalon_jtag_slave_agent_rdata_fifo_src_data;                                               // jtag_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                              // jtag_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                                                          // cmd_mux_003:src_valid -> jtag_avalon_jtag_slave_agent:cp_valid
	wire  [104:0] cmd_mux_003_src_data;                                                                           // cmd_mux_003:src_data -> jtag_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                          // jtag_avalon_jtag_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire    [7:0] cmd_mux_003_src_channel;                                                                        // cmd_mux_003:src_channel -> jtag_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                                  // cmd_mux_003:src_startofpacket -> jtag_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                    // cmd_mux_003:src_endofpacket -> jtag_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] rgb_resampler_avalon_rgb_slave_agent_m0_readdata;                                               // rgb_resampler_avalon_rgb_slave_translator:uav_readdata -> rgb_resampler_avalon_rgb_slave_agent:m0_readdata
	wire          rgb_resampler_avalon_rgb_slave_agent_m0_waitrequest;                                            // rgb_resampler_avalon_rgb_slave_translator:uav_waitrequest -> rgb_resampler_avalon_rgb_slave_agent:m0_waitrequest
	wire          rgb_resampler_avalon_rgb_slave_agent_m0_debugaccess;                                            // rgb_resampler_avalon_rgb_slave_agent:m0_debugaccess -> rgb_resampler_avalon_rgb_slave_translator:uav_debugaccess
	wire   [28:0] rgb_resampler_avalon_rgb_slave_agent_m0_address;                                                // rgb_resampler_avalon_rgb_slave_agent:m0_address -> rgb_resampler_avalon_rgb_slave_translator:uav_address
	wire    [3:0] rgb_resampler_avalon_rgb_slave_agent_m0_byteenable;                                             // rgb_resampler_avalon_rgb_slave_agent:m0_byteenable -> rgb_resampler_avalon_rgb_slave_translator:uav_byteenable
	wire          rgb_resampler_avalon_rgb_slave_agent_m0_read;                                                   // rgb_resampler_avalon_rgb_slave_agent:m0_read -> rgb_resampler_avalon_rgb_slave_translator:uav_read
	wire          rgb_resampler_avalon_rgb_slave_agent_m0_readdatavalid;                                          // rgb_resampler_avalon_rgb_slave_translator:uav_readdatavalid -> rgb_resampler_avalon_rgb_slave_agent:m0_readdatavalid
	wire          rgb_resampler_avalon_rgb_slave_agent_m0_lock;                                                   // rgb_resampler_avalon_rgb_slave_agent:m0_lock -> rgb_resampler_avalon_rgb_slave_translator:uav_lock
	wire   [31:0] rgb_resampler_avalon_rgb_slave_agent_m0_writedata;                                              // rgb_resampler_avalon_rgb_slave_agent:m0_writedata -> rgb_resampler_avalon_rgb_slave_translator:uav_writedata
	wire          rgb_resampler_avalon_rgb_slave_agent_m0_write;                                                  // rgb_resampler_avalon_rgb_slave_agent:m0_write -> rgb_resampler_avalon_rgb_slave_translator:uav_write
	wire    [2:0] rgb_resampler_avalon_rgb_slave_agent_m0_burstcount;                                             // rgb_resampler_avalon_rgb_slave_agent:m0_burstcount -> rgb_resampler_avalon_rgb_slave_translator:uav_burstcount
	wire          rgb_resampler_avalon_rgb_slave_agent_rf_source_valid;                                           // rgb_resampler_avalon_rgb_slave_agent:rf_source_valid -> rgb_resampler_avalon_rgb_slave_agent_rsp_fifo:in_valid
	wire  [105:0] rgb_resampler_avalon_rgb_slave_agent_rf_source_data;                                            // rgb_resampler_avalon_rgb_slave_agent:rf_source_data -> rgb_resampler_avalon_rgb_slave_agent_rsp_fifo:in_data
	wire          rgb_resampler_avalon_rgb_slave_agent_rf_source_ready;                                           // rgb_resampler_avalon_rgb_slave_agent_rsp_fifo:in_ready -> rgb_resampler_avalon_rgb_slave_agent:rf_source_ready
	wire          rgb_resampler_avalon_rgb_slave_agent_rf_source_startofpacket;                                   // rgb_resampler_avalon_rgb_slave_agent:rf_source_startofpacket -> rgb_resampler_avalon_rgb_slave_agent_rsp_fifo:in_startofpacket
	wire          rgb_resampler_avalon_rgb_slave_agent_rf_source_endofpacket;                                     // rgb_resampler_avalon_rgb_slave_agent:rf_source_endofpacket -> rgb_resampler_avalon_rgb_slave_agent_rsp_fifo:in_endofpacket
	wire          rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_valid;                                        // rgb_resampler_avalon_rgb_slave_agent_rsp_fifo:out_valid -> rgb_resampler_avalon_rgb_slave_agent:rf_sink_valid
	wire  [105:0] rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_data;                                         // rgb_resampler_avalon_rgb_slave_agent_rsp_fifo:out_data -> rgb_resampler_avalon_rgb_slave_agent:rf_sink_data
	wire          rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_ready;                                        // rgb_resampler_avalon_rgb_slave_agent:rf_sink_ready -> rgb_resampler_avalon_rgb_slave_agent_rsp_fifo:out_ready
	wire          rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_startofpacket;                                // rgb_resampler_avalon_rgb_slave_agent_rsp_fifo:out_startofpacket -> rgb_resampler_avalon_rgb_slave_agent:rf_sink_startofpacket
	wire          rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_endofpacket;                                  // rgb_resampler_avalon_rgb_slave_agent_rsp_fifo:out_endofpacket -> rgb_resampler_avalon_rgb_slave_agent:rf_sink_endofpacket
	wire          rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_src_valid;                                      // rgb_resampler_avalon_rgb_slave_agent:rdata_fifo_src_valid -> rgb_resampler_avalon_rgb_slave_agent_rdata_fifo:in_valid
	wire   [33:0] rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_src_data;                                       // rgb_resampler_avalon_rgb_slave_agent:rdata_fifo_src_data -> rgb_resampler_avalon_rgb_slave_agent_rdata_fifo:in_data
	wire          rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_src_ready;                                      // rgb_resampler_avalon_rgb_slave_agent_rdata_fifo:in_ready -> rgb_resampler_avalon_rgb_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_valid;                                                                          // cmd_mux_004:src_valid -> rgb_resampler_avalon_rgb_slave_agent:cp_valid
	wire  [104:0] cmd_mux_004_src_data;                                                                           // cmd_mux_004:src_data -> rgb_resampler_avalon_rgb_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                          // rgb_resampler_avalon_rgb_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [7:0] cmd_mux_004_src_channel;                                                                        // cmd_mux_004:src_channel -> rgb_resampler_avalon_rgb_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                                  // cmd_mux_004:src_startofpacket -> rgb_resampler_avalon_rgb_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                    // cmd_mux_004:src_endofpacket -> rgb_resampler_avalon_rgb_slave_agent:cp_endofpacket
	wire   [31:0] processor_debug_mem_slave_agent_m0_readdata;                                                    // processor_debug_mem_slave_translator:uav_readdata -> processor_debug_mem_slave_agent:m0_readdata
	wire          processor_debug_mem_slave_agent_m0_waitrequest;                                                 // processor_debug_mem_slave_translator:uav_waitrequest -> processor_debug_mem_slave_agent:m0_waitrequest
	wire          processor_debug_mem_slave_agent_m0_debugaccess;                                                 // processor_debug_mem_slave_agent:m0_debugaccess -> processor_debug_mem_slave_translator:uav_debugaccess
	wire   [28:0] processor_debug_mem_slave_agent_m0_address;                                                     // processor_debug_mem_slave_agent:m0_address -> processor_debug_mem_slave_translator:uav_address
	wire    [3:0] processor_debug_mem_slave_agent_m0_byteenable;                                                  // processor_debug_mem_slave_agent:m0_byteenable -> processor_debug_mem_slave_translator:uav_byteenable
	wire          processor_debug_mem_slave_agent_m0_read;                                                        // processor_debug_mem_slave_agent:m0_read -> processor_debug_mem_slave_translator:uav_read
	wire          processor_debug_mem_slave_agent_m0_readdatavalid;                                               // processor_debug_mem_slave_translator:uav_readdatavalid -> processor_debug_mem_slave_agent:m0_readdatavalid
	wire          processor_debug_mem_slave_agent_m0_lock;                                                        // processor_debug_mem_slave_agent:m0_lock -> processor_debug_mem_slave_translator:uav_lock
	wire   [31:0] processor_debug_mem_slave_agent_m0_writedata;                                                   // processor_debug_mem_slave_agent:m0_writedata -> processor_debug_mem_slave_translator:uav_writedata
	wire          processor_debug_mem_slave_agent_m0_write;                                                       // processor_debug_mem_slave_agent:m0_write -> processor_debug_mem_slave_translator:uav_write
	wire    [2:0] processor_debug_mem_slave_agent_m0_burstcount;                                                  // processor_debug_mem_slave_agent:m0_burstcount -> processor_debug_mem_slave_translator:uav_burstcount
	wire          processor_debug_mem_slave_agent_rf_source_valid;                                                // processor_debug_mem_slave_agent:rf_source_valid -> processor_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [105:0] processor_debug_mem_slave_agent_rf_source_data;                                                 // processor_debug_mem_slave_agent:rf_source_data -> processor_debug_mem_slave_agent_rsp_fifo:in_data
	wire          processor_debug_mem_slave_agent_rf_source_ready;                                                // processor_debug_mem_slave_agent_rsp_fifo:in_ready -> processor_debug_mem_slave_agent:rf_source_ready
	wire          processor_debug_mem_slave_agent_rf_source_startofpacket;                                        // processor_debug_mem_slave_agent:rf_source_startofpacket -> processor_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          processor_debug_mem_slave_agent_rf_source_endofpacket;                                          // processor_debug_mem_slave_agent:rf_source_endofpacket -> processor_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          processor_debug_mem_slave_agent_rsp_fifo_out_valid;                                             // processor_debug_mem_slave_agent_rsp_fifo:out_valid -> processor_debug_mem_slave_agent:rf_sink_valid
	wire  [105:0] processor_debug_mem_slave_agent_rsp_fifo_out_data;                                              // processor_debug_mem_slave_agent_rsp_fifo:out_data -> processor_debug_mem_slave_agent:rf_sink_data
	wire          processor_debug_mem_slave_agent_rsp_fifo_out_ready;                                             // processor_debug_mem_slave_agent:rf_sink_ready -> processor_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          processor_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                                     // processor_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> processor_debug_mem_slave_agent:rf_sink_startofpacket
	wire          processor_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                                       // processor_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> processor_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                                          // cmd_mux_005:src_valid -> processor_debug_mem_slave_agent:cp_valid
	wire  [104:0] cmd_mux_005_src_data;                                                                           // cmd_mux_005:src_data -> processor_debug_mem_slave_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                          // processor_debug_mem_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire    [7:0] cmd_mux_005_src_channel;                                                                        // cmd_mux_005:src_channel -> processor_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                                  // cmd_mux_005:src_startofpacket -> processor_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                    // cmd_mux_005:src_endofpacket -> processor_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] system_modes_s1_agent_m0_readdata;                                                              // system_modes_s1_translator:uav_readdata -> system_modes_s1_agent:m0_readdata
	wire          system_modes_s1_agent_m0_waitrequest;                                                           // system_modes_s1_translator:uav_waitrequest -> system_modes_s1_agent:m0_waitrequest
	wire          system_modes_s1_agent_m0_debugaccess;                                                           // system_modes_s1_agent:m0_debugaccess -> system_modes_s1_translator:uav_debugaccess
	wire   [28:0] system_modes_s1_agent_m0_address;                                                               // system_modes_s1_agent:m0_address -> system_modes_s1_translator:uav_address
	wire    [3:0] system_modes_s1_agent_m0_byteenable;                                                            // system_modes_s1_agent:m0_byteenable -> system_modes_s1_translator:uav_byteenable
	wire          system_modes_s1_agent_m0_read;                                                                  // system_modes_s1_agent:m0_read -> system_modes_s1_translator:uav_read
	wire          system_modes_s1_agent_m0_readdatavalid;                                                         // system_modes_s1_translator:uav_readdatavalid -> system_modes_s1_agent:m0_readdatavalid
	wire          system_modes_s1_agent_m0_lock;                                                                  // system_modes_s1_agent:m0_lock -> system_modes_s1_translator:uav_lock
	wire   [31:0] system_modes_s1_agent_m0_writedata;                                                             // system_modes_s1_agent:m0_writedata -> system_modes_s1_translator:uav_writedata
	wire          system_modes_s1_agent_m0_write;                                                                 // system_modes_s1_agent:m0_write -> system_modes_s1_translator:uav_write
	wire    [2:0] system_modes_s1_agent_m0_burstcount;                                                            // system_modes_s1_agent:m0_burstcount -> system_modes_s1_translator:uav_burstcount
	wire          system_modes_s1_agent_rf_source_valid;                                                          // system_modes_s1_agent:rf_source_valid -> system_modes_s1_agent_rsp_fifo:in_valid
	wire  [105:0] system_modes_s1_agent_rf_source_data;                                                           // system_modes_s1_agent:rf_source_data -> system_modes_s1_agent_rsp_fifo:in_data
	wire          system_modes_s1_agent_rf_source_ready;                                                          // system_modes_s1_agent_rsp_fifo:in_ready -> system_modes_s1_agent:rf_source_ready
	wire          system_modes_s1_agent_rf_source_startofpacket;                                                  // system_modes_s1_agent:rf_source_startofpacket -> system_modes_s1_agent_rsp_fifo:in_startofpacket
	wire          system_modes_s1_agent_rf_source_endofpacket;                                                    // system_modes_s1_agent:rf_source_endofpacket -> system_modes_s1_agent_rsp_fifo:in_endofpacket
	wire          system_modes_s1_agent_rsp_fifo_out_valid;                                                       // system_modes_s1_agent_rsp_fifo:out_valid -> system_modes_s1_agent:rf_sink_valid
	wire  [105:0] system_modes_s1_agent_rsp_fifo_out_data;                                                        // system_modes_s1_agent_rsp_fifo:out_data -> system_modes_s1_agent:rf_sink_data
	wire          system_modes_s1_agent_rsp_fifo_out_ready;                                                       // system_modes_s1_agent:rf_sink_ready -> system_modes_s1_agent_rsp_fifo:out_ready
	wire          system_modes_s1_agent_rsp_fifo_out_startofpacket;                                               // system_modes_s1_agent_rsp_fifo:out_startofpacket -> system_modes_s1_agent:rf_sink_startofpacket
	wire          system_modes_s1_agent_rsp_fifo_out_endofpacket;                                                 // system_modes_s1_agent_rsp_fifo:out_endofpacket -> system_modes_s1_agent:rf_sink_endofpacket
	wire          system_modes_s1_agent_rdata_fifo_src_valid;                                                     // system_modes_s1_agent:rdata_fifo_src_valid -> system_modes_s1_agent_rdata_fifo:in_valid
	wire   [33:0] system_modes_s1_agent_rdata_fifo_src_data;                                                      // system_modes_s1_agent:rdata_fifo_src_data -> system_modes_s1_agent_rdata_fifo:in_data
	wire          system_modes_s1_agent_rdata_fifo_src_ready;                                                     // system_modes_s1_agent_rdata_fifo:in_ready -> system_modes_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_valid;                                                                          // cmd_mux_006:src_valid -> system_modes_s1_agent:cp_valid
	wire  [104:0] cmd_mux_006_src_data;                                                                           // cmd_mux_006:src_data -> system_modes_s1_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                          // system_modes_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire    [7:0] cmd_mux_006_src_channel;                                                                        // cmd_mux_006:src_channel -> system_modes_s1_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                                  // cmd_mux_006:src_startofpacket -> system_modes_s1_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                    // cmd_mux_006:src_endofpacket -> system_modes_s1_agent:cp_endofpacket
	wire   [31:0] sdram_controller_s1_agent_m0_readdata;                                                          // sdram_controller_s1_translator:uav_readdata -> sdram_controller_s1_agent:m0_readdata
	wire          sdram_controller_s1_agent_m0_waitrequest;                                                       // sdram_controller_s1_translator:uav_waitrequest -> sdram_controller_s1_agent:m0_waitrequest
	wire          sdram_controller_s1_agent_m0_debugaccess;                                                       // sdram_controller_s1_agent:m0_debugaccess -> sdram_controller_s1_translator:uav_debugaccess
	wire   [28:0] sdram_controller_s1_agent_m0_address;                                                           // sdram_controller_s1_agent:m0_address -> sdram_controller_s1_translator:uav_address
	wire    [3:0] sdram_controller_s1_agent_m0_byteenable;                                                        // sdram_controller_s1_agent:m0_byteenable -> sdram_controller_s1_translator:uav_byteenable
	wire          sdram_controller_s1_agent_m0_read;                                                              // sdram_controller_s1_agent:m0_read -> sdram_controller_s1_translator:uav_read
	wire          sdram_controller_s1_agent_m0_readdatavalid;                                                     // sdram_controller_s1_translator:uav_readdatavalid -> sdram_controller_s1_agent:m0_readdatavalid
	wire          sdram_controller_s1_agent_m0_lock;                                                              // sdram_controller_s1_agent:m0_lock -> sdram_controller_s1_translator:uav_lock
	wire   [31:0] sdram_controller_s1_agent_m0_writedata;                                                         // sdram_controller_s1_agent:m0_writedata -> sdram_controller_s1_translator:uav_writedata
	wire          sdram_controller_s1_agent_m0_write;                                                             // sdram_controller_s1_agent:m0_write -> sdram_controller_s1_translator:uav_write
	wire    [2:0] sdram_controller_s1_agent_m0_burstcount;                                                        // sdram_controller_s1_agent:m0_burstcount -> sdram_controller_s1_translator:uav_burstcount
	wire          sdram_controller_s1_agent_rf_source_valid;                                                      // sdram_controller_s1_agent:rf_source_valid -> sdram_controller_s1_agent_rsp_fifo:in_valid
	wire  [105:0] sdram_controller_s1_agent_rf_source_data;                                                       // sdram_controller_s1_agent:rf_source_data -> sdram_controller_s1_agent_rsp_fifo:in_data
	wire          sdram_controller_s1_agent_rf_source_ready;                                                      // sdram_controller_s1_agent_rsp_fifo:in_ready -> sdram_controller_s1_agent:rf_source_ready
	wire          sdram_controller_s1_agent_rf_source_startofpacket;                                              // sdram_controller_s1_agent:rf_source_startofpacket -> sdram_controller_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_controller_s1_agent_rf_source_endofpacket;                                                // sdram_controller_s1_agent:rf_source_endofpacket -> sdram_controller_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_controller_s1_agent_rsp_fifo_out_valid;                                                   // sdram_controller_s1_agent_rsp_fifo:out_valid -> sdram_controller_s1_agent:rf_sink_valid
	wire  [105:0] sdram_controller_s1_agent_rsp_fifo_out_data;                                                    // sdram_controller_s1_agent_rsp_fifo:out_data -> sdram_controller_s1_agent:rf_sink_data
	wire          sdram_controller_s1_agent_rsp_fifo_out_ready;                                                   // sdram_controller_s1_agent:rf_sink_ready -> sdram_controller_s1_agent_rsp_fifo:out_ready
	wire          sdram_controller_s1_agent_rsp_fifo_out_startofpacket;                                           // sdram_controller_s1_agent_rsp_fifo:out_startofpacket -> sdram_controller_s1_agent:rf_sink_startofpacket
	wire          sdram_controller_s1_agent_rsp_fifo_out_endofpacket;                                             // sdram_controller_s1_agent_rsp_fifo:out_endofpacket -> sdram_controller_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                                          // cmd_mux_007:src_valid -> sdram_controller_s1_agent:cp_valid
	wire  [104:0] cmd_mux_007_src_data;                                                                           // cmd_mux_007:src_data -> sdram_controller_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                          // sdram_controller_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire    [7:0] cmd_mux_007_src_channel;                                                                        // cmd_mux_007:src_channel -> sdram_controller_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                                  // cmd_mux_007:src_startofpacket -> sdram_controller_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                    // cmd_mux_007:src_endofpacket -> sdram_controller_s1_agent:cp_endofpacket
	wire          processor_data_master_agent_cp_valid;                                                           // processor_data_master_agent:cp_valid -> router:sink_valid
	wire  [104:0] processor_data_master_agent_cp_data;                                                            // processor_data_master_agent:cp_data -> router:sink_data
	wire          processor_data_master_agent_cp_ready;                                                           // router:sink_ready -> processor_data_master_agent:cp_ready
	wire          processor_data_master_agent_cp_startofpacket;                                                   // processor_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          processor_data_master_agent_cp_endofpacket;                                                     // processor_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          processor_instruction_master_agent_cp_valid;                                                    // processor_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [104:0] processor_instruction_master_agent_cp_data;                                                     // processor_instruction_master_agent:cp_data -> router_001:sink_data
	wire          processor_instruction_master_agent_cp_ready;                                                    // router_001:sink_ready -> processor_instruction_master_agent:cp_ready
	wire          processor_instruction_master_agent_cp_startofpacket;                                            // processor_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          processor_instruction_master_agent_cp_endofpacket;                                              // processor_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_valid;                      // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rp_valid -> router_002:sink_valid
	wire   [77:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_data;                       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rp_data -> router_002:sink_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_ready;                      // router_002:sink_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rp_ready
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_startofpacket;              // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_endofpacket;                // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_valid;                     // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rp_valid -> router_003:sink_valid
	wire  [104:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_data;                      // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rp_data -> router_003:sink_data
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_ready;                     // router_003:sink_ready -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rp_ready
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_startofpacket;             // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_endofpacket;               // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                           // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [104:0] router_003_src_data;                                                                            // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                                           // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [7:0] router_003_src_channel;                                                                         // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                                   // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                     // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          dma_buffer_avalon_control_slave_agent_rp_valid;                                                 // dma_buffer_avalon_control_slave_agent:rp_valid -> router_004:sink_valid
	wire  [104:0] dma_buffer_avalon_control_slave_agent_rp_data;                                                  // dma_buffer_avalon_control_slave_agent:rp_data -> router_004:sink_data
	wire          dma_buffer_avalon_control_slave_agent_rp_ready;                                                 // router_004:sink_ready -> dma_buffer_avalon_control_slave_agent:rp_ready
	wire          dma_buffer_avalon_control_slave_agent_rp_startofpacket;                                         // dma_buffer_avalon_control_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          dma_buffer_avalon_control_slave_agent_rp_endofpacket;                                           // dma_buffer_avalon_control_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                           // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [104:0] router_004_src_data;                                                                            // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                                           // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [7:0] router_004_src_channel;                                                                         // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                                   // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                     // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          jtag_avalon_jtag_slave_agent_rp_valid;                                                          // jtag_avalon_jtag_slave_agent:rp_valid -> router_005:sink_valid
	wire  [104:0] jtag_avalon_jtag_slave_agent_rp_data;                                                           // jtag_avalon_jtag_slave_agent:rp_data -> router_005:sink_data
	wire          jtag_avalon_jtag_slave_agent_rp_ready;                                                          // router_005:sink_ready -> jtag_avalon_jtag_slave_agent:rp_ready
	wire          jtag_avalon_jtag_slave_agent_rp_startofpacket;                                                  // jtag_avalon_jtag_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          jtag_avalon_jtag_slave_agent_rp_endofpacket;                                                    // jtag_avalon_jtag_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                           // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [104:0] router_005_src_data;                                                                            // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                                           // rsp_demux_003:sink_ready -> router_005:src_ready
	wire    [7:0] router_005_src_channel;                                                                         // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                                   // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                     // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          rgb_resampler_avalon_rgb_slave_agent_rp_valid;                                                  // rgb_resampler_avalon_rgb_slave_agent:rp_valid -> router_006:sink_valid
	wire  [104:0] rgb_resampler_avalon_rgb_slave_agent_rp_data;                                                   // rgb_resampler_avalon_rgb_slave_agent:rp_data -> router_006:sink_data
	wire          rgb_resampler_avalon_rgb_slave_agent_rp_ready;                                                  // router_006:sink_ready -> rgb_resampler_avalon_rgb_slave_agent:rp_ready
	wire          rgb_resampler_avalon_rgb_slave_agent_rp_startofpacket;                                          // rgb_resampler_avalon_rgb_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          rgb_resampler_avalon_rgb_slave_agent_rp_endofpacket;                                            // rgb_resampler_avalon_rgb_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                           // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [104:0] router_006_src_data;                                                                            // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                                           // rsp_demux_004:sink_ready -> router_006:src_ready
	wire    [7:0] router_006_src_channel;                                                                         // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                                                   // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                     // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          processor_debug_mem_slave_agent_rp_valid;                                                       // processor_debug_mem_slave_agent:rp_valid -> router_007:sink_valid
	wire  [104:0] processor_debug_mem_slave_agent_rp_data;                                                        // processor_debug_mem_slave_agent:rp_data -> router_007:sink_data
	wire          processor_debug_mem_slave_agent_rp_ready;                                                       // router_007:sink_ready -> processor_debug_mem_slave_agent:rp_ready
	wire          processor_debug_mem_slave_agent_rp_startofpacket;                                               // processor_debug_mem_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          processor_debug_mem_slave_agent_rp_endofpacket;                                                 // processor_debug_mem_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                           // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [104:0] router_007_src_data;                                                                            // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                                           // rsp_demux_005:sink_ready -> router_007:src_ready
	wire    [7:0] router_007_src_channel;                                                                         // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                                   // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                     // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          system_modes_s1_agent_rp_valid;                                                                 // system_modes_s1_agent:rp_valid -> router_008:sink_valid
	wire  [104:0] system_modes_s1_agent_rp_data;                                                                  // system_modes_s1_agent:rp_data -> router_008:sink_data
	wire          system_modes_s1_agent_rp_ready;                                                                 // router_008:sink_ready -> system_modes_s1_agent:rp_ready
	wire          system_modes_s1_agent_rp_startofpacket;                                                         // system_modes_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          system_modes_s1_agent_rp_endofpacket;                                                           // system_modes_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                           // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [104:0] router_008_src_data;                                                                            // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                                           // rsp_demux_006:sink_ready -> router_008:src_ready
	wire    [7:0] router_008_src_channel;                                                                         // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                                   // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                     // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          sdram_controller_s1_agent_rp_valid;                                                             // sdram_controller_s1_agent:rp_valid -> router_009:sink_valid
	wire  [104:0] sdram_controller_s1_agent_rp_data;                                                              // sdram_controller_s1_agent:rp_data -> router_009:sink_data
	wire          sdram_controller_s1_agent_rp_ready;                                                             // router_009:sink_ready -> sdram_controller_s1_agent:rp_ready
	wire          sdram_controller_s1_agent_rp_startofpacket;                                                     // sdram_controller_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          sdram_controller_s1_agent_rp_endofpacket;                                                       // sdram_controller_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                           // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [104:0] router_009_src_data;                                                                            // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                                           // rsp_demux_007:sink_ready -> router_009:src_ready
	wire    [7:0] router_009_src_channel;                                                                         // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                                   // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                     // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_src_valid;                                                                               // router:src_valid -> processor_data_master_limiter:cmd_sink_valid
	wire  [104:0] router_src_data;                                                                                // router:src_data -> processor_data_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                                               // processor_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire    [7:0] router_src_channel;                                                                             // router:src_channel -> processor_data_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                                       // router:src_startofpacket -> processor_data_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                                         // router:src_endofpacket -> processor_data_master_limiter:cmd_sink_endofpacket
	wire  [104:0] processor_data_master_limiter_cmd_src_data;                                                     // processor_data_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          processor_data_master_limiter_cmd_src_ready;                                                    // cmd_demux:sink_ready -> processor_data_master_limiter:cmd_src_ready
	wire    [7:0] processor_data_master_limiter_cmd_src_channel;                                                  // processor_data_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          processor_data_master_limiter_cmd_src_startofpacket;                                            // processor_data_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          processor_data_master_limiter_cmd_src_endofpacket;                                              // processor_data_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                              // rsp_mux:src_valid -> processor_data_master_limiter:rsp_sink_valid
	wire  [104:0] rsp_mux_src_data;                                                                               // rsp_mux:src_data -> processor_data_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                              // processor_data_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [7:0] rsp_mux_src_channel;                                                                            // rsp_mux:src_channel -> processor_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                                      // rsp_mux:src_startofpacket -> processor_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                        // rsp_mux:src_endofpacket -> processor_data_master_limiter:rsp_sink_endofpacket
	wire          processor_data_master_limiter_rsp_src_valid;                                                    // processor_data_master_limiter:rsp_src_valid -> processor_data_master_agent:rp_valid
	wire  [104:0] processor_data_master_limiter_rsp_src_data;                                                     // processor_data_master_limiter:rsp_src_data -> processor_data_master_agent:rp_data
	wire          processor_data_master_limiter_rsp_src_ready;                                                    // processor_data_master_agent:rp_ready -> processor_data_master_limiter:rsp_src_ready
	wire    [7:0] processor_data_master_limiter_rsp_src_channel;                                                  // processor_data_master_limiter:rsp_src_channel -> processor_data_master_agent:rp_channel
	wire          processor_data_master_limiter_rsp_src_startofpacket;                                            // processor_data_master_limiter:rsp_src_startofpacket -> processor_data_master_agent:rp_startofpacket
	wire          processor_data_master_limiter_rsp_src_endofpacket;                                              // processor_data_master_limiter:rsp_src_endofpacket -> processor_data_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                                           // router_001:src_valid -> processor_instruction_master_limiter:cmd_sink_valid
	wire  [104:0] router_001_src_data;                                                                            // router_001:src_data -> processor_instruction_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                           // processor_instruction_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [7:0] router_001_src_channel;                                                                         // router_001:src_channel -> processor_instruction_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                                   // router_001:src_startofpacket -> processor_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                                     // router_001:src_endofpacket -> processor_instruction_master_limiter:cmd_sink_endofpacket
	wire  [104:0] processor_instruction_master_limiter_cmd_src_data;                                              // processor_instruction_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          processor_instruction_master_limiter_cmd_src_ready;                                             // cmd_demux_001:sink_ready -> processor_instruction_master_limiter:cmd_src_ready
	wire    [7:0] processor_instruction_master_limiter_cmd_src_channel;                                           // processor_instruction_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          processor_instruction_master_limiter_cmd_src_startofpacket;                                     // processor_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          processor_instruction_master_limiter_cmd_src_endofpacket;                                       // processor_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                          // rsp_mux_001:src_valid -> processor_instruction_master_limiter:rsp_sink_valid
	wire  [104:0] rsp_mux_001_src_data;                                                                           // rsp_mux_001:src_data -> processor_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                          // processor_instruction_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [7:0] rsp_mux_001_src_channel;                                                                        // rsp_mux_001:src_channel -> processor_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                                  // rsp_mux_001:src_startofpacket -> processor_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                    // rsp_mux_001:src_endofpacket -> processor_instruction_master_limiter:rsp_sink_endofpacket
	wire          processor_instruction_master_limiter_rsp_src_valid;                                             // processor_instruction_master_limiter:rsp_src_valid -> processor_instruction_master_agent:rp_valid
	wire  [104:0] processor_instruction_master_limiter_rsp_src_data;                                              // processor_instruction_master_limiter:rsp_src_data -> processor_instruction_master_agent:rp_data
	wire          processor_instruction_master_limiter_rsp_src_ready;                                             // processor_instruction_master_agent:rp_ready -> processor_instruction_master_limiter:rsp_src_ready
	wire    [7:0] processor_instruction_master_limiter_rsp_src_channel;                                           // processor_instruction_master_limiter:rsp_src_channel -> processor_instruction_master_agent:rp_channel
	wire          processor_instruction_master_limiter_rsp_src_startofpacket;                                     // processor_instruction_master_limiter:rsp_src_startofpacket -> processor_instruction_master_agent:rp_startofpacket
	wire          processor_instruction_master_limiter_rsp_src_endofpacket;                                       // processor_instruction_master_limiter:rsp_src_endofpacket -> processor_instruction_master_agent:rp_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_valid;         // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_valid
	wire   [77:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_data;          // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_ready;         // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_ready
	wire    [7:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_channel;       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_channel -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_channel
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_startofpacket; // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_endofpacket;   // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_endofpacket
	wire          cmd_demux_src5_valid;                                                                           // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [104:0] cmd_demux_src5_data;                                                                            // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                                           // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire    [7:0] cmd_demux_src5_channel;                                                                         // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                                   // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                                     // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                           // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [104:0] cmd_demux_src7_data;                                                                            // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                                           // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire    [7:0] cmd_demux_src7_channel;                                                                         // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                                   // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                                     // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                       // cmd_demux_001:src0_valid -> cmd_mux_005:sink1_valid
	wire  [104:0] cmd_demux_001_src0_data;                                                                        // cmd_demux_001:src0_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src0_ready;                                                                       // cmd_mux_005:sink1_ready -> cmd_demux_001:src0_ready
	wire    [7:0] cmd_demux_001_src0_channel;                                                                     // cmd_demux_001:src0_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                               // cmd_demux_001:src0_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                                 // cmd_demux_001:src0_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                       // cmd_demux_001:src1_valid -> cmd_mux_007:sink1_valid
	wire  [104:0] cmd_demux_001_src1_data;                                                                        // cmd_demux_001:src1_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src1_ready;                                                                       // cmd_mux_007:sink1_ready -> cmd_demux_001:src1_ready
	wire    [7:0] cmd_demux_001_src1_channel;                                                                     // cmd_demux_001:src1_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                               // cmd_demux_001:src1_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                                 // cmd_demux_001:src1_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                       // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [104:0] rsp_demux_005_src0_data;                                                                        // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                       // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire    [7:0] rsp_demux_005_src0_channel;                                                                     // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                               // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                                 // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                                       // rsp_demux_005:src1_valid -> rsp_mux_001:sink0_valid
	wire  [104:0] rsp_demux_005_src1_data;                                                                        // rsp_demux_005:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_005_src1_ready;                                                                       // rsp_mux_001:sink0_ready -> rsp_demux_005:src1_ready
	wire    [7:0] rsp_demux_005_src1_channel;                                                                     // rsp_demux_005:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_005_src1_startofpacket;                                                               // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                                 // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                       // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [104:0] rsp_demux_007_src0_data;                                                                        // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                       // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire    [7:0] rsp_demux_007_src0_channel;                                                                     // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                               // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                                 // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                                       // rsp_demux_007:src1_valid -> rsp_mux_001:sink1_valid
	wire  [104:0] rsp_demux_007_src1_data;                                                                        // rsp_demux_007:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_007_src1_ready;                                                                       // rsp_mux_001:sink1_ready -> rsp_demux_007:src1_ready
	wire    [7:0] rsp_demux_007_src1_channel;                                                                     // rsp_demux_007:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_007_src1_startofpacket;                                                               // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                                 // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          router_002_src_valid;                                                                           // router_002:src_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:in_valid
	wire   [77:0] router_002_src_data;                                                                            // router_002:src_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                                           // video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [7:0] router_002_src_channel;                                                                         // router_002:src_channel -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                                                   // router_002:src_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                                     // router_002:src_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:in_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_valid;         // video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [104:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_data;          // video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_ready;         // rsp_demux:sink_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:out_ready
	wire    [7:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_channel;       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_startofpacket; // video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_endofpacket;   // video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                                              // cmd_mux:src_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_valid
	wire  [104:0] cmd_mux_src_data;                                                                               // cmd_mux:src_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                                              // video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [7:0] cmd_mux_src_channel;                                                                            // cmd_mux:src_channel -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                                      // cmd_mux:src_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                        // cmd_mux:src_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_valid;         // video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_valid
	wire   [77:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_data;          // video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_ready;         // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_ready
	wire    [7:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_channel;       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_channel -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_channel
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_startofpacket; // video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_endofpacket;   // video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                                           // cmd_demux:src0_valid -> crosser:in_valid
	wire  [104:0] cmd_demux_src0_data;                                                                            // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                                           // crosser:in_ready -> cmd_demux:src0_ready
	wire    [7:0] cmd_demux_src0_channel;                                                                         // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                                                   // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                     // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                              // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [104:0] crosser_out_data;                                                                               // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                                              // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [7:0] crosser_out_channel;                                                                            // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                                                      // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                                        // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                           // cmd_demux:src1_valid -> crosser_001:in_valid
	wire  [104:0] cmd_demux_src1_data;                                                                            // cmd_demux:src1_data -> crosser_001:in_data
	wire          cmd_demux_src1_ready;                                                                           // crosser_001:in_ready -> cmd_demux:src1_ready
	wire    [7:0] cmd_demux_src1_channel;                                                                         // cmd_demux:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                                                   // cmd_demux:src1_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                     // cmd_demux:src1_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                          // crosser_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [104:0] crosser_001_out_data;                                                                           // crosser_001:out_data -> cmd_mux_001:sink0_data
	wire          crosser_001_out_ready;                                                                          // cmd_mux_001:sink0_ready -> crosser_001:out_ready
	wire    [7:0] crosser_001_out_channel;                                                                        // crosser_001:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_001_out_startofpacket;                                                                  // crosser_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                                    // crosser_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                           // cmd_demux:src2_valid -> crosser_002:in_valid
	wire  [104:0] cmd_demux_src2_data;                                                                            // cmd_demux:src2_data -> crosser_002:in_data
	wire          cmd_demux_src2_ready;                                                                           // crosser_002:in_ready -> cmd_demux:src2_ready
	wire    [7:0] cmd_demux_src2_channel;                                                                         // cmd_demux:src2_channel -> crosser_002:in_channel
	wire          cmd_demux_src2_startofpacket;                                                                   // cmd_demux:src2_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                                     // cmd_demux:src2_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                                          // crosser_002:out_valid -> cmd_mux_002:sink0_valid
	wire  [104:0] crosser_002_out_data;                                                                           // crosser_002:out_data -> cmd_mux_002:sink0_data
	wire          crosser_002_out_ready;                                                                          // cmd_mux_002:sink0_ready -> crosser_002:out_ready
	wire    [7:0] crosser_002_out_channel;                                                                        // crosser_002:out_channel -> cmd_mux_002:sink0_channel
	wire          crosser_002_out_startofpacket;                                                                  // crosser_002:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                                                    // crosser_002:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                           // cmd_demux:src3_valid -> crosser_003:in_valid
	wire  [104:0] cmd_demux_src3_data;                                                                            // cmd_demux:src3_data -> crosser_003:in_data
	wire          cmd_demux_src3_ready;                                                                           // crosser_003:in_ready -> cmd_demux:src3_ready
	wire    [7:0] cmd_demux_src3_channel;                                                                         // cmd_demux:src3_channel -> crosser_003:in_channel
	wire          cmd_demux_src3_startofpacket;                                                                   // cmd_demux:src3_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                                     // cmd_demux:src3_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                                          // crosser_003:out_valid -> cmd_mux_003:sink0_valid
	wire  [104:0] crosser_003_out_data;                                                                           // crosser_003:out_data -> cmd_mux_003:sink0_data
	wire          crosser_003_out_ready;                                                                          // cmd_mux_003:sink0_ready -> crosser_003:out_ready
	wire    [7:0] crosser_003_out_channel;                                                                        // crosser_003:out_channel -> cmd_mux_003:sink0_channel
	wire          crosser_003_out_startofpacket;                                                                  // crosser_003:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                                                    // crosser_003:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                           // cmd_demux:src4_valid -> crosser_004:in_valid
	wire  [104:0] cmd_demux_src4_data;                                                                            // cmd_demux:src4_data -> crosser_004:in_data
	wire          cmd_demux_src4_ready;                                                                           // crosser_004:in_ready -> cmd_demux:src4_ready
	wire    [7:0] cmd_demux_src4_channel;                                                                         // cmd_demux:src4_channel -> crosser_004:in_channel
	wire          cmd_demux_src4_startofpacket;                                                                   // cmd_demux:src4_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                                     // cmd_demux:src4_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                                          // crosser_004:out_valid -> cmd_mux_004:sink0_valid
	wire  [104:0] crosser_004_out_data;                                                                           // crosser_004:out_data -> cmd_mux_004:sink0_data
	wire          crosser_004_out_ready;                                                                          // cmd_mux_004:sink0_ready -> crosser_004:out_ready
	wire    [7:0] crosser_004_out_channel;                                                                        // crosser_004:out_channel -> cmd_mux_004:sink0_channel
	wire          crosser_004_out_startofpacket;                                                                  // crosser_004:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                                                    // crosser_004:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                           // cmd_demux:src6_valid -> crosser_005:in_valid
	wire  [104:0] cmd_demux_src6_data;                                                                            // cmd_demux:src6_data -> crosser_005:in_data
	wire          cmd_demux_src6_ready;                                                                           // crosser_005:in_ready -> cmd_demux:src6_ready
	wire    [7:0] cmd_demux_src6_channel;                                                                         // cmd_demux:src6_channel -> crosser_005:in_channel
	wire          cmd_demux_src6_startofpacket;                                                                   // cmd_demux:src6_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                                     // cmd_demux:src6_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                                          // crosser_005:out_valid -> cmd_mux_006:sink0_valid
	wire  [104:0] crosser_005_out_data;                                                                           // crosser_005:out_data -> cmd_mux_006:sink0_data
	wire          crosser_005_out_ready;                                                                          // cmd_mux_006:sink0_ready -> crosser_005:out_ready
	wire    [7:0] crosser_005_out_channel;                                                                        // crosser_005:out_channel -> cmd_mux_006:sink0_channel
	wire          crosser_005_out_startofpacket;                                                                  // crosser_005:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                                                                    // crosser_005:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                                           // rsp_demux:src0_valid -> crosser_006:in_valid
	wire  [104:0] rsp_demux_src0_data;                                                                            // rsp_demux:src0_data -> crosser_006:in_data
	wire          rsp_demux_src0_ready;                                                                           // crosser_006:in_ready -> rsp_demux:src0_ready
	wire    [7:0] rsp_demux_src0_channel;                                                                         // rsp_demux:src0_channel -> crosser_006:in_channel
	wire          rsp_demux_src0_startofpacket;                                                                   // rsp_demux:src0_startofpacket -> crosser_006:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                     // rsp_demux:src0_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                                          // crosser_006:out_valid -> rsp_mux:sink0_valid
	wire  [104:0] crosser_006_out_data;                                                                           // crosser_006:out_data -> rsp_mux:sink0_data
	wire          crosser_006_out_ready;                                                                          // rsp_mux:sink0_ready -> crosser_006:out_ready
	wire    [7:0] crosser_006_out_channel;                                                                        // crosser_006:out_channel -> rsp_mux:sink0_channel
	wire          crosser_006_out_startofpacket;                                                                  // crosser_006:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_006_out_endofpacket;                                                                    // crosser_006:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                       // rsp_demux_001:src0_valid -> crosser_007:in_valid
	wire  [104:0] rsp_demux_001_src0_data;                                                                        // rsp_demux_001:src0_data -> crosser_007:in_data
	wire          rsp_demux_001_src0_ready;                                                                       // crosser_007:in_ready -> rsp_demux_001:src0_ready
	wire    [7:0] rsp_demux_001_src0_channel;                                                                     // rsp_demux_001:src0_channel -> crosser_007:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                               // rsp_demux_001:src0_startofpacket -> crosser_007:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                                 // rsp_demux_001:src0_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                                          // crosser_007:out_valid -> rsp_mux:sink1_valid
	wire  [104:0] crosser_007_out_data;                                                                           // crosser_007:out_data -> rsp_mux:sink1_data
	wire          crosser_007_out_ready;                                                                          // rsp_mux:sink1_ready -> crosser_007:out_ready
	wire    [7:0] crosser_007_out_channel;                                                                        // crosser_007:out_channel -> rsp_mux:sink1_channel
	wire          crosser_007_out_startofpacket;                                                                  // crosser_007:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_007_out_endofpacket;                                                                    // crosser_007:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                       // rsp_demux_002:src0_valid -> crosser_008:in_valid
	wire  [104:0] rsp_demux_002_src0_data;                                                                        // rsp_demux_002:src0_data -> crosser_008:in_data
	wire          rsp_demux_002_src0_ready;                                                                       // crosser_008:in_ready -> rsp_demux_002:src0_ready
	wire    [7:0] rsp_demux_002_src0_channel;                                                                     // rsp_demux_002:src0_channel -> crosser_008:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                                               // rsp_demux_002:src0_startofpacket -> crosser_008:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                                 // rsp_demux_002:src0_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                                          // crosser_008:out_valid -> rsp_mux:sink2_valid
	wire  [104:0] crosser_008_out_data;                                                                           // crosser_008:out_data -> rsp_mux:sink2_data
	wire          crosser_008_out_ready;                                                                          // rsp_mux:sink2_ready -> crosser_008:out_ready
	wire    [7:0] crosser_008_out_channel;                                                                        // crosser_008:out_channel -> rsp_mux:sink2_channel
	wire          crosser_008_out_startofpacket;                                                                  // crosser_008:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          crosser_008_out_endofpacket;                                                                    // crosser_008:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                       // rsp_demux_003:src0_valid -> crosser_009:in_valid
	wire  [104:0] rsp_demux_003_src0_data;                                                                        // rsp_demux_003:src0_data -> crosser_009:in_data
	wire          rsp_demux_003_src0_ready;                                                                       // crosser_009:in_ready -> rsp_demux_003:src0_ready
	wire    [7:0] rsp_demux_003_src0_channel;                                                                     // rsp_demux_003:src0_channel -> crosser_009:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                                               // rsp_demux_003:src0_startofpacket -> crosser_009:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                                 // rsp_demux_003:src0_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                                          // crosser_009:out_valid -> rsp_mux:sink3_valid
	wire  [104:0] crosser_009_out_data;                                                                           // crosser_009:out_data -> rsp_mux:sink3_data
	wire          crosser_009_out_ready;                                                                          // rsp_mux:sink3_ready -> crosser_009:out_ready
	wire    [7:0] crosser_009_out_channel;                                                                        // crosser_009:out_channel -> rsp_mux:sink3_channel
	wire          crosser_009_out_startofpacket;                                                                  // crosser_009:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          crosser_009_out_endofpacket;                                                                    // crosser_009:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                       // rsp_demux_004:src0_valid -> crosser_010:in_valid
	wire  [104:0] rsp_demux_004_src0_data;                                                                        // rsp_demux_004:src0_data -> crosser_010:in_data
	wire          rsp_demux_004_src0_ready;                                                                       // crosser_010:in_ready -> rsp_demux_004:src0_ready
	wire    [7:0] rsp_demux_004_src0_channel;                                                                     // rsp_demux_004:src0_channel -> crosser_010:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                                               // rsp_demux_004:src0_startofpacket -> crosser_010:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                                 // rsp_demux_004:src0_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                                                          // crosser_010:out_valid -> rsp_mux:sink4_valid
	wire  [104:0] crosser_010_out_data;                                                                           // crosser_010:out_data -> rsp_mux:sink4_data
	wire          crosser_010_out_ready;                                                                          // rsp_mux:sink4_ready -> crosser_010:out_ready
	wire    [7:0] crosser_010_out_channel;                                                                        // crosser_010:out_channel -> rsp_mux:sink4_channel
	wire          crosser_010_out_startofpacket;                                                                  // crosser_010:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          crosser_010_out_endofpacket;                                                                    // crosser_010:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                       // rsp_demux_006:src0_valid -> crosser_011:in_valid
	wire  [104:0] rsp_demux_006_src0_data;                                                                        // rsp_demux_006:src0_data -> crosser_011:in_data
	wire          rsp_demux_006_src0_ready;                                                                       // crosser_011:in_ready -> rsp_demux_006:src0_ready
	wire    [7:0] rsp_demux_006_src0_channel;                                                                     // rsp_demux_006:src0_channel -> crosser_011:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                                               // rsp_demux_006:src0_startofpacket -> crosser_011:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                                 // rsp_demux_006:src0_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                                                          // crosser_011:out_valid -> rsp_mux:sink6_valid
	wire  [104:0] crosser_011_out_data;                                                                           // crosser_011:out_data -> rsp_mux:sink6_data
	wire          crosser_011_out_ready;                                                                          // rsp_mux:sink6_ready -> crosser_011:out_ready
	wire    [7:0] crosser_011_out_channel;                                                                        // crosser_011:out_channel -> rsp_mux:sink6_channel
	wire          crosser_011_out_startofpacket;                                                                  // crosser_011:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire          crosser_011_out_endofpacket;                                                                    // crosser_011:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire    [7:0] processor_data_master_limiter_cmd_valid_data;                                                   // processor_data_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [7:0] processor_instruction_master_limiter_cmd_valid_data;                                            // processor_instruction_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_out_valid;          // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire    [9:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_out_data;           // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter:in_0_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                                  // avalon_st_adapter:out_0_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_out_0_data;                                                                   // avalon_st_adapter:out_0_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                                  // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                                  // avalon_st_adapter:out_0_error -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_sink_error
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_out_valid;         // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_out_data;          // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_out_ready;         // avalon_st_adapter_001:in_0_ready -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                              // avalon_st_adapter_001:out_0_valid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                               // avalon_st_adapter_001:out_0_data -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                              // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                              // avalon_st_adapter_001:out_0_error -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_sink_error
	wire          dma_buffer_avalon_control_slave_agent_rdata_fifo_out_valid;                                     // dma_buffer_avalon_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] dma_buffer_avalon_control_slave_agent_rdata_fifo_out_data;                                      // dma_buffer_avalon_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          dma_buffer_avalon_control_slave_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_002:in_0_ready -> dma_buffer_avalon_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                              // avalon_st_adapter_002:out_0_valid -> dma_buffer_avalon_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                               // avalon_st_adapter_002:out_0_data -> dma_buffer_avalon_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                              // dma_buffer_avalon_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                              // avalon_st_adapter_002:out_0_error -> dma_buffer_avalon_control_slave_agent:rdata_fifo_sink_error
	wire          jtag_avalon_jtag_slave_agent_rdata_fifo_out_valid;                                              // jtag_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] jtag_avalon_jtag_slave_agent_rdata_fifo_out_data;                                               // jtag_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          jtag_avalon_jtag_slave_agent_rdata_fifo_out_ready;                                              // avalon_st_adapter_003:in_0_ready -> jtag_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                              // avalon_st_adapter_003:out_0_valid -> jtag_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                               // avalon_st_adapter_003:out_0_data -> jtag_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                              // jtag_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                              // avalon_st_adapter_003:out_0_error -> jtag_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_out_valid;                                      // rgb_resampler_avalon_rgb_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_out_data;                                       // rgb_resampler_avalon_rgb_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_004:in_0_ready -> rgb_resampler_avalon_rgb_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                              // avalon_st_adapter_004:out_0_valid -> rgb_resampler_avalon_rgb_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                               // avalon_st_adapter_004:out_0_data -> rgb_resampler_avalon_rgb_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                              // rgb_resampler_avalon_rgb_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                              // avalon_st_adapter_004:out_0_error -> rgb_resampler_avalon_rgb_slave_agent:rdata_fifo_sink_error
	wire          processor_debug_mem_slave_agent_rdata_fifo_src_valid;                                           // processor_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] processor_debug_mem_slave_agent_rdata_fifo_src_data;                                            // processor_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          processor_debug_mem_slave_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_005:in_0_ready -> processor_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                              // avalon_st_adapter_005:out_0_valid -> processor_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                               // avalon_st_adapter_005:out_0_data -> processor_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                              // processor_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                              // avalon_st_adapter_005:out_0_error -> processor_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          system_modes_s1_agent_rdata_fifo_out_valid;                                                     // system_modes_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] system_modes_s1_agent_rdata_fifo_out_data;                                                      // system_modes_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          system_modes_s1_agent_rdata_fifo_out_ready;                                                     // avalon_st_adapter_006:in_0_ready -> system_modes_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                              // avalon_st_adapter_006:out_0_valid -> system_modes_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                               // avalon_st_adapter_006:out_0_data -> system_modes_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                              // system_modes_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                              // avalon_st_adapter_006:out_0_error -> system_modes_s1_agent:rdata_fifo_sink_error
	wire          sdram_controller_s1_agent_rdata_fifo_src_valid;                                                 // sdram_controller_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] sdram_controller_s1_agent_rdata_fifo_src_data;                                                  // sdram_controller_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          sdram_controller_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_007:in_0_ready -> sdram_controller_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                              // avalon_st_adapter_007:out_0_valid -> sdram_controller_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                               // avalon_st_adapter_007:out_0_data -> sdram_controller_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                              // sdram_controller_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                              // avalon_st_adapter_007:out_0_error -> sdram_controller_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) processor_data_master_translator (
		.clk                    (sys_sdram_pll_sdram_clk_clk),                                              //                       clk.clk
		.reset                  (processor_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (processor_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (processor_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (processor_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (processor_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (processor_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (processor_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (processor_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (processor_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (processor_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (processor_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (processor_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (processor_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (processor_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (processor_data_master_byteenable),                                         //                          .byteenable
		.av_read                (processor_data_master_read),                                               //                          .read
		.av_readdata            (processor_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (processor_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (processor_data_master_write),                                              //                          .write
		.av_writedata           (processor_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (processor_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_chipselect          (1'b0),                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) processor_instruction_master_translator (
		.clk                    (sys_sdram_pll_sdram_clk_clk),                                                     //                       clk.clk
		.reset                  (processor_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (processor_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (processor_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (processor_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (processor_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (processor_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (processor_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (processor_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (processor_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (processor_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (processor_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (processor_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (processor_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (processor_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (processor_instruction_master_read),                                               //                          .read
		.av_readdata            (processor_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (processor_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                            //               (terminated)
		.av_byteenable          (4'b1111),                                                                         //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                                            //               (terminated)
		.av_write               (1'b0),                                                                            //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                            //               (terminated)
		.av_lock                (1'b0),                                                                            //               (terminated)
		.av_debugaccess         (1'b0),                                                                            //               (terminated)
		.uav_clken              (),                                                                                //               (terminated)
		.av_clken               (1'b1),                                                                            //               (terminated)
		.uav_response           (2'b00),                                                                           //               (terminated)
		.av_response            (),                                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                                 //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator (
		.clk                    (sys_sdram_pll_sys_clk_clk),                                                         //                      clk.clk
		.reset                  (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_read),          //                         .read
		.uav_write              (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (video_character_buffer_with_dma_0_avalon_char_buffer_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (video_character_buffer_with_dma_0_avalon_char_buffer_slave_write),                  //                         .write
		.av_read                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_read),                   //                         .read
		.av_readdata            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_readdata),               //                         .readdata
		.av_writedata           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_writedata),              //                         .writedata
		.av_byteenable          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                                                  //              (terminated)
		.av_burstcount          (),                                                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                                                              //              (terminated)
		.av_writebyteenable     (),                                                                                  //              (terminated)
		.av_lock                (),                                                                                  //              (terminated)
		.av_clken               (),                                                                                  //              (terminated)
		.uav_clken              (1'b0),                                                                              //              (terminated)
		.av_debugaccess         (),                                                                                  //              (terminated)
		.av_outputenable        (),                                                                                  //              (terminated)
		.uav_response           (),                                                                                  //              (terminated)
		.av_response            (2'b00),                                                                             //              (terminated)
		.uav_writeresponsevalid (),                                                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_character_buffer_with_dma_0_avalon_char_control_slave_translator (
		.clk                    (sys_sdram_pll_sys_clk_clk),                                                          //                      clk.clk
		.reset                  (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                //                    reset.reset
		.uav_address            (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_read),          //                         .read
		.uav_write              (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (video_character_buffer_with_dma_0_avalon_char_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (video_character_buffer_with_dma_0_avalon_char_control_slave_write),                  //                         .write
		.av_read                (video_character_buffer_with_dma_0_avalon_char_control_slave_read),                   //                         .read
		.av_readdata            (video_character_buffer_with_dma_0_avalon_char_control_slave_readdata),               //                         .readdata
		.av_writedata           (video_character_buffer_with_dma_0_avalon_char_control_slave_writedata),              //                         .writedata
		.av_byteenable          (video_character_buffer_with_dma_0_avalon_char_control_slave_byteenable),             //                         .byteenable
		.av_chipselect          (video_character_buffer_with_dma_0_avalon_char_control_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                                                   //              (terminated)
		.av_burstcount          (),                                                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                                                               //              (terminated)
		.av_waitrequest         (1'b0),                                                                               //              (terminated)
		.av_writebyteenable     (),                                                                                   //              (terminated)
		.av_lock                (),                                                                                   //              (terminated)
		.av_clken               (),                                                                                   //              (terminated)
		.uav_clken              (1'b0),                                                                               //              (terminated)
		.av_debugaccess         (),                                                                                   //              (terminated)
		.av_outputenable        (),                                                                                   //              (terminated)
		.uav_response           (),                                                                                   //              (terminated)
		.av_response            (2'b00),                                                                              //              (terminated)
		.uav_writeresponsevalid (),                                                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_buffer_avalon_control_slave_translator (
		.clk                    (sys_sdram_pll_sys_clk_clk),                                           //                      clk.clk
		.reset                  (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_buffer_avalon_control_slave_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (dma_buffer_avalon_control_slave_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (dma_buffer_avalon_control_slave_agent_m0_read),                       //                         .read
		.uav_write              (dma_buffer_avalon_control_slave_agent_m0_write),                      //                         .write
		.uav_waitrequest        (dma_buffer_avalon_control_slave_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (dma_buffer_avalon_control_slave_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (dma_buffer_avalon_control_slave_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (dma_buffer_avalon_control_slave_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (dma_buffer_avalon_control_slave_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (dma_buffer_avalon_control_slave_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (dma_buffer_avalon_control_slave_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (dma_buffer_avalon_control_slave_address),                             //      avalon_anti_slave_0.address
		.av_write               (dma_buffer_avalon_control_slave_write),                               //                         .write
		.av_read                (dma_buffer_avalon_control_slave_read),                                //                         .read
		.av_readdata            (dma_buffer_avalon_control_slave_readdata),                            //                         .readdata
		.av_writedata           (dma_buffer_avalon_control_slave_writedata),                           //                         .writedata
		.av_byteenable          (dma_buffer_avalon_control_slave_byteenable),                          //                         .byteenable
		.av_begintransfer       (),                                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                                    //              (terminated)
		.av_burstcount          (),                                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                    //              (terminated)
		.av_lock                (),                                                                    //              (terminated)
		.av_chipselect          (),                                                                    //              (terminated)
		.av_clken               (),                                                                    //              (terminated)
		.uav_clken              (1'b0),                                                                //              (terminated)
		.av_debugaccess         (),                                                                    //              (terminated)
		.av_outputenable        (),                                                                    //              (terminated)
		.uav_response           (),                                                                    //              (terminated)
		.av_response            (2'b00),                                                               //              (terminated)
		.uav_writeresponsevalid (),                                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_avalon_jtag_slave_translator (
		.clk                    (sys_sdram_pll_sys_clk_clk),                     //                      clk.clk
		.reset                  (jtag_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (jtag_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rgb_resampler_avalon_rgb_slave_translator (
		.clk                    (sys_sdram_pll_sys_clk_clk),                                           //                      clk.clk
		.reset                  (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (rgb_resampler_avalon_rgb_slave_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (rgb_resampler_avalon_rgb_slave_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (rgb_resampler_avalon_rgb_slave_agent_m0_read),                        //                         .read
		.uav_write              (rgb_resampler_avalon_rgb_slave_agent_m0_write),                       //                         .write
		.uav_waitrequest        (rgb_resampler_avalon_rgb_slave_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (rgb_resampler_avalon_rgb_slave_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (rgb_resampler_avalon_rgb_slave_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (rgb_resampler_avalon_rgb_slave_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (rgb_resampler_avalon_rgb_slave_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (rgb_resampler_avalon_rgb_slave_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (rgb_resampler_avalon_rgb_slave_agent_m0_debugaccess),                 //                         .debugaccess
		.av_read                (rgb_resampler_avalon_rgb_slave_read),                                 //      avalon_anti_slave_0.read
		.av_readdata            (rgb_resampler_avalon_rgb_slave_readdata),                             //                         .readdata
		.av_address             (),                                                                    //              (terminated)
		.av_write               (),                                                                    //              (terminated)
		.av_writedata           (),                                                                    //              (terminated)
		.av_begintransfer       (),                                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                                    //              (terminated)
		.av_burstcount          (),                                                                    //              (terminated)
		.av_byteenable          (),                                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                    //              (terminated)
		.av_lock                (),                                                                    //              (terminated)
		.av_chipselect          (),                                                                    //              (terminated)
		.av_clken               (),                                                                    //              (terminated)
		.uav_clken              (1'b0),                                                                //              (terminated)
		.av_debugaccess         (),                                                                    //              (terminated)
		.av_outputenable        (),                                                                    //              (terminated)
		.uav_response           (),                                                                    //              (terminated)
		.av_response            (2'b00),                                                               //              (terminated)
		.uav_writeresponsevalid (),                                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) processor_debug_mem_slave_translator (
		.clk                    (sys_sdram_pll_sdram_clk_clk),                      //                      clk.clk
		.reset                  (processor_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (processor_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (processor_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (processor_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (processor_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (processor_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (processor_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (processor_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (processor_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (processor_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (processor_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (processor_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (processor_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (processor_debug_mem_slave_write),                  //                         .write
		.av_read                (processor_debug_mem_slave_read),                   //                         .read
		.av_readdata            (processor_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (processor_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (processor_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (processor_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (processor_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) system_modes_s1_translator (
		.clk                    (sys_sdram_pll_sys_clk_clk),                                           //                      clk.clk
		.reset                  (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (system_modes_s1_agent_m0_address),                                    // avalon_universal_slave_0.address
		.uav_burstcount         (system_modes_s1_agent_m0_burstcount),                                 //                         .burstcount
		.uav_read               (system_modes_s1_agent_m0_read),                                       //                         .read
		.uav_write              (system_modes_s1_agent_m0_write),                                      //                         .write
		.uav_waitrequest        (system_modes_s1_agent_m0_waitrequest),                                //                         .waitrequest
		.uav_readdatavalid      (system_modes_s1_agent_m0_readdatavalid),                              //                         .readdatavalid
		.uav_byteenable         (system_modes_s1_agent_m0_byteenable),                                 //                         .byteenable
		.uav_readdata           (system_modes_s1_agent_m0_readdata),                                   //                         .readdata
		.uav_writedata          (system_modes_s1_agent_m0_writedata),                                  //                         .writedata
		.uav_lock               (system_modes_s1_agent_m0_lock),                                       //                         .lock
		.uav_debugaccess        (system_modes_s1_agent_m0_debugaccess),                                //                         .debugaccess
		.av_address             (system_modes_s1_address),                                             //      avalon_anti_slave_0.address
		.av_readdata            (system_modes_s1_readdata),                                            //                         .readdata
		.av_write               (),                                                                    //              (terminated)
		.av_read                (),                                                                    //              (terminated)
		.av_writedata           (),                                                                    //              (terminated)
		.av_begintransfer       (),                                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                                    //              (terminated)
		.av_burstcount          (),                                                                    //              (terminated)
		.av_byteenable          (),                                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                    //              (terminated)
		.av_lock                (),                                                                    //              (terminated)
		.av_chipselect          (),                                                                    //              (terminated)
		.av_clken               (),                                                                    //              (terminated)
		.uav_clken              (1'b0),                                                                //              (terminated)
		.av_debugaccess         (),                                                                    //              (terminated)
		.av_outputenable        (),                                                                    //              (terminated)
		.uav_response           (),                                                                    //              (terminated)
		.av_response            (2'b00),                                                               //              (terminated)
		.uav_writeresponsevalid (),                                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_controller_s1_translator (
		.clk                    (sys_sdram_pll_sdram_clk_clk),                        //                      clk.clk
		.reset                  (sdram_controller_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_controller_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_controller_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sdram_controller_s1_agent_m0_read),                  //                         .read
		.uav_write              (sdram_controller_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sdram_controller_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sdram_controller_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sdram_controller_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sdram_controller_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sdram_controller_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sdram_controller_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sdram_controller_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (sdram_controller_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (sdram_controller_s1_write),                          //                         .write
		.av_read                (sdram_controller_s1_read),                           //                         .read
		.av_readdata            (sdram_controller_s1_readdata),                       //                         .readdata
		.av_writedata           (sdram_controller_s1_writedata),                      //                         .writedata
		.av_byteenable          (sdram_controller_s1_byteenable),                     //                         .byteenable
		.av_readdatavalid       (sdram_controller_s1_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest         (sdram_controller_s1_waitrequest),                    //                         .waitrequest
		.av_chipselect          (sdram_controller_s1_chipselect),                     //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_QOS_H                 (85),
		.PKT_QOS_L                 (85),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_CACHE_H               (99),
		.PKT_CACHE_L               (96),
		.PKT_THREAD_ID_H           (92),
		.PKT_THREAD_ID_L           (92),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_EXCLUSIVE       (70),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.ST_DATA_W                 (105),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processor_data_master_agent (
		.clk                   (sys_sdram_pll_sdram_clk_clk),                                              //       clk.clk
		.reset                 (processor_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (processor_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (processor_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (processor_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (processor_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (processor_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (processor_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (processor_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (processor_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (processor_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (processor_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (processor_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (processor_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (processor_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (processor_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (processor_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (processor_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (processor_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (processor_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (processor_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (processor_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (processor_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (processor_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_QOS_H                 (85),
		.PKT_QOS_L                 (85),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_CACHE_H               (99),
		.PKT_CACHE_L               (96),
		.PKT_THREAD_ID_H           (92),
		.PKT_THREAD_ID_L           (92),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_EXCLUSIVE       (70),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.ST_DATA_W                 (105),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) processor_instruction_master_agent (
		.clk                   (sys_sdram_pll_sdram_clk_clk),                                                     //       clk.clk
		.reset                 (processor_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (processor_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (processor_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (processor_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (processor_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (processor_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (processor_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (processor_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (processor_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (processor_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (processor_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (processor_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (processor_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (processor_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (processor_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (processor_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (processor_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (processor_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (processor_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (processor_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (processor_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (processor_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (processor_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                // (terminated)
		.av_writeresponsevalid ()                                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (77),
		.PKT_ORI_BURST_SIZE_L      (75),
		.PKT_RESPONSE_STATUS_H     (74),
		.PKT_RESPONSE_STATUS_L     (73),
		.PKT_BURST_SIZE_H          (52),
		.PKT_BURST_SIZE_L          (50),
		.PKT_TRANS_LOCK            (42),
		.PKT_BEGIN_BURST           (57),
		.PKT_PROTECTION_H          (68),
		.PKT_PROTECTION_L          (66),
		.PKT_BURSTWRAP_H           (49),
		.PKT_BURSTWRAP_L           (47),
		.PKT_BYTE_CNT_H            (46),
		.PKT_BYTE_CNT_L            (44),
		.PKT_ADDR_H                (37),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (38),
		.PKT_TRANS_POSTED          (39),
		.PKT_TRANS_WRITE           (40),
		.PKT_TRANS_READ            (41),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (61),
		.PKT_SRC_ID_L              (59),
		.PKT_DEST_ID_H             (64),
		.PKT_DEST_ID_L             (62),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (78),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent (
		.clk                     (sys_sdram_pll_sys_clk_clk),                                                                      //             clk.clk
		.reset                   (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                                                  //                .error
		.rdata_fifo_src_ready    (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (79),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo (
		.clk               (sys_sdram_pll_sys_clk_clk),                                                                   //       clk.clk
		.reset             (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_data),             //        in.data
		.in_valid          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                       // (terminated)
		.csr_read          (1'b0),                                                                                        // (terminated)
		.csr_write         (1'b0),                                                                                        // (terminated)
		.csr_readdata      (),                                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                        // (terminated)
		.almost_full_data  (),                                                                                            // (terminated)
		.almost_empty_data (),                                                                                            // (terminated)
		.in_empty          (1'b0),                                                                                        // (terminated)
		.out_empty         (),                                                                                            // (terminated)
		.in_error          (1'b0),                                                                                        // (terminated)
		.out_error         (),                                                                                            // (terminated)
		.in_channel        (1'b0),                                                                                        // (terminated)
		.out_channel       ()                                                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (10),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo (
		.clk               (sys_sdram_pll_sys_clk_clk),                                                             //       clk.clk
		.reset             (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                                 // (terminated)
		.csr_read          (1'b0),                                                                                  // (terminated)
		.csr_write         (1'b0),                                                                                  // (terminated)
		.csr_readdata      (),                                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                  // (terminated)
		.almost_full_data  (),                                                                                      // (terminated)
		.almost_empty_data (),                                                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                                                  // (terminated)
		.out_startofpacket (),                                                                                      // (terminated)
		.out_endofpacket   (),                                                                                      // (terminated)
		.in_empty          (1'b0),                                                                                  // (terminated)
		.out_empty         (),                                                                                      // (terminated)
		.in_error          (1'b0),                                                                                  // (terminated)
		.out_error         (),                                                                                      // (terminated)
		.in_channel        (1'b0),                                                                                  // (terminated)
		.out_channel       ()                                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_character_buffer_with_dma_0_avalon_char_control_slave_agent (
		.clk                     (sys_sdram_pll_sys_clk_clk),                                                                    //             clk.clk
		.reset                   (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                          //       clk_reset.reset
		.m0_address              (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                                                        //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                                                        //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                                                         //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                                                  //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                                                      //                .channel
		.rf_sink_ready           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                                            //                .error
		.rdata_fifo_src_ready    (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo (
		.clk               (sys_sdram_pll_sys_clk_clk),                                                                    //       clk.clk
		.reset             (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                        // (terminated)
		.csr_read          (1'b0),                                                                                         // (terminated)
		.csr_write         (1'b0),                                                                                         // (terminated)
		.csr_readdata      (),                                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                         // (terminated)
		.almost_full_data  (),                                                                                             // (terminated)
		.almost_empty_data (),                                                                                             // (terminated)
		.in_empty          (1'b0),                                                                                         // (terminated)
		.out_empty         (),                                                                                             // (terminated)
		.in_error          (1'b0),                                                                                         // (terminated)
		.out_error         (),                                                                                             // (terminated)
		.in_channel        (1'b0),                                                                                         // (terminated)
		.out_channel       ()                                                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo (
		.clk               (sys_sdram_pll_sys_clk_clk),                                                              //       clk.clk
		.reset             (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                                  // (terminated)
		.csr_read          (1'b0),                                                                                   // (terminated)
		.csr_write         (1'b0),                                                                                   // (terminated)
		.csr_readdata      (),                                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                   // (terminated)
		.almost_full_data  (),                                                                                       // (terminated)
		.almost_empty_data (),                                                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                                                   // (terminated)
		.out_startofpacket (),                                                                                       // (terminated)
		.out_endofpacket   (),                                                                                       // (terminated)
		.in_empty          (1'b0),                                                                                   // (terminated)
		.out_empty         (),                                                                                       // (terminated)
		.in_error          (1'b0),                                                                                   // (terminated)
		.out_error         (),                                                                                       // (terminated)
		.in_channel        (1'b0),                                                                                   // (terminated)
		.out_channel       ()                                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_buffer_avalon_control_slave_agent (
		.clk                     (sys_sdram_pll_sys_clk_clk),                                           //             clk.clk
		.reset                   (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (dma_buffer_avalon_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_buffer_avalon_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_buffer_avalon_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_buffer_avalon_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_buffer_avalon_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_buffer_avalon_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_buffer_avalon_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_buffer_avalon_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_buffer_avalon_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_buffer_avalon_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_buffer_avalon_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_buffer_avalon_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_buffer_avalon_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_buffer_avalon_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_buffer_avalon_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_buffer_avalon_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                               //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                               //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                                //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                         //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                             //                .channel
		.rf_sink_ready           (dma_buffer_avalon_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_buffer_avalon_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_buffer_avalon_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_buffer_avalon_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_buffer_avalon_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_buffer_avalon_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_buffer_avalon_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_buffer_avalon_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_buffer_avalon_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_buffer_avalon_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (dma_buffer_avalon_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_buffer_avalon_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_buffer_avalon_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_buffer_avalon_control_slave_agent_rsp_fifo (
		.clk               (sys_sdram_pll_sys_clk_clk),                                           //       clk.clk
		.reset             (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dma_buffer_avalon_control_slave_agent_rf_source_data),                //        in.data
		.in_valid          (dma_buffer_avalon_control_slave_agent_rf_source_valid),               //          .valid
		.in_ready          (dma_buffer_avalon_control_slave_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (dma_buffer_avalon_control_slave_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (dma_buffer_avalon_control_slave_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (dma_buffer_avalon_control_slave_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (dma_buffer_avalon_control_slave_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (dma_buffer_avalon_control_slave_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (dma_buffer_avalon_control_slave_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (dma_buffer_avalon_control_slave_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_buffer_avalon_control_slave_agent_rdata_fifo (
		.clk               (sys_sdram_pll_sys_clk_clk),                                           //       clk.clk
		.reset             (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dma_buffer_avalon_control_slave_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (dma_buffer_avalon_control_slave_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (dma_buffer_avalon_control_slave_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (dma_buffer_avalon_control_slave_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (dma_buffer_avalon_control_slave_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (dma_buffer_avalon_control_slave_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                                // (terminated)
		.in_endofpacket    (1'b0),                                                                // (terminated)
		.out_startofpacket (),                                                                    // (terminated)
		.out_endofpacket   (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_avalon_jtag_slave_agent (
		.clk                     (sys_sdram_pll_sys_clk_clk),                               //             clk.clk
		.reset                   (jtag_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                 //                .channel
		.rf_sink_ready           (jtag_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (jtag_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (sys_sdram_pll_sys_clk_clk),                               //       clk.clk
		.reset             (jtag_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (sys_sdram_pll_sys_clk_clk),                         //       clk.clk
		.reset             (jtag_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (jtag_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rgb_resampler_avalon_rgb_slave_agent (
		.clk                     (sys_sdram_pll_sys_clk_clk),                                           //             clk.clk
		.reset                   (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (rgb_resampler_avalon_rgb_slave_agent_m0_address),                     //              m0.address
		.m0_burstcount           (rgb_resampler_avalon_rgb_slave_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (rgb_resampler_avalon_rgb_slave_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (rgb_resampler_avalon_rgb_slave_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (rgb_resampler_avalon_rgb_slave_agent_m0_lock),                        //                .lock
		.m0_readdata             (rgb_resampler_avalon_rgb_slave_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (rgb_resampler_avalon_rgb_slave_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (rgb_resampler_avalon_rgb_slave_agent_m0_read),                        //                .read
		.m0_waitrequest          (rgb_resampler_avalon_rgb_slave_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (rgb_resampler_avalon_rgb_slave_agent_m0_writedata),                   //                .writedata
		.m0_write                (rgb_resampler_avalon_rgb_slave_agent_m0_write),                       //                .write
		.rp_endofpacket          (rgb_resampler_avalon_rgb_slave_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (rgb_resampler_avalon_rgb_slave_agent_rp_ready),                       //                .ready
		.rp_valid                (rgb_resampler_avalon_rgb_slave_agent_rp_valid),                       //                .valid
		.rp_data                 (rgb_resampler_avalon_rgb_slave_agent_rp_data),                        //                .data
		.rp_startofpacket        (rgb_resampler_avalon_rgb_slave_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                               //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                               //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                                //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                         //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                             //                .channel
		.rf_sink_ready           (rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (rgb_resampler_avalon_rgb_slave_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (rgb_resampler_avalon_rgb_slave_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (rgb_resampler_avalon_rgb_slave_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (rgb_resampler_avalon_rgb_slave_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (rgb_resampler_avalon_rgb_slave_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rgb_resampler_avalon_rgb_slave_agent_rsp_fifo (
		.clk               (sys_sdram_pll_sys_clk_clk),                                           //       clk.clk
		.reset             (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rgb_resampler_avalon_rgb_slave_agent_rf_source_data),                 //        in.data
		.in_valid          (rgb_resampler_avalon_rgb_slave_agent_rf_source_valid),                //          .valid
		.in_ready          (rgb_resampler_avalon_rgb_slave_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (rgb_resampler_avalon_rgb_slave_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (rgb_resampler_avalon_rgb_slave_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rgb_resampler_avalon_rgb_slave_agent_rdata_fifo (
		.clk               (sys_sdram_pll_sys_clk_clk),                                           //       clk.clk
		.reset             (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                                // (terminated)
		.in_endofpacket    (1'b0),                                                                // (terminated)
		.out_startofpacket (),                                                                    // (terminated)
		.out_endofpacket   (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) processor_debug_mem_slave_agent (
		.clk                     (sys_sdram_pll_sdram_clk_clk),                                //             clk.clk
		.reset                   (processor_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (processor_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (processor_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (processor_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (processor_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (processor_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (processor_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (processor_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (processor_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (processor_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (processor_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (processor_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (processor_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (processor_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (processor_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (processor_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (processor_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                    //                .channel
		.rf_sink_ready           (processor_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (processor_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (processor_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (processor_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (processor_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (processor_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (processor_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (processor_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (processor_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (processor_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (processor_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (processor_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (processor_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) processor_debug_mem_slave_agent_rsp_fifo (
		.clk               (sys_sdram_pll_sdram_clk_clk),                                //       clk.clk
		.reset             (processor_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (processor_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (processor_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (processor_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (processor_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (processor_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (processor_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (processor_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (processor_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (processor_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (processor_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) system_modes_s1_agent (
		.clk                     (sys_sdram_pll_sys_clk_clk),                                           //             clk.clk
		.reset                   (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (system_modes_s1_agent_m0_address),                                    //              m0.address
		.m0_burstcount           (system_modes_s1_agent_m0_burstcount),                                 //                .burstcount
		.m0_byteenable           (system_modes_s1_agent_m0_byteenable),                                 //                .byteenable
		.m0_debugaccess          (system_modes_s1_agent_m0_debugaccess),                                //                .debugaccess
		.m0_lock                 (system_modes_s1_agent_m0_lock),                                       //                .lock
		.m0_readdata             (system_modes_s1_agent_m0_readdata),                                   //                .readdata
		.m0_readdatavalid        (system_modes_s1_agent_m0_readdatavalid),                              //                .readdatavalid
		.m0_read                 (system_modes_s1_agent_m0_read),                                       //                .read
		.m0_waitrequest          (system_modes_s1_agent_m0_waitrequest),                                //                .waitrequest
		.m0_writedata            (system_modes_s1_agent_m0_writedata),                                  //                .writedata
		.m0_write                (system_modes_s1_agent_m0_write),                                      //                .write
		.rp_endofpacket          (system_modes_s1_agent_rp_endofpacket),                                //              rp.endofpacket
		.rp_ready                (system_modes_s1_agent_rp_ready),                                      //                .ready
		.rp_valid                (system_modes_s1_agent_rp_valid),                                      //                .valid
		.rp_data                 (system_modes_s1_agent_rp_data),                                       //                .data
		.rp_startofpacket        (system_modes_s1_agent_rp_startofpacket),                              //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                               //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                               //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                                //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                         //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                             //                .channel
		.rf_sink_ready           (system_modes_s1_agent_rsp_fifo_out_ready),                            //         rf_sink.ready
		.rf_sink_valid           (system_modes_s1_agent_rsp_fifo_out_valid),                            //                .valid
		.rf_sink_startofpacket   (system_modes_s1_agent_rsp_fifo_out_startofpacket),                    //                .startofpacket
		.rf_sink_endofpacket     (system_modes_s1_agent_rsp_fifo_out_endofpacket),                      //                .endofpacket
		.rf_sink_data            (system_modes_s1_agent_rsp_fifo_out_data),                             //                .data
		.rf_source_ready         (system_modes_s1_agent_rf_source_ready),                               //       rf_source.ready
		.rf_source_valid         (system_modes_s1_agent_rf_source_valid),                               //                .valid
		.rf_source_startofpacket (system_modes_s1_agent_rf_source_startofpacket),                       //                .startofpacket
		.rf_source_endofpacket   (system_modes_s1_agent_rf_source_endofpacket),                         //                .endofpacket
		.rf_source_data          (system_modes_s1_agent_rf_source_data),                                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (system_modes_s1_agent_rdata_fifo_src_ready),                          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (system_modes_s1_agent_rdata_fifo_src_valid),                          //                .valid
		.rdata_fifo_src_data     (system_modes_s1_agent_rdata_fifo_src_data),                           //                .data
		.m0_response             (2'b00),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) system_modes_s1_agent_rsp_fifo (
		.clk               (sys_sdram_pll_sys_clk_clk),                                           //       clk.clk
		.reset             (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (system_modes_s1_agent_rf_source_data),                                //        in.data
		.in_valid          (system_modes_s1_agent_rf_source_valid),                               //          .valid
		.in_ready          (system_modes_s1_agent_rf_source_ready),                               //          .ready
		.in_startofpacket  (system_modes_s1_agent_rf_source_startofpacket),                       //          .startofpacket
		.in_endofpacket    (system_modes_s1_agent_rf_source_endofpacket),                         //          .endofpacket
		.out_data          (system_modes_s1_agent_rsp_fifo_out_data),                             //       out.data
		.out_valid         (system_modes_s1_agent_rsp_fifo_out_valid),                            //          .valid
		.out_ready         (system_modes_s1_agent_rsp_fifo_out_ready),                            //          .ready
		.out_startofpacket (system_modes_s1_agent_rsp_fifo_out_startofpacket),                    //          .startofpacket
		.out_endofpacket   (system_modes_s1_agent_rsp_fifo_out_endofpacket),                      //          .endofpacket
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) system_modes_s1_agent_rdata_fifo (
		.clk               (sys_sdram_pll_sys_clk_clk),                                           //       clk.clk
		.reset             (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (system_modes_s1_agent_rdata_fifo_src_data),                           //        in.data
		.in_valid          (system_modes_s1_agent_rdata_fifo_src_valid),                          //          .valid
		.in_ready          (system_modes_s1_agent_rdata_fifo_src_ready),                          //          .ready
		.out_data          (system_modes_s1_agent_rdata_fifo_out_data),                           //       out.data
		.out_valid         (system_modes_s1_agent_rdata_fifo_out_valid),                          //          .valid
		.out_ready         (system_modes_s1_agent_rdata_fifo_out_ready),                          //          .ready
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                                // (terminated)
		.in_endofpacket    (1'b0),                                                                // (terminated)
		.out_startofpacket (),                                                                    // (terminated)
		.out_endofpacket   (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (104),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (69),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (74),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_ADDR_H                (64),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (65),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.PKT_TRANS_READ            (68),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_controller_s1_agent (
		.clk                     (sys_sdram_pll_sdram_clk_clk),                          //             clk.clk
		.reset                   (sdram_controller_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sdram_controller_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdram_controller_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdram_controller_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdram_controller_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdram_controller_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdram_controller_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdram_controller_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdram_controller_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdram_controller_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdram_controller_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sdram_controller_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdram_controller_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdram_controller_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sdram_controller_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sdram_controller_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdram_controller_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                              //                .channel
		.rf_sink_ready           (sdram_controller_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdram_controller_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdram_controller_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdram_controller_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdram_controller_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdram_controller_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdram_controller_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdram_controller_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdram_controller_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdram_controller_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sdram_controller_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_controller_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdram_controller_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_s1_agent_rsp_fifo (
		.clk               (sys_sdram_pll_sdram_clk_clk),                          //       clk.clk
		.reset             (sdram_controller_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sdram_controller_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_controller_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_controller_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_controller_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_controller_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_controller_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_controller_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_controller_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_controller_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_controller_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	nios_system_mm_interconnect_1_router router (
		.sink_ready         (processor_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (processor_data_master_agent_cp_valid),         //          .valid
		.sink_data          (processor_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (processor_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_sdram_clk_clk),                  //       clk.clk
		.reset              (processor_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                             //       src.ready
		.src_valid          (router_src_valid),                             //          .valid
		.src_data           (router_src_data),                              //          .data
		.src_channel        (router_src_channel),                           //          .channel
		.src_startofpacket  (router_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (processor_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (processor_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (processor_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (processor_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_sdram_clk_clk),                         //       clk.clk
		.reset              (processor_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                                //       src.ready
		.src_valid          (router_001_src_valid),                                //          .valid
		.src_data           (router_001_src_data),                                 //          .data
		.src_channel        (router_001_src_channel),                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                           //          .endofpacket
	);

	nios_system_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_valid),         //          .valid
		.sink_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_data),          //          .data
		.sink_startofpacket (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_sys_clk_clk),                                                         //       clk.clk
		.reset              (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_002_src_ready),                                                              //       src.ready
		.src_valid          (router_002_src_valid),                                                              //          .valid
		.src_data           (router_002_src_data),                                                               //          .data
		.src_channel        (router_002_src_channel),                                                            //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                                      //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                                         //          .endofpacket
	);

	nios_system_mm_interconnect_1_router_003 router_003 (
		.sink_ready         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_sys_clk_clk),                                                          //       clk.clk
		.reset              (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (router_003_src_ready),                                                               //       src.ready
		.src_valid          (router_003_src_valid),                                                               //          .valid
		.src_data           (router_003_src_data),                                                                //          .data
		.src_channel        (router_003_src_channel),                                                             //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                                       //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                                          //          .endofpacket
	);

	nios_system_mm_interconnect_1_router_003 router_004 (
		.sink_ready         (dma_buffer_avalon_control_slave_agent_rp_ready),                      //      sink.ready
		.sink_valid         (dma_buffer_avalon_control_slave_agent_rp_valid),                      //          .valid
		.sink_data          (dma_buffer_avalon_control_slave_agent_rp_data),                       //          .data
		.sink_startofpacket (dma_buffer_avalon_control_slave_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (dma_buffer_avalon_control_slave_agent_rp_endofpacket),                //          .endofpacket
		.clk                (sys_sdram_pll_sys_clk_clk),                                           //       clk.clk
		.reset              (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                                //       src.ready
		.src_valid          (router_004_src_valid),                                                //          .valid
		.src_data           (router_004_src_data),                                                 //          .data
		.src_channel        (router_004_src_channel),                                              //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                           //          .endofpacket
	);

	nios_system_mm_interconnect_1_router_003 router_005 (
		.sink_ready         (jtag_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_sys_clk_clk),                     //       clk.clk
		.reset              (jtag_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_005_src_ready),                          //       src.ready
		.src_valid          (router_005_src_valid),                          //          .valid
		.src_data           (router_005_src_data),                           //          .data
		.src_channel        (router_005_src_channel),                        //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                     //          .endofpacket
	);

	nios_system_mm_interconnect_1_router_003 router_006 (
		.sink_ready         (rgb_resampler_avalon_rgb_slave_agent_rp_ready),                       //      sink.ready
		.sink_valid         (rgb_resampler_avalon_rgb_slave_agent_rp_valid),                       //          .valid
		.sink_data          (rgb_resampler_avalon_rgb_slave_agent_rp_data),                        //          .data
		.sink_startofpacket (rgb_resampler_avalon_rgb_slave_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (rgb_resampler_avalon_rgb_slave_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (sys_sdram_pll_sys_clk_clk),                                           //       clk.clk
		.reset              (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                                //       src.ready
		.src_valid          (router_006_src_valid),                                                //          .valid
		.src_data           (router_006_src_data),                                                 //          .data
		.src_channel        (router_006_src_channel),                                              //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                           //          .endofpacket
	);

	nios_system_mm_interconnect_1_router_007 router_007 (
		.sink_ready         (processor_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (processor_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (processor_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (processor_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (processor_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_sdram_clk_clk),                      //       clk.clk
		.reset              (processor_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_007_src_ready),                             //       src.ready
		.src_valid          (router_007_src_valid),                             //          .valid
		.src_data           (router_007_src_data),                              //          .data
		.src_channel        (router_007_src_channel),                           //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                        //          .endofpacket
	);

	nios_system_mm_interconnect_1_router_003 router_008 (
		.sink_ready         (system_modes_s1_agent_rp_ready),                                      //      sink.ready
		.sink_valid         (system_modes_s1_agent_rp_valid),                                      //          .valid
		.sink_data          (system_modes_s1_agent_rp_data),                                       //          .data
		.sink_startofpacket (system_modes_s1_agent_rp_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (system_modes_s1_agent_rp_endofpacket),                                //          .endofpacket
		.clk                (sys_sdram_pll_sys_clk_clk),                                           //       clk.clk
		.reset              (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                                //       src.ready
		.src_valid          (router_008_src_valid),                                                //          .valid
		.src_data           (router_008_src_data),                                                 //          .data
		.src_channel        (router_008_src_channel),                                              //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                           //          .endofpacket
	);

	nios_system_mm_interconnect_1_router_007 router_009 (
		.sink_ready         (sdram_controller_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sdram_controller_s1_agent_rp_valid),                 //          .valid
		.sink_data          (sdram_controller_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (sdram_controller_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sdram_controller_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (sys_sdram_pll_sdram_clk_clk),                        //       clk.clk
		.reset              (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                               //       src.ready
		.src_valid          (router_009_src_valid),                               //          .valid
		.src_data           (router_009_src_data),                                //          .data
		.src_channel        (router_009_src_channel),                             //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                          //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (105),
		.ST_CHANNEL_W              (8),
		.VALID_WIDTH               (8),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) processor_data_master_limiter (
		.clk                    (sys_sdram_pll_sdram_clk_clk),                         //       clk.clk
		.reset                  (processor_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                    //          .valid
		.cmd_sink_data          (router_src_data),                                     //          .data
		.cmd_sink_channel       (router_src_channel),                                  //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                            //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                              //          .endofpacket
		.cmd_src_ready          (processor_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (processor_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (processor_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (processor_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (processor_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                   //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                 //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                             //          .endofpacket
		.rsp_src_ready          (processor_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (processor_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (processor_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (processor_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (processor_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (processor_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (processor_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (73),
		.PKT_BYTE_CNT_L            (71),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (66),
		.PKT_TRANS_WRITE           (67),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (105),
		.ST_CHANNEL_W              (8),
		.VALID_WIDTH               (8),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) processor_instruction_master_limiter (
		.clk                    (sys_sdram_pll_sdram_clk_clk),                                //       clk.clk
		.reset                  (processor_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                       //          .valid
		.cmd_sink_data          (router_001_src_data),                                        //          .data
		.cmd_sink_channel       (router_001_src_channel),                                     //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                               //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                 //          .endofpacket
		.cmd_src_ready          (processor_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (processor_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (processor_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (processor_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (processor_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                      //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                      //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                    //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                       //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                              //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                //          .endofpacket
		.rsp_src_ready          (processor_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (processor_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (processor_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (processor_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (processor_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (processor_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (processor_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (37),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (57),
		.PKT_BYTE_CNT_H            (46),
		.PKT_BYTE_CNT_L            (44),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (52),
		.PKT_BURST_SIZE_L          (50),
		.PKT_BURST_TYPE_H          (54),
		.PKT_BURST_TYPE_L          (53),
		.PKT_BURSTWRAP_H           (49),
		.PKT_BURSTWRAP_L           (47),
		.PKT_TRANS_COMPRESSED_READ (38),
		.PKT_TRANS_WRITE           (40),
		.PKT_TRANS_READ            (41),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (78),
		.ST_CHANNEL_W              (8),
		.OUT_BYTE_CNT_H            (44),
		.OUT_BURSTWRAP_H           (49),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter (
		.clk                   (sys_sdram_pll_sys_clk_clk),                                                                      //       cr0.clk
		.reset                 (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                            // cr0_reset.reset
		.sink0_valid           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_ready)          //          .ready
	);

	nios_system_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (sys_sdram_pll_sdram_clk_clk),                         //        clk.clk
		.reset              (processor_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready         (processor_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (processor_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (processor_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (processor_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (processor_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (processor_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                //           .valid
		.src0_data          (cmd_demux_src0_data),                                 //           .data
		.src0_channel       (cmd_demux_src0_channel),                              //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                        //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                          //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                //           .valid
		.src1_data          (cmd_demux_src1_data),                                 //           .data
		.src1_channel       (cmd_demux_src1_channel),                              //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                        //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                          //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                //           .valid
		.src2_data          (cmd_demux_src2_data),                                 //           .data
		.src2_channel       (cmd_demux_src2_channel),                              //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                        //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                          //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                //           .valid
		.src3_data          (cmd_demux_src3_data),                                 //           .data
		.src3_channel       (cmd_demux_src3_channel),                              //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                        //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                          //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                //           .valid
		.src4_data          (cmd_demux_src4_data),                                 //           .data
		.src4_channel       (cmd_demux_src4_channel),                              //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                        //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                          //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                //           .valid
		.src5_data          (cmd_demux_src5_data),                                 //           .data
		.src5_channel       (cmd_demux_src5_channel),                              //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                        //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                          //           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                                //       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                                //           .valid
		.src6_data          (cmd_demux_src6_data),                                 //           .data
		.src6_channel       (cmd_demux_src6_channel),                              //           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                        //           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                          //           .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                                //       src7.ready
		.src7_valid         (cmd_demux_src7_valid),                                //           .valid
		.src7_data          (cmd_demux_src7_data),                                 //           .data
		.src7_channel       (cmd_demux_src7_channel),                              //           .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                        //           .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket)                           //           .endofpacket
	);

	nios_system_mm_interconnect_1_cmd_demux_001 cmd_demux_001 (
		.clk                (sys_sdram_pll_sdram_clk_clk),                                //        clk.clk
		.reset              (processor_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (processor_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (processor_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (processor_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (processor_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (processor_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (processor_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                   //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                   //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                    //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                 //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                           //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                             //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                   //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                   //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                    //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                 //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                           //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                              //           .endofpacket
	);

	nios_system_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (sys_sdram_pll_sys_clk_clk),                                           //       clk.clk
		.reset               (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                   //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                   //          .valid
		.src_data            (cmd_mux_src_data),                                                    //          .data
		.src_channel         (cmd_mux_src_channel),                                                 //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                             //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                                   //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                                   //          .valid
		.sink0_channel       (crosser_out_channel),                                                 //          .channel
		.sink0_data          (crosser_out_data),                                                    //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                           //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                              //          .endofpacket
	);

	nios_system_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (sys_sdram_pll_sys_clk_clk),                                           //       clk.clk
		.reset               (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                               //          .valid
		.src_data            (cmd_mux_001_src_data),                                                //          .data
		.src_channel         (cmd_mux_001_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                               //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                               //          .valid
		.sink0_channel       (crosser_001_out_channel),                                             //          .channel
		.sink0_data          (crosser_001_out_data),                                                //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                                          //          .endofpacket
	);

	nios_system_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (sys_sdram_pll_sys_clk_clk),                                           //       clk.clk
		.reset               (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                               //          .valid
		.src_data            (cmd_mux_002_src_data),                                                //          .data
		.src_channel         (cmd_mux_002_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                                               //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                                               //          .valid
		.sink0_channel       (crosser_002_out_channel),                                             //          .channel
		.sink0_data          (crosser_002_out_data),                                                //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                                          //          .endofpacket
	);

	nios_system_mm_interconnect_1_cmd_mux cmd_mux_003 (
		.clk                 (sys_sdram_pll_sys_clk_clk),              //       clk.clk
		.reset               (jtag_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                  //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                  //          .valid
		.src_data            (cmd_mux_003_src_data),                   //          .data
		.src_channel         (cmd_mux_003_src_channel),                //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),            //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                  //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                  //          .valid
		.sink0_channel       (crosser_003_out_channel),                //          .channel
		.sink0_data          (crosser_003_out_data),                   //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)             //          .endofpacket
	);

	nios_system_mm_interconnect_1_cmd_mux cmd_mux_004 (
		.clk                 (sys_sdram_pll_sys_clk_clk),                                           //       clk.clk
		.reset               (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                               //          .valid
		.src_data            (cmd_mux_004_src_data),                                                //          .data
		.src_channel         (cmd_mux_004_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                                               //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                                               //          .valid
		.sink0_channel       (crosser_004_out_channel),                                             //          .channel
		.sink0_data          (crosser_004_out_data),                                                //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket)                                          //          .endofpacket
	);

	nios_system_mm_interconnect_1_cmd_mux_005 cmd_mux_005 (
		.clk                 (sys_sdram_pll_sdram_clk_clk),                 //       clk.clk
		.reset               (processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                       //          .valid
		.src_data            (cmd_mux_005_src_data),                        //          .data
		.src_channel         (cmd_mux_005_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                      //          .channel
		.sink0_data          (cmd_demux_src5_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_1_cmd_mux cmd_mux_006 (
		.clk                 (sys_sdram_pll_sys_clk_clk),                                           //       clk.clk
		.reset               (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                               //          .valid
		.src_data            (cmd_mux_006_src_data),                                                //          .data
		.src_channel         (cmd_mux_006_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                                               //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                                               //          .valid
		.sink0_channel       (crosser_005_out_channel),                                             //          .channel
		.sink0_data          (crosser_005_out_data),                                                //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket)                                          //          .endofpacket
	);

	nios_system_mm_interconnect_1_cmd_mux_005 cmd_mux_007 (
		.clk                 (sys_sdram_pll_sdram_clk_clk),                        //       clk.clk
		.reset               (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                              //          .valid
		.src_data            (cmd_mux_007_src_data),                               //          .data
		.src_channel         (cmd_mux_007_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                             //          .channel
		.sink0_data          (cmd_demux_src7_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                      //          .endofpacket
	);

	nios_system_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (sys_sdram_pll_sys_clk_clk),                                                                      //       clk.clk
		.reset              (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.sink_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                                           //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                                           //          .valid
		.src0_data          (rsp_demux_src0_data),                                                                            //          .data
		.src0_channel       (rsp_demux_src0_channel),                                                                         //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                                                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                                                      //          .endofpacket
	);

	nios_system_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (sys_sdram_pll_sys_clk_clk),                                           //       clk.clk
		.reset              (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                                //      sink.ready
		.sink_channel       (router_003_src_channel),                                              //          .channel
		.sink_data          (router_003_src_data),                                                 //          .data
		.sink_startofpacket (router_003_src_startofpacket),                                        //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                          //          .endofpacket
		.sink_valid         (router_003_src_valid),                                                //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                            //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                            //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                             //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                          //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                       //          .endofpacket
	);

	nios_system_mm_interconnect_1_rsp_demux rsp_demux_002 (
		.clk                (sys_sdram_pll_sys_clk_clk),                                           //       clk.clk
		.reset              (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                                //      sink.ready
		.sink_channel       (router_004_src_channel),                                              //          .channel
		.sink_data          (router_004_src_data),                                                 //          .data
		.sink_startofpacket (router_004_src_startofpacket),                                        //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                          //          .endofpacket
		.sink_valid         (router_004_src_valid),                                                //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                            //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                            //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                             //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                          //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                                       //          .endofpacket
	);

	nios_system_mm_interconnect_1_rsp_demux rsp_demux_003 (
		.clk                (sys_sdram_pll_sys_clk_clk),              //       clk.clk
		.reset              (jtag_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                   //      sink.ready
		.sink_channel       (router_005_src_channel),                 //          .channel
		.sink_data          (router_005_src_data),                    //          .data
		.sink_startofpacket (router_005_src_startofpacket),           //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),             //          .endofpacket
		.sink_valid         (router_005_src_valid),                   //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),               //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),               //          .valid
		.src0_data          (rsp_demux_003_src0_data),                //          .data
		.src0_channel       (rsp_demux_003_src0_channel),             //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)          //          .endofpacket
	);

	nios_system_mm_interconnect_1_rsp_demux rsp_demux_004 (
		.clk                (sys_sdram_pll_sys_clk_clk),                                           //       clk.clk
		.reset              (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                                //      sink.ready
		.sink_channel       (router_006_src_channel),                                              //          .channel
		.sink_data          (router_006_src_data),                                                 //          .data
		.sink_startofpacket (router_006_src_startofpacket),                                        //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                          //          .endofpacket
		.sink_valid         (router_006_src_valid),                                                //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                            //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                            //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                             //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                          //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                                       //          .endofpacket
	);

	nios_system_mm_interconnect_1_rsp_demux_005 rsp_demux_005 (
		.clk                (sys_sdram_pll_sdram_clk_clk),                 //       clk.clk
		.reset              (processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                        //      sink.ready
		.sink_channel       (router_007_src_channel),                      //          .channel
		.sink_data          (router_007_src_data),                         //          .data
		.sink_startofpacket (router_007_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_007_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_005_src0_data),                     //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_005_src1_data),                     //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_1_rsp_demux rsp_demux_006 (
		.clk                (sys_sdram_pll_sys_clk_clk),                                           //       clk.clk
		.reset              (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                                //      sink.ready
		.sink_channel       (router_008_src_channel),                                              //          .channel
		.sink_data          (router_008_src_data),                                                 //          .data
		.sink_startofpacket (router_008_src_startofpacket),                                        //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                                          //          .endofpacket
		.sink_valid         (router_008_src_valid),                                                //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                            //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                            //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                             //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                          //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                                       //          .endofpacket
	);

	nios_system_mm_interconnect_1_rsp_demux_005 rsp_demux_007 (
		.clk                (sys_sdram_pll_sdram_clk_clk),                        //       clk.clk
		.reset              (sdram_controller_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                               //      sink.ready
		.sink_channel       (router_009_src_channel),                             //          .channel
		.sink_data          (router_009_src_data),                                //          .data
		.sink_startofpacket (router_009_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_009_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_007_src0_data),                            //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_007_src1_data),                            //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                      //          .endofpacket
	);

	nios_system_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (sys_sdram_pll_sdram_clk_clk),                 //       clk.clk
		.reset               (processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                           //       src.ready
		.src_valid           (rsp_mux_src_valid),                           //          .valid
		.src_data            (rsp_mux_src_data),                            //          .data
		.src_channel         (rsp_mux_src_channel),                         //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (crosser_006_out_ready),                       //     sink0.ready
		.sink0_valid         (crosser_006_out_valid),                       //          .valid
		.sink0_channel       (crosser_006_out_channel),                     //          .channel
		.sink0_data          (crosser_006_out_data),                        //          .data
		.sink0_startofpacket (crosser_006_out_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (crosser_006_out_endofpacket),                 //          .endofpacket
		.sink1_ready         (crosser_007_out_ready),                       //     sink1.ready
		.sink1_valid         (crosser_007_out_valid),                       //          .valid
		.sink1_channel       (crosser_007_out_channel),                     //          .channel
		.sink1_data          (crosser_007_out_data),                        //          .data
		.sink1_startofpacket (crosser_007_out_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (crosser_007_out_endofpacket),                 //          .endofpacket
		.sink2_ready         (crosser_008_out_ready),                       //     sink2.ready
		.sink2_valid         (crosser_008_out_valid),                       //          .valid
		.sink2_channel       (crosser_008_out_channel),                     //          .channel
		.sink2_data          (crosser_008_out_data),                        //          .data
		.sink2_startofpacket (crosser_008_out_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (crosser_008_out_endofpacket),                 //          .endofpacket
		.sink3_ready         (crosser_009_out_ready),                       //     sink3.ready
		.sink3_valid         (crosser_009_out_valid),                       //          .valid
		.sink3_channel       (crosser_009_out_channel),                     //          .channel
		.sink3_data          (crosser_009_out_data),                        //          .data
		.sink3_startofpacket (crosser_009_out_startofpacket),               //          .startofpacket
		.sink3_endofpacket   (crosser_009_out_endofpacket),                 //          .endofpacket
		.sink4_ready         (crosser_010_out_ready),                       //     sink4.ready
		.sink4_valid         (crosser_010_out_valid),                       //          .valid
		.sink4_channel       (crosser_010_out_channel),                     //          .channel
		.sink4_data          (crosser_010_out_data),                        //          .data
		.sink4_startofpacket (crosser_010_out_startofpacket),               //          .startofpacket
		.sink4_endofpacket   (crosser_010_out_endofpacket),                 //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                    //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                    //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                  //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                     //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),            //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),              //          .endofpacket
		.sink6_ready         (crosser_011_out_ready),                       //     sink6.ready
		.sink6_valid         (crosser_011_out_valid),                       //          .valid
		.sink6_channel       (crosser_011_out_channel),                     //          .channel
		.sink6_data          (crosser_011_out_data),                        //          .data
		.sink6_startofpacket (crosser_011_out_startofpacket),               //          .startofpacket
		.sink6_endofpacket   (crosser_011_out_endofpacket),                 //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                    //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                    //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),                  //          .channel
		.sink7_data          (rsp_demux_007_src0_data),                     //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),            //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket)               //          .endofpacket
	);

	nios_system_mm_interconnect_1_rsp_mux_001 rsp_mux_001 (
		.clk                 (sys_sdram_pll_sdram_clk_clk),                 //       clk.clk
		.reset               (processor_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                       //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                       //          .valid
		.src_data            (rsp_mux_001_src_data),                        //          .data
		.src_channel         (rsp_mux_001_src_channel),                     //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (rsp_demux_005_src1_ready),                    //     sink0.ready
		.sink0_valid         (rsp_demux_005_src1_valid),                    //          .valid
		.sink0_channel       (rsp_demux_005_src1_channel),                  //          .channel
		.sink0_data          (rsp_demux_005_src1_data),                     //          .data
		.sink0_startofpacket (rsp_demux_005_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_005_src1_endofpacket),              //          .endofpacket
		.sink1_ready         (rsp_demux_007_src1_ready),                    //     sink1.ready
		.sink1_valid         (rsp_demux_007_src1_valid),                    //          .valid
		.sink1_channel       (rsp_demux_007_src1_channel),                  //          .channel
		.sink1_data          (rsp_demux_007_src1_data),                     //          .data
		.sink1_startofpacket (rsp_demux_007_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (rsp_demux_007_src1_endofpacket)               //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (37),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (46),
		.IN_PKT_BYTE_CNT_L             (44),
		.IN_PKT_TRANS_COMPRESSED_READ  (38),
		.IN_PKT_TRANS_WRITE            (40),
		.IN_PKT_BURSTWRAP_H            (49),
		.IN_PKT_BURSTWRAP_L            (47),
		.IN_PKT_BURST_SIZE_H           (52),
		.IN_PKT_BURST_SIZE_L           (50),
		.IN_PKT_RESPONSE_STATUS_H      (74),
		.IN_PKT_RESPONSE_STATUS_L      (73),
		.IN_PKT_TRANS_EXCLUSIVE        (43),
		.IN_PKT_BURST_TYPE_H           (54),
		.IN_PKT_BURST_TYPE_L           (53),
		.IN_PKT_ORI_BURST_SIZE_L       (75),
		.IN_PKT_ORI_BURST_SIZE_H       (77),
		.IN_ST_DATA_W                  (78),
		.OUT_PKT_ADDR_H                (64),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (73),
		.OUT_PKT_BYTE_CNT_L            (71),
		.OUT_PKT_TRANS_COMPRESSED_READ (65),
		.OUT_PKT_BURST_SIZE_H          (79),
		.OUT_PKT_BURST_SIZE_L          (77),
		.OUT_PKT_RESPONSE_STATUS_H     (101),
		.OUT_PKT_RESPONSE_STATUS_L     (100),
		.OUT_PKT_TRANS_EXCLUSIVE       (70),
		.OUT_PKT_BURST_TYPE_H          (81),
		.OUT_PKT_BURST_TYPE_L          (80),
		.OUT_PKT_ORI_BURST_SIZE_L      (102),
		.OUT_PKT_ORI_BURST_SIZE_H      (104),
		.OUT_ST_DATA_W                 (105),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter (
		.clk                  (sys_sdram_pll_sys_clk_clk),                                                                      //       clk.clk
		.reset                (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (router_002_src_valid),                                                                           //      sink.valid
		.in_channel           (router_002_src_channel),                                                                         //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                                                   //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                                                     //          .endofpacket
		.in_ready             (router_002_src_ready),                                                                           //          .ready
		.in_data              (router_002_src_data),                                                                            //          .data
		.out_endofpacket      (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_character_buffer_with_dma_0_avalon_char_buffer_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (64),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (73),
		.IN_PKT_BYTE_CNT_L             (71),
		.IN_PKT_TRANS_COMPRESSED_READ  (65),
		.IN_PKT_TRANS_WRITE            (67),
		.IN_PKT_BURSTWRAP_H            (76),
		.IN_PKT_BURSTWRAP_L            (74),
		.IN_PKT_BURST_SIZE_H           (79),
		.IN_PKT_BURST_SIZE_L           (77),
		.IN_PKT_RESPONSE_STATUS_H      (101),
		.IN_PKT_RESPONSE_STATUS_L      (100),
		.IN_PKT_TRANS_EXCLUSIVE        (70),
		.IN_PKT_BURST_TYPE_H           (81),
		.IN_PKT_BURST_TYPE_L           (80),
		.IN_PKT_ORI_BURST_SIZE_L       (102),
		.IN_PKT_ORI_BURST_SIZE_H       (104),
		.IN_ST_DATA_W                  (105),
		.OUT_PKT_ADDR_H                (37),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (46),
		.OUT_PKT_BYTE_CNT_L            (44),
		.OUT_PKT_TRANS_COMPRESSED_READ (38),
		.OUT_PKT_BURST_SIZE_H          (52),
		.OUT_PKT_BURST_SIZE_L          (50),
		.OUT_PKT_RESPONSE_STATUS_H     (74),
		.OUT_PKT_RESPONSE_STATUS_L     (73),
		.OUT_PKT_TRANS_EXCLUSIVE       (43),
		.OUT_PKT_BURST_TYPE_H          (54),
		.OUT_PKT_BURST_TYPE_L          (53),
		.OUT_PKT_ORI_BURST_SIZE_L      (75),
		.OUT_PKT_ORI_BURST_SIZE_H      (77),
		.OUT_ST_DATA_W                 (78),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter (
		.clk                  (sys_sdram_pll_sys_clk_clk),                                                                      //       clk.clk
		.reset                (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                                              //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                                            //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                                                      //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                                                        //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                                              //          .ready
		.in_data              (cmd_mux_src_data),                                                                               //          .data
		.out_endofpacket      (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                          // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (105),
		.BITS_PER_SYMBOL     (105),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (sys_sdram_pll_sdram_clk_clk),                                         //        in_clk.clk
		.in_reset          (processor_reset_reset_bridge_in_reset_reset),                         //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_sys_clk_clk),                                           //       out_clk.clk
		.out_reset         (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                                //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                                //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                          //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                              //              .channel
		.in_data           (cmd_demux_src0_data),                                                 //              .data
		.out_ready         (crosser_out_ready),                                                   //           out.ready
		.out_valid         (crosser_out_valid),                                                   //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                           //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                             //              .endofpacket
		.out_channel       (crosser_out_channel),                                                 //              .channel
		.out_data          (crosser_out_data),                                                    //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (105),
		.BITS_PER_SYMBOL     (105),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (sys_sdram_pll_sdram_clk_clk),                                         //        in_clk.clk
		.in_reset          (processor_reset_reset_bridge_in_reset_reset),                         //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_sys_clk_clk),                                           //       out_clk.clk
		.out_reset         (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                                //            in.ready
		.in_valid          (cmd_demux_src1_valid),                                                //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                                          //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                                              //              .channel
		.in_data           (cmd_demux_src1_data),                                                 //              .data
		.out_ready         (crosser_001_out_ready),                                               //           out.ready
		.out_valid         (crosser_001_out_valid),                                               //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                             //              .channel
		.out_data          (crosser_001_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (105),
		.BITS_PER_SYMBOL     (105),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (sys_sdram_pll_sdram_clk_clk),                                         //        in_clk.clk
		.in_reset          (processor_reset_reset_bridge_in_reset_reset),                         //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_sys_clk_clk),                                           //       out_clk.clk
		.out_reset         (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src2_ready),                                                //            in.ready
		.in_valid          (cmd_demux_src2_valid),                                                //              .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                                          //              .endofpacket
		.in_channel        (cmd_demux_src2_channel),                                              //              .channel
		.in_data           (cmd_demux_src2_data),                                                 //              .data
		.out_ready         (crosser_002_out_ready),                                               //           out.ready
		.out_valid         (crosser_002_out_valid),                                               //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                             //              .channel
		.out_data          (crosser_002_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (105),
		.BITS_PER_SYMBOL     (105),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (sys_sdram_pll_sdram_clk_clk),                 //        in_clk.clk
		.in_reset          (processor_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_sys_clk_clk),                   //       out_clk.clk
		.out_reset         (jtag_reset_reset_bridge_in_reset_reset),      // out_clk_reset.reset
		.in_ready          (cmd_demux_src3_ready),                        //            in.ready
		.in_valid          (cmd_demux_src3_valid),                        //              .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                //              .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                  //              .endofpacket
		.in_channel        (cmd_demux_src3_channel),                      //              .channel
		.in_data           (cmd_demux_src3_data),                         //              .data
		.out_ready         (crosser_003_out_ready),                       //           out.ready
		.out_valid         (crosser_003_out_valid),                       //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_003_out_channel),                     //              .channel
		.out_data          (crosser_003_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (105),
		.BITS_PER_SYMBOL     (105),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (sys_sdram_pll_sdram_clk_clk),                                         //        in_clk.clk
		.in_reset          (processor_reset_reset_bridge_in_reset_reset),                         //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_sys_clk_clk),                                           //       out_clk.clk
		.out_reset         (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src4_ready),                                                //            in.ready
		.in_valid          (cmd_demux_src4_valid),                                                //              .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),                                          //              .endofpacket
		.in_channel        (cmd_demux_src4_channel),                                              //              .channel
		.in_data           (cmd_demux_src4_data),                                                 //              .data
		.out_ready         (crosser_004_out_ready),                                               //           out.ready
		.out_valid         (crosser_004_out_valid),                                               //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                             //              .channel
		.out_data          (crosser_004_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (105),
		.BITS_PER_SYMBOL     (105),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (sys_sdram_pll_sdram_clk_clk),                                         //        in_clk.clk
		.in_reset          (processor_reset_reset_bridge_in_reset_reset),                         //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_sys_clk_clk),                                           //       out_clk.clk
		.out_reset         (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src6_ready),                                                //            in.ready
		.in_valid          (cmd_demux_src6_valid),                                                //              .valid
		.in_startofpacket  (cmd_demux_src6_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src6_endofpacket),                                          //              .endofpacket
		.in_channel        (cmd_demux_src6_channel),                                              //              .channel
		.in_data           (cmd_demux_src6_data),                                                 //              .data
		.out_ready         (crosser_005_out_ready),                                               //           out.ready
		.out_valid         (crosser_005_out_valid),                                               //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                             //              .channel
		.out_data          (crosser_005_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (105),
		.BITS_PER_SYMBOL     (105),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (sys_sdram_pll_sys_clk_clk),                                           //        in_clk.clk
		.in_reset          (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_sdram_clk_clk),                                         //       out_clk.clk
		.out_reset         (processor_reset_reset_bridge_in_reset_reset),                         // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                                //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                                //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                          //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                              //              .channel
		.in_data           (rsp_demux_src0_data),                                                 //              .data
		.out_ready         (crosser_006_out_ready),                                               //           out.ready
		.out_valid         (crosser_006_out_valid),                                               //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                             //              .channel
		.out_data          (crosser_006_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (105),
		.BITS_PER_SYMBOL     (105),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (sys_sdram_pll_sys_clk_clk),                                           //        in_clk.clk
		.in_reset          (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_sdram_clk_clk),                                         //       out_clk.clk
		.out_reset         (processor_reset_reset_bridge_in_reset_reset),                         // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_001_src0_data),                                             //              .data
		.out_ready         (crosser_007_out_ready),                                               //           out.ready
		.out_valid         (crosser_007_out_valid),                                               //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                             //              .channel
		.out_data          (crosser_007_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (105),
		.BITS_PER_SYMBOL     (105),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (sys_sdram_pll_sys_clk_clk),                                           //        in_clk.clk
		.in_reset          (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_sdram_clk_clk),                                         //       out_clk.clk
		.out_reset         (processor_reset_reset_bridge_in_reset_reset),                         // out_clk_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_002_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_002_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_002_src0_data),                                             //              .data
		.out_ready         (crosser_008_out_ready),                                               //           out.ready
		.out_valid         (crosser_008_out_valid),                                               //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_008_out_channel),                                             //              .channel
		.out_data          (crosser_008_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (105),
		.BITS_PER_SYMBOL     (105),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (sys_sdram_pll_sys_clk_clk),                   //        in_clk.clk
		.in_reset          (jtag_reset_reset_bridge_in_reset_reset),      //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_sdram_clk_clk),                 //       out_clk.clk
		.out_reset         (processor_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                    //            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                    //              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),            //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),              //              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),                  //              .channel
		.in_data           (rsp_demux_003_src0_data),                     //              .data
		.out_ready         (crosser_009_out_ready),                       //           out.ready
		.out_valid         (crosser_009_out_valid),                       //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),               //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                 //              .endofpacket
		.out_channel       (crosser_009_out_channel),                     //              .channel
		.out_data          (crosser_009_out_data),                        //              .data
		.in_empty          (1'b0),                                        //   (terminated)
		.in_error          (1'b0),                                        //   (terminated)
		.out_empty         (),                                            //   (terminated)
		.out_error         ()                                             //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (105),
		.BITS_PER_SYMBOL     (105),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (sys_sdram_pll_sys_clk_clk),                                           //        in_clk.clk
		.in_reset          (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_sdram_clk_clk),                                         //       out_clk.clk
		.out_reset         (processor_reset_reset_bridge_in_reset_reset),                         // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_004_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_004_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_004_src0_data),                                             //              .data
		.out_ready         (crosser_010_out_ready),                                               //           out.ready
		.out_valid         (crosser_010_out_valid),                                               //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_010_out_channel),                                             //              .channel
		.out_data          (crosser_010_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (105),
		.BITS_PER_SYMBOL     (105),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (sys_sdram_pll_sys_clk_clk),                                           //        in_clk.clk
		.in_reset          (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_sdram_clk_clk),                                         //       out_clk.clk
		.out_reset         (processor_reset_reset_bridge_in_reset_reset),                         // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_006_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_006_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_006_src0_data),                                             //              .data
		.out_ready         (crosser_011_out_ready),                                               //           out.ready
		.out_valid         (crosser_011_out_valid),                                               //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_011_out_channel),                                             //              .channel
		.out_data          (crosser_011_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	nios_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (sys_sdram_pll_sys_clk_clk),                                                             // in_clk_0.clk
		.in_rst_0_reset (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                   // in_rst_0.reset
		.in_0_data      (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                                         //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                                         //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                                          //         .error
	);

	nios_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (sys_sdram_pll_sys_clk_clk),                                                              // in_clk_0.clk
		.in_rst_0_reset (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset),                    // in_rst_0.reset
		.in_0_data      (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                                                      //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                                                      //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                                       //         .error
	);

	nios_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (sys_sdram_pll_sys_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dma_buffer_avalon_control_slave_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (dma_buffer_avalon_control_slave_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (dma_buffer_avalon_control_slave_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                                    //         .error
	);

	nios_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (sys_sdram_pll_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (jtag_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (jtag_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                  //         .error
	);

	nios_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (sys_sdram_pll_sys_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                                    //         .error
	);

	nios_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (sys_sdram_pll_sdram_clk_clk),                          // in_clk_0.clk
		.in_rst_0_reset (processor_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (processor_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (processor_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (processor_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                     //         .error
	);

	nios_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (sys_sdram_pll_sys_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (video_character_buffer_with_dma_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (system_modes_s1_agent_rdata_fifo_out_data),                           //     in_0.data
		.in_0_valid     (system_modes_s1_agent_rdata_fifo_out_valid),                          //         .valid
		.in_0_ready     (system_modes_s1_agent_rdata_fifo_out_ready),                          //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                                    //         .error
	);

	nios_system_mm_interconnect_1_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (sys_sdram_pll_sdram_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (sdram_controller_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_controller_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (sdram_controller_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (sdram_controller_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                   //         .error
	);

endmodule
