
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00000298 memsz 0x000002a8 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  000012b8  2**0
                  CONTENTS
  2 .text         00000280  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  000102a0  000102a0  000012a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000000  000102b8  000102b8  000012b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000010  000102b8  000102b8  000012b8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000102c8  000102c8  000012b8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000188  00000000  00000000  000012e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000bde  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000710  00000000  00000000  00002046  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000007d1  00000000  00000000  00002756  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001b0  00000000  00000000  00002f28  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000592  00000000  00000000  000030d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000172  00000000  00000000  0000366a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000037dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  00003810  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000465e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00004661  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000466d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000466e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000466f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000467a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00004685  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00004690  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000013  00000000  00000000  0000469b  2**0
                  CONTENTS, READONLY
 26 .jdi          00005175  00000000  00000000  000046ae  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0002c411  00000000  00000000  00009823  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
000102a0 l    d  .rodata	00000000 .rodata
000102b8 l    d  .rwdata	00000000 .rwdata
000102b8 l    d  .bss	00000000 .bss
000102c8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
00010068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 strlen.c
00010164 g     F .text	0000002c alt_main
000102b8 g       *ABS*	00000000 __flash_rwdata_start
00010190 g     F .text	00000038 alt_putstr
00010244 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000001c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000102bc g     O .bss	00000004 alt_argv
000182b8 g       *ABS*	00000000 _gp
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0001024c g     F .text	00000038 alt_icache_flush
000102c8 g       *ABS*	00000000 __bss_end
00010220 g     F .text	00000018 alt_dcache_flush_all
000102b8 g       *ABS*	00000000 __ram_rwdata_end
000102b8 g       *ABS*	00000000 __ram_rodata_end
000102c4 g     O .bss	00000004 jtag_uart_0
000102c8 g       *ABS*	00000000 end
00020000 g       *ABS*	00000000 __alt_stack_pointer
000101ec g     F .text	00000034 altera_avalon_jtag_uart_write
00010020 g     F .text	0000004c _start
000101e8 g     F .text	00000004 alt_sys_init
000102b8 g       *ABS*	00000000 __ram_rwdata_start
000102a0 g       *ABS*	00000000 __ram_rodata_start
000102c8 g       *ABS*	00000000 __alt_stack_base
000102b8 g       *ABS*	00000000 __bss_start
0001006c g     F .text	00000018 main
000102b8 g     O .bss	00000004 alt_envp
000102a0 g       *ABS*	00000000 __flash_rodata_start
000101c8 g     F .text	00000020 alt_irq_init
000102c0 g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
000102b8 g       *ABS*	00000000 _edata
000102c8 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00020000 g       *ABS*	00000000 __alt_data_end
0001001c g       .entry	00000000 _exit
00010284 g     F .text	0000001c strlen
00010238 g     F .text	0000000c alt_icache_flush_all
00010084 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   10000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   10004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   10008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   1000c:	00bffd16 	blt	zero,r2,10004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10010:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10014:	08400814 	ori	at,at,32
    jmp r1
   10018:	0800683a 	jmp	at

0001001c <_exit>:
   1001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>

Disassembly of section .text:

00010020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   10020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   10024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   10028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   1002c:	00bffd16 	blt	zero,r2,10024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10030:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10034:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10038:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1003c:	d6a0ae14 	ori	gp,gp,33464
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10040:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10044:	1080ae14 	ori	r2,r2,696

    movhi r3, %hi(__bss_end)
   10048:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1004c:	18c0b214 	ori	r3,r3,712

    beq r2, r3, 1f
   10050:	10c00326 	beq	r2,r3,10060 <_start+0x40>

0:
    stw zero, (r2)
   10054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1005c:	10fffd36 	bltu	r2,r3,10054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10060:	00100840 	call	10084 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10064:	00101640 	call	10164 <alt_main>

00010068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10068:	003fff06 	br	10068 <alt_after_alt_main>

0001006c <main>:

#include "sys/alt_stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
   1006c:	01000074 	movhi	r4,1
 */

#include "sys/alt_stdio.h"

int main()
{ 
   10070:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
   10074:	2100a804 	addi	r4,r4,672
 */

#include "sys/alt_stdio.h"

int main()
{ 
   10078:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
   1007c:	00101900 	call	10190 <alt_putstr>
   10080:	003fff06 	br	10080 <main+0x14>

00010084 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10084:	deffff04 	addi	sp,sp,-4
   10088:	01000074 	movhi	r4,1
   1008c:	01400074 	movhi	r5,1
   10090:	dfc00015 	stw	ra,0(sp)
   10094:	2100ae04 	addi	r4,r4,696
   10098:	2940ae04 	addi	r5,r5,696

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1009c:	2140061e 	bne	r4,r5,100b8 <alt_load+0x34>
   100a0:	01000074 	movhi	r4,1
   100a4:	01400074 	movhi	r5,1
   100a8:	21000804 	addi	r4,r4,32
   100ac:	29400804 	addi	r5,r5,32
   100b0:	2140121e 	bne	r4,r5,100fc <alt_load+0x78>
   100b4:	00000b06 	br	100e4 <alt_load+0x60>
   100b8:	00c00074 	movhi	r3,1
   100bc:	18c0ae04 	addi	r3,r3,696
   100c0:	1907c83a 	sub	r3,r3,r4
   100c4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   100c8:	10fff526 	beq	r2,r3,100a0 <alt_load+0x1c>
    {
      *to++ = *from++;
   100cc:	114f883a 	add	r7,r2,r5
   100d0:	39c00017 	ldw	r7,0(r7)
   100d4:	110d883a 	add	r6,r2,r4
   100d8:	10800104 	addi	r2,r2,4
   100dc:	31c00015 	stw	r7,0(r6)
   100e0:	003ff906 	br	100c8 <alt_load+0x44>
   100e4:	01000074 	movhi	r4,1
   100e8:	01400074 	movhi	r5,1
   100ec:	2100a804 	addi	r4,r4,672
   100f0:	2940a804 	addi	r5,r5,672

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   100f4:	2140101e 	bne	r4,r5,10138 <alt_load+0xb4>
   100f8:	00000b06 	br	10128 <alt_load+0xa4>
   100fc:	00c00074 	movhi	r3,1
   10100:	18c00804 	addi	r3,r3,32
   10104:	1907c83a 	sub	r3,r3,r4
   10108:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1010c:	10fff526 	beq	r2,r3,100e4 <alt_load+0x60>
    {
      *to++ = *from++;
   10110:	114f883a 	add	r7,r2,r5
   10114:	39c00017 	ldw	r7,0(r7)
   10118:	110d883a 	add	r6,r2,r4
   1011c:	10800104 	addi	r2,r2,4
   10120:	31c00015 	stw	r7,0(r6)
   10124:	003ff906 	br	1010c <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10128:	00102200 	call	10220 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   1012c:	dfc00017 	ldw	ra,0(sp)
   10130:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10134:	00102381 	jmpi	10238 <alt_icache_flush_all>
   10138:	00c00074 	movhi	r3,1
   1013c:	18c0ae04 	addi	r3,r3,696
   10140:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10144:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10148:	18bff726 	beq	r3,r2,10128 <alt_load+0xa4>
    {
      *to++ = *from++;
   1014c:	114f883a 	add	r7,r2,r5
   10150:	39c00017 	ldw	r7,0(r7)
   10154:	110d883a 	add	r6,r2,r4
   10158:	10800104 	addi	r2,r2,4
   1015c:	31c00015 	stw	r7,0(r6)
   10160:	003ff906 	br	10148 <alt_load+0xc4>

00010164 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10164:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10168:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1016c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10170:	00101c80 	call	101c8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10174:	00101e80 	call	101e8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10178:	d1a00017 	ldw	r6,-32768(gp)
   1017c:	d1600117 	ldw	r5,-32764(gp)
   10180:	d1200217 	ldw	r4,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10184:	dfc00017 	ldw	ra,0(sp)
   10188:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   1018c:	001006c1 	jmpi	1006c <main>

00010190 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   10190:	defffe04 	addi	sp,sp,-8
   10194:	dc000015 	stw	r16,0(sp)
   10198:	dfc00115 	stw	ra,4(sp)
   1019c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   101a0:	00102840 	call	10284 <strlen>
   101a4:	01000074 	movhi	r4,1
   101a8:	000f883a 	mov	r7,zero
   101ac:	100d883a 	mov	r6,r2
   101b0:	800b883a 	mov	r5,r16
   101b4:	2100b104 	addi	r4,r4,708
#else
    return fputs(str, stdout);
#endif
#endif
}
   101b8:	dfc00117 	ldw	ra,4(sp)
   101bc:	dc000017 	ldw	r16,0(sp)
   101c0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   101c4:	00101ec1 	jmpi	101ec <altera_avalon_jtag_uart_write>

000101c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   101c8:	deffff04 	addi	sp,sp,-4
   101cc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   101d0:	00102440 	call	10244 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   101d4:	00800044 	movi	r2,1
   101d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   101dc:	dfc00017 	ldw	ra,0(sp)
   101e0:	dec00104 	addi	sp,sp,4
   101e4:	f800283a 	ret

000101e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   101e8:	f800283a 	ret

000101ec <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   101ec:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   101f0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   101f4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   101f8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   101fc:	2980072e 	bgeu	r5,r6,1021c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10200:	38c00037 	ldwio	r3,0(r7)
   10204:	18ffffec 	andhi	r3,r3,65535
   10208:	183ffc26 	beq	r3,zero,101fc <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   1020c:	28c00007 	ldb	r3,0(r5)
   10210:	20c00035 	stwio	r3,0(r4)
   10214:	29400044 	addi	r5,r5,1
   10218:	003ff806 	br	101fc <altera_avalon_jtag_uart_write+0x10>

  return count;
}
   1021c:	f800283a 	ret

00010220 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10220:	0005883a 	mov	r2,zero
   10224:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   10228:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1022c:	10800804 	addi	r2,r2,32
   10230:	10fffd1e 	bne	r2,r3,10228 <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10234:	f800283a 	ret

00010238 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10238:	01440004 	movi	r5,4096
   1023c:	0009883a 	mov	r4,zero
   10240:	001024c1 	jmpi	1024c <alt_icache_flush>

00010244 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10244:	000170fa 	wrctl	ienable,zero
   10248:	f800283a 	ret

0001024c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   1024c:	00840004 	movi	r2,4096
   10250:	1140012e 	bgeu	r2,r5,10258 <alt_icache_flush+0xc>
   10254:	100b883a 	mov	r5,r2
   10258:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1025c:	2005883a 	mov	r2,r4
   10260:	1140032e 	bgeu	r2,r5,10270 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10264:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10268:	10800804 	addi	r2,r2,32
   1026c:	003ffc06 	br	10260 <alt_icache_flush+0x14>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10270:	210007cc 	andi	r4,r4,31
   10274:	20000126 	beq	r4,zero,1027c <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10278:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1027c:	0000203a 	flushp
   10280:	f800283a 	ret

00010284 <strlen>:
   10284:	2005883a 	mov	r2,r4
   10288:	10c00007 	ldb	r3,0(r2)
   1028c:	18000226 	beq	r3,zero,10298 <strlen+0x14>
   10290:	10800044 	addi	r2,r2,1
   10294:	003ffc06 	br	10288 <strlen+0x4>
   10298:	1105c83a 	sub	r2,r2,r4
   1029c:	f800283a 	ret
