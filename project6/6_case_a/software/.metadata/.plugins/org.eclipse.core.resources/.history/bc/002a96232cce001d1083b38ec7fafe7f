// Project 5 Mitchell Jonker and Hunter Frady
// /fourth/software/proj5

// call header files
#include "sys/alt_stdio.h"
#include "sys/alt_driver.h"
#include "alt_types.h"
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <altera_up_avalon_video_pixel_buffer_dma.h>
#include "system.h"
#include <sys/alt_alarm.h> // from p5.pdf
#include "myfile.h"
//#include "myfile.c" // if ref error uncomment

// declare global variables
double theta;
double shifted_row;
double shifted_col;
double original_row, original_col;
alt_up_pixel_buffer_dma_dev *my_pixel_buffer;

void pixel_code(int i, int j) {
	shifted_row = i-240/2;
	// calculate shifted_col
	shifted_col = j - 320/2;
	// calculate original_row
	original_row = round((shifted_row*cos(theta) - shifted_col*sin(theta)) + 240/2);
	//calculate original_col
	original_col = round((shifted_row*sin(theta) + shifted_col*cos(theta)) + 320/2);
	// check if the image is out of boundary
	if ((i>=240) || (j>=320) || (i<0) || (j<0)) {
		// if original_row is out of bound
		if (original_row >= 0 && original_row < 1) {
			// set i to 0
			i = 0;
		}
		// if original_col is out of bound
		if (original_col >=0 && original_col < 1) {
			// set j to 0
			j = 0;
		}
	}
	// display the image based on the values of original_row and original_col
	alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
	(myimage[(i*320*3+j*3+2)]) +
	(myimage[(i*320*3+j*3+1)]<<8) +
	(myimage[(i*320*3+j*3+0)]<<16),original_col,original_row);

}
void frame_function() {
	// frame code
	// for loop that rotates over image rows
	for (int i = 0; i < 240; i++) {
	// for loop that rotates over image cols
		for (int j = 0; j < 360; j++) {
			pixel_code(i,j);
		}
	}
}

int main() {
	alt_putstr("Project 5 Mitchell Jonker and Hunter Frady\n");

	int ticks_per_second, ticks_start, ticks_end, ticks_delta;
	ticks_per_second = alt_ticks_per_second();
	printf("TPS: %d \n", ticks_per_second);
	ticks_start = alt_nticks(); // starting number of ticks
	printf("Start Tic: %d \n", ticks_start);

	my_pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/dma_buffer");

	if(!my_pixel_buffer) {
		printf("Error opening pixel buffer\n");
	}

	alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer, 0);

	int ticks_current = alt_nticks(); // starting number of ticks
	printf("Current Tic: %d \n", ticks_current);

	while (1) {
		// for loop that rotates over four frames on 0, 90, 180, 270 degree
		for (int t = 0; t > -360; t = t-90) { // -360
			// calculate theta
			theta = (t*3.14)/180;
			alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
			frame_function();
		}
		ticks_end = alt_nticks();
		ticks_delta = ticks_end - ticks_start;
		printf("End Tic: %d \n", ticks_end);
		printf("Deltaics: %d \n", ticks_delta);
		unsigned long long time_delta = (unsigned long long) ticks_delta / (unsigned long long) ticks_per_second;
		printf("Total duration %llu seconds \n\n", time_delta);
	}

//	ticks_delta = ticks_end - ticks_start;
//	duration = ticks_delta / ticks_per_second;
//	printf("Total duration %llu seconds \n\n", duration);


	// * sample below
//	int ticks_per_second, ticks_start, ticks_end, frame_ticks;
//	unsigned long long duration;
//	ticks_per_second = alt_ticks_per_second();
//	ticks_start = alt_nticks();
//	frame_function();
//	ticks_end = alt_nticks();
//	frame_ticks = ticks_end - ticks_start;
//	duration = (unsigned long long) ticks_total / (unsigned long long) ticks_per_second;
//	printf("Total duration %llu seconds \n\n", duration);
	// sample above
	return 0;
}




