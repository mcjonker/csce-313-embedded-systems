
mytest.elf:     file format elf32-littlenios2
mytest.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000020

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x001c3ec8 memsz 0x001c3ec8 flags r-x
    LOAD off    0x001c4ee8 vaddr 0x101c3ee8 paddr 0x101c403c align 2**12
         filesz 0x00000154 memsz 0x00000154 flags rw-
    LOAD off    0x001c5190 vaddr 0x101c4190 paddr 0x101c4190 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  10000020  10000020  001c503c  2**0
                  CONTENTS
  2 .text         00001cf4  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       001c21d4  10001d14  10001d14  00002d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000154  101c3ee8  101c403c  001c4ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  101c4190  101c4190  001c5190  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  101c41a0  101c41a0  001c503c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  001c503c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000003a8  00000000  00000000  001c5060  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004111  00000000  00000000  001c5408  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001907  00000000  00000000  001c9519  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001d3f  00000000  00000000  001cae20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000005a0  00000000  00000000  001ccb60  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000124b  00000000  00000000  001cd100  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002f6d  00000000  00000000  001ce34b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  001d12b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000410  00000000  00000000  001d12e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  001d2cb6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  001d2cb9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  001d2cc2  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  001d2cc3  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  001d2cc4  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  001d2cc8  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  001d2ccc  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  001d2cd0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000013  00000000  00000000  001d2cdb  2**0
                  CONTENTS, READONLY
 26 .jdi          00004c50  00000000  00000000  001d2cee  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006c6b3  00000000  00000000  001d793e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000020 l    d  .text	00000000 .text
10001d14 l    d  .rodata	00000000 .rodata
101c3ee8 l    d  .rwdata	00000000 .rwdata
101c4190 l    d  .bss	00000000 .bss
101c41a0 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../mytest_bsp//obj/HAL/src/crt0.o
10000068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 myfile.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
101c3f80 l     O .rwdata	00000048 video_character_buffer_with_dma_0
101c3f2c l     O .rwdata	00000054 dma_buffer
101c3ee8 l     O .rwdata	00000044 rgb_resampler
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
10001b5c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
10000ef0 g     F .text	0000002c alt_main
10001708 g     F .text	0000015c alt_up_pixel_buffer_dma_draw_vline
101c403c g       *ABS*	00000000 __flash_rwdata_start
100011f8 g     F .text	0000006c alt_up_char_buffer_string
100011a8 g     F .text	00000050 alt_up_char_buffer_draw
10000c18 g     F .text	00000070 .hidden __fixsfsi
10000f1c g     F .text	00000038 alt_putstr
1000128c g     F .text	00000098 alt_up_pixel_buffer_dma_draw
10001c50 g     F .text	00000008 altera_nios2_gen2_irq_init
10001284 g     F .text	00000008 alt_up_pixel_buffer_dma_open_dev
10000000 g     F .entry	0000001c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
101c419c g     O .bss	00000004 errno
10000000 g       *ABS*	00000000 __alt_mem_sdram_controller
101c4194 g     O .bss	00000004 alt_argv
101cc020 g       *ABS*	00000000 _gp
10000734 g     F .text	000004e4 .hidden __subsf3
101c4020 g     O .rwdata	00000004 jtag
10001324 g     F .text	0000001c alt_up_pixel_buffer_dma_change_back_buffer_address
101c3fc8 g     O .rwdata	00000030 alt_fd_list
10001bd0 g     F .text	00000074 alt_find_dev
10001264 g     F .text	00000020 alt_up_char_buffer_clear
10001364 g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
100015cc g     F .text	0000013c alt_up_pixel_buffer_dma_draw_hline
10001c58 g     F .text	00000038 alt_icache_flush
10001930 g     F .text	0000004c helper_plot_pixel
101c4024 g     O .rwdata	00000004 alt_max_fd
10001374 g     F .text	00000090 alt_up_pixel_buffer_dma_clear_screen
101c41a0 g       *ABS*	00000000 __bss_end
10001404 g     F .text	000001c8 alt_up_pixel_buffer_dma_draw_box
10001d6b g     O .rodata	001c2000 myimage
101c3ff8 g     O .rwdata	00000028 alt_dev_null
10001b44 g     F .text	00000018 alt_dcache_flush_all
10001864 g     F .text	000000cc alt_up_pixel_buffer_dma_draw_rectangle
101c403c g       *ABS*	00000000 __ram_rwdata_end
101c4028 g     O .rwdata	00000008 alt_dev_list
1000197c g     F .text	000001c8 alt_up_pixel_buffer_dma_draw_line
1000027c g     F .text	000000bc .hidden __gtsf2
101c3ee8 g       *ABS*	00000000 __ram_rodata_end
101c41a0 g       *ABS*	00000000 end
10001154 g     F .text	0000004c alt_up_char_buffer_init
18000000 g       *ABS*	00000000 __alt_stack_pointer
10000dac g     F .text	00000064 .hidden __clzsi2
10001120 g     F .text	00000034 altera_avalon_jtag_uart_write
10000020 g     F .text	0000004c _start
10000f74 g     F .text	000001ac alt_sys_init
10000c88 g     F .text	00000124 .hidden __floatsisf
101c3ee8 g       *ABS*	00000000 __ram_rwdata_start
10001d14 g       *ABS*	00000000 __ram_rodata_start
10001c90 g     F .text	00000030 memcmp
101c41a0 g       *ABS*	00000000 __alt_stack_base
10001b64 g     F .text	0000006c alt_dev_llist_insert
101c4190 g       *ABS*	00000000 __bss_start
1000006c g     F .text	000001b0 main
101c4190 g     O .bss	00000004 alt_envp
10001340 g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
100011a0 g     F .text	00000008 alt_up_char_buffer_open_dev
101c4038 g     O .rwdata	00000004 alt_errno
10000338 g     F .text	000003fc .hidden __mulsf3
10001cc0 g     F .text	00000038 strcmp
10001d14 g       *ABS*	00000000 __flash_rodata_start
10000f54 g     F .text	00000020 alt_irq_init
101c3d6b g     O .rodata	00000100 .hidden __clz_tab
1000027c g     F .text	000000bc .hidden __gesf2
101c4198 g     O .bss	00000004 alt_argc
101c4030 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
101c403c g       *ABS*	00000000 _edata
101c41a0 g       *ABS*	00000000 _end
10000020 g       *ABS*	00000000 __ram_exceptions_end
18000000 g       *ABS*	00000000 __alt_data_end
1000021c g     F .text	00000060 .hidden __fixunssfsi
1000001c g       .entry	00000000 _exit
10001cf8 g     F .text	0000001c strlen
10001c44 g     F .text	0000000c alt_icache_flush_all
10000e10 g     F .text	000000e0 alt_load



Disassembly of section .entry:

10000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1000000c:	00bffd16 	blt	zero,r2,10000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000010:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000014:	08400814 	ori	at,at,32
    jmp r1
10000018:	0800683a 	jmp	at

1000001c <_exit>:
1000001c:	00000000 	call	10000000 <__reset>

Disassembly of section .text:

10000020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10000020:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
10000024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
10000028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
1000002c:	00bffd16 	blt	zero,r2,10000024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000030:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000034:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000038:	06840734 	movhi	gp,4124
    ori gp, gp, %lo(_gp)
1000003c:	d6b00814 	ori	gp,gp,49184
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000040:	00840734 	movhi	r2,4124
    ori r2, r2, %lo(__bss_start)
10000044:	10906414 	ori	r2,r2,16784

    movhi r3, %hi(__bss_end)
10000048:	00c40734 	movhi	r3,4124
    ori r3, r3, %lo(__bss_end)
1000004c:	18d06814 	ori	r3,r3,16800

    beq r2, r3, 1f
10000050:	10c00326 	beq	r2,r3,10000060 <_start+0x40>

0:
    stw zero, (r2)
10000054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000005c:	10fffd36 	bltu	r2,r3,10000054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000060:	0000e100 	call	10000e10 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000064:	0000ef00 	call	10000ef0 <alt_main>

10000068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000068:	003fff06 	br	10000068 <alt_after_alt_main>

1000006c <main>:
	alt_u8 modes = 0x0;
	alt_u8 pre = 0x0;
	float f = 1;
  // Read pixel buffer (go to no.6 of software requirements in the assignment sheet)
	alt_up_pixel_buffer_dma_dev *my_pixel_buffer;
	my_pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/dma_buffer");
1000006c:	01040034 	movhi	r4,4096
// add the pixel buffer dma as shown in no.5 of the software requirements in the assignment sheet



int main()
{
10000070:	defff404 	addi	sp,sp,-48
	alt_u8 modes = 0x0;
	alt_u8 pre = 0x0;
	float f = 1;
  // Read pixel buffer (go to no.6 of software requirements in the assignment sheet)
	alt_up_pixel_buffer_dma_dev *my_pixel_buffer;
	my_pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/dma_buffer");
10000074:	21074504 	addi	r4,r4,7444
// add the pixel buffer dma as shown in no.5 of the software requirements in the assignment sheet



int main()
{
10000078:	dc800415 	stw	r18,16(sp)
1000007c:	dfc00b15 	stw	ra,44(sp)
10000080:	df000a15 	stw	fp,40(sp)
10000084:	ddc00915 	stw	r23,36(sp)
10000088:	dd800815 	stw	r22,32(sp)
1000008c:	dd400715 	stw	r21,28(sp)
10000090:	dd000615 	stw	r20,24(sp)
10000094:	dcc00515 	stw	r19,20(sp)
10000098:	dc400315 	stw	r17,12(sp)
1000009c:	dc000215 	stw	r16,8(sp)
	alt_u8 modes = 0x0;
	alt_u8 pre = 0x0;
	float f = 1;
  // Read pixel buffer (go to no.6 of software requirements in the assignment sheet)
	alt_up_pixel_buffer_dma_dev *my_pixel_buffer;
	my_pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/dma_buffer");
100000a0:	00012840 	call	10001284 <alt_up_pixel_buffer_dma_open_dev>
100000a4:	1025883a 	mov	r18,r2
  // Check if the pixel array contains the image (go to no.7 of software requirements in the assignment sheet)

	if(!my_pixel_buffer) {
100000a8:	1000031e 	bne	r2,zero,100000b8 <main+0x4c>
		alt_putstr("Error opening pixel buffer\n");
100000ac:	01040034 	movhi	r4,4096
100000b0:	21074904 	addi	r4,r4,7460
100000b4:	0000f1c0 	call	10000f1c <alt_putstr>
	}
	alt_putstr("Hello from Nios II!\n");
100000b8:	01040034 	movhi	r4,4096
100000bc:	21075004 	addi	r4,r4,7488
100000c0:	0000f1c0 	call	10000f1c <alt_putstr>
 // Clear the screen (go to no.8 of software requirements in the assignment sheet)
		alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
100000c4:	000b883a 	mov	r5,zero
100000c8:	9009883a 	mov	r4,r18
  while(1) {

  // Read the mode value using IORD_ALTERA_AVALON_PIO_DATA();


	  modes = IORD_ALTERA_AVALON_PIO_DATA(SYSTEM_MODES_BASE);
100000cc:	07000834 	movhi	fp,32
	if(!my_pixel_buffer) {
		alt_putstr("Error opening pixel buffer\n");
	}
	alt_putstr("Hello from Nios II!\n");
 // Clear the screen (go to no.8 of software requirements in the assignment sheet)
		alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
100000d0:	00013740 	call	10001374 <alt_up_pixel_buffer_dma_clear_screen>

  // declare the mode variable as alt_u8 and initialize with 0

	alt_u8 modes = 0x0;
	alt_u8 pre = 0x0;
	float f = 1;
100000d4:	040fe034 	movhi	r16,16256
{

  // declare the mode variable as alt_u8 and initialize with 0

	alt_u8 modes = 0x0;
	alt_u8 pre = 0x0;
100000d8:	002b883a 	mov	r21,zero
  while(1) {

  // Read the mode value using IORD_ALTERA_AVALON_PIO_DATA();


	  modes = IORD_ALTERA_AVALON_PIO_DATA(SYSTEM_MODES_BASE);
100000dc:	e70c0004 	addi	fp,fp,12288
		  alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
		  pre = modes;
		  }
		  f = 1;
	  }
	  else if (modes == 0x1){
100000e0:	04c00044 	movi	r19,1
  while(1) {

  // Read the mode value using IORD_ALTERA_AVALON_PIO_DATA();


	  modes = IORD_ALTERA_AVALON_PIO_DATA(SYSTEM_MODES_BASE);
100000e4:	e4400037 	ldwio	r17,0(fp)

 	// check the mode value. if mode is 0.
    	//Clear the screen (go to no.8 of software requirements in the assignment sheet)
//	   alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
	  if (modes == 0x0){
100000e8:	88803fcc 	andi	r2,r17,255
100000ec:	1000071e 	bne	r2,zero,1000010c <main+0xa0>
		  if (pre != modes){
100000f0:	a8803fcc 	andi	r2,r21,255
100000f4:	10001a26 	beq	r2,zero,10000160 <main+0xf4>
		  alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
100000f8:	000b883a 	mov	r5,zero
100000fc:	9009883a 	mov	r4,r18
10000100:	00013740 	call	10001374 <alt_up_pixel_buffer_dma_clear_screen>
10000104:	882b883a 	mov	r21,r17
10000108:	00001506 	br	10000160 <main+0xf4>
		  pre = modes;
		  }
		  f = 1;
	  }
	  else if (modes == 0x1){
1000010c:	14c0071e 	bne	r2,r19,1000012c <main+0xc0>
		  if (pre != modes){
10000110:	a8803fcc 	andi	r2,r21,255
10000114:	14c01426 	beq	r2,r19,10000168 <main+0xfc>
		  		  alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
10000118:	000b883a 	mov	r5,zero
1000011c:	9009883a 	mov	r4,r18
10000120:	00013740 	call	10001374 <alt_up_pixel_buffer_dma_clear_screen>
10000124:	882b883a 	mov	r21,r17
10000128:	00000f06 	br	10000168 <main+0xfc>
		  		pre = modes;
		  		 }
		  f = 0.5;
	  }
	  else if (modes == 0x2){
1000012c:	01000084 	movi	r4,2
10000130:	1100071e 	bne	r2,r4,10000150 <main+0xe4>
		  if (pre != modes){
10000134:	a9003fcc 	andi	r4,r21,255
10000138:	20800d26 	beq	r4,r2,10000170 <main+0x104>
		  		  alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
1000013c:	000b883a 	mov	r5,zero
10000140:	9009883a 	mov	r4,r18
10000144:	00013740 	call	10001374 <alt_up_pixel_buffer_dma_clear_screen>
10000148:	882b883a 	mov	r21,r17
1000014c:	00000806 	br	10000170 <main+0x104>
		  		  }
		  f = 2;
	  }
	  else
	  {
		  alt_putstr("Video project”!\n");
10000150:	01040034 	movhi	r4,4096
10000154:	21075604 	addi	r4,r4,7512
10000158:	0000f1c0 	call	10000f1c <alt_putstr>
1000015c:	00000506 	br	10000174 <main+0x108>
	  if (modes == 0x0){
		  if (pre != modes){
		  alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
		  pre = modes;
		  }
		  f = 1;
10000160:	040fe034 	movhi	r16,16256
10000164:	00000306 	br	10000174 <main+0x108>
	  else if (modes == 0x1){
		  if (pre != modes){
		  		  alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
		  		pre = modes;
		  		 }
		  f = 0.5;
10000168:	040fc034 	movhi	r16,16128
1000016c:	00000106 	br	10000174 <main+0x108>
	  else if (modes == 0x2){
		  if (pre != modes){
		  		  alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
		  		pre = modes;
		  		  }
		  f = 2;
10000170:	04100034 	movhi	r16,16384
	  }
	  else
	  {
		  alt_putstr("Video project”!\n");
	  }
	   for (int i= 0; i<240; i++){
10000174:	0029883a 	mov	r20,zero
		   for (int j = 0; j<320; j++ )
10000178:	05805004 	movi	r22,320
	  }
	  else
	  {
		  alt_putstr("Video project”!\n");
	  }
	   for (int i= 0; i<240; i++){
1000017c:	05c03c04 	movi	r23,240
		   for (int j = 0; j<320; j++ )
		   {
			   alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
10000180:	a009883a 	mov	r4,r20
10000184:	0000c880 	call	10000c88 <__floatsisf>
10000188:	800b883a 	mov	r5,r16
1000018c:	1009883a 	mov	r4,r2
10000190:	00003380 	call	10000338 <__mulsf3>
10000194:	1009883a 	mov	r4,r2
10000198:	000021c0 	call	1000021c <__fixunssfsi>
1000019c:	a440f024 	muli	r17,r20,960
100001a0:	d8800015 	stw	r2,0(sp)
100001a4:	00840034 	movhi	r2,4096
100001a8:	10875ac4 	addi	r2,r2,7531
100001ac:	88a3883a 	add	r17,r17,r2
100001b0:	0013883a 	mov	r9,zero
100001b4:	4809883a 	mov	r4,r9
100001b8:	da400115 	stw	r9,4(sp)
100001bc:	0000c880 	call	10000c88 <__floatsisf>
100001c0:	800b883a 	mov	r5,r16
100001c4:	1009883a 	mov	r4,r2
100001c8:	00003380 	call	10000338 <__mulsf3>
100001cc:	1009883a 	mov	r4,r2
100001d0:	000021c0 	call	1000021c <__fixunssfsi>
100001d4:	89400043 	ldbu	r5,1(r17)
100001d8:	89000083 	ldbu	r4,2(r17)
100001dc:	d9c00017 	ldw	r7,0(sp)
100001e0:	280a923a 	slli	r5,r5,8
100001e4:	100d883a 	mov	r6,r2
100001e8:	8c4000c4 	addi	r17,r17,3
100001ec:	290b883a 	add	r5,r5,r4
100001f0:	893fff43 	ldbu	r4,-3(r17)
100001f4:	2008943a 	slli	r4,r4,16
100001f8:	290b883a 	add	r5,r5,r4
100001fc:	9009883a 	mov	r4,r18
10000200:	000128c0 	call	1000128c <alt_up_pixel_buffer_dma_draw>
	  else
	  {
		  alt_putstr("Video project”!\n");
	  }
	   for (int i= 0; i<240; i++){
		   for (int j = 0; j<320; j++ )
10000204:	da400117 	ldw	r9,4(sp)
10000208:	4a400044 	addi	r9,r9,1
1000020c:	4dbfe91e 	bne	r9,r22,100001b4 <main+0x148>
	  }
	  else
	  {
		  alt_putstr("Video project”!\n");
	  }
	   for (int i= 0; i<240; i++){
10000210:	a5000044 	addi	r20,r20,1
10000214:	a5ffda1e 	bne	r20,r23,10000180 <main+0x114>
10000218:	003fb206 	br	100000e4 <main+0x78>

1000021c <__fixunssfsi>:
1000021c:	defffd04 	addi	sp,sp,-12
10000220:	dc000015 	stw	r16,0(sp)
10000224:	0413c034 	movhi	r16,20224
10000228:	800b883a 	mov	r5,r16
1000022c:	dc400115 	stw	r17,4(sp)
10000230:	dfc00215 	stw	ra,8(sp)
10000234:	2023883a 	mov	r17,r4
10000238:	000027c0 	call	1000027c <__gesf2>
1000023c:	1000070e 	bge	r2,zero,1000025c <__fixunssfsi+0x40>
10000240:	8809883a 	mov	r4,r17
10000244:	0000c180 	call	10000c18 <__fixsfsi>
10000248:	dfc00217 	ldw	ra,8(sp)
1000024c:	dc400117 	ldw	r17,4(sp)
10000250:	dc000017 	ldw	r16,0(sp)
10000254:	dec00304 	addi	sp,sp,12
10000258:	f800283a 	ret
1000025c:	800b883a 	mov	r5,r16
10000260:	8809883a 	mov	r4,r17
10000264:	00007340 	call	10000734 <__subsf3>
10000268:	1009883a 	mov	r4,r2
1000026c:	0000c180 	call	10000c18 <__fixsfsi>
10000270:	00e00034 	movhi	r3,32768
10000274:	10c5883a 	add	r2,r2,r3
10000278:	003ff306 	br	10000248 <__fixunssfsi+0x2c>

1000027c <__gesf2>:
1000027c:	2004d5fa 	srli	r2,r4,23
10000280:	2806d5fa 	srli	r3,r5,23
10000284:	01802034 	movhi	r6,128
10000288:	31bfffc4 	addi	r6,r6,-1
1000028c:	10803fcc 	andi	r2,r2,255
10000290:	01c03fc4 	movi	r7,255
10000294:	3110703a 	and	r8,r6,r4
10000298:	18c03fcc 	andi	r3,r3,255
1000029c:	314c703a 	and	r6,r6,r5
100002a0:	2008d7fa 	srli	r4,r4,31
100002a4:	280ad7fa 	srli	r5,r5,31
100002a8:	11c01926 	beq	r2,r7,10000310 <__gesf2+0x94>
100002ac:	01c03fc4 	movi	r7,255
100002b0:	19c00f26 	beq	r3,r7,100002f0 <__gesf2+0x74>
100002b4:	1000061e 	bne	r2,zero,100002d0 <__gesf2+0x54>
100002b8:	400f003a 	cmpeq	r7,r8,zero
100002bc:	1800071e 	bne	r3,zero,100002dc <__gesf2+0x60>
100002c0:	3000061e 	bne	r6,zero,100002dc <__gesf2+0x60>
100002c4:	0005883a 	mov	r2,zero
100002c8:	40000e1e 	bne	r8,zero,10000304 <__gesf2+0x88>
100002cc:	f800283a 	ret
100002d0:	18000a1e 	bne	r3,zero,100002fc <__gesf2+0x80>
100002d4:	30000b26 	beq	r6,zero,10000304 <__gesf2+0x88>
100002d8:	000f883a 	mov	r7,zero
100002dc:	29403fcc 	andi	r5,r5,255
100002e0:	38000726 	beq	r7,zero,10000300 <__gesf2+0x84>
100002e4:	28000826 	beq	r5,zero,10000308 <__gesf2+0x8c>
100002e8:	00800044 	movi	r2,1
100002ec:	f800283a 	ret
100002f0:	303ff026 	beq	r6,zero,100002b4 <__gesf2+0x38>
100002f4:	00bfff84 	movi	r2,-2
100002f8:	f800283a 	ret
100002fc:	29403fcc 	andi	r5,r5,255
10000300:	21400526 	beq	r4,r5,10000318 <__gesf2+0x9c>
10000304:	203ff826 	beq	r4,zero,100002e8 <__gesf2+0x6c>
10000308:	00bfffc4 	movi	r2,-1
1000030c:	f800283a 	ret
10000310:	403fe626 	beq	r8,zero,100002ac <__gesf2+0x30>
10000314:	003ff706 	br	100002f4 <__gesf2+0x78>
10000318:	18bffa16 	blt	r3,r2,10000304 <__gesf2+0x88>
1000031c:	10c00216 	blt	r2,r3,10000328 <__gesf2+0xac>
10000320:	323ff836 	bltu	r6,r8,10000304 <__gesf2+0x88>
10000324:	4180022e 	bgeu	r8,r6,10000330 <__gesf2+0xb4>
10000328:	203fef1e 	bne	r4,zero,100002e8 <__gesf2+0x6c>
1000032c:	003ff606 	br	10000308 <__gesf2+0x8c>
10000330:	0005883a 	mov	r2,zero
10000334:	f800283a 	ret

10000338 <__mulsf3>:
10000338:	defff504 	addi	sp,sp,-44
1000033c:	dc000115 	stw	r16,4(sp)
10000340:	2020d5fa 	srli	r16,r4,23
10000344:	dd400615 	stw	r21,24(sp)
10000348:	202ad7fa 	srli	r21,r4,31
1000034c:	dc800315 	stw	r18,12(sp)
10000350:	04802034 	movhi	r18,128
10000354:	df000915 	stw	fp,36(sp)
10000358:	dd000515 	stw	r20,20(sp)
1000035c:	94bfffc4 	addi	r18,r18,-1
10000360:	dfc00a15 	stw	ra,40(sp)
10000364:	ddc00815 	stw	r23,32(sp)
10000368:	dd800715 	stw	r22,28(sp)
1000036c:	dcc00415 	stw	r19,16(sp)
10000370:	dc400215 	stw	r17,8(sp)
10000374:	84003fcc 	andi	r16,r16,255
10000378:	9124703a 	and	r18,r18,r4
1000037c:	a829883a 	mov	r20,r21
10000380:	af003fcc 	andi	fp,r21,255
10000384:	80005426 	beq	r16,zero,100004d8 <__mulsf3+0x1a0>
10000388:	00803fc4 	movi	r2,255
1000038c:	80802f26 	beq	r16,r2,1000044c <__mulsf3+0x114>
10000390:	91002034 	orhi	r4,r18,128
10000394:	202490fa 	slli	r18,r4,3
10000398:	843fe044 	addi	r16,r16,-127
1000039c:	0023883a 	mov	r17,zero
100003a0:	002f883a 	mov	r23,zero
100003a4:	2804d5fa 	srli	r2,r5,23
100003a8:	282cd7fa 	srli	r22,r5,31
100003ac:	01002034 	movhi	r4,128
100003b0:	213fffc4 	addi	r4,r4,-1
100003b4:	10803fcc 	andi	r2,r2,255
100003b8:	2166703a 	and	r19,r4,r5
100003bc:	b1803fcc 	andi	r6,r22,255
100003c0:	10004c26 	beq	r2,zero,100004f4 <__mulsf3+0x1bc>
100003c4:	00c03fc4 	movi	r3,255
100003c8:	10c04726 	beq	r2,r3,100004e8 <__mulsf3+0x1b0>
100003cc:	99002034 	orhi	r4,r19,128
100003d0:	202690fa 	slli	r19,r4,3
100003d4:	10bfe044 	addi	r2,r2,-127
100003d8:	0007883a 	mov	r3,zero
100003dc:	80a1883a 	add	r16,r16,r2
100003e0:	010003c4 	movi	r4,15
100003e4:	1c44b03a 	or	r2,r3,r17
100003e8:	b56af03a 	xor	r21,r22,r21
100003ec:	81c00044 	addi	r7,r16,1
100003f0:	20806b36 	bltu	r4,r2,100005a0 <__mulsf3+0x268>
100003f4:	100490ba 	slli	r2,r2,2
100003f8:	01040034 	movhi	r4,4096
100003fc:	21010304 	addi	r4,r4,1036
10000400:	1105883a 	add	r2,r2,r4
10000404:	10800017 	ldw	r2,0(r2)
10000408:	1000683a 	jmp	r2
1000040c:	100005a0 	cmpeqi	zero,r2,22
10000410:	10000460 	cmpeqi	zero,r2,17
10000414:	10000460 	cmpeqi	zero,r2,17
10000418:	1000045c 	xori	zero,r2,17
1000041c:	10000584 	addi	zero,r2,22
10000420:	10000584 	addi	zero,r2,22
10000424:	10000570 	cmpltui	zero,r2,21
10000428:	1000045c 	xori	zero,r2,17
1000042c:	10000584 	addi	zero,r2,22
10000430:	10000570 	cmpltui	zero,r2,21
10000434:	10000584 	addi	zero,r2,22
10000438:	1000045c 	xori	zero,r2,17
1000043c:	10000590 	cmplti	zero,r2,22
10000440:	10000590 	cmplti	zero,r2,22
10000444:	10000590 	cmplti	zero,r2,22
10000448:	1000066c 	andhi	zero,r2,25
1000044c:	90003b1e 	bne	r18,zero,1000053c <__mulsf3+0x204>
10000450:	04400204 	movi	r17,8
10000454:	05c00084 	movi	r23,2
10000458:	003fd206 	br	100003a4 <__mulsf3+0x6c>
1000045c:	302b883a 	mov	r21,r6
10000460:	00800084 	movi	r2,2
10000464:	18802626 	beq	r3,r2,10000500 <__mulsf3+0x1c8>
10000468:	008000c4 	movi	r2,3
1000046c:	1880ab26 	beq	r3,r2,1000071c <__mulsf3+0x3e4>
10000470:	00800044 	movi	r2,1
10000474:	1880a21e 	bne	r3,r2,10000700 <__mulsf3+0x3c8>
10000478:	a829883a 	mov	r20,r21
1000047c:	0007883a 	mov	r3,zero
10000480:	0009883a 	mov	r4,zero
10000484:	18803fcc 	andi	r2,r3,255
10000488:	100695fa 	slli	r3,r2,23
1000048c:	a0803fcc 	andi	r2,r20,255
10000490:	100a97fa 	slli	r5,r2,31
10000494:	00802034 	movhi	r2,128
10000498:	10bfffc4 	addi	r2,r2,-1
1000049c:	2084703a 	and	r2,r4,r2
100004a0:	10c4b03a 	or	r2,r2,r3
100004a4:	1144b03a 	or	r2,r2,r5
100004a8:	dfc00a17 	ldw	ra,40(sp)
100004ac:	df000917 	ldw	fp,36(sp)
100004b0:	ddc00817 	ldw	r23,32(sp)
100004b4:	dd800717 	ldw	r22,28(sp)
100004b8:	dd400617 	ldw	r21,24(sp)
100004bc:	dd000517 	ldw	r20,20(sp)
100004c0:	dcc00417 	ldw	r19,16(sp)
100004c4:	dc800317 	ldw	r18,12(sp)
100004c8:	dc400217 	ldw	r17,8(sp)
100004cc:	dc000117 	ldw	r16,4(sp)
100004d0:	dec00b04 	addi	sp,sp,44
100004d4:	f800283a 	ret
100004d8:	90000d1e 	bne	r18,zero,10000510 <__mulsf3+0x1d8>
100004dc:	04400104 	movi	r17,4
100004e0:	05c00044 	movi	r23,1
100004e4:	003faf06 	br	100003a4 <__mulsf3+0x6c>
100004e8:	9806c03a 	cmpne	r3,r19,zero
100004ec:	18c00084 	addi	r3,r3,2
100004f0:	003fba06 	br	100003dc <__mulsf3+0xa4>
100004f4:	9800141e 	bne	r19,zero,10000548 <__mulsf3+0x210>
100004f8:	00c00044 	movi	r3,1
100004fc:	003fb706 	br	100003dc <__mulsf3+0xa4>
10000500:	a829883a 	mov	r20,r21
10000504:	00ffffc4 	movi	r3,-1
10000508:	0009883a 	mov	r4,zero
1000050c:	003fdd06 	br	10000484 <__mulsf3+0x14c>
10000510:	9009883a 	mov	r4,r18
10000514:	d9400015 	stw	r5,0(sp)
10000518:	0000dac0 	call	10000dac <__clzsi2>
1000051c:	10fffec4 	addi	r3,r2,-5
10000520:	10801d84 	addi	r2,r2,118
10000524:	90e4983a 	sll	r18,r18,r3
10000528:	00a1c83a 	sub	r16,zero,r2
1000052c:	0023883a 	mov	r17,zero
10000530:	002f883a 	mov	r23,zero
10000534:	d9400017 	ldw	r5,0(sp)
10000538:	003f9a06 	br	100003a4 <__mulsf3+0x6c>
1000053c:	04400304 	movi	r17,12
10000540:	05c000c4 	movi	r23,3
10000544:	003f9706 	br	100003a4 <__mulsf3+0x6c>
10000548:	9809883a 	mov	r4,r19
1000054c:	d9800015 	stw	r6,0(sp)
10000550:	0000dac0 	call	10000dac <__clzsi2>
10000554:	10fffec4 	addi	r3,r2,-5
10000558:	10801d84 	addi	r2,r2,118
1000055c:	98e6983a 	sll	r19,r19,r3
10000560:	0085c83a 	sub	r2,zero,r2
10000564:	0007883a 	mov	r3,zero
10000568:	d9800017 	ldw	r6,0(sp)
1000056c:	003f9b06 	br	100003dc <__mulsf3+0xa4>
10000570:	01002034 	movhi	r4,128
10000574:	0029883a 	mov	r20,zero
10000578:	213fffc4 	addi	r4,r4,-1
1000057c:	00ffffc4 	movi	r3,-1
10000580:	003fc006 	br	10000484 <__mulsf3+0x14c>
10000584:	9027883a 	mov	r19,r18
10000588:	b807883a 	mov	r3,r23
1000058c:	003fb406 	br	10000460 <__mulsf3+0x128>
10000590:	9027883a 	mov	r19,r18
10000594:	e02b883a 	mov	r21,fp
10000598:	b807883a 	mov	r3,r23
1000059c:	003fb006 	br	10000460 <__mulsf3+0x128>
100005a0:	9004d43a 	srli	r2,r18,16
100005a4:	9810d43a 	srli	r8,r19,16
100005a8:	94bfffcc 	andi	r18,r18,65535
100005ac:	993fffcc 	andi	r4,r19,65535
100005b0:	910d383a 	mul	r6,r18,r4
100005b4:	20a7383a 	mul	r19,r4,r2
100005b8:	9225383a 	mul	r18,r18,r8
100005bc:	3006d43a 	srli	r3,r6,16
100005c0:	1211383a 	mul	r8,r2,r8
100005c4:	94e5883a 	add	r18,r18,r19
100005c8:	1c87883a 	add	r3,r3,r18
100005cc:	1cc0022e 	bgeu	r3,r19,100005d8 <__mulsf3+0x2a0>
100005d0:	00800074 	movhi	r2,1
100005d4:	4091883a 	add	r8,r8,r2
100005d8:	1804943a 	slli	r2,r3,16
100005dc:	31bfffcc 	andi	r6,r6,65535
100005e0:	1806d43a 	srli	r3,r3,16
100005e4:	1185883a 	add	r2,r2,r6
100005e8:	102691ba 	slli	r19,r2,6
100005ec:	1a07883a 	add	r3,r3,r8
100005f0:	1004d6ba 	srli	r2,r2,26
100005f4:	180891ba 	slli	r4,r3,6
100005f8:	9826c03a 	cmpne	r19,r19,zero
100005fc:	9884b03a 	or	r2,r19,r2
10000600:	1126b03a 	or	r19,r2,r4
10000604:	9882002c 	andhi	r2,r19,2048
10000608:	10000426 	beq	r2,zero,1000061c <__mulsf3+0x2e4>
1000060c:	9804d07a 	srli	r2,r19,1
10000610:	9900004c 	andi	r4,r19,1
10000614:	3821883a 	mov	r16,r7
10000618:	1126b03a 	or	r19,r2,r4
1000061c:	80c01fc4 	addi	r3,r16,127
10000620:	00c0210e 	bge	zero,r3,100006a8 <__mulsf3+0x370>
10000624:	988001cc 	andi	r2,r19,7
10000628:	10000426 	beq	r2,zero,1000063c <__mulsf3+0x304>
1000062c:	988003cc 	andi	r2,r19,15
10000630:	01000104 	movi	r4,4
10000634:	11000126 	beq	r2,r4,1000063c <__mulsf3+0x304>
10000638:	9927883a 	add	r19,r19,r4
1000063c:	9882002c 	andhi	r2,r19,2048
10000640:	10000426 	beq	r2,zero,10000654 <__mulsf3+0x31c>
10000644:	00be0034 	movhi	r2,63488
10000648:	10bfffc4 	addi	r2,r2,-1
1000064c:	80c02004 	addi	r3,r16,128
10000650:	98a6703a 	and	r19,r19,r2
10000654:	00803f84 	movi	r2,254
10000658:	10ffa916 	blt	r2,r3,10000500 <__mulsf3+0x1c8>
1000065c:	980891ba 	slli	r4,r19,6
10000660:	a829883a 	mov	r20,r21
10000664:	2008d27a 	srli	r4,r4,9
10000668:	003f8606 	br	10000484 <__mulsf3+0x14c>
1000066c:	9080102c 	andhi	r2,r18,64
10000670:	10000826 	beq	r2,zero,10000694 <__mulsf3+0x35c>
10000674:	9880102c 	andhi	r2,r19,64
10000678:	1000061e 	bne	r2,zero,10000694 <__mulsf3+0x35c>
1000067c:	00802034 	movhi	r2,128
10000680:	99001034 	orhi	r4,r19,64
10000684:	10bfffc4 	addi	r2,r2,-1
10000688:	b029883a 	mov	r20,r22
1000068c:	2088703a 	and	r4,r4,r2
10000690:	003fba06 	br	1000057c <__mulsf3+0x244>
10000694:	00802034 	movhi	r2,128
10000698:	91001034 	orhi	r4,r18,64
1000069c:	10bfffc4 	addi	r2,r2,-1
100006a0:	2088703a 	and	r4,r4,r2
100006a4:	003fb506 	br	1000057c <__mulsf3+0x244>
100006a8:	00800044 	movi	r2,1
100006ac:	10c7c83a 	sub	r3,r2,r3
100006b0:	008006c4 	movi	r2,27
100006b4:	10ff7016 	blt	r2,r3,10000478 <__mulsf3+0x140>
100006b8:	00800804 	movi	r2,32
100006bc:	10c5c83a 	sub	r2,r2,r3
100006c0:	9884983a 	sll	r2,r19,r2
100006c4:	98c6d83a 	srl	r3,r19,r3
100006c8:	1004c03a 	cmpne	r2,r2,zero
100006cc:	1884b03a 	or	r2,r3,r2
100006d0:	10c001cc 	andi	r3,r2,7
100006d4:	18000426 	beq	r3,zero,100006e8 <__mulsf3+0x3b0>
100006d8:	10c003cc 	andi	r3,r2,15
100006dc:	01000104 	movi	r4,4
100006e0:	19000126 	beq	r3,r4,100006e8 <__mulsf3+0x3b0>
100006e4:	1105883a 	add	r2,r2,r4
100006e8:	10c1002c 	andhi	r3,r2,1024
100006ec:	18000626 	beq	r3,zero,10000708 <__mulsf3+0x3d0>
100006f0:	a829883a 	mov	r20,r21
100006f4:	00c00044 	movi	r3,1
100006f8:	0009883a 	mov	r4,zero
100006fc:	003f6106 	br	10000484 <__mulsf3+0x14c>
10000700:	3821883a 	mov	r16,r7
10000704:	003fc506 	br	1000061c <__mulsf3+0x2e4>
10000708:	100491ba 	slli	r2,r2,6
1000070c:	a829883a 	mov	r20,r21
10000710:	0007883a 	mov	r3,zero
10000714:	1008d27a 	srli	r4,r2,9
10000718:	003f5a06 	br	10000484 <__mulsf3+0x14c>
1000071c:	00802034 	movhi	r2,128
10000720:	99001034 	orhi	r4,r19,64
10000724:	10bfffc4 	addi	r2,r2,-1
10000728:	a829883a 	mov	r20,r21
1000072c:	2088703a 	and	r4,r4,r2
10000730:	003f9206 	br	1000057c <__mulsf3+0x244>

10000734 <__subsf3>:
10000734:	defffc04 	addi	sp,sp,-16
10000738:	280cd5fa 	srli	r6,r5,23
1000073c:	dc000015 	stw	r16,0(sp)
10000740:	01c02034 	movhi	r7,128
10000744:	2020d5fa 	srli	r16,r4,23
10000748:	39ffffc4 	addi	r7,r7,-1
1000074c:	3906703a 	and	r3,r7,r4
10000750:	dc400115 	stw	r17,4(sp)
10000754:	394e703a 	and	r7,r7,r5
10000758:	2022d7fa 	srli	r17,r4,31
1000075c:	dfc00315 	stw	ra,12(sp)
10000760:	dc800215 	stw	r18,8(sp)
10000764:	31803fcc 	andi	r6,r6,255
10000768:	01003fc4 	movi	r4,255
1000076c:	84003fcc 	andi	r16,r16,255
10000770:	180690fa 	slli	r3,r3,3
10000774:	2804d7fa 	srli	r2,r5,31
10000778:	380e90fa 	slli	r7,r7,3
1000077c:	31006d26 	beq	r6,r4,10000934 <__subsf3+0x200>
10000780:	1080005c 	xori	r2,r2,1
10000784:	8189c83a 	sub	r4,r16,r6
10000788:	14404f26 	beq	r2,r17,100008c8 <__subsf3+0x194>
1000078c:	0100770e 	bge	zero,r4,1000096c <__subsf3+0x238>
10000790:	30001e1e 	bne	r6,zero,1000080c <__subsf3+0xd8>
10000794:	38006a1e 	bne	r7,zero,10000940 <__subsf3+0x20c>
10000798:	188001cc 	andi	r2,r3,7
1000079c:	10000426 	beq	r2,zero,100007b0 <__subsf3+0x7c>
100007a0:	188003cc 	andi	r2,r3,15
100007a4:	01000104 	movi	r4,4
100007a8:	11000126 	beq	r2,r4,100007b0 <__subsf3+0x7c>
100007ac:	1907883a 	add	r3,r3,r4
100007b0:	1881002c 	andhi	r2,r3,1024
100007b4:	10003926 	beq	r2,zero,1000089c <__subsf3+0x168>
100007b8:	84000044 	addi	r16,r16,1
100007bc:	00803fc4 	movi	r2,255
100007c0:	80807526 	beq	r16,r2,10000998 <__subsf3+0x264>
100007c4:	180691ba 	slli	r3,r3,6
100007c8:	8880004c 	andi	r2,r17,1
100007cc:	180ad27a 	srli	r5,r3,9
100007d0:	84003fcc 	andi	r16,r16,255
100007d4:	800695fa 	slli	r3,r16,23
100007d8:	10803fcc 	andi	r2,r2,255
100007dc:	01002034 	movhi	r4,128
100007e0:	213fffc4 	addi	r4,r4,-1
100007e4:	100497fa 	slli	r2,r2,31
100007e8:	2920703a 	and	r16,r5,r4
100007ec:	80e0b03a 	or	r16,r16,r3
100007f0:	8084b03a 	or	r2,r16,r2
100007f4:	dfc00317 	ldw	ra,12(sp)
100007f8:	dc800217 	ldw	r18,8(sp)
100007fc:	dc400117 	ldw	r17,4(sp)
10000800:	dc000017 	ldw	r16,0(sp)
10000804:	dec00404 	addi	sp,sp,16
10000808:	f800283a 	ret
1000080c:	00803fc4 	movi	r2,255
10000810:	80bfe126 	beq	r16,r2,10000798 <__subsf3+0x64>
10000814:	39c10034 	orhi	r7,r7,1024
10000818:	008006c4 	movi	r2,27
1000081c:	11007416 	blt	r2,r4,100009f0 <__subsf3+0x2bc>
10000820:	00800804 	movi	r2,32
10000824:	1105c83a 	sub	r2,r2,r4
10000828:	3884983a 	sll	r2,r7,r2
1000082c:	390ed83a 	srl	r7,r7,r4
10000830:	1008c03a 	cmpne	r4,r2,zero
10000834:	390eb03a 	or	r7,r7,r4
10000838:	19c7c83a 	sub	r3,r3,r7
1000083c:	1881002c 	andhi	r2,r3,1024
10000840:	10001426 	beq	r2,zero,10000894 <__subsf3+0x160>
10000844:	04810034 	movhi	r18,1024
10000848:	94bfffc4 	addi	r18,r18,-1
1000084c:	1ca4703a 	and	r18,r3,r18
10000850:	9009883a 	mov	r4,r18
10000854:	0000dac0 	call	10000dac <__clzsi2>
10000858:	10bffec4 	addi	r2,r2,-5
1000085c:	90a4983a 	sll	r18,r18,r2
10000860:	14005116 	blt	r2,r16,100009a8 <__subsf3+0x274>
10000864:	1405c83a 	sub	r2,r2,r16
10000868:	10c00044 	addi	r3,r2,1
1000086c:	00800804 	movi	r2,32
10000870:	10c5c83a 	sub	r2,r2,r3
10000874:	9084983a 	sll	r2,r18,r2
10000878:	90e4d83a 	srl	r18,r18,r3
1000087c:	0021883a 	mov	r16,zero
10000880:	1006c03a 	cmpne	r3,r2,zero
10000884:	90c6b03a 	or	r3,r18,r3
10000888:	003fc306 	br	10000798 <__subsf3+0x64>
1000088c:	2000e026 	beq	r4,zero,10000c10 <__subsf3+0x4dc>
10000890:	2007883a 	mov	r3,r4
10000894:	188001cc 	andi	r2,r3,7
10000898:	103fc11e 	bne	r2,zero,100007a0 <__subsf3+0x6c>
1000089c:	180ad0fa 	srli	r5,r3,3
100008a0:	00c03fc4 	movi	r3,255
100008a4:	8880004c 	andi	r2,r17,1
100008a8:	80c0031e 	bne	r16,r3,100008b8 <__subsf3+0x184>
100008ac:	28006d26 	beq	r5,zero,10000a64 <__subsf3+0x330>
100008b0:	29401034 	orhi	r5,r5,64
100008b4:	043fffc4 	movi	r16,-1
100008b8:	00c02034 	movhi	r3,128
100008bc:	18ffffc4 	addi	r3,r3,-1
100008c0:	28ca703a 	and	r5,r5,r3
100008c4:	003fc206 	br	100007d0 <__subsf3+0x9c>
100008c8:	01003c0e 	bge	zero,r4,100009bc <__subsf3+0x288>
100008cc:	30002126 	beq	r6,zero,10000954 <__subsf3+0x220>
100008d0:	01403fc4 	movi	r5,255
100008d4:	817fb026 	beq	r16,r5,10000798 <__subsf3+0x64>
100008d8:	39c10034 	orhi	r7,r7,1024
100008dc:	014006c4 	movi	r5,27
100008e0:	29007416 	blt	r5,r4,10000ab4 <__subsf3+0x380>
100008e4:	01400804 	movi	r5,32
100008e8:	290bc83a 	sub	r5,r5,r4
100008ec:	394a983a 	sll	r5,r7,r5
100008f0:	390ed83a 	srl	r7,r7,r4
100008f4:	2808c03a 	cmpne	r4,r5,zero
100008f8:	390eb03a 	or	r7,r7,r4
100008fc:	19c7883a 	add	r3,r3,r7
10000900:	1901002c 	andhi	r4,r3,1024
10000904:	20003826 	beq	r4,zero,100009e8 <__subsf3+0x2b4>
10000908:	84000044 	addi	r16,r16,1
1000090c:	01003fc4 	movi	r4,255
10000910:	81005426 	beq	r16,r4,10000a64 <__subsf3+0x330>
10000914:	1023883a 	mov	r17,r2
10000918:	00bf0034 	movhi	r2,64512
1000091c:	10bfffc4 	addi	r2,r2,-1
10000920:	1900004c 	andi	r4,r3,1
10000924:	1886703a 	and	r3,r3,r2
10000928:	1806d07a 	srli	r3,r3,1
1000092c:	1906b03a 	or	r3,r3,r4
10000930:	003f9906 	br	10000798 <__subsf3+0x64>
10000934:	383f9226 	beq	r7,zero,10000780 <__subsf3+0x4c>
10000938:	10803fcc 	andi	r2,r2,255
1000093c:	003f9106 	br	10000784 <__subsf3+0x50>
10000940:	213fffc4 	addi	r4,r4,-1
10000944:	203fbc26 	beq	r4,zero,10000838 <__subsf3+0x104>
10000948:	00803fc4 	movi	r2,255
1000094c:	80bfb21e 	bne	r16,r2,10000818 <__subsf3+0xe4>
10000950:	003f9106 	br	10000798 <__subsf3+0x64>
10000954:	383f9026 	beq	r7,zero,10000798 <__subsf3+0x64>
10000958:	213fffc4 	addi	r4,r4,-1
1000095c:	203fe726 	beq	r4,zero,100008fc <__subsf3+0x1c8>
10000960:	01403fc4 	movi	r5,255
10000964:	817fdd1e 	bne	r16,r5,100008dc <__subsf3+0x1a8>
10000968:	003f8b06 	br	10000798 <__subsf3+0x64>
1000096c:	2000221e 	bne	r4,zero,100009f8 <__subsf3+0x2c4>
10000970:	81000044 	addi	r4,r16,1
10000974:	21003fcc 	andi	r4,r4,255
10000978:	01400044 	movi	r5,1
1000097c:	2900470e 	bge	r5,r4,10000a9c <__subsf3+0x368>
10000980:	19e5c83a 	sub	r18,r3,r7
10000984:	9141002c 	andhi	r5,r18,1024
10000988:	28002d26 	beq	r5,zero,10000a40 <__subsf3+0x30c>
1000098c:	38e5c83a 	sub	r18,r7,r3
10000990:	1023883a 	mov	r17,r2
10000994:	003fae06 	br	10000850 <__subsf3+0x11c>
10000998:	8880004c 	andi	r2,r17,1
1000099c:	043fffc4 	movi	r16,-1
100009a0:	000b883a 	mov	r5,zero
100009a4:	003f8a06 	br	100007d0 <__subsf3+0x9c>
100009a8:	00ff0034 	movhi	r3,64512
100009ac:	18ffffc4 	addi	r3,r3,-1
100009b0:	80a1c83a 	sub	r16,r16,r2
100009b4:	90c6703a 	and	r3,r18,r3
100009b8:	003f7706 	br	10000798 <__subsf3+0x64>
100009bc:	2000431e 	bne	r4,zero,10000acc <__subsf3+0x398>
100009c0:	81000044 	addi	r4,r16,1
100009c4:	21803fcc 	andi	r6,r4,255
100009c8:	01400044 	movi	r5,1
100009cc:	2980280e 	bge	r5,r6,10000a70 <__subsf3+0x33c>
100009d0:	01403fc4 	movi	r5,255
100009d4:	21402326 	beq	r4,r5,10000a64 <__subsf3+0x330>
100009d8:	19c7883a 	add	r3,r3,r7
100009dc:	1806d07a 	srli	r3,r3,1
100009e0:	2021883a 	mov	r16,r4
100009e4:	003f6c06 	br	10000798 <__subsf3+0x64>
100009e8:	1023883a 	mov	r17,r2
100009ec:	003fa906 	br	10000894 <__subsf3+0x160>
100009f0:	01c00044 	movi	r7,1
100009f4:	003f9006 	br	10000838 <__subsf3+0x104>
100009f8:	8000151e 	bne	r16,zero,10000a50 <__subsf3+0x31c>
100009fc:	18002f26 	beq	r3,zero,10000abc <__subsf3+0x388>
10000a00:	0108303a 	nor	r4,zero,r4
10000a04:	20000a26 	beq	r4,zero,10000a30 <__subsf3+0x2fc>
10000a08:	01403fc4 	movi	r5,255
10000a0c:	31402b26 	beq	r6,r5,10000abc <__subsf3+0x388>
10000a10:	014006c4 	movi	r5,27
10000a14:	29006e16 	blt	r5,r4,10000bd0 <__subsf3+0x49c>
10000a18:	01400804 	movi	r5,32
10000a1c:	290bc83a 	sub	r5,r5,r4
10000a20:	194a983a 	sll	r5,r3,r5
10000a24:	1908d83a 	srl	r4,r3,r4
10000a28:	2806c03a 	cmpne	r3,r5,zero
10000a2c:	20c6b03a 	or	r3,r4,r3
10000a30:	38c7c83a 	sub	r3,r7,r3
10000a34:	3021883a 	mov	r16,r6
10000a38:	1023883a 	mov	r17,r2
10000a3c:	003f7f06 	br	1000083c <__subsf3+0x108>
10000a40:	903f831e 	bne	r18,zero,10000850 <__subsf3+0x11c>
10000a44:	0005883a 	mov	r2,zero
10000a48:	0021883a 	mov	r16,zero
10000a4c:	003f9a06 	br	100008b8 <__subsf3+0x184>
10000a50:	01403fc4 	movi	r5,255
10000a54:	31401926 	beq	r6,r5,10000abc <__subsf3+0x388>
10000a58:	0109c83a 	sub	r4,zero,r4
10000a5c:	18c10034 	orhi	r3,r3,1024
10000a60:	003feb06 	br	10000a10 <__subsf3+0x2dc>
10000a64:	043fffc4 	movi	r16,-1
10000a68:	000b883a 	mov	r5,zero
10000a6c:	003f5806 	br	100007d0 <__subsf3+0x9c>
10000a70:	8000481e 	bne	r16,zero,10000b94 <__subsf3+0x460>
10000a74:	18006226 	beq	r3,zero,10000c00 <__subsf3+0x4cc>
10000a78:	383f4726 	beq	r7,zero,10000798 <__subsf3+0x64>
10000a7c:	19c7883a 	add	r3,r3,r7
10000a80:	1881002c 	andhi	r2,r3,1024
10000a84:	103f8326 	beq	r2,zero,10000894 <__subsf3+0x160>
10000a88:	00bf0034 	movhi	r2,64512
10000a8c:	10bfffc4 	addi	r2,r2,-1
10000a90:	2821883a 	mov	r16,r5
10000a94:	1886703a 	and	r3,r3,r2
10000a98:	003f3f06 	br	10000798 <__subsf3+0x64>
10000a9c:	80001c1e 	bne	r16,zero,10000b10 <__subsf3+0x3dc>
10000aa0:	1800261e 	bne	r3,zero,10000b3c <__subsf3+0x408>
10000aa4:	38004c26 	beq	r7,zero,10000bd8 <__subsf3+0x4a4>
10000aa8:	3807883a 	mov	r3,r7
10000aac:	1023883a 	mov	r17,r2
10000ab0:	003f3906 	br	10000798 <__subsf3+0x64>
10000ab4:	01c00044 	movi	r7,1
10000ab8:	003f9006 	br	100008fc <__subsf3+0x1c8>
10000abc:	3807883a 	mov	r3,r7
10000ac0:	3021883a 	mov	r16,r6
10000ac4:	1023883a 	mov	r17,r2
10000ac8:	003f3306 	br	10000798 <__subsf3+0x64>
10000acc:	8000161e 	bne	r16,zero,10000b28 <__subsf3+0x3f4>
10000ad0:	18002d26 	beq	r3,zero,10000b88 <__subsf3+0x454>
10000ad4:	0108303a 	nor	r4,zero,r4
10000ad8:	20000a26 	beq	r4,zero,10000b04 <__subsf3+0x3d0>
10000adc:	01403fc4 	movi	r5,255
10000ae0:	31402926 	beq	r6,r5,10000b88 <__subsf3+0x454>
10000ae4:	014006c4 	movi	r5,27
10000ae8:	29004716 	blt	r5,r4,10000c08 <__subsf3+0x4d4>
10000aec:	01400804 	movi	r5,32
10000af0:	290bc83a 	sub	r5,r5,r4
10000af4:	194a983a 	sll	r5,r3,r5
10000af8:	1908d83a 	srl	r4,r3,r4
10000afc:	2806c03a 	cmpne	r3,r5,zero
10000b00:	20c6b03a 	or	r3,r4,r3
10000b04:	19c7883a 	add	r3,r3,r7
10000b08:	3021883a 	mov	r16,r6
10000b0c:	003f7c06 	br	10000900 <__subsf3+0x1cc>
10000b10:	1800111e 	bne	r3,zero,10000b58 <__subsf3+0x424>
10000b14:	38003326 	beq	r7,zero,10000be4 <__subsf3+0x4b0>
10000b18:	3807883a 	mov	r3,r7
10000b1c:	1023883a 	mov	r17,r2
10000b20:	04003fc4 	movi	r16,255
10000b24:	003f1c06 	br	10000798 <__subsf3+0x64>
10000b28:	01403fc4 	movi	r5,255
10000b2c:	31401626 	beq	r6,r5,10000b88 <__subsf3+0x454>
10000b30:	0109c83a 	sub	r4,zero,r4
10000b34:	18c10034 	orhi	r3,r3,1024
10000b38:	003fea06 	br	10000ae4 <__subsf3+0x3b0>
10000b3c:	383f1626 	beq	r7,zero,10000798 <__subsf3+0x64>
10000b40:	19c9c83a 	sub	r4,r3,r7
10000b44:	2141002c 	andhi	r5,r4,1024
10000b48:	283f5026 	beq	r5,zero,1000088c <__subsf3+0x158>
10000b4c:	38c7c83a 	sub	r3,r7,r3
10000b50:	1023883a 	mov	r17,r2
10000b54:	003f1006 	br	10000798 <__subsf3+0x64>
10000b58:	38001b26 	beq	r7,zero,10000bc8 <__subsf3+0x494>
10000b5c:	1806d0fa 	srli	r3,r3,3
10000b60:	1900102c 	andhi	r4,r3,64
10000b64:	20000526 	beq	r4,zero,10000b7c <__subsf3+0x448>
10000b68:	380ed0fa 	srli	r7,r7,3
10000b6c:	3900102c 	andhi	r4,r7,64
10000b70:	2000021e 	bne	r4,zero,10000b7c <__subsf3+0x448>
10000b74:	3807883a 	mov	r3,r7
10000b78:	1023883a 	mov	r17,r2
10000b7c:	180690fa 	slli	r3,r3,3
10000b80:	04003fc4 	movi	r16,255
10000b84:	003f0406 	br	10000798 <__subsf3+0x64>
10000b88:	3807883a 	mov	r3,r7
10000b8c:	3021883a 	mov	r16,r6
10000b90:	003f0106 	br	10000798 <__subsf3+0x64>
10000b94:	18001726 	beq	r3,zero,10000bf4 <__subsf3+0x4c0>
10000b98:	38000b26 	beq	r7,zero,10000bc8 <__subsf3+0x494>
10000b9c:	1806d0fa 	srli	r3,r3,3
10000ba0:	1900102c 	andhi	r4,r3,64
10000ba4:	20000426 	beq	r4,zero,10000bb8 <__subsf3+0x484>
10000ba8:	380ed0fa 	srli	r7,r7,3
10000bac:	3900102c 	andhi	r4,r7,64
10000bb0:	2000011e 	bne	r4,zero,10000bb8 <__subsf3+0x484>
10000bb4:	3807883a 	mov	r3,r7
10000bb8:	180690fa 	slli	r3,r3,3
10000bbc:	1023883a 	mov	r17,r2
10000bc0:	04003fc4 	movi	r16,255
10000bc4:	003ef406 	br	10000798 <__subsf3+0x64>
10000bc8:	04003fc4 	movi	r16,255
10000bcc:	003ef206 	br	10000798 <__subsf3+0x64>
10000bd0:	00c00044 	movi	r3,1
10000bd4:	003f9606 	br	10000a30 <__subsf3+0x2fc>
10000bd8:	000b883a 	mov	r5,zero
10000bdc:	0005883a 	mov	r2,zero
10000be0:	003f3506 	br	100008b8 <__subsf3+0x184>
10000be4:	01402034 	movhi	r5,128
10000be8:	297fffc4 	addi	r5,r5,-1
10000bec:	0005883a 	mov	r2,zero
10000bf0:	003f2f06 	br	100008b0 <__subsf3+0x17c>
10000bf4:	3807883a 	mov	r3,r7
10000bf8:	04003fc4 	movi	r16,255
10000bfc:	003ee606 	br	10000798 <__subsf3+0x64>
10000c00:	3807883a 	mov	r3,r7
10000c04:	003ee406 	br	10000798 <__subsf3+0x64>
10000c08:	00c00044 	movi	r3,1
10000c0c:	003fbd06 	br	10000b04 <__subsf3+0x3d0>
10000c10:	0005883a 	mov	r2,zero
10000c14:	003f2806 	br	100008b8 <__subsf3+0x184>

10000c18 <__fixsfsi>:
10000c18:	200ad5fa 	srli	r5,r4,23
10000c1c:	00c02034 	movhi	r3,128
10000c20:	18ffffc4 	addi	r3,r3,-1
10000c24:	29403fcc 	andi	r5,r5,255
10000c28:	00801f84 	movi	r2,126
10000c2c:	1906703a 	and	r3,r3,r4
10000c30:	2008d7fa 	srli	r4,r4,31
10000c34:	11400e0e 	bge	r2,r5,10000c70 <__fixsfsi+0x58>
10000c38:	00802744 	movi	r2,157
10000c3c:	11400816 	blt	r2,r5,10000c60 <__fixsfsi+0x48>
10000c40:	00802544 	movi	r2,149
10000c44:	18c02034 	orhi	r3,r3,128
10000c48:	11400b0e 	bge	r2,r5,10000c78 <__fixsfsi+0x60>
10000c4c:	28bfda84 	addi	r2,r5,-150
10000c50:	1884983a 	sll	r2,r3,r2
10000c54:	20000726 	beq	r4,zero,10000c74 <__fixsfsi+0x5c>
10000c58:	0085c83a 	sub	r2,zero,r2
10000c5c:	f800283a 	ret
10000c60:	00a00034 	movhi	r2,32768
10000c64:	10bfffc4 	addi	r2,r2,-1
10000c68:	2085883a 	add	r2,r4,r2
10000c6c:	f800283a 	ret
10000c70:	0005883a 	mov	r2,zero
10000c74:	f800283a 	ret
10000c78:	00802584 	movi	r2,150
10000c7c:	1145c83a 	sub	r2,r2,r5
10000c80:	1884d83a 	srl	r2,r3,r2
10000c84:	003ff306 	br	10000c54 <__fixsfsi+0x3c>

10000c88 <__floatsisf>:
10000c88:	defffd04 	addi	sp,sp,-12
10000c8c:	dfc00215 	stw	ra,8(sp)
10000c90:	dc400115 	stw	r17,4(sp)
10000c94:	dc000015 	stw	r16,0(sp)
10000c98:	20003526 	beq	r4,zero,10000d70 <__floatsisf+0xe8>
10000c9c:	2021883a 	mov	r16,r4
10000ca0:	2022d7fa 	srli	r17,r4,31
10000ca4:	20003616 	blt	r4,zero,10000d80 <__floatsisf+0xf8>
10000ca8:	8009883a 	mov	r4,r16
10000cac:	0000dac0 	call	10000dac <__clzsi2>
10000cb0:	00c02784 	movi	r3,158
10000cb4:	1887c83a 	sub	r3,r3,r2
10000cb8:	01002584 	movi	r4,150
10000cbc:	20c01416 	blt	r4,r3,10000d10 <__floatsisf+0x88>
10000cc0:	20c9c83a 	sub	r4,r4,r3
10000cc4:	8120983a 	sll	r16,r16,r4
10000cc8:	00802034 	movhi	r2,128
10000ccc:	10bfffc4 	addi	r2,r2,-1
10000cd0:	8809883a 	mov	r4,r17
10000cd4:	80a0703a 	and	r16,r16,r2
10000cd8:	18803fcc 	andi	r2,r3,255
10000cdc:	100695fa 	slli	r3,r2,23
10000ce0:	20803fcc 	andi	r2,r4,255
10000ce4:	100897fa 	slli	r4,r2,31
10000ce8:	00802034 	movhi	r2,128
10000cec:	10bfffc4 	addi	r2,r2,-1
10000cf0:	8084703a 	and	r2,r16,r2
10000cf4:	10c4b03a 	or	r2,r2,r3
10000cf8:	1104b03a 	or	r2,r2,r4
10000cfc:	dfc00217 	ldw	ra,8(sp)
10000d00:	dc400117 	ldw	r17,4(sp)
10000d04:	dc000017 	ldw	r16,0(sp)
10000d08:	dec00304 	addi	sp,sp,12
10000d0c:	f800283a 	ret
10000d10:	01002644 	movi	r4,153
10000d14:	20c01c16 	blt	r4,r3,10000d88 <__floatsisf+0x100>
10000d18:	20c9c83a 	sub	r4,r4,r3
10000d1c:	8120983a 	sll	r16,r16,r4
10000d20:	013f0034 	movhi	r4,64512
10000d24:	213fffc4 	addi	r4,r4,-1
10000d28:	814001cc 	andi	r5,r16,7
10000d2c:	8108703a 	and	r4,r16,r4
10000d30:	28000426 	beq	r5,zero,10000d44 <__floatsisf+0xbc>
10000d34:	840003cc 	andi	r16,r16,15
10000d38:	01400104 	movi	r5,4
10000d3c:	81400126 	beq	r16,r5,10000d44 <__floatsisf+0xbc>
10000d40:	2149883a 	add	r4,r4,r5
10000d44:	2141002c 	andhi	r5,r4,1024
10000d48:	28000526 	beq	r5,zero,10000d60 <__floatsisf+0xd8>
10000d4c:	00c027c4 	movi	r3,159
10000d50:	1887c83a 	sub	r3,r3,r2
10000d54:	00bf0034 	movhi	r2,64512
10000d58:	10bfffc4 	addi	r2,r2,-1
10000d5c:	2088703a 	and	r4,r4,r2
10000d60:	202091ba 	slli	r16,r4,6
10000d64:	8809883a 	mov	r4,r17
10000d68:	8020d27a 	srli	r16,r16,9
10000d6c:	003fda06 	br	10000cd8 <__floatsisf+0x50>
10000d70:	0009883a 	mov	r4,zero
10000d74:	0007883a 	mov	r3,zero
10000d78:	0021883a 	mov	r16,zero
10000d7c:	003fd606 	br	10000cd8 <__floatsisf+0x50>
10000d80:	0121c83a 	sub	r16,zero,r4
10000d84:	003fc806 	br	10000ca8 <__floatsisf+0x20>
10000d88:	01002e44 	movi	r4,185
10000d8c:	20c9c83a 	sub	r4,r4,r3
10000d90:	01400144 	movi	r5,5
10000d94:	8108983a 	sll	r4,r16,r4
10000d98:	288bc83a 	sub	r5,r5,r2
10000d9c:	8160d83a 	srl	r16,r16,r5
10000da0:	2008c03a 	cmpne	r4,r4,zero
10000da4:	8120b03a 	or	r16,r16,r4
10000da8:	003fdd06 	br	10000d20 <__floatsisf+0x98>

10000dac <__clzsi2>:
10000dac:	00bfffd4 	movui	r2,65535
10000db0:	11000536 	bltu	r2,r4,10000dc8 <__clzsi2+0x1c>
10000db4:	00803fc4 	movi	r2,255
10000db8:	11000f36 	bltu	r2,r4,10000df8 <__clzsi2+0x4c>
10000dbc:	00800804 	movi	r2,32
10000dc0:	0007883a 	mov	r3,zero
10000dc4:	00000506 	br	10000ddc <__clzsi2+0x30>
10000dc8:	00804034 	movhi	r2,256
10000dcc:	10bfffc4 	addi	r2,r2,-1
10000dd0:	11000c2e 	bgeu	r2,r4,10000e04 <__clzsi2+0x58>
10000dd4:	00800204 	movi	r2,8
10000dd8:	00c00604 	movi	r3,24
10000ddc:	20c8d83a 	srl	r4,r4,r3
10000de0:	00c40734 	movhi	r3,4124
10000de4:	18cf5ac4 	addi	r3,r3,15723
10000de8:	1909883a 	add	r4,r3,r4
10000dec:	20c00003 	ldbu	r3,0(r4)
10000df0:	10c5c83a 	sub	r2,r2,r3
10000df4:	f800283a 	ret
10000df8:	00800604 	movi	r2,24
10000dfc:	00c00204 	movi	r3,8
10000e00:	003ff606 	br	10000ddc <__clzsi2+0x30>
10000e04:	00800404 	movi	r2,16
10000e08:	1007883a 	mov	r3,r2
10000e0c:	003ff306 	br	10000ddc <__clzsi2+0x30>

10000e10 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10000e10:	deffff04 	addi	sp,sp,-4
10000e14:	01040734 	movhi	r4,4124
10000e18:	01440734 	movhi	r5,4124
10000e1c:	dfc00015 	stw	ra,0(sp)
10000e20:	210fba04 	addi	r4,r4,16104
10000e24:	29500f04 	addi	r5,r5,16444

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
10000e28:	2140061e 	bne	r4,r5,10000e44 <alt_load+0x34>
10000e2c:	01040034 	movhi	r4,4096
10000e30:	01440034 	movhi	r5,4096
10000e34:	21000804 	addi	r4,r4,32
10000e38:	29400804 	addi	r5,r5,32
10000e3c:	2140121e 	bne	r4,r5,10000e88 <alt_load+0x78>
10000e40:	00000b06 	br	10000e70 <alt_load+0x60>
10000e44:	00c40734 	movhi	r3,4124
10000e48:	18d00f04 	addi	r3,r3,16444
10000e4c:	1907c83a 	sub	r3,r3,r4
10000e50:	0005883a 	mov	r2,zero
  {
    while( to != end )
10000e54:	10fff526 	beq	r2,r3,10000e2c <alt_load+0x1c>
    {
      *to++ = *from++;
10000e58:	114f883a 	add	r7,r2,r5
10000e5c:	39c00017 	ldw	r7,0(r7)
10000e60:	110d883a 	add	r6,r2,r4
10000e64:	10800104 	addi	r2,r2,4
10000e68:	31c00015 	stw	r7,0(r6)
10000e6c:	003ff906 	br	10000e54 <alt_load+0x44>
10000e70:	01040034 	movhi	r4,4096
10000e74:	01440034 	movhi	r5,4096
10000e78:	21074504 	addi	r4,r4,7444
10000e7c:	29474504 	addi	r5,r5,7444

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
10000e80:	2140101e 	bne	r4,r5,10000ec4 <alt_load+0xb4>
10000e84:	00000b06 	br	10000eb4 <alt_load+0xa4>
10000e88:	00c40034 	movhi	r3,4096
10000e8c:	18c00804 	addi	r3,r3,32
10000e90:	1907c83a 	sub	r3,r3,r4
10000e94:	0005883a 	mov	r2,zero
  {
    while( to != end )
10000e98:	10fff526 	beq	r2,r3,10000e70 <alt_load+0x60>
    {
      *to++ = *from++;
10000e9c:	114f883a 	add	r7,r2,r5
10000ea0:	39c00017 	ldw	r7,0(r7)
10000ea4:	110d883a 	add	r6,r2,r4
10000ea8:	10800104 	addi	r2,r2,4
10000eac:	31c00015 	stw	r7,0(r6)
10000eb0:	003ff906 	br	10000e98 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10000eb4:	0001b440 	call	10001b44 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
10000eb8:	dfc00017 	ldw	ra,0(sp)
10000ebc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
10000ec0:	0001c441 	jmpi	10001c44 <alt_icache_flush_all>
10000ec4:	00c40734 	movhi	r3,4124
10000ec8:	18cfba04 	addi	r3,r3,16104
10000ecc:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
10000ed0:	0005883a 	mov	r2,zero
  {
    while( to != end )
10000ed4:	18bff726 	beq	r3,r2,10000eb4 <alt_load+0xa4>
    {
      *to++ = *from++;
10000ed8:	114f883a 	add	r7,r2,r5
10000edc:	39c00017 	ldw	r7,0(r7)
10000ee0:	110d883a 	add	r6,r2,r4
10000ee4:	10800104 	addi	r2,r2,4
10000ee8:	31c00015 	stw	r7,0(r6)
10000eec:	003ff906 	br	10000ed4 <alt_load+0xc4>

10000ef0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10000ef0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10000ef4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10000ef8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10000efc:	0000f540 	call	10000f54 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10000f00:	0000f740 	call	10000f74 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
10000f04:	d1a05c17 	ldw	r6,-32400(gp)
10000f08:	d1605d17 	ldw	r5,-32396(gp)
10000f0c:	d1205e17 	ldw	r4,-32392(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
10000f10:	dfc00017 	ldw	ra,0(sp)
10000f14:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
10000f18:	000006c1 	jmpi	1000006c <main>

10000f1c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
10000f1c:	defffe04 	addi	sp,sp,-8
10000f20:	dc000015 	stw	r16,0(sp)
10000f24:	dfc00115 	stw	ra,4(sp)
10000f28:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
10000f2c:	0001cf80 	call	10001cf8 <strlen>
10000f30:	01040734 	movhi	r4,4124
10000f34:	000f883a 	mov	r7,zero
10000f38:	100d883a 	mov	r6,r2
10000f3c:	800b883a 	mov	r5,r16
10000f40:	21100804 	addi	r4,r4,16416
#else
    return fputs(str, stdout);
#endif
#endif
}
10000f44:	dfc00117 	ldw	ra,4(sp)
10000f48:	dc000017 	ldw	r16,0(sp)
10000f4c:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
10000f50:	00011201 	jmpi	10001120 <altera_avalon_jtag_uart_write>

10000f54 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10000f54:	deffff04 	addi	sp,sp,-4
10000f58:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( PROCESSOR, processor);
10000f5c:	0001c500 	call	10001c50 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10000f60:	00800044 	movi	r2,1
10000f64:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10000f68:	dfc00017 	ldw	ra,0(sp)
10000f6c:	dec00104 	addi	sp,sp,4
10000f70:	f800283a 	ret

10000f74 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA_0, video_character_buffer_with_dma_0);
10000f74:	00840734 	movhi	r2,4124
10000f78:	108fe004 	addi	r2,r2,16256
10000f7c:	10c00a17 	ldw	r3,40(r2)
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10000f80:	deffff04 	addi	sp,sp,-4
10000f84:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA_0, video_character_buffer_with_dma_0);
10000f88:	18c00117 	ldw	r3,4(r3)
10000f8c:	01401004 	movi	r5,64
10000f90:	193fffcc 	andi	r4,r3,65535
10000f94:	1806d43a 	srli	r3,r3,16
10000f98:	11000c15 	stw	r4,48(r2)
10000f9c:	10c00d15 	stw	r3,52(r2)
10000fa0:	29000436 	bltu	r5,r4,10000fb4 <alt_sys_init+0x40>
10000fa4:	01000fc4 	movi	r4,63
10000fa8:	11000f15 	stw	r4,60(r2)
10000fac:	01000184 	movi	r4,6
10000fb0:	11001015 	stw	r4,64(r2)
10000fb4:	01000804 	movi	r4,32
10000fb8:	20c00236 	bltu	r4,r3,10000fc4 <alt_sys_init+0x50>
10000fbc:	00c007c4 	movi	r3,31
10000fc0:	10c01115 	stw	r3,68(r2)
10000fc4:	01040734 	movhi	r4,4124
10000fc8:	210fe004 	addi	r4,r4,16256
10000fcc:	00011540 	call	10001154 <alt_up_char_buffer_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10000fd0:	01040734 	movhi	r4,4124
10000fd4:	d1600204 	addi	r5,gp,-32760
10000fd8:	210fe004 	addi	r4,r4,16256
10000fdc:	0001b640 	call	10001b64 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( DMA_BUFFER, dma_buffer);
10000fe0:	00840734 	movhi	r2,4124
10000fe4:	108fcb04 	addi	r2,r2,16172
10000fe8:	10c00a17 	ldw	r3,40(r2)
10000fec:	01c00044 	movi	r7,1
10000ff0:	19000017 	ldw	r4,0(r3)
10000ff4:	11000b15 	stw	r4,44(r2)
10000ff8:	19000117 	ldw	r4,4(r3)
10000ffc:	11000c15 	stw	r4,48(r2)
10001000:	19000204 	addi	r4,r3,8
10001004:	2140000b 	ldhu	r5,0(r4)
10001008:	18c00304 	addi	r3,r3,12
1000100c:	11400f15 	stw	r5,60(r2)
10001010:	21000017 	ldw	r4,0(r4)
10001014:	2008d43a 	srli	r4,r4,16
10001018:	11001015 	stw	r4,64(r2)
1000101c:	19000017 	ldw	r4,0(r3)
10001020:	2009d07a 	srai	r4,r4,1
10001024:	2100004c 	andi	r4,r4,1
10001028:	11000d15 	stw	r4,52(r2)
1000102c:	19000017 	ldw	r4,0(r3)
10001030:	2009d13a 	srai	r4,r4,4
10001034:	210003cc 	andi	r4,r4,15
10001038:	11000e15 	stw	r4,56(r2)
1000103c:	19400017 	ldw	r5,0(r3)
10001040:	2807d43a 	srai	r3,r5,16
10001044:	280cd63a 	srli	r6,r5,24
10001048:	21c0021e 	bne	r4,r7,10001054 <alt_sys_init+0xe0>
1000104c:	10001115 	stw	zero,68(r2)
10001050:	00000506 	br	10001068 <alt_sys_init+0xf4>
10001054:	01400084 	movi	r5,2
10001058:	2140021e 	bne	r4,r5,10001064 <alt_sys_init+0xf0>
1000105c:	11c01115 	stw	r7,68(r2)
10001060:	00000106 	br	10001068 <alt_sys_init+0xf4>
10001064:	11401115 	stw	r5,68(r2)
10001068:	18c03fcc 	andi	r3,r3,255
1000106c:	01400804 	movi	r5,32
10001070:	28cfc83a 	sub	r7,r5,r3
10001074:	013fffc4 	movi	r4,-1
10001078:	21ced83a 	srl	r7,r4,r7
1000107c:	298bc83a 	sub	r5,r5,r6
10001080:	2148d83a 	srl	r4,r4,r5
10001084:	11c01215 	stw	r7,72(r2)
10001088:	11c01117 	ldw	r7,68(r2)
1000108c:	11001415 	stw	r4,80(r2)
10001090:	01040734 	movhi	r4,4124
10001094:	38c7883a 	add	r3,r7,r3
10001098:	d1600204 	addi	r5,gp,-32760
1000109c:	210fcb04 	addi	r4,r4,16172
100010a0:	10c01315 	stw	r3,76(r2)
100010a4:	0001b640 	call	10001b64 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( RGB_RESAMPLER, rgb_resampler);
100010a8:	01040734 	movhi	r4,4124
100010ac:	210fba04 	addi	r4,r4,16104
100010b0:	20800a17 	ldw	r2,40(r4)
100010b4:	d1600204 	addi	r5,gp,-32760
100010b8:	10c00017 	ldw	r3,0(r2)
100010bc:	18c003cc 	andi	r3,r3,15
100010c0:	20c00b15 	stw	r3,44(r4)
100010c4:	10c00017 	ldw	r3,0(r2)
100010c8:	1807d13a 	srai	r3,r3,4
100010cc:	18c0004c 	andi	r3,r3,1
100010d0:	20c00c15 	stw	r3,48(r4)
100010d4:	10c00017 	ldw	r3,0(r2)
100010d8:	1807d17a 	srai	r3,r3,5
100010dc:	18c0004c 	andi	r3,r3,1
100010e0:	20c00d15 	stw	r3,52(r4)
100010e4:	10c00017 	ldw	r3,0(r2)
100010e8:	1807d43a 	srai	r3,r3,16
100010ec:	18c003cc 	andi	r3,r3,15
100010f0:	20c00e15 	stw	r3,56(r4)
100010f4:	10c00017 	ldw	r3,0(r2)
100010f8:	1807d53a 	srai	r3,r3,20
100010fc:	18c0004c 	andi	r3,r3,1
10001100:	20c00f15 	stw	r3,60(r4)
10001104:	10800017 	ldw	r2,0(r2)
10001108:	1005d57a 	srai	r2,r2,21
1000110c:	1080004c 	andi	r2,r2,1
10001110:	20801015 	stw	r2,64(r4)
}
10001114:	dfc00017 	ldw	ra,0(sp)
10001118:	dec00104 	addi	sp,sp,4
1000111c:	0001b641 	jmpi	10001b64 <alt_dev_llist_insert>

10001120 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
10001120:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10001124:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
10001128:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
1000112c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
10001130:	2980072e 	bgeu	r5,r6,10001150 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
10001134:	38c00037 	ldwio	r3,0(r7)
10001138:	18ffffec 	andhi	r3,r3,65535
1000113c:	183ffc26 	beq	r3,zero,10001130 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
10001140:	28c00007 	ldb	r3,0(r5)
10001144:	20c00035 	stwio	r3,0(r4)
10001148:	29400044 	addi	r5,r5,1
1000114c:	003ff806 	br	10001130 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
10001150:	f800283a 	ret

10001154 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
10001154:	defffe04 	addi	sp,sp,-8
10001158:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
1000115c:	24000217 	ldw	r16,8(r4)
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
10001160:	dfc00115 	stw	ra,4(sp)
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
10001164:	80800007 	ldb	r2,0(r16)
10001168:	10000926 	beq	r2,zero,10001190 <alt_up_char_buffer_init+0x3c>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
1000116c:	01440734 	movhi	r5,4124
10001170:	294fb004 	addi	r5,r5,16064
10001174:	8009883a 	mov	r4,r16
10001178:	0001cc00 	call	10001cc0 <strcmp>
1000117c:	1000021e 	bne	r2,zero,10001188 <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
10001180:	80000005 	stb	zero,0(r16)
			break;
10001184:	00000206 	br	10001190 <alt_up_char_buffer_init+0x3c>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
10001188:	84000044 	addi	r16,r16,1
1000118c:	003ff506 	br	10001164 <alt_up_char_buffer_init+0x10>
			break;
		}
	}
	
	return;
}
10001190:	dfc00117 	ldw	ra,4(sp)
10001194:	dc000017 	ldw	r16,0(sp)
10001198:	dec00204 	addi	sp,sp,8
1000119c:	f800283a 	ret

100011a0 <alt_up_char_buffer_open_dev>:
alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
100011a0:	d1600204 	addi	r5,gp,-32760
100011a4:	0001bd01 	jmpi	10001bd0 <alt_find_dev>

100011a8 <alt_up_char_buffer_draw>:
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
100011a8:	20800c17 	ldw	r2,48(r4)
100011ac:	3080102e 	bgeu	r6,r2,100011f0 <alt_up_char_buffer_draw+0x48>
100011b0:	20800d17 	ldw	r2,52(r4)
100011b4:	38800e2e 	bgeu	r7,r2,100011f0 <alt_up_char_buffer_draw+0x48>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
100011b8:	20800f17 	ldw	r2,60(r4)
100011bc:	3084703a 	and	r2,r6,r2
100011c0:	21800e17 	ldw	r6,56(r4)
100011c4:	1186983a 	sll	r3,r2,r6
100011c8:	20801117 	ldw	r2,68(r4)
100011cc:	21801017 	ldw	r6,64(r4)
100011d0:	388e703a 	and	r7,r7,r2
100011d4:	398e983a 	sll	r7,r7,r6
100011d8:	20800b17 	ldw	r2,44(r4)
100011dc:	19ccb03a 	or	r6,r3,r7
100011e0:	308d883a 	add	r6,r6,r2
100011e4:	31400025 	stbio	r5,0(r6)

	return 0;
100011e8:	0005883a 	mov	r2,zero
100011ec:	f800283a 	ret

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
100011f0:	00bfffc4 	movi	r2,-1
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);

	return 0;
}
100011f4:	f800283a 	ret

100011f8 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
100011f8:	20800c17 	ldw	r2,48(r4)
100011fc:	30800236 	bltu	r6,r2,10001208 <alt_up_char_buffer_string+0x10>
		return -1;
10001200:	00bfffc4 	movi	r2,-1
10001204:	f800283a 	ret
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
10001208:	20800d17 	ldw	r2,52(r4)
1000120c:	38bffc2e 	bgeu	r7,r2,10001200 <alt_up_char_buffer_string+0x8>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
10001210:	20801017 	ldw	r2,64(r4)
10001214:	388e983a 	sll	r7,r7,r2
10001218:	398f883a 	add	r7,r7,r6
1000121c:	394fc83a 	sub	r7,r7,r5

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
10001220:	314dc83a 	sub	r6,r6,r5
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
10001224:	28c00003 	ldbu	r3,0(r5)
10001228:	29d3883a 	add	r9,r5,r7
1000122c:	1a003fcc 	andi	r8,r3,255
10001230:	4200201c 	xori	r8,r8,128
10001234:	423fe004 	addi	r8,r8,-128
10001238:	40000826 	beq	r8,zero,1000125c <alt_up_char_buffer_string+0x64>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
1000123c:	20800b17 	ldw	r2,44(r4)
10001240:	4885883a 	add	r2,r9,r2
10001244:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
10001248:	20800c17 	ldw	r2,48(r4)
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
1000124c:	29400044 	addi	r5,r5,1
		if (++x >= char_buffer->x_resolution)
10001250:	2987883a 	add	r3,r5,r6
10001254:	18bff336 	bltu	r3,r2,10001224 <alt_up_char_buffer_string+0x2c>
10001258:	003fe906 	br	10001200 <alt_up_char_buffer_string+0x8>
			return -1;
		++offset;
	}
	return 0;
1000125c:	0005883a 	mov	r2,zero
}
10001260:	f800283a 	ret

10001264 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
10001264:	20800a17 	ldw	r2,40(r4)
10001268:	00c00044 	movi	r3,1
1000126c:	10c000a5 	stbio	r3,2(r2)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
10001270:	20800a17 	ldw	r2,40(r4)
10001274:	108000a3 	ldbuio	r2,2(r2)
10001278:	1080004c 	andi	r2,r2,1
1000127c:	103ffc1e 	bne	r2,zero,10001270 <alt_up_char_buffer_clear+0xc>
	return 0;
}
10001280:	f800283a 	ret

10001284 <alt_up_pixel_buffer_dma_open_dev>:
alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
10001284:	d1600204 	addi	r5,gp,-32760
10001288:	0001bd01 	jmpi	10001bd0 <alt_find_dev>

1000128c <alt_up_pixel_buffer_dma_draw>:
int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
1000128c:	20800f17 	ldw	r2,60(r4)
10001290:	3080222e 	bgeu	r6,r2,1000131c <alt_up_pixel_buffer_dma_draw+0x90>
10001294:	20c01017 	ldw	r3,64(r4)
10001298:	38c0202e 	bgeu	r7,r3,1000131c <alt_up_pixel_buffer_dma_draw+0x90>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
1000129c:	22800d17 	ldw	r10,52(r4)
100012a0:	22001217 	ldw	r8,72(r4)
100012a4:	22401117 	ldw	r9,68(r4)
100012a8:	20c01417 	ldw	r3,80(r4)
100012ac:	5000071e 	bne	r10,zero,100012cc <alt_up_pixel_buffer_dma_draw+0x40>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
100012b0:	3210703a 	and	r8,r6,r8
100012b4:	21801317 	ldw	r6,76(r4)
100012b8:	38c6703a 	and	r3,r7,r3
100012bc:	4250983a 	sll	r8,r8,r9
100012c0:	1986983a 	sll	r3,r3,r6
100012c4:	40cd883a 	add	r6,r8,r3
100012c8:	00000506 	br	100012e0 <alt_up_pixel_buffer_dma_draw+0x54>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
100012cc:	38c6703a 	and	r3,r7,r3
100012d0:	1885383a 	mul	r2,r3,r2
100012d4:	3210703a 	and	r8,r6,r8
100012d8:	4085883a 	add	r2,r8,r2
100012dc:	124c983a 	sll	r6,r2,r9
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
100012e0:	20c00e17 	ldw	r3,56(r4)
100012e4:	20800c17 	ldw	r2,48(r4)
100012e8:	01000044 	movi	r4,1
100012ec:	1900031e 	bne	r3,r4,100012fc <alt_up_pixel_buffer_dma_draw+0x70>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
100012f0:	308d883a 	add	r6,r6,r2
100012f4:	31400025 	stbio	r5,0(r6)
100012f8:	00000606 	br	10001314 <alt_up_pixel_buffer_dma_draw+0x88>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
100012fc:	01000084 	movi	r4,2
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
10001300:	308d883a 	add	r6,r6,r2
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10001304:	1900021e 	bne	r3,r4,10001310 <alt_up_pixel_buffer_dma_draw+0x84>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
10001308:	3140002d 	sthio	r5,0(r6)
1000130c:	00000106 	br	10001314 <alt_up_pixel_buffer_dma_draw+0x88>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
10001310:	31400035 	stwio	r5,0(r6)
	}

	return 0;
10001314:	0005883a 	mov	r2,zero
10001318:	f800283a 	ret
/* This function draws a pixel to the back buffer.
 */
{
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
		return -1;
1000131c:	00bfffc4 	movi	r2,-1
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	}

	return 0;
}
10001320:	f800283a 	ret

10001324 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
10001324:	20800a17 	ldw	r2,40(r4)
10001328:	11400135 	stwio	r5,4(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
1000132c:	20800a17 	ldw	r2,40(r4)
10001330:	10800137 	ldwio	r2,4(r2)
10001334:	20800c15 	stw	r2,48(r4)
	return 0;
}
10001338:	0005883a 	mov	r2,zero
1000133c:	f800283a 	ret

10001340 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
10001340:	20800c17 	ldw	r2,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
10001344:	20c00a17 	ldw	r3,40(r4)
10001348:	01400044 	movi	r5,1
1000134c:	19400035 	stwio	r5,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
10001350:	20c00b17 	ldw	r3,44(r4)
	pixel_buffer->buffer_start_address = temp;
10001354:	20800b15 	stw	r2,44(r4)
	return 0;
}
10001358:	0005883a 	mov	r2,zero
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
1000135c:	20c00c15 	stw	r3,48(r4)
	pixel_buffer->buffer_start_address = temp;
	return 0;
}
10001360:	f800283a 	ret

10001364 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
10001364:	20800a17 	ldw	r2,40(r4)
10001368:	10800337 	ldwio	r2,12(r2)
}
1000136c:	1080004c 	andi	r2,r2,1
10001370:	f800283a 	ret

10001374 <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
10001374:	00800044 	movi	r2,1
10001378:	2880021e 	bne	r5,r2,10001384 <alt_up_pixel_buffer_dma_clear_screen+0x10>
		addr = pixel_buffer->back_buffer_start_address;
1000137c:	20c00c17 	ldw	r3,48(r4)
10001380:	00000106 	br	10001388 <alt_up_pixel_buffer_dma_clear_screen+0x14>
	else
		addr = pixel_buffer->buffer_start_address;
10001384:	20c00b17 	ldw	r3,44(r4)
	limit_x = pixel_buffer->x_resolution;
10001388:	20800f17 	ldw	r2,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
1000138c:	21800e17 	ldw	r6,56(r4)
10001390:	01400084 	movi	r5,2
10001394:	1085883a 	add	r2,r2,r2
10001398:	31400126 	beq	r6,r5,100013a0 <alt_up_pixel_buffer_dma_clear_screen+0x2c>
		limit_x = limit_x << 1;
	} else {
		limit_x = limit_x << 2;
1000139c:	1085883a 	add	r2,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
100013a0:	21800d17 	ldw	r6,52(r4)
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		limit_x = limit_x << 1;
	} else {
		limit_x = limit_x << 2;
	}	
	limit_y = pixel_buffer->y_resolution;
100013a4:	21401017 	ldw	r5,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
100013a8:	30000e1e 	bne	r6,zero,100013e4 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
100013ac:	21c01317 	ldw	r7,76(r4)
100013b0:	01000044 	movi	r4,1
100013b4:	21ce983a 	sll	r7,r4,r7
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
100013b8:	31400926 	beq	r6,r5,100013e0 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
100013bc:	1809883a 	mov	r4,r3
		{
			for (x = 0; x < limit_x; x = x + 4)
100013c0:	20d1c83a 	sub	r8,r4,r3
100013c4:	4080032e 	bgeu	r8,r2,100013d4 <alt_up_pixel_buffer_dma_clear_screen+0x60>
			{
				IOWR_32DIRECT(addr, x, 0);
100013c8:	20000035 	stwio	zero,0(r4)
100013cc:	21000104 	addi	r4,r4,4
100013d0:	003ffb06 	br	100013c0 <alt_up_pixel_buffer_dma_clear_screen+0x4c>
			}
			addr = addr + (1 << offset_y);
100013d4:	19c7883a 	add	r3,r3,r7
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
100013d8:	31800044 	addi	r6,r6,1
100013dc:	003ff606 	br	100013b8 <alt_up_pixel_buffer_dma_clear_screen+0x44>
100013e0:	f800283a 	ret
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
100013e4:	1145383a 	mul	r2,r2,r5

		for (x = 0; x < limit_y; x = x + 4)
100013e8:	1809883a 	mov	r4,r3
100013ec:	20cbc83a 	sub	r5,r4,r3
100013f0:	2880032e 	bgeu	r5,r2,10001400 <alt_up_pixel_buffer_dma_clear_screen+0x8c>
		{
			IOWR_32DIRECT(addr, x, 0);
100013f4:	20000035 	stwio	zero,0(r4)
100013f8:	21000104 	addi	r4,r4,4
100013fc:	003ffb06 	br	100013ec <alt_up_pixel_buffer_dma_clear_screen+0x78>
10001400:	f800283a 	ret

10001404 <alt_up_pixel_buffer_dma_draw_box>:
	}
}

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
10001404:	d8800017 	ldw	r2,0(sp)
10001408:	db000117 	ldw	r12,4(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
1000140c:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
10001410:	2815883a 	mov	r10,r5
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
10001414:	3011883a 	mov	r8,r6
	register unsigned int b_y = y1;
10001418:	1017883a 	mov	r11,r2
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
1000141c:	3940022e 	bgeu	r7,r5,10001428 <alt_up_pixel_buffer_dma_draw_box+0x24>
10001420:	3815883a 	mov	r10,r7
10001424:	280f883a 	mov	r7,r5
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
10001428:	1180022e 	bgeu	r2,r6,10001434 <alt_up_pixel_buffer_dma_draw_box+0x30>
1000142c:	1011883a 	mov	r8,r2
10001430:	3017883a 	mov	r11,r6
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
10001434:	5240642e 	bgeu	r10,r9,100015c8 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
10001438:	20801017 	ldw	r2,64(r4)
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
1000143c:	4080622e 	bgeu	r8,r2,100015c8 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
10001440:	3a400136 	bltu	r7,r9,10001448 <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		r_x = limit_x - 1;
10001444:	49ffffc4 	addi	r7,r9,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
10001448:	58800136 	bltu	r11,r2,10001450 <alt_up_pixel_buffer_dma_draw_box+0x4c>
	{
		b_y = limit_y - 1;
1000144c:	12ffffc4 	addi	r11,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
10001450:	d8800217 	ldw	r2,8(sp)
10001454:	01400044 	movi	r5,1
10001458:	1140021e 	bne	r2,r5,10001464 <alt_up_pixel_buffer_dma_draw_box+0x60>
		addr = pixel_buffer->back_buffer_start_address;
1000145c:	20c00c17 	ldw	r3,48(r4)
10001460:	00000106 	br	10001468 <alt_up_pixel_buffer_dma_draw_box+0x64>
	else
		addr = pixel_buffer->buffer_start_address;
10001464:	20c00b17 	ldw	r3,44(r4)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
10001468:	20800d17 	ldw	r2,52(r4)
1000146c:	21800e17 	ldw	r6,56(r4)
10001470:	1000291e 	bne	r2,zero,10001518 <alt_up_pixel_buffer_dma_draw_box+0x114>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
10001474:	21001317 	ldw	r4,76(r4)
		addr = addr + (t_y << offset_y);
10001478:	4104983a 	sll	r2,r8,r4
1000147c:	10c5883a 	add	r2,r2,r3
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10001480:	31400b1e 	bne	r6,r5,100014b0 <alt_up_pixel_buffer_dma_draw_box+0xac>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
10001484:	290a983a 	sll	r5,r5,r4
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
10001488:	5a004f36 	bltu	r11,r8,100015c8 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
1000148c:	5007883a 	mov	r3,r10
			{
				for (x = l_x; x <= r_x; x++)
10001490:	38c00436 	bltu	r7,r3,100014a4 <alt_up_pixel_buffer_dma_draw_box+0xa0>
				{
					IOWR_8DIRECT(addr, x, local_color);
10001494:	10c9883a 	add	r4,r2,r3
10001498:	23000025 	stbio	r12,0(r4)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
1000149c:	18c00044 	addi	r3,r3,1
100014a0:	003ffb06 	br	10001490 <alt_up_pixel_buffer_dma_draw_box+0x8c>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
100014a4:	1145883a 	add	r2,r2,r5
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
100014a8:	42000044 	addi	r8,r8,1
100014ac:	003ff606 	br	10001488 <alt_up_pixel_buffer_dma_draw_box+0x84>
100014b0:	00c00044 	movi	r3,1
100014b4:	190a983a 	sll	r5,r3,r4
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
100014b8:	00c00084 	movi	r3,2
100014bc:	30c00d1e 	bne	r6,r3,100014f4 <alt_up_pixel_buffer_dma_draw_box+0xf0>
			for (y = t_y; y <= b_y; y++)
100014c0:	5a004136 	bltu	r11,r8,100015c8 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
100014c4:	5007883a 	mov	r3,r10
			{
				for (x = l_x; x <= r_x; x++)
100014c8:	38c00536 	bltu	r7,r3,100014e0 <alt_up_pixel_buffer_dma_draw_box+0xdc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
100014cc:	18c9883a 	add	r4,r3,r3
100014d0:	2089883a 	add	r4,r4,r2
100014d4:	2300002d 	sthio	r12,0(r4)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
100014d8:	18c00044 	addi	r3,r3,1
100014dc:	003ffa06 	br	100014c8 <alt_up_pixel_buffer_dma_draw_box+0xc4>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
100014e0:	1145883a 	add	r2,r2,r5
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
100014e4:	42000044 	addi	r8,r8,1
100014e8:	003ff506 	br	100014c0 <alt_up_pixel_buffer_dma_draw_box+0xbc>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
100014ec:	1145883a 	add	r2,r2,r5
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
100014f0:	42000044 	addi	r8,r8,1
100014f4:	5a003436 	bltu	r11,r8,100015c8 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
100014f8:	5009883a 	mov	r4,r10
			{
				for (x = l_x; x <= r_x; x++)
100014fc:	393ffb36 	bltu	r7,r4,100014ec <alt_up_pixel_buffer_dma_draw_box+0xe8>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
10001500:	2107883a 	add	r3,r4,r4
10001504:	18c7883a 	add	r3,r3,r3
10001508:	1887883a 	add	r3,r3,r2
1000150c:	1b000035 	stwio	r12,0(r3)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10001510:	21000044 	addi	r4,r4,1
10001514:	003ff906 	br	100014fc <alt_up_pixel_buffer_dma_draw_box+0xf8>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10001518:	31400c1e 	bne	r6,r5,1000154c <alt_up_pixel_buffer_dma_draw_box+0x148>
			addr = addr + t_y * limit_x;
1000151c:	4245383a 	mul	r2,r8,r9
10001520:	10c5883a 	add	r2,r2,r3
			for (y = t_y; y <= b_y; y++)
10001524:	5a002836 	bltu	r11,r8,100015c8 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
10001528:	5007883a 	mov	r3,r10
			{
				for (x = l_x; x <= r_x; x++)
1000152c:	38c00436 	bltu	r7,r3,10001540 <alt_up_pixel_buffer_dma_draw_box+0x13c>
				{
					IOWR_8DIRECT(addr, x, local_color);
10001530:	10c9883a 	add	r4,r2,r3
10001534:	23000025 	stbio	r12,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10001538:	18c00044 	addi	r3,r3,1
1000153c:	003ffb06 	br	1000152c <alt_up_pixel_buffer_dma_draw_box+0x128>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
10001540:	1245883a 	add	r2,r2,r9
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10001544:	42000044 	addi	r8,r8,1
10001548:	003ff606 	br	10001524 <alt_up_pixel_buffer_dma_draw_box+0x120>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
1000154c:	00800084 	movi	r2,2
10001550:	4a53883a 	add	r9,r9,r9
10001554:	30800d1e 	bne	r6,r2,1000158c <alt_up_pixel_buffer_dma_draw_box+0x188>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
10001558:	4245383a 	mul	r2,r8,r9
1000155c:	10c5883a 	add	r2,r2,r3
			for (y = t_y; y <= b_y; y++)
10001560:	5a001936 	bltu	r11,r8,100015c8 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
10001564:	5007883a 	mov	r3,r10
			{
				for (x = l_x; x <= r_x; x++)
10001568:	38c00536 	bltu	r7,r3,10001580 <alt_up_pixel_buffer_dma_draw_box+0x17c>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
1000156c:	18c9883a 	add	r4,r3,r3
10001570:	2089883a 	add	r4,r4,r2
10001574:	2300002d 	sthio	r12,0(r4)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10001578:	18c00044 	addi	r3,r3,1
1000157c:	003ffa06 	br	10001568 <alt_up_pixel_buffer_dma_draw_box+0x164>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
10001580:	1245883a 	add	r2,r2,r9
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10001584:	42000044 	addi	r8,r8,1
10001588:	003ff506 	br	10001560 <alt_up_pixel_buffer_dma_draw_box+0x15c>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
1000158c:	4a53883a 	add	r9,r9,r9
			addr = addr + t_y * limit_x;
10001590:	4245383a 	mul	r2,r8,r9
10001594:	10c5883a 	add	r2,r2,r3
			for (y = t_y; y <= b_y; y++)
10001598:	5a000b36 	bltu	r11,r8,100015c8 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
1000159c:	5009883a 	mov	r4,r10
			{
				for (x = l_x; x <= r_x; x++)
100015a0:	39000636 	bltu	r7,r4,100015bc <alt_up_pixel_buffer_dma_draw_box+0x1b8>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
100015a4:	2107883a 	add	r3,r4,r4
100015a8:	18c7883a 	add	r3,r3,r3
100015ac:	1887883a 	add	r3,r3,r2
100015b0:	1b000035 	stwio	r12,0(r3)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
100015b4:	21000044 	addi	r4,r4,1
100015b8:	003ff906 	br	100015a0 <alt_up_pixel_buffer_dma_draw_box+0x19c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
100015bc:	1245883a 	add	r2,r2,r9
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
100015c0:	42000044 	addi	r8,r8,1
100015c4:	003ff406 	br	10001598 <alt_up_pixel_buffer_dma_draw_box+0x194>
100015c8:	f800283a 	ret

100015cc <alt_up_pixel_buffer_dma_draw_hline>:
	}
}

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
100015cc:	da400017 	ldw	r9,0(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
100015d0:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
100015d4:	2805883a 	mov	r2,r5
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
100015d8:	3140022e 	bgeu	r6,r5,100015e4 <alt_up_pixel_buffer_dma_draw_hline+0x18>
100015dc:	3005883a 	mov	r2,r6
100015e0:	280d883a 	mov	r6,r5
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
100015e4:	1200472e 	bgeu	r2,r8,10001704 <alt_up_pixel_buffer_dma_draw_hline+0x138>
100015e8:	20c01017 	ldw	r3,64(r4)
100015ec:	38c0452e 	bgeu	r7,r3,10001704 <alt_up_pixel_buffer_dma_draw_hline+0x138>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
100015f0:	32000136 	bltu	r6,r8,100015f8 <alt_up_pixel_buffer_dma_draw_hline+0x2c>
	{
		r_x = limit_x - 1;
100015f4:	41bfffc4 	addi	r6,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
100015f8:	d8c00117 	ldw	r3,4(sp)
100015fc:	02800044 	movi	r10,1
10001600:	1a80021e 	bne	r3,r10,1000160c <alt_up_pixel_buffer_dma_draw_hline+0x40>
		addr = pixel_buffer->back_buffer_start_address;
10001604:	20c00c17 	ldw	r3,48(r4)
10001608:	00000106 	br	10001610 <alt_up_pixel_buffer_dma_draw_hline+0x44>
	else
		addr = pixel_buffer->buffer_start_address;
1000160c:	20c00b17 	ldw	r3,44(r4)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
10001610:	22c00d17 	ldw	r11,52(r4)
10001614:	21400e17 	ldw	r5,56(r4)
10001618:	58001b1e 	bne	r11,zero,10001688 <alt_up_pixel_buffer_dma_draw_hline+0xbc>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
1000161c:	21001317 	ldw	r4,76(r4)
10001620:	390e983a 	sll	r7,r7,r4
10001624:	38c7883a 	add	r3,r7,r3
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10001628:	2a80061e 	bne	r5,r10,10001644 <alt_up_pixel_buffer_dma_draw_hline+0x78>
			for (x = l_x; x <= r_x; x++)
1000162c:	30800436 	bltu	r6,r2,10001640 <alt_up_pixel_buffer_dma_draw_hline+0x74>
			{
				IOWR_8DIRECT(addr, x, local_color);
10001630:	10c9883a 	add	r4,r2,r3
10001634:	22400025 	stbio	r9,0(r4)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
10001638:	10800044 	addi	r2,r2,1
1000163c:	003ffb06 	br	1000162c <alt_up_pixel_buffer_dma_draw_hline+0x60>
10001640:	f800283a 	ret
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10001644:	01000084 	movi	r4,2
10001648:	2900071e 	bne	r5,r4,10001668 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
			for (x = l_x; x <= r_x; x++)
1000164c:	30800536 	bltu	r6,r2,10001664 <alt_up_pixel_buffer_dma_draw_hline+0x98>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
10001650:	1089883a 	add	r4,r2,r2
10001654:	20c9883a 	add	r4,r4,r3
10001658:	2240002d 	sthio	r9,0(r4)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
1000165c:	10800044 	addi	r2,r2,1
10001660:	003ffa06 	br	1000164c <alt_up_pixel_buffer_dma_draw_hline+0x80>
10001664:	f800283a 	ret
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
10001668:	30800636 	bltu	r6,r2,10001684 <alt_up_pixel_buffer_dma_draw_hline+0xb8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
1000166c:	1089883a 	add	r4,r2,r2
10001670:	2109883a 	add	r4,r4,r4
10001674:	20c9883a 	add	r4,r4,r3
10001678:	22400035 	stwio	r9,0(r4)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
1000167c:	10800044 	addi	r2,r2,1
10001680:	003ff906 	br	10001668 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
10001684:	f800283a 	ret
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10001688:	2a80081e 	bne	r5,r10,100016ac <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			addr = addr + line_y * limit_x;
1000168c:	41cf383a 	mul	r7,r8,r7
10001690:	38c7883a 	add	r3,r7,r3
			for (x = l_x; x <= r_x; x++)
10001694:	30800436 	bltu	r6,r2,100016a8 <alt_up_pixel_buffer_dma_draw_hline+0xdc>
			{
				IOWR_8DIRECT(addr, x, local_color);
10001698:	10c9883a 	add	r4,r2,r3
1000169c:	22400025 	stbio	r9,0(r4)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
100016a0:	10800044 	addi	r2,r2,1
100016a4:	003ffb06 	br	10001694 <alt_up_pixel_buffer_dma_draw_hline+0xc8>
100016a8:	f800283a 	ret
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
100016ac:	01000084 	movi	r4,2
100016b0:	4211883a 	add	r8,r8,r8
100016b4:	2900091e 	bne	r5,r4,100016dc <alt_up_pixel_buffer_dma_draw_hline+0x110>
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
100016b8:	41cf383a 	mul	r7,r8,r7
100016bc:	38c7883a 	add	r3,r7,r3
			for (x = l_x; x <= r_x; x++)
100016c0:	30800536 	bltu	r6,r2,100016d8 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
100016c4:	1089883a 	add	r4,r2,r2
100016c8:	20c9883a 	add	r4,r4,r3
100016cc:	2240002d 	sthio	r9,0(r4)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
100016d0:	10800044 	addi	r2,r2,1
100016d4:	003ffa06 	br	100016c0 <alt_up_pixel_buffer_dma_draw_hline+0xf4>
100016d8:	f800283a 	ret
			}
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
100016dc:	4211883a 	add	r8,r8,r8
100016e0:	41cf383a 	mul	r7,r8,r7
100016e4:	38c7883a 	add	r3,r7,r3
			for (x = l_x; x <= r_x; x++)
100016e8:	30800636 	bltu	r6,r2,10001704 <alt_up_pixel_buffer_dma_draw_hline+0x138>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
100016ec:	1089883a 	add	r4,r2,r2
100016f0:	2109883a 	add	r4,r4,r4
100016f4:	20c9883a 	add	r4,r4,r3
100016f8:	22400035 	stwio	r9,0(r4)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
100016fc:	10800044 	addi	r2,r2,1
10001700:	003ff906 	br	100016e8 <alt_up_pixel_buffer_dma_draw_hline+0x11c>
10001704:	f800283a 	ret

10001708 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
10001708:	da800017 	ldw	r10,0(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
1000170c:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
10001710:	3011883a 	mov	r8,r6
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
10001714:	3980022e 	bgeu	r7,r6,10001720 <alt_up_pixel_buffer_dma_draw_vline+0x18>
10001718:	3811883a 	mov	r8,r7
1000171c:	300f883a 	mov	r7,r6
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
10001720:	2a404f2e 	bgeu	r5,r9,10001860 <alt_up_pixel_buffer_dma_draw_vline+0x158>
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
10001724:	20801017 	ldw	r2,64(r4)
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
10001728:	40804d2e 	bgeu	r8,r2,10001860 <alt_up_pixel_buffer_dma_draw_vline+0x158>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
1000172c:	38800136 	bltu	r7,r2,10001734 <alt_up_pixel_buffer_dma_draw_vline+0x2c>
	{
		b_y = limit_y - 1;
10001730:	11ffffc4 	addi	r7,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
10001734:	d8800117 	ldw	r2,4(sp)
10001738:	01800044 	movi	r6,1
1000173c:	1180021e 	bne	r2,r6,10001748 <alt_up_pixel_buffer_dma_draw_vline+0x40>
		addr = pixel_buffer->back_buffer_start_address;
10001740:	20800c17 	ldw	r2,48(r4)
10001744:	00000106 	br	1000174c <alt_up_pixel_buffer_dma_draw_vline+0x44>
	else
		addr = pixel_buffer->buffer_start_address;
10001748:	20800b17 	ldw	r2,44(r4)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
1000174c:	20c00d17 	ldw	r3,52(r4)
10001750:	22c00e17 	ldw	r11,56(r4)
10001754:	1800211e 	bne	r3,zero,100017dc <alt_up_pixel_buffer_dma_draw_vline+0xd4>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
10001758:	21001317 	ldw	r4,76(r4)
		addr = addr + (t_y << offset_y);
1000175c:	4106983a 	sll	r3,r8,r4
10001760:	1887883a 	add	r3,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10001764:	5980081e 	bne	r11,r6,10001788 <alt_up_pixel_buffer_dma_draw_vline+0x80>
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
10001768:	310c983a 	sll	r6,r6,r4
1000176c:	28c5883a 	add	r2,r5,r3
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
10001770:	3a000436 	bltu	r7,r8,10001784 <alt_up_pixel_buffer_dma_draw_vline+0x7c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
10001774:	12800025 	stbio	r10,0(r2)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
10001778:	42000044 	addi	r8,r8,1
1000177c:	1185883a 	add	r2,r2,r6
10001780:	003ffb06 	br	10001770 <alt_up_pixel_buffer_dma_draw_vline+0x68>
10001784:	f800283a 	ret
10001788:	00800044 	movi	r2,1
1000178c:	110c983a 	sll	r6,r2,r4
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10001790:	01000084 	movi	r4,2
10001794:	2945883a 	add	r2,r5,r5
10001798:	59000326 	beq	r11,r4,100017a8 <alt_up_pixel_buffer_dma_draw_vline+0xa0>
1000179c:	1085883a 	add	r2,r2,r2
100017a0:	10c5883a 	add	r2,r2,r3
100017a4:	00000706 	br	100017c4 <alt_up_pixel_buffer_dma_draw_vline+0xbc>
100017a8:	10c5883a 	add	r2,r2,r3
			for (y = t_y; y <= b_y; y++)
100017ac:	3a000436 	bltu	r7,r8,100017c0 <alt_up_pixel_buffer_dma_draw_vline+0xb8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
100017b0:	1280002d 	sthio	r10,0(r2)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
100017b4:	42000044 	addi	r8,r8,1
100017b8:	1185883a 	add	r2,r2,r6
100017bc:	003ffb06 	br	100017ac <alt_up_pixel_buffer_dma_draw_vline+0xa4>
100017c0:	f800283a 	ret
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
100017c4:	3a000436 	bltu	r7,r8,100017d8 <alt_up_pixel_buffer_dma_draw_vline+0xd0>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
100017c8:	12800035 	stwio	r10,0(r2)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
100017cc:	42000044 	addi	r8,r8,1
100017d0:	1185883a 	add	r2,r2,r6
100017d4:	003ffb06 	br	100017c4 <alt_up_pixel_buffer_dma_draw_vline+0xbc>
100017d8:	f800283a 	ret
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
100017dc:	5980091e 	bne	r11,r6,10001804 <alt_up_pixel_buffer_dma_draw_vline+0xfc>
100017e0:	4247383a 	mul	r3,r8,r9
100017e4:	194b883a 	add	r5,r3,r5
100017e8:	2885883a 	add	r2,r5,r2
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
100017ec:	3a000436 	bltu	r7,r8,10001800 <alt_up_pixel_buffer_dma_draw_vline+0xf8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
100017f0:	12800025 	stbio	r10,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
100017f4:	42000044 	addi	r8,r8,1
100017f8:	1245883a 	add	r2,r2,r9
100017fc:	003ffb06 	br	100017ec <alt_up_pixel_buffer_dma_draw_vline+0xe4>
10001800:	f800283a 	ret
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10001804:	00c00084 	movi	r3,2
10001808:	294b883a 	add	r5,r5,r5
1000180c:	4a53883a 	add	r9,r9,r9
10001810:	58c0091e 	bne	r11,r3,10001838 <alt_up_pixel_buffer_dma_draw_vline+0x130>
10001814:	4247383a 	mul	r3,r8,r9
10001818:	194b883a 	add	r5,r3,r5
1000181c:	2885883a 	add	r2,r5,r2
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10001820:	3a000436 	bltu	r7,r8,10001834 <alt_up_pixel_buffer_dma_draw_vline+0x12c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
10001824:	1280002d 	sthio	r10,0(r2)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10001828:	42000044 	addi	r8,r8,1
1000182c:	1245883a 	add	r2,r2,r9
10001830:	003ffb06 	br	10001820 <alt_up_pixel_buffer_dma_draw_vline+0x118>
10001834:	f800283a 	ret
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
10001838:	4a53883a 	add	r9,r9,r9
1000183c:	4247383a 	mul	r3,r8,r9
10001840:	294b883a 	add	r5,r5,r5
10001844:	194b883a 	add	r5,r3,r5
10001848:	2885883a 	add	r2,r5,r2
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
1000184c:	3a000436 	bltu	r7,r8,10001860 <alt_up_pixel_buffer_dma_draw_vline+0x158>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
10001850:	12800035 	stwio	r10,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10001854:	42000044 	addi	r8,r8,1
10001858:	1245883a 	add	r2,r2,r9
1000185c:	003ffb06 	br	1000184c <alt_up_pixel_buffer_dma_draw_vline+0x144>
10001860:	f800283a 	ret

10001864 <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
10001864:	defff604 	addi	sp,sp,-40
10001868:	dc400315 	stw	r17,12(sp)
1000186c:	dc000215 	stw	r16,8(sp)
10001870:	dc400c17 	ldw	r17,48(sp)
10001874:	dc000b17 	ldw	r16,44(sp)
10001878:	dd400715 	stw	r21,28(sp)
1000187c:	dcc00515 	stw	r19,20(sp)
10001880:	dd400a17 	ldw	r21,40(sp)
10001884:	3827883a 	mov	r19,r7
10001888:	dd000615 	stw	r20,24(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
1000188c:	300f883a 	mov	r7,r6
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
10001890:	3029883a 	mov	r20,r6
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
10001894:	dc400115 	stw	r17,4(sp)
10001898:	980d883a 	mov	r6,r19
1000189c:	dc000015 	stw	r16,0(sp)
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
100018a0:	dfc00915 	stw	ra,36(sp)
100018a4:	dd800815 	stw	r22,32(sp)
100018a8:	dc800415 	stw	r18,16(sp)
100018ac:	282d883a 	mov	r22,r5
100018b0:	2025883a 	mov	r18,r4
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
100018b4:	00015cc0 	call	100015cc <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
100018b8:	a80f883a 	mov	r7,r21
100018bc:	980d883a 	mov	r6,r19
100018c0:	b00b883a 	mov	r5,r22
100018c4:	9009883a 	mov	r4,r18
100018c8:	dc400115 	stw	r17,4(sp)
100018cc:	dc000015 	stw	r16,0(sp)
100018d0:	00015cc0 	call	100015cc <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
100018d4:	a80f883a 	mov	r7,r21
100018d8:	a00d883a 	mov	r6,r20
100018dc:	b00b883a 	mov	r5,r22
100018e0:	9009883a 	mov	r4,r18
100018e4:	dc400115 	stw	r17,4(sp)
100018e8:	dc000015 	stw	r16,0(sp)
100018ec:	00017080 	call	10001708 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
100018f0:	a80f883a 	mov	r7,r21
100018f4:	a00d883a 	mov	r6,r20
100018f8:	980b883a 	mov	r5,r19
100018fc:	9009883a 	mov	r4,r18
10001900:	dc400b15 	stw	r17,44(sp)
10001904:	dc000a15 	stw	r16,40(sp)
}
10001908:	dfc00917 	ldw	ra,36(sp)
1000190c:	dd800817 	ldw	r22,32(sp)
10001910:	dd400717 	ldw	r21,28(sp)
10001914:	dd000617 	ldw	r20,24(sp)
10001918:	dcc00517 	ldw	r19,20(sp)
1000191c:	dc800417 	ldw	r18,16(sp)
10001920:	dc400317 	ldw	r17,12(sp)
10001924:	dc000217 	ldw	r16,8(sp)
10001928:	dec00a04 	addi	sp,sp,40
void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
1000192c:	00017081 	jmpi	10001708 <alt_up_pixel_buffer_dma_draw_vline>

10001930 <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
10001930:	d8c00117 	ldw	r3,4(sp)
10001934:	d8800017 	ldw	r2,0(sp)
10001938:	29cb383a 	mul	r5,r5,r7
	if (mode == 0)
1000193c:	1800041e 	bne	r3,zero,10001950 <helper_plot_pixel+0x20>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
10001940:	298d883a 	add	r6,r5,r6
10001944:	310d883a 	add	r6,r6,r4
10001948:	30800025 	stbio	r2,0(r6)
1000194c:	f800283a 	ret
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
10001950:	298d883a 	add	r6,r5,r6
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
10001954:	01c00044 	movi	r7,1
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
10001958:	318d883a 	add	r6,r6,r6
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
1000195c:	19c0031e 	bne	r3,r7,1000196c <helper_plot_pixel+0x3c>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
10001960:	310d883a 	add	r6,r6,r4
10001964:	3080002d 	sthio	r2,0(r6)
10001968:	f800283a 	ret
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
1000196c:	318d883a 	add	r6,r6,r6
10001970:	310d883a 	add	r6,r6,r4
10001974:	30800035 	stwio	r2,0(r6)
10001978:	f800283a 	ret

1000197c <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
1000197c:	defff304 	addi	sp,sp,-52
10001980:	d8800d17 	ldw	r2,52(sp)
10001984:	dcc00615 	stw	r19,24(sp)
10001988:	dc800515 	stw	r18,20(sp)
1000198c:	dc400415 	stw	r17,16(sp)
10001990:	dfc00c15 	stw	ra,48(sp)
10001994:	df000b15 	stw	fp,44(sp)
10001998:	ddc00a15 	stw	r23,40(sp)
1000199c:	dd800915 	stw	r22,36(sp)
100019a0:	dd400815 	stw	r21,32(sp)
100019a4:	dd000715 	stw	r20,28(sp)
100019a8:	dc000315 	stw	r16,12(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
100019ac:	1187c83a 	sub	r3,r2,r6
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
100019b0:	2823883a 	mov	r17,r5
100019b4:	3025883a 	mov	r18,r6
100019b8:	3827883a 	mov	r19,r7
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
100019bc:	1800010e 	bge	r3,zero,100019c4 <alt_up_pixel_buffer_dma_draw_line+0x48>
100019c0:	00c7c83a 	sub	r3,zero,r3
100019c4:	9c4bc83a 	sub	r5,r19,r17
100019c8:	2800010e 	bge	r5,zero,100019d0 <alt_up_pixel_buffer_dma_draw_line+0x54>
100019cc:	014bc83a 	sub	r5,zero,r5
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
100019d0:	25000e17 	ldw	r20,56(r4)
100019d4:	05800044 	movi	r22,1
100019d8:	a5800426 	beq	r20,r22,100019ec <alt_up_pixel_buffer_dma_draw_line+0x70>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
100019dc:	a50000a0 	cmpeqi	r20,r20,2
100019e0:	01800084 	movi	r6,2
100019e4:	3529c83a 	sub	r20,r6,r20
100019e8:	00000106 	br	100019f0 <alt_up_pixel_buffer_dma_draw_line+0x74>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
100019ec:	0029883a 	mov	r20,zero
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
100019f0:	21800d17 	ldw	r6,52(r4)
100019f4:	3000041e 	bne	r6,zero,10001a08 <alt_up_pixel_buffer_dma_draw_line+0x8c>
100019f8:	21801317 	ldw	r6,76(r4)
100019fc:	350dc83a 	sub	r6,r6,r20
10001a00:	b1ac983a 	sll	r22,r22,r6
10001a04:	00000106 	br	10001a0c <alt_up_pixel_buffer_dma_draw_line+0x90>
10001a08:	25800f17 	ldw	r22,60(r4)

	if (backbuffer == 1)
10001a0c:	d9c00f17 	ldw	r7,60(sp)
10001a10:	01800044 	movi	r6,1
10001a14:	3980021e 	bne	r7,r6,10001a20 <alt_up_pixel_buffer_dma_draw_line+0xa4>
		buffer_start = pixel_buffer->back_buffer_start_address;
10001a18:	22000c17 	ldw	r8,48(r4)
10001a1c:	00000106 	br	10001a24 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	else
		buffer_start = pixel_buffer->buffer_start_address;
10001a20:	22000b17 	ldw	r8,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
10001a24:	28c0060e 	bge	r5,r3,10001a40 <alt_up_pixel_buffer_dma_draw_line+0xc4>
10001a28:	9809883a 	mov	r4,r19
		error = x_0;
		x_0 = y_0;
		y_0 = error;
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
10001a2c:	1027883a 	mov	r19,r2
		y_1 = error;
10001a30:	2005883a 	mov	r2,r4
10001a34:	8809883a 	mov	r4,r17

	/* Preprocessing inputs */
	if (steep > 0) {
		// Swap x_0 and y_0
		error = x_0;
		x_0 = y_0;
10001a38:	9023883a 	mov	r17,r18
		y_0 = error;
10001a3c:	2025883a 	mov	r18,r4
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
10001a40:	9c40060e 	bge	r19,r17,10001a5c <alt_up_pixel_buffer_dma_draw_line+0xe0>
10001a44:	9009883a 	mov	r4,r18
		error = x_0;
		x_0 = x_1;
		x_1 = error;
		// Swap y_0 and y_1
		error = y_0;
		y_0 = y_1;
10001a48:	1025883a 	mov	r18,r2
		y_1 = error;
10001a4c:	2005883a 	mov	r2,r4
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
10001a50:	8809883a 	mov	r4,r17
10001a54:	9823883a 	mov	r17,r19
10001a58:	2027883a 	mov	r19,r4
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
10001a5c:	14afc83a 	sub	r23,r2,r18
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
10001a60:	9c79c83a 	sub	fp,r19,r17
	deltay = ABS(y_1 - y_0);
10001a64:	b800010e 	bge	r23,zero,10001a6c <alt_up_pixel_buffer_dma_draw_line+0xf0>
10001a68:	05efc83a 	sub	r23,zero,r23
	error = -(deltax / 2); 
10001a6c:	e020d7fa 	srli	r16,fp,31
10001a70:	8721883a 	add	r16,r16,fp
10001a74:	8021d07a 	srai	r16,r16,1
10001a78:	0421c83a 	sub	r16,zero,r16
	y = y_0;
	if (y_0 < y_1)
10001a7c:	90800216 	blt	r18,r2,10001a88 <alt_up_pixel_buffer_dma_draw_line+0x10c>
		ystep = 1;
	else
		ystep = -1;
10001a80:	057fffc4 	movi	r21,-1
10001a84:	00000106 	br	10001a8c <alt_up_pixel_buffer_dma_draw_line+0x110>
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
	error = -(deltax / 2); 
	y = y_0;
	if (y_0 < y_1)
		ystep = 1;
10001a88:	05400044 	movi	r21,1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
10001a8c:	28c0200e 	bge	r5,r3,10001b10 <alt_up_pixel_buffer_dma_draw_line+0x194>
	{
		for (x=x_0; x <= x_1; x++) {
10001a90:	9c402016 	blt	r19,r17,10001b14 <alt_up_pixel_buffer_dma_draw_line+0x198>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
10001a94:	d8800e17 	ldw	r2,56(sp)
10001a98:	4009883a 	mov	r4,r8
10001a9c:	dd000115 	stw	r20,4(sp)
10001aa0:	d8800015 	stw	r2,0(sp)
10001aa4:	880f883a 	mov	r7,r17
10001aa8:	900d883a 	mov	r6,r18
10001aac:	b00b883a 	mov	r5,r22
10001ab0:	da000215 	stw	r8,8(sp)
			error = error + deltay;
10001ab4:	85e1883a 	add	r16,r16,r23
	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
10001ab8:	00019300 	call	10001930 <helper_plot_pixel>
			error = error + deltay;
			if (error > 0) {
10001abc:	da000217 	ldw	r8,8(sp)
10001ac0:	0400020e 	bge	zero,r16,10001acc <alt_up_pixel_buffer_dma_draw_line+0x150>
				y = y + ystep;
10001ac4:	9565883a 	add	r18,r18,r21
				error = error - deltax;
10001ac8:	8721c83a 	sub	r16,r16,fp

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
10001acc:	8c400044 	addi	r17,r17,1
10001ad0:	003fef06 	br	10001a90 <alt_up_pixel_buffer_dma_draw_line+0x114>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
10001ad4:	d8800e17 	ldw	r2,56(sp)
10001ad8:	4009883a 	mov	r4,r8
10001adc:	dd000115 	stw	r20,4(sp)
10001ae0:	d8800015 	stw	r2,0(sp)
10001ae4:	900f883a 	mov	r7,r18
10001ae8:	880d883a 	mov	r6,r17
10001aec:	b00b883a 	mov	r5,r22
10001af0:	da000215 	stw	r8,8(sp)
			error = error + deltay;
10001af4:	85e1883a 	add	r16,r16,r23
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
10001af8:	00019300 	call	10001930 <helper_plot_pixel>
			error = error + deltay;
			if (error > 0) {
10001afc:	da000217 	ldw	r8,8(sp)
10001b00:	0400020e 	bge	zero,r16,10001b0c <alt_up_pixel_buffer_dma_draw_line+0x190>
				y = y + ystep;
10001b04:	9565883a 	add	r18,r18,r21
				error = error - deltax;
10001b08:	8721c83a 	sub	r16,r16,fp
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
10001b0c:	8c400044 	addi	r17,r17,1
10001b10:	9c7ff00e 	bge	r19,r17,10001ad4 <alt_up_pixel_buffer_dma_draw_line+0x158>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
10001b14:	dfc00c17 	ldw	ra,48(sp)
10001b18:	df000b17 	ldw	fp,44(sp)
10001b1c:	ddc00a17 	ldw	r23,40(sp)
10001b20:	dd800917 	ldw	r22,36(sp)
10001b24:	dd400817 	ldw	r21,32(sp)
10001b28:	dd000717 	ldw	r20,28(sp)
10001b2c:	dcc00617 	ldw	r19,24(sp)
10001b30:	dc800517 	ldw	r18,20(sp)
10001b34:	dc400417 	ldw	r17,16(sp)
10001b38:	dc000317 	ldw	r16,12(sp)
10001b3c:	dec00d04 	addi	sp,sp,52
10001b40:	f800283a 	ret

10001b44 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10001b44:	0005883a 	mov	r2,zero
10001b48:	00c40004 	movi	r3,4096
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
10001b4c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10001b50:	10800804 	addi	r2,r2,32
10001b54:	10fffd1e 	bne	r2,r3,10001b4c <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10001b58:	f800283a 	ret

10001b5c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
10001b5c:	3005883a 	mov	r2,r6
10001b60:	f800283a 	ret

10001b64 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10001b64:	20000226 	beq	r4,zero,10001b70 <alt_dev_llist_insert+0xc>
10001b68:	20800217 	ldw	r2,8(r4)
10001b6c:	1000101e 	bne	r2,zero,10001bb0 <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
10001b70:	d0a00617 	ldw	r2,-32744(gp)
10001b74:	10000926 	beq	r2,zero,10001b9c <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10001b78:	deffff04 	addi	sp,sp,-4
10001b7c:	dfc00015 	stw	ra,0(sp)
10001b80:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
10001b84:	00c00584 	movi	r3,22
10001b88:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
10001b8c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
10001b90:	dfc00017 	ldw	ra,0(sp)
10001b94:	dec00104 	addi	sp,sp,4
10001b98:	f800283a 	ret
10001b9c:	d0a05f04 	addi	r2,gp,-32388
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
10001ba0:	00c00584 	movi	r3,22
10001ba4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
10001ba8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
10001bac:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
10001bb0:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10001bb4:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
10001bb8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
10001bbc:	28800017 	ldw	r2,0(r5)
10001bc0:	11000115 	stw	r4,4(r2)
  list->next           = entry;
10001bc4:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
10001bc8:	0005883a 	mov	r2,zero
10001bcc:	f800283a 	ret

10001bd0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10001bd0:	defffb04 	addi	sp,sp,-20
10001bd4:	dcc00315 	stw	r19,12(sp)
10001bd8:	dc800215 	stw	r18,8(sp)
10001bdc:	dc400115 	stw	r17,4(sp)
10001be0:	dc000015 	stw	r16,0(sp)
10001be4:	dfc00415 	stw	ra,16(sp)
10001be8:	2027883a 	mov	r19,r4
10001bec:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
10001bf0:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
10001bf4:	0001cf80 	call	10001cf8 <strlen>
10001bf8:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10001bfc:	84400726 	beq	r16,r17,10001c1c <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10001c00:	81000217 	ldw	r4,8(r16)
10001c04:	900d883a 	mov	r6,r18
10001c08:	980b883a 	mov	r5,r19
10001c0c:	0001c900 	call	10001c90 <memcmp>
10001c10:	10000426 	beq	r2,zero,10001c24 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
10001c14:	84000017 	ldw	r16,0(r16)
10001c18:	003ff806 	br	10001bfc <alt_find_dev+0x2c>
  }
  
  /* No match found */
  
  return NULL;
10001c1c:	0005883a 	mov	r2,zero
10001c20:	00000106 	br	10001c28 <alt_find_dev+0x58>
10001c24:	8005883a 	mov	r2,r16
}
10001c28:	dfc00417 	ldw	ra,16(sp)
10001c2c:	dcc00317 	ldw	r19,12(sp)
10001c30:	dc800217 	ldw	r18,8(sp)
10001c34:	dc400117 	ldw	r17,4(sp)
10001c38:	dc000017 	ldw	r16,0(sp)
10001c3c:	dec00504 	addi	sp,sp,20
10001c40:	f800283a 	ret

10001c44 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
10001c44:	01440004 	movi	r5,4096
10001c48:	0009883a 	mov	r4,zero
10001c4c:	0001c581 	jmpi	10001c58 <alt_icache_flush>

10001c50 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
10001c50:	000170fa 	wrctl	ienable,zero
10001c54:	f800283a 	ret

10001c58 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
10001c58:	00840004 	movi	r2,4096
10001c5c:	1140012e 	bgeu	r2,r5,10001c64 <alt_icache_flush+0xc>
10001c60:	100b883a 	mov	r5,r2
10001c64:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10001c68:	2005883a 	mov	r2,r4
10001c6c:	1140032e 	bgeu	r2,r5,10001c7c <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
10001c70:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10001c74:	10800804 	addi	r2,r2,32
10001c78:	003ffc06 	br	10001c6c <alt_icache_flush+0x14>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
10001c7c:	210007cc 	andi	r4,r4,31
10001c80:	20000126 	beq	r4,zero,10001c88 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
10001c84:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
10001c88:	0000203a 	flushp
10001c8c:	f800283a 	ret

10001c90 <memcmp>:
10001c90:	218d883a 	add	r6,r4,r6
10001c94:	21800826 	beq	r4,r6,10001cb8 <memcmp+0x28>
10001c98:	20800003 	ldbu	r2,0(r4)
10001c9c:	28c00003 	ldbu	r3,0(r5)
10001ca0:	10c00226 	beq	r2,r3,10001cac <memcmp+0x1c>
10001ca4:	10c5c83a 	sub	r2,r2,r3
10001ca8:	f800283a 	ret
10001cac:	21000044 	addi	r4,r4,1
10001cb0:	29400044 	addi	r5,r5,1
10001cb4:	003ff706 	br	10001c94 <memcmp+0x4>
10001cb8:	0005883a 	mov	r2,zero
10001cbc:	f800283a 	ret

10001cc0 <strcmp>:
10001cc0:	20800003 	ldbu	r2,0(r4)
10001cc4:	10c03fcc 	andi	r3,r2,255
10001cc8:	18c0201c 	xori	r3,r3,128
10001ccc:	18ffe004 	addi	r3,r3,-128
10001cd0:	18000526 	beq	r3,zero,10001ce8 <strcmp+0x28>
10001cd4:	29800007 	ldb	r6,0(r5)
10001cd8:	1980031e 	bne	r3,r6,10001ce8 <strcmp+0x28>
10001cdc:	21000044 	addi	r4,r4,1
10001ce0:	29400044 	addi	r5,r5,1
10001ce4:	003ff606 	br	10001cc0 <strcmp>
10001ce8:	28c00003 	ldbu	r3,0(r5)
10001cec:	10803fcc 	andi	r2,r2,255
10001cf0:	10c5c83a 	sub	r2,r2,r3
10001cf4:	f800283a 	ret

10001cf8 <strlen>:
10001cf8:	2005883a 	mov	r2,r4
10001cfc:	10c00007 	ldb	r3,0(r2)
10001d00:	18000226 	beq	r3,zero,10001d0c <strlen+0x14>
10001d04:	10800044 	addi	r2,r2,1
10001d08:	003ffc06 	br	10001cfc <strlen+0x4>
10001d0c:	1105c83a 	sub	r2,r2,r4
10001d10:	f800283a 	ret
