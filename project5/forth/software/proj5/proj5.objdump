
proj5.elf:     file format elf32-littlenios2
proj5.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000188

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x001c9480 memsz 0x001c9480 flags r-x
    LOAD off    0x001ca4a0 vaddr 0x101c94a0 paddr 0x101c96e8 align 2**12
         filesz 0x00000248 memsz 0x00000248 flags rw-
    LOAD off    0x001ca930 vaddr 0x101c9930 paddr 0x101c9930 align 2**12
         filesz 0x00000000 memsz 0x0000014c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000168  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006f14  10000188  10000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       001c2404  1000709c  1000709c  0000809c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000248  101c94a0  101c96e8  001ca4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000014c  101c9930  101c9930  001ca930  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  101c9a7c  101c9a7c  001ca6e8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  001ca6e8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000810  00000000  00000000  001ca710  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000b0ad  00000000  00000000  001caf20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004016  00000000  00000000  001d5fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000052f5  00000000  00000000  001d9fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000db8  00000000  00000000  001df2d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002a66  00000000  00000000  001e0090  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c69f  00000000  00000000  001e2af6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  001ef198  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000fd0  00000000  00000000  001ef1c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  001f22f6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  001f22f9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  001f2302  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  001f2303  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  001f2304  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  001f2308  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  001f230c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  001f2310  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  001f2314  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  001f2318  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  001f231c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001d  00000000  00000000  001f2327  2**0
                  CONTENTS, READONLY
 29 .jdi          00004c50  00000000  00000000  001f2344  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00071be8  00000000  00000000  001f6f94  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000188 l    d  .text	00000000 .text
1000709c l    d  .rodata	00000000 .rodata
101c94a0 l    d  .rwdata	00000000 .rwdata
101c9930 l    d  .bss	00000000 .bss
101c9a7c l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../proj5_bsp//obj/HAL/src/crt0.o
100001d0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 myfile.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_round.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
101c91cc l     O .rodata	00000108 two_over_pi
101c914c l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
101c9314 l     O .rodata	00000010 init_jk
101c92d4 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100057a8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
101c94a0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
101c9618 l     O .rwdata	00000048 video_character_buffer_with_dma_0
101c95c4 l     O .rwdata	00000054 dma_buffer
101c9580 l     O .rwdata	00000044 rgb_resampler
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
1000630c l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
10006d98 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
101c9978 g     O .bss	00000004 alt_instruction_exception_handler
10005f44 g     F .text	0000002c alt_main
10006944 g     F .text	0000015c alt_up_pixel_buffer_dma_draw_vline
100056f8 g     F .text	00000080 _puts_r
101c997c g     O .bss	00000100 alt_irq
10002558 g     F .text	00000014 fabs
101c96e8 g       *ABS*	00000000 __flash_rwdata_start
10004244 g     F .text	00000088 .hidden __eqdf2
100056ac g     F .text	0000004c printf
10006434 g     F .text	0000006c alt_up_char_buffer_string
100006fc g     F .text	00000100 round
100063e4 g     F .text	00000050 alt_up_char_buffer_draw
10005f70 g     F .text	00000038 alt_putstr
100064c8 g     F .text	00000098 alt_up_pixel_buffer_dma_draw
100042cc g     F .text	000000dc .hidden __gtdf2
10006f80 g     F .text	00000008 altera_nios2_gen2_irq_init
100064c0 g     F .text	00000008 alt_up_pixel_buffer_dma_open_dev
10000000 g     F .entry	0000001c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
101c995c g     O .bss	00000004 errno
1000256c g     F .text	000001ec floor
10000000 g       *ABS*	00000000 __alt_mem_sdram_controller
101c9930 g     O .bss	00000008 shifted_row
101c9964 g     O .bss	00000004 alt_argv
101d16b8 g       *ABS*	00000000 _gp
101c96c8 g     O .rwdata	00000004 jtag
10006560 g     F .text	0000001c alt_up_pixel_buffer_dma_change_back_buffer_address
10000458 g     F .text	00000060 frame_function
101c9660 g     O .rwdata	00000030 alt_fd_list
100008ec g     F .text	0000076c __ieee754_rem_pio2
10006e0c g     F .text	00000074 alt_find_dev
100064a0 g     F .text	00000020 alt_up_char_buffer_clear
10005530 g     F .text	000000dc .hidden __floatsidf
100043a8 g     F .text	000000f4 .hidden __ltdf2
10005778 g     F .text	00000014 puts
10006fc0 g     F .text	00000074 alt_exception_cause_generated_bad_addr
101c9938 g     O .bss	00000008 original_row
100065a0 g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
10005670 g     F .text	0000003c _printf_r
10002ff4 g     F .text	00000064 .hidden __udivsi3
10006808 g     F .text	0000013c alt_up_pixel_buffer_dma_draw_hline
10001058 g     F .text	000004a4 __kernel_cos
10002910 g     F .text	00000074 .hidden __fixunsdfsi
10006f88 g     F .text	00000038 alt_icache_flush
10006b6c g     F .text	0000004c helper_plot_pixel
101c96cc g     O .rwdata	00000004 alt_max_fd
1000228c g     F .text	000002cc __kernel_sin
100030b0 g     F .text	000008ac .hidden __adddf3
100065b0 g     F .text	00000090 alt_up_pixel_buffer_dma_clear_screen
101c96b8 g     O .rwdata	00000004 _global_impure_ptr
101c9a7c g       *ABS*	00000000 __bss_end
10006f18 g     F .text	00000068 alt_iic_isr_register
10006640 g     F .text	000001c8 alt_up_pixel_buffer_dma_draw_box
10005fdc g     F .text	000000b8 alt_tick
10002984 g     F .text	00000578 .hidden __udivdi3
10006f00 g     F .text	00000018 alt_ic_irq_enabled
10005fa8 g     F .text	00000034 alt_alarm_stop
1000714b g     O .rodata	001c2000 myimage
101c9974 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	00000060 alt_irq_handler
101c9690 g     O .rwdata	00000028 alt_dev_null
100014fc g     F .text	00000d90 __kernel_rem_pio2
10006d80 g     F .text	00000018 alt_dcache_flush_all
10006aa0 g     F .text	000000cc alt_up_pixel_buffer_dma_draw_rectangle
100054b0 g     F .text	00000080 .hidden __fixdfsi
101c9940 g     O .bss	00000008 theta
101c96e8 g       *ABS*	00000000 __ram_rwdata_end
101c96d0 g     O .rwdata	00000008 alt_dev_list
10006094 g     F .text	00000060 write
10006bb8 g     F .text	000001c8 alt_up_pixel_buffer_dma_draw_line
101c94a0 g       *ABS*	00000000 __ram_rodata_end
100043a8 g     F .text	000000f4 .hidden __ledf2
10003058 g     F .text	00000058 .hidden __umodsi3
101c9a7c g       *ABS*	00000000 end
10006390 g     F .text	0000004c alt_up_char_buffer_init
1000015c g     F .exceptions	0000002c alt_instruction_exception_entry
18000000 g       *ABS*	00000000 __alt_stack_pointer
10006348 g     F .text	00000048 alt_avalon_timer_sc_init
1000560c g     F .text	00000064 .hidden __clzsi2
100062d8 g     F .text	00000034 altera_avalon_jtag_uart_write
10000610 g     F .text	000000ec cos
10005814 g     F .text	00000524 ___vfprintf_internal_r
10000188 g     F .text	0000004c _start
101c9970 g     O .bss	00000004 _alt_tick_rate
100007fc g     F .text	000000f0 sin
101c996c g     O .bss	00000004 _alt_nticks
10006114 g     F .text	000001c4 alt_sys_init
101c94a0 g       *ABS*	00000000 __ram_rwdata_start
1000709c g       *ABS*	00000000 __ram_rodata_start
10007034 g     F .text	00000030 memcmp
101c9a7c g       *ABS*	00000000 __alt_stack_base
1000395c g     F .text	000008e8 .hidden __divdf3
101c9948 g     O .bss	00000008 shifted_col
1000449c g     F .text	00000718 .hidden __muldf3
10006da0 g     F .text	0000006c alt_dev_llist_insert
10005d54 g     F .text	000000b8 __sfvwrite_small_dev
101c9930 g       *ABS*	00000000 __bss_start
100004b8 g     F .text	00000158 main
100001d4 g     F .text	00000284 pixel_code
101c9960 g     O .bss	00000004 alt_envp
1000657c g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
100063dc g     F .text	00000008 alt_up_char_buffer_open_dev
101c96e0 g     O .rwdata	00000004 alt_errno
10002efc g     F .text	00000084 .hidden __divsi3
10007064 g     F .text	00000038 strcmp
1000709c g       *ABS*	00000000 __flash_rodata_start
100028f4 g     F .text	0000001c copysign
10004244 g     F .text	00000088 .hidden __nedf2
100060f4 g     F .text	00000020 alt_irq_init
101c9324 g     O .rodata	00000100 .hidden __clz_tab
101c9950 g     O .bss	00000004 my_pixel_buffer
10005e0c g     F .text	00000058 _write_r
101c96bc g     O .rwdata	00000004 _impure_ptr
101c9968 g     O .bss	00000004 alt_argc
10002758 g     F .text	0000019c scalbn
10000020 g       .exceptions	00000000 alt_irq_entry
101c96d8 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
10006e8c g     F .text	00000004 alt_ic_isr_register
101c96e8 g       *ABS*	00000000 _edata
101c9a7c g       *ABS*	00000000 _end
10000188 g       *ABS*	00000000 __ram_exceptions_end
10006ec8 g     F .text	00000038 alt_ic_irq_disable
10002f80 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
101c9954 g     O .bss	00000008 original_col
1000001c g       .entry	00000000 _exit
1000578c g     F .text	0000001c strlen
100042cc g     F .text	000000dc .hidden __gedf2
10006e80 g     F .text	0000000c alt_icache_flush_all
101c96e4 g     O .rwdata	00000004 alt_priority_mask
10006e90 g     F .text	00000038 alt_ic_irq_enable
10005d38 g     F .text	0000001c __vfprintf_internal
10004bb4 g     F .text	000008fc .hidden __subdf3
101c96c0 g     O .rwdata	00000008 alt_alarm_list
10005e64 g     F .text	000000e0 alt_load



Disassembly of section .entry:

10000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1000000c:	00bffd16 	blt	zero,r2,10000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000010:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000014:	08406214 	ori	at,at,392
    jmp r1
10000018:	0800683a 	jmp	at

1000001c <_exit>:
1000001c:	00000000 	call	10000000 <__reset>

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	000015c0 	call	1000015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defffe04 	addi	sp,sp,-8
10000100:	dfc00115 	stw	ra,4(sp)
10000104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000010c:	04040774 	movhi	r16,4125
10000110:	84265f04 	addi	r16,r16,-26244

  active = alt_irq_pending ();

  do
  {
    i = 0;
10000114:	0005883a 	mov	r2,zero
    mask = 1;
10000118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	20ca703a 	and	r5,r4,r3
10000120:	28000b26 	beq	r5,zero,10000150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
10000124:	100490fa 	slli	r2,r2,3
10000128:	8085883a 	add	r2,r16,r2
1000012c:	10c00017 	ldw	r3,0(r2)
10000130:	11000117 	ldw	r4,4(r2)
10000134:	183ee83a 	callr	r3
10000138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
1000013c:	203ff51e 	bne	r4,zero,10000114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
10000140:	dfc00117 	ldw	ra,4(sp)
10000144:	dc000017 	ldw	r16,0(sp)
10000148:	dec00204 	addi	sp,sp,8
1000014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
10000150:	18c7883a 	add	r3,r3,r3
      i++;
10000154:	10800044 	addi	r2,r2,1

    } while (1);
10000158:	003ff006 	br	1000011c <alt_irq_handler+0x20>

1000015c <alt_instruction_exception_entry>:
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
1000015c:	000531fa 	rdctl	r2,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
10000160:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10000164:	d0e0b017 	ldw	r3,-32064(gp)
10000168:	18000426 	beq	r3,zero,1000017c <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
1000016c:	10801f0c 	andi	r2,r2,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
10000170:	200b883a 	mov	r5,r4
10000174:	1008d0ba 	srli	r4,r2,2
10000178:	1800683a 	jmp	r3
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
1000017c:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
10000180:	0005883a 	mov	r2,zero
10000184:	f800283a 	ret

Disassembly of section .text:

10000188 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10000188:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
1000018c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
10000190:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10000194:	00bffd16 	blt	zero,r2,1000018c <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000198:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
1000019c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001a0:	06840774 	movhi	gp,4125
    ori gp, gp, %lo(_gp)
100001a4:	d685ae14 	ori	gp,gp,5816
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001a8:	00840734 	movhi	r2,4124
    ori r2, r2, %lo(__bss_start)
100001ac:	10a64c14 	ori	r2,r2,39216

    movhi r3, %hi(__bss_end)
100001b0:	00c40734 	movhi	r3,4124
    ori r3, r3, %lo(__bss_end)
100001b4:	18e69f14 	ori	r3,r3,39548

    beq r2, r3, 1f
100001b8:	10c00326 	beq	r2,r3,100001c8 <_start+0x40>

0:
    stw zero, (r2)
100001bc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001c0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001c4:	10fffd36 	bltu	r2,r3,100001bc <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001c8:	0005e640 	call	10005e64 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001cc:	0005f440 	call	10005f44 <alt_main>

100001d0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001d0:	003fff06 	br	100001d0 <alt_after_alt_main>

100001d4 <pixel_code>:
double shifted_row;
double shifted_col;
double original_row, original_col;
alt_up_pixel_buffer_dma_dev *my_pixel_buffer;

void pixel_code(int i, int j) {
100001d4:	defff304 	addi	sp,sp,-52
100001d8:	dc400415 	stw	r17,16(sp)
100001dc:	2023883a 	mov	r17,r4
	shifted_row = i-240/2;
100001e0:	213fe204 	addi	r4,r4,-120
double shifted_row;
double shifted_col;
double original_row, original_col;
alt_up_pixel_buffer_dma_dev *my_pixel_buffer;

void pixel_code(int i, int j) {
100001e4:	dfc00c15 	stw	ra,48(sp)
100001e8:	df000b15 	stw	fp,44(sp)
100001ec:	ddc00a15 	stw	r23,40(sp)
100001f0:	dd800915 	stw	r22,36(sp)
100001f4:	dd400815 	stw	r21,32(sp)
100001f8:	dd000715 	stw	r20,28(sp)
100001fc:	dcc00615 	stw	r19,24(sp)
10000200:	dc800515 	stw	r18,20(sp)
10000204:	dc000315 	stw	r16,12(sp)
10000208:	2821883a 	mov	r16,r5
	shifted_row = i-240/2;
1000020c:	00055300 	call	10005530 <__floatsidf>
	// calculate shifted_col
	shifted_col = j - 320/2;
10000210:	813fd804 	addi	r4,r16,-160
double shifted_col;
double original_row, original_col;
alt_up_pixel_buffer_dma_dev *my_pixel_buffer;

void pixel_code(int i, int j) {
	shifted_row = i-240/2;
10000214:	102f883a 	mov	r23,r2
10000218:	182d883a 	mov	r22,r3
1000021c:	d0a09e15 	stw	r2,-32136(gp)
10000220:	d0e09f15 	stw	r3,-32132(gp)
	// calculate shifted_col
	shifted_col = j - 320/2;
10000224:	00055300 	call	10005530 <__floatsidf>
	// calculate original_row
	original_row = round((shifted_row*cos(theta) - shifted_col*sin(theta)) + 240/2);
10000228:	d560a217 	ldw	r21,-32120(gp)
1000022c:	d520a317 	ldw	r20,-32116(gp)
alt_up_pixel_buffer_dma_dev *my_pixel_buffer;

void pixel_code(int i, int j) {
	shifted_row = i-240/2;
	// calculate shifted_col
	shifted_col = j - 320/2;
10000230:	1027883a 	mov	r19,r2
	// calculate original_row
	original_row = round((shifted_row*cos(theta) - shifted_col*sin(theta)) + 240/2);
10000234:	a809883a 	mov	r4,r21
10000238:	a00b883a 	mov	r5,r20
alt_up_pixel_buffer_dma_dev *my_pixel_buffer;

void pixel_code(int i, int j) {
	shifted_row = i-240/2;
	// calculate shifted_col
	shifted_col = j - 320/2;
1000023c:	1825883a 	mov	r18,r3
10000240:	d0a0a415 	stw	r2,-32112(gp)
10000244:	d0e0a515 	stw	r3,-32108(gp)
	// calculate original_row
	original_row = round((shifted_row*cos(theta) - shifted_col*sin(theta)) + 240/2);
10000248:	00006100 	call	10000610 <cos>
1000024c:	a809883a 	mov	r4,r21
10000250:	a00b883a 	mov	r5,r20
10000254:	d8800015 	stw	r2,0(sp)
10000258:	d8c00115 	stw	r3,4(sp)
1000025c:	00007fc0 	call	100007fc <sin>
10000260:	d9800017 	ldw	r6,0(sp)
10000264:	d9c00117 	ldw	r7,4(sp)
10000268:	b809883a 	mov	r4,r23
1000026c:	b00b883a 	mov	r5,r22
10000270:	1039883a 	mov	fp,r2
10000274:	d8c00215 	stw	r3,8(sp)
10000278:	000449c0 	call	1000449c <__muldf3>
1000027c:	d9c00217 	ldw	r7,8(sp)
10000280:	e00d883a 	mov	r6,fp
10000284:	9809883a 	mov	r4,r19
10000288:	900b883a 	mov	r5,r18
1000028c:	102b883a 	mov	r21,r2
10000290:	1829883a 	mov	r20,r3
10000294:	000449c0 	call	1000449c <__muldf3>
10000298:	a809883a 	mov	r4,r21
1000029c:	a00b883a 	mov	r5,r20
100002a0:	100d883a 	mov	r6,r2
100002a4:	180f883a 	mov	r7,r3
100002a8:	0004bb40 	call	10004bb4 <__subdf3>
100002ac:	000d883a 	mov	r6,zero
100002b0:	01d017b4 	movhi	r7,16478
100002b4:	1009883a 	mov	r4,r2
100002b8:	180b883a 	mov	r5,r3
100002bc:	00030b00 	call	100030b0 <__adddf3>
100002c0:	1009883a 	mov	r4,r2
100002c4:	180b883a 	mov	r5,r3
100002c8:	00006fc0 	call	100006fc <round>
	//calculate original_col
	original_col = round((shifted_row*sin(theta) + shifted_col*cos(theta)) + 320/2);
100002cc:	d9c00217 	ldw	r7,8(sp)
100002d0:	e00d883a 	mov	r6,fp
100002d4:	b809883a 	mov	r4,r23
100002d8:	b00b883a 	mov	r5,r22
void pixel_code(int i, int j) {
	shifted_row = i-240/2;
	// calculate shifted_col
	shifted_col = j - 320/2;
	// calculate original_row
	original_row = round((shifted_row*cos(theta) - shifted_col*sin(theta)) + 240/2);
100002dc:	102b883a 	mov	r21,r2
100002e0:	1829883a 	mov	r20,r3
100002e4:	d0a0a015 	stw	r2,-32128(gp)
100002e8:	d0e0a115 	stw	r3,-32124(gp)
	//calculate original_col
	original_col = round((shifted_row*sin(theta) + shifted_col*cos(theta)) + 320/2);
100002ec:	000449c0 	call	1000449c <__muldf3>
100002f0:	d9800017 	ldw	r6,0(sp)
100002f4:	d9c00117 	ldw	r7,4(sp)
100002f8:	9809883a 	mov	r4,r19
100002fc:	900b883a 	mov	r5,r18
10000300:	1039883a 	mov	fp,r2
10000304:	182f883a 	mov	r23,r3
10000308:	000449c0 	call	1000449c <__muldf3>
1000030c:	100d883a 	mov	r6,r2
10000310:	180f883a 	mov	r7,r3
10000314:	e009883a 	mov	r4,fp
10000318:	b80b883a 	mov	r5,r23
1000031c:	00030b00 	call	100030b0 <__adddf3>
10000320:	000d883a 	mov	r6,zero
10000324:	01d01934 	movhi	r7,16484
10000328:	1009883a 	mov	r4,r2
1000032c:	180b883a 	mov	r5,r3
10000330:	00030b00 	call	100030b0 <__adddf3>
10000334:	1009883a 	mov	r4,r2
10000338:	180b883a 	mov	r5,r3
1000033c:	00006fc0 	call	100006fc <round>
10000340:	1027883a 	mov	r19,r2
10000344:	d0a0a715 	stw	r2,-32100(gp)
10000348:	d0e0a815 	stw	r3,-32096(gp)
	// check if the image is out of boundary
	if ((i>=240) || (j>=320) || (i<0) || (j<0)) {
1000034c:	00803bc4 	movi	r2,239
	// calculate shifted_col
	shifted_col = j - 320/2;
	// calculate original_row
	original_row = round((shifted_row*cos(theta) - shifted_col*sin(theta)) + 240/2);
	//calculate original_col
	original_col = round((shifted_row*sin(theta) + shifted_col*cos(theta)) + 320/2);
10000350:	1825883a 	mov	r18,r3
	// check if the image is out of boundary
	if ((i>=240) || (j>=320) || (i<0) || (j<0)) {
10000354:	14400236 	bltu	r2,r17,10000360 <pixel_code+0x18c>
10000358:	00804fc4 	movi	r2,319
1000035c:	14001a2e 	bgeu	r2,r16,100003c8 <pixel_code+0x1f4>
		// if original_row is out of bound
		if (original_row >= 0 && original_row < 1) {
10000360:	000d883a 	mov	r6,zero
10000364:	000f883a 	mov	r7,zero
10000368:	a809883a 	mov	r4,r21
1000036c:	a00b883a 	mov	r5,r20
10000370:	00042cc0 	call	100042cc <__gedf2>
10000374:	10000716 	blt	r2,zero,10000394 <pixel_code+0x1c0>
10000378:	000d883a 	mov	r6,zero
1000037c:	01cffc34 	movhi	r7,16368
10000380:	a809883a 	mov	r4,r21
10000384:	a00b883a 	mov	r5,r20
10000388:	00043a80 	call	100043a8 <__ledf2>
1000038c:	1000010e 	bge	r2,zero,10000394 <pixel_code+0x1c0>
			// set i to 0
			i = 0;
10000390:	0023883a 	mov	r17,zero
		}
		// if original_col is out of bound
		if (original_col >=0 && original_col < 1) {
10000394:	000d883a 	mov	r6,zero
10000398:	000f883a 	mov	r7,zero
1000039c:	9809883a 	mov	r4,r19
100003a0:	900b883a 	mov	r5,r18
100003a4:	00042cc0 	call	100042cc <__gedf2>
100003a8:	10000716 	blt	r2,zero,100003c8 <pixel_code+0x1f4>
100003ac:	000d883a 	mov	r6,zero
100003b0:	01cffc34 	movhi	r7,16368
100003b4:	9809883a 	mov	r4,r19
100003b8:	900b883a 	mov	r5,r18
100003bc:	00043a80 	call	100043a8 <__ledf2>
100003c0:	1000010e 	bge	r2,zero,100003c8 <pixel_code+0x1f4>
			// set j to 0
			j = 0;
100003c4:	0021883a 	mov	r16,zero
		}
	}
	// display the image based on the values of original_row and original_col
	alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
100003c8:	a809883a 	mov	r4,r21
100003cc:	a00b883a 	mov	r5,r20
	(myimage[(i*320*3+j*3+2)]) +
100003d0:	8c40f024 	muli	r17,r17,960
100003d4:	8405883a 	add	r2,r16,r16
100003d8:	1421883a 	add	r16,r2,r16
			// set j to 0
			j = 0;
		}
	}
	// display the image based on the values of original_row and original_col
	alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
100003dc:	00029100 	call	10002910 <__fixunsdfsi>
100003e0:	9809883a 	mov	r4,r19
100003e4:	900b883a 	mov	r5,r18
	(myimage[(i*320*3+j*3+2)]) +
100003e8:	8c21883a 	add	r16,r17,r16
			// set j to 0
			j = 0;
		}
	}
	// display the image based on the values of original_row and original_col
	alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
100003ec:	1023883a 	mov	r17,r2
100003f0:	00029100 	call	10002910 <__fixunsdfsi>
	(myimage[(i*320*3+j*3+2)]) +
	(myimage[(i*320*3+j*3+1)]<<8) +
100003f4:	00c40034 	movhi	r3,4096
100003f8:	18dc52c4 	addi	r3,r3,29003
100003fc:	1c21883a 	add	r16,r3,r16
			// set j to 0
			j = 0;
		}
	}
	// display the image based on the values of original_row and original_col
	alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
10000400:	81400043 	ldbu	r5,1(r16)
10000404:	80c00083 	ldbu	r3,2(r16)
10000408:	d120a617 	ldw	r4,-32104(gp)
1000040c:	280a923a 	slli	r5,r5,8
10000410:	880f883a 	mov	r7,r17
10000414:	100d883a 	mov	r6,r2
10000418:	28cb883a 	add	r5,r5,r3
1000041c:	80c00003 	ldbu	r3,0(r16)
10000420:	1806943a 	slli	r3,r3,16
10000424:	28cb883a 	add	r5,r5,r3
	(myimage[(i*320*3+j*3+2)]) +
	(myimage[(i*320*3+j*3+1)]<<8) +
	(myimage[(i*320*3+j*3+0)]<<16),original_col,original_row);

}
10000428:	dfc00c17 	ldw	ra,48(sp)
1000042c:	df000b17 	ldw	fp,44(sp)
10000430:	ddc00a17 	ldw	r23,40(sp)
10000434:	dd800917 	ldw	r22,36(sp)
10000438:	dd400817 	ldw	r21,32(sp)
1000043c:	dd000717 	ldw	r20,28(sp)
10000440:	dcc00617 	ldw	r19,24(sp)
10000444:	dc800517 	ldw	r18,20(sp)
10000448:	dc400417 	ldw	r17,16(sp)
1000044c:	dc000317 	ldw	r16,12(sp)
10000450:	dec00d04 	addi	sp,sp,52
			// set j to 0
			j = 0;
		}
	}
	// display the image based on the values of original_row and original_col
	alt_up_pixel_buffer_dma_draw(my_pixel_buffer,
10000454:	00064c81 	jmpi	100064c8 <alt_up_pixel_buffer_dma_draw>

10000458 <frame_function>:
	(myimage[(i*320*3+j*3+2)]) +
	(myimage[(i*320*3+j*3+1)]<<8) +
	(myimage[(i*320*3+j*3+0)]<<16),original_col,original_row);

}
void frame_function() {
10000458:	defffb04 	addi	sp,sp,-20
1000045c:	dcc00315 	stw	r19,12(sp)
10000460:	dc800215 	stw	r18,8(sp)
10000464:	dc400115 	stw	r17,4(sp)
10000468:	dfc00415 	stw	ra,16(sp)
1000046c:	dc000015 	stw	r16,0(sp)
	// frame code
	// for loop that rotates over image rows
	for (int i = 0; i < 240; i++) {
10000470:	0023883a 	mov	r17,zero
	// for loop that rotates over image cols
		for (int j = 0; j < 360; j++) {
10000474:	04805a04 	movi	r18,360

}
void frame_function() {
	// frame code
	// for loop that rotates over image rows
	for (int i = 0; i < 240; i++) {
10000478:	04c03c04 	movi	r19,240
	(myimage[(i*320*3+j*3+2)]) +
	(myimage[(i*320*3+j*3+1)]<<8) +
	(myimage[(i*320*3+j*3+0)]<<16),original_col,original_row);

}
void frame_function() {
1000047c:	0021883a 	mov	r16,zero
	// frame code
	// for loop that rotates over image rows
	for (int i = 0; i < 240; i++) {
	// for loop that rotates over image cols
		for (int j = 0; j < 360; j++) {
			pixel_code(i,j);
10000480:	800b883a 	mov	r5,r16
10000484:	8809883a 	mov	r4,r17
void frame_function() {
	// frame code
	// for loop that rotates over image rows
	for (int i = 0; i < 240; i++) {
	// for loop that rotates over image cols
		for (int j = 0; j < 360; j++) {
10000488:	84000044 	addi	r16,r16,1
			pixel_code(i,j);
1000048c:	00001d40 	call	100001d4 <pixel_code>
void frame_function() {
	// frame code
	// for loop that rotates over image rows
	for (int i = 0; i < 240; i++) {
	// for loop that rotates over image cols
		for (int j = 0; j < 360; j++) {
10000490:	84bffb1e 	bne	r16,r18,10000480 <frame_function+0x28>

}
void frame_function() {
	// frame code
	// for loop that rotates over image rows
	for (int i = 0; i < 240; i++) {
10000494:	8c400044 	addi	r17,r17,1
10000498:	8cfff81e 	bne	r17,r19,1000047c <frame_function+0x24>
	// for loop that rotates over image cols
		for (int j = 0; j < 360; j++) {
			pixel_code(i,j);
		}
	}
}
1000049c:	dfc00417 	ldw	ra,16(sp)
100004a0:	dcc00317 	ldw	r19,12(sp)
100004a4:	dc800217 	ldw	r18,8(sp)
100004a8:	dc400117 	ldw	r17,4(sp)
100004ac:	dc000017 	ldw	r16,0(sp)
100004b0:	dec00504 	addi	sp,sp,20
100004b4:	f800283a 	ret

100004b8 <main>:

int main() {
	alt_putstr("Project 5 Mitchell Jonker and Hunter Frady\n");
100004b8:	01040034 	movhi	r4,4096
			pixel_code(i,j);
		}
	}
}

int main() {
100004bc:	defff804 	addi	sp,sp,-32
	alt_putstr("Project 5 Mitchell Jonker and Hunter Frady\n");
100004c0:	211c2704 	addi	r4,r4,28828
			pixel_code(i,j);
		}
	}
}

int main() {
100004c4:	dfc00715 	stw	ra,28(sp)
100004c8:	dd000415 	stw	r20,16(sp)
100004cc:	dd800615 	stw	r22,24(sp)
100004d0:	dd400515 	stw	r21,20(sp)
100004d4:	dcc00315 	stw	r19,12(sp)
100004d8:	dc800215 	stw	r18,8(sp)
100004dc:	dc400115 	stw	r17,4(sp)
100004e0:	dc000015 	stw	r16,0(sp)
	alt_putstr("Project 5 Mitchell Jonker and Hunter Frady\n");
100004e4:	0005f700 	call	10005f70 <alt_putstr>

	int ticks_per_second, ticks_start, ticks_end, ticks_delta;
	ticks_per_second = alt_ticks_per_second();
100004e8:	d520ae17 	ldw	r20,-32072(gp)
	printf("TPS: %d \n", ticks_per_second);
100004ec:	01040034 	movhi	r4,4096
100004f0:	211c3204 	addi	r4,r4,28872
100004f4:	a00b883a 	mov	r5,r20
100004f8:	00056ac0 	call	100056ac <printf>


	my_pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/dma_buffer");
100004fc:	01040034 	movhi	r4,4096
10000500:	211c3504 	addi	r4,r4,28884
10000504:	00064c00 	call	100064c0 <alt_up_pixel_buffer_dma_open_dev>
10000508:	d0a0a615 	stw	r2,-32104(gp)

	if(!my_pixel_buffer) {
1000050c:	1000031e 	bne	r2,zero,1000051c <main+0x64>
		printf("Error opening pixel buffer\n");
10000510:	01040034 	movhi	r4,4096
10000514:	211c3904 	addi	r4,r4,28900
10000518:	00057780 	call	10005778 <puts>
	}

	alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer, 0);
1000051c:	d120a617 	ldw	r4,-32104(gp)
10000520:	000b883a 	mov	r5,zero
10000524:	00065b00 	call	100065b0 <alt_up_pixel_buffer_dma_clear_screen>
			//
			ticks_end = alt_nticks();
			ticks_delta = ticks_end - ticks_start;
			//printf("End Tic: %d \n", ticks_end);
			//printf("Delta Tics: %d \n", ticks_delta);
			unsigned long long time_delta = (unsigned long long) ticks_delta / (unsigned long long) ticks_per_second;
10000528:	a02bd7fa 	srai	r21,r20,31
	//printf("Current Tic: %d \n", ticks_current);

	while (1) {
		unsigned long long fps_avg = 0;
		// for loop that rotates over four frames on 0, 90, 180, 270 degree
		for (int t = 0; t > -360; t = t-90) { // -360
1000052c:	0027883a 	mov	r19,zero

	//int ticks_current = alt_nticks(); // starting number of ticks
	//printf("Current Tic: %d \n", ticks_current);

	while (1) {
		unsigned long long fps_avg = 0;
10000530:	0025883a 	mov	r18,zero
10000534:	0021883a 	mov	r16,zero
		// for loop that rotates over four frames on 0, 90, 180, 270 degree
		for (int t = 0; t > -360; t = t-90) { // -360
			// calculate theta

			theta = (t*3.14)/180;
10000538:	9809883a 	mov	r4,r19
1000053c:	00055300 	call	10005530 <__floatsidf>
10000540:	01947b34 	movhi	r6,20972
10000544:	01d00274 	movhi	r7,16393
10000548:	31a147c4 	addi	r6,r6,-31457
1000054c:	39c7ae04 	addi	r7,r7,7864
10000550:	1009883a 	mov	r4,r2
10000554:	180b883a 	mov	r5,r3
10000558:	000449c0 	call	1000449c <__muldf3>
1000055c:	01d019f4 	movhi	r7,16487
10000560:	000d883a 	mov	r6,zero
10000564:	39e00004 	addi	r7,r7,-32768
10000568:	1009883a 	mov	r4,r2
1000056c:	180b883a 	mov	r5,r3
10000570:	000395c0 	call	1000395c <__divdf3>
			alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
10000574:	d120a617 	ldw	r4,-32104(gp)
10000578:	000b883a 	mov	r5,zero
		unsigned long long fps_avg = 0;
		// for loop that rotates over four frames on 0, 90, 180, 270 degree
		for (int t = 0; t > -360; t = t-90) { // -360
			// calculate theta

			theta = (t*3.14)/180;
1000057c:	d0a0a215 	stw	r2,-32120(gp)
10000580:	d0e0a315 	stw	r3,-32116(gp)
			alt_up_pixel_buffer_dma_clear_screen(my_pixel_buffer,0);
10000584:	00065b00 	call	100065b0 <alt_up_pixel_buffer_dma_clear_screen>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10000588:	d460ad17 	ldw	r17,-32076(gp)

			//
			ticks_start = alt_nticks(); // starting number of ticks
			//printf("Start Tic: %d \n", ticks_start);
			frame_function();
1000058c:	00004580 	call	10000458 <frame_function>
10000590:	d0a0ad17 	ldw	r2,-32076(gp)
			//
			ticks_end = alt_nticks();
			ticks_delta = ticks_end - ticks_start;
			//printf("End Tic: %d \n", ticks_end);
			//printf("Delta Tics: %d \n", ticks_delta);
			unsigned long long time_delta = (unsigned long long) ticks_delta / (unsigned long long) ticks_per_second;
10000594:	a00d883a 	mov	r6,r20
10000598:	a80f883a 	mov	r7,r21
1000059c:	1449c83a 	sub	r4,r2,r17
100005a0:	200bd7fa 	srai	r5,r4,31
	//printf("Current Tic: %d \n", ticks_current);

	while (1) {
		unsigned long long fps_avg = 0;
		// for loop that rotates over four frames on 0, 90, 180, 270 degree
		for (int t = 0; t > -360; t = t-90) { // -360
100005a4:	9cffe984 	addi	r19,r19,-90
			//
			ticks_end = alt_nticks();
			ticks_delta = ticks_end - ticks_start;
			//printf("End Tic: %d \n", ticks_end);
			//printf("Delta Tics: %d \n", ticks_delta);
			unsigned long long time_delta = (unsigned long long) ticks_delta / (unsigned long long) ticks_per_second;
100005a8:	00029840 	call	10002984 <__udivdi3>
			printf("Total duration: %llu seconds\n", time_delta);
100005ac:	01040034 	movhi	r4,4096
			//
			ticks_end = alt_nticks();
			ticks_delta = ticks_end - ticks_start;
			//printf("End Tic: %d \n", ticks_end);
			//printf("Delta Tics: %d \n", ticks_delta);
			unsigned long long time_delta = (unsigned long long) ticks_delta / (unsigned long long) ticks_per_second;
100005b0:	1023883a 	mov	r17,r2
			printf("Total duration: %llu seconds\n", time_delta);
100005b4:	100b883a 	mov	r5,r2
100005b8:	180d883a 	mov	r6,r3
100005bc:	211c4004 	addi	r4,r4,28928
			//
			ticks_end = alt_nticks();
			ticks_delta = ticks_end - ticks_start;
			//printf("End Tic: %d \n", ticks_end);
			//printf("Delta Tics: %d \n", ticks_delta);
			unsigned long long time_delta = (unsigned long long) ticks_delta / (unsigned long long) ticks_per_second;
100005c0:	182d883a 	mov	r22,r3
			printf("Total duration: %llu seconds\n", time_delta);
			fps_avg += time_delta;
100005c4:	9463883a 	add	r17,r18,r17
			ticks_end = alt_nticks();
			ticks_delta = ticks_end - ticks_start;
			//printf("End Tic: %d \n", ticks_end);
			//printf("Delta Tics: %d \n", ticks_delta);
			unsigned long long time_delta = (unsigned long long) ticks_delta / (unsigned long long) ticks_per_second;
			printf("Total duration: %llu seconds\n", time_delta);
100005c8:	00056ac0 	call	100056ac <printf>
			fps_avg += time_delta;
100005cc:	8c85803a 	cmpltu	r2,r17,r18
100005d0:	85a1883a 	add	r16,r16,r22
100005d4:	1421883a 	add	r16,r2,r16
	//printf("Current Tic: %d \n", ticks_current);

	while (1) {
		unsigned long long fps_avg = 0;
		// for loop that rotates over four frames on 0, 90, 180, 270 degree
		for (int t = 0; t > -360; t = t-90) { // -360
100005d8:	00bfa604 	movi	r2,-360
			ticks_delta = ticks_end - ticks_start;
			//printf("End Tic: %d \n", ticks_end);
			//printf("Delta Tics: %d \n", ticks_delta);
			unsigned long long time_delta = (unsigned long long) ticks_delta / (unsigned long long) ticks_per_second;
			printf("Total duration: %llu seconds\n", time_delta);
			fps_avg += time_delta;
100005dc:	8825883a 	mov	r18,r17
	//printf("Current Tic: %d \n", ticks_current);

	while (1) {
		unsigned long long fps_avg = 0;
		// for loop that rotates over four frames on 0, 90, 180, 270 degree
		for (int t = 0; t > -360; t = t-90) { // -360
100005e0:	98bfd51e 	bne	r19,r2,10000538 <main+0x80>
			unsigned long long time_delta = (unsigned long long) ticks_delta / (unsigned long long) ticks_per_second;
			printf("Total duration: %llu seconds\n", time_delta);
			fps_avg += time_delta;
		}
		fps_avg = 4/fps_avg; // divide by four frames
		printf("FPS avg over previous 4 frames: %llu fps\n\n", fps_avg);
100005e4:	880d883a 	mov	r6,r17
100005e8:	800f883a 	mov	r7,r16
100005ec:	01000104 	movi	r4,4
100005f0:	000b883a 	mov	r5,zero
100005f4:	00029840 	call	10002984 <__udivdi3>
100005f8:	01040034 	movhi	r4,4096
100005fc:	100b883a 	mov	r5,r2
10000600:	180d883a 	mov	r6,r3
10000604:	211c4804 	addi	r4,r4,28960
10000608:	00056ac0 	call	100056ac <printf>

	}
1000060c:	003fc606 	br	10000528 <main+0x70>

10000610 <cos>:
10000610:	00a00034 	movhi	r2,32768
10000614:	defffa04 	addi	sp,sp,-24
10000618:	10bfffc4 	addi	r2,r2,-1
1000061c:	00cffa74 	movhi	r3,16361
10000620:	dfc00515 	stw	ra,20(sp)
10000624:	2884703a 	and	r2,r5,r2
10000628:	18c87ec4 	addi	r3,r3,8699
1000062c:	1880180e 	bge	r3,r2,10000690 <cos+0x80>
10000630:	00dffc34 	movhi	r3,32752
10000634:	18ffffc4 	addi	r3,r3,-1
10000638:	1880060e 	bge	r3,r2,10000654 <cos+0x44>
1000063c:	280f883a 	mov	r7,r5
10000640:	200d883a 	mov	r6,r4
10000644:	0004bb40 	call	10004bb4 <__subdf3>
10000648:	dfc00517 	ldw	ra,20(sp)
1000064c:	dec00604 	addi	sp,sp,24
10000650:	f800283a 	ret
10000654:	d9800104 	addi	r6,sp,4
10000658:	00008ec0 	call	100008ec <__ieee754_rem_pio2>
1000065c:	108000cc 	andi	r2,r2,3
10000660:	00c00044 	movi	r3,1
10000664:	10c01726 	beq	r2,r3,100006c4 <cos+0xb4>
10000668:	01000084 	movi	r4,2
1000066c:	11000e26 	beq	r2,r4,100006a8 <cos+0x98>
10000670:	10001c26 	beq	r2,zero,100006e4 <cos+0xd4>
10000674:	d9800317 	ldw	r6,12(sp)
10000678:	d9c00417 	ldw	r7,16(sp)
1000067c:	d9000117 	ldw	r4,4(sp)
10000680:	d9400217 	ldw	r5,8(sp)
10000684:	d8c00015 	stw	r3,0(sp)
10000688:	000228c0 	call	1000228c <__kernel_sin>
1000068c:	003fee06 	br	10000648 <cos+0x38>
10000690:	000d883a 	mov	r6,zero
10000694:	000f883a 	mov	r7,zero
10000698:	00010580 	call	10001058 <__kernel_cos>
1000069c:	dfc00517 	ldw	ra,20(sp)
100006a0:	dec00604 	addi	sp,sp,24
100006a4:	f800283a 	ret
100006a8:	d9800317 	ldw	r6,12(sp)
100006ac:	d9c00417 	ldw	r7,16(sp)
100006b0:	d9000117 	ldw	r4,4(sp)
100006b4:	d9400217 	ldw	r5,8(sp)
100006b8:	00010580 	call	10001058 <__kernel_cos>
100006bc:	18e0003c 	xorhi	r3,r3,32768
100006c0:	003fe106 	br	10000648 <cos+0x38>
100006c4:	d9800317 	ldw	r6,12(sp)
100006c8:	d9c00417 	ldw	r7,16(sp)
100006cc:	d9000117 	ldw	r4,4(sp)
100006d0:	d9400217 	ldw	r5,8(sp)
100006d4:	d8800015 	stw	r2,0(sp)
100006d8:	000228c0 	call	1000228c <__kernel_sin>
100006dc:	18e0003c 	xorhi	r3,r3,32768
100006e0:	003fd906 	br	10000648 <cos+0x38>
100006e4:	d9800317 	ldw	r6,12(sp)
100006e8:	d9c00417 	ldw	r7,16(sp)
100006ec:	d9000117 	ldw	r4,4(sp)
100006f0:	d9400217 	ldw	r5,8(sp)
100006f4:	00010580 	call	10001058 <__kernel_cos>
100006f8:	003fd306 	br	10000648 <cos+0x38>

100006fc <round>:
100006fc:	289ffc2c 	andhi	r2,r5,32752
10000700:	1005d53a 	srai	r2,r2,20
10000704:	024004c4 	movi	r9,19
10000708:	2807883a 	mov	r3,r5
1000070c:	123f0044 	addi	r8,r2,-1023
10000710:	200d883a 	mov	r6,r4
10000714:	280f883a 	mov	r7,r5
10000718:	4a000916 	blt	r9,r8,10000740 <round+0x44>
1000071c:	40002516 	blt	r8,zero,100007b4 <round+0xb8>
10000720:	00800434 	movhi	r2,16
10000724:	10bfffc4 	addi	r2,r2,-1
10000728:	1205d83a 	sra	r2,r2,r8
1000072c:	2888703a 	and	r4,r5,r2
10000730:	2000181e 	bne	r4,zero,10000794 <round+0x98>
10000734:	3000171e 	bne	r6,zero,10000794 <round+0x98>
10000738:	0005883a 	mov	r2,zero
1000073c:	f800283a 	ret
10000740:	02400cc4 	movi	r9,51
10000744:	4a00040e 	bge	r9,r8,10000758 <round+0x5c>
10000748:	00810004 	movi	r2,1024
1000074c:	40802126 	beq	r8,r2,100007d4 <round+0xd8>
10000750:	3005883a 	mov	r2,r6
10000754:	f800283a 	ret
10000758:	013fffc4 	movi	r4,-1
1000075c:	10befb44 	addi	r2,r2,-1043
10000760:	2084d83a 	srl	r2,r4,r2
10000764:	3088703a 	and	r4,r6,r2
10000768:	20001726 	beq	r4,zero,100007c8 <round+0xcc>
1000076c:	4a11c83a 	sub	r8,r9,r8
10000770:	02400044 	movi	r9,1
10000774:	4a10983a 	sll	r8,r9,r8
10000778:	4191883a 	add	r8,r8,r6
1000077c:	4180012e 	bgeu	r8,r6,10000784 <round+0x88>
10000780:	2a47883a 	add	r3,r5,r9
10000784:	0084303a 	nor	r2,zero,r2
10000788:	120c703a 	and	r6,r2,r8
1000078c:	3005883a 	mov	r2,r6
10000790:	f800283a 	ret
10000794:	00c00234 	movhi	r3,8
10000798:	1a07d83a 	sra	r3,r3,r8
1000079c:	0084303a 	nor	r2,zero,r2
100007a0:	000d883a 	mov	r6,zero
100007a4:	19c7883a 	add	r3,r3,r7
100007a8:	1886703a 	and	r3,r3,r2
100007ac:	3005883a 	mov	r2,r6
100007b0:	f800283a 	ret
100007b4:	00bfffc4 	movi	r2,-1
100007b8:	28e0002c 	andhi	r3,r5,32768
100007bc:	40800c26 	beq	r8,r2,100007f0 <round+0xf4>
100007c0:	000d883a 	mov	r6,zero
100007c4:	003fe206 	br	10000750 <round+0x54>
100007c8:	3005883a 	mov	r2,r6
100007cc:	2807883a 	mov	r3,r5
100007d0:	f800283a 	ret
100007d4:	deffff04 	addi	sp,sp,-4
100007d8:	280f883a 	mov	r7,r5
100007dc:	dfc00015 	stw	ra,0(sp)
100007e0:	00030b00 	call	100030b0 <__adddf3>
100007e4:	dfc00017 	ldw	ra,0(sp)
100007e8:	dec00104 	addi	sp,sp,4
100007ec:	f800283a 	ret
100007f0:	18cffc34 	orhi	r3,r3,16368
100007f4:	000d883a 	mov	r6,zero
100007f8:	003fd506 	br	10000750 <round+0x54>

100007fc <sin>:
100007fc:	00a00034 	movhi	r2,32768
10000800:	defffa04 	addi	sp,sp,-24
10000804:	10bfffc4 	addi	r2,r2,-1
10000808:	00cffa74 	movhi	r3,16361
1000080c:	dfc00515 	stw	ra,20(sp)
10000810:	2884703a 	and	r2,r5,r2
10000814:	18c87ec4 	addi	r3,r3,8699
10000818:	1880180e 	bge	r3,r2,1000087c <sin+0x80>
1000081c:	00dffc34 	movhi	r3,32752
10000820:	18ffffc4 	addi	r3,r3,-1
10000824:	1880060e 	bge	r3,r2,10000840 <sin+0x44>
10000828:	280f883a 	mov	r7,r5
1000082c:	200d883a 	mov	r6,r4
10000830:	0004bb40 	call	10004bb4 <__subdf3>
10000834:	dfc00517 	ldw	ra,20(sp)
10000838:	dec00604 	addi	sp,sp,24
1000083c:	f800283a 	ret
10000840:	d9800104 	addi	r6,sp,4
10000844:	00008ec0 	call	100008ec <__ieee754_rem_pio2>
10000848:	108000cc 	andi	r2,r2,3
1000084c:	00c00044 	movi	r3,1
10000850:	10c01926 	beq	r2,r3,100008b8 <sin+0xbc>
10000854:	01000084 	movi	r4,2
10000858:	11000f26 	beq	r2,r4,10000898 <sin+0x9c>
1000085c:	10001c26 	beq	r2,zero,100008d0 <sin+0xd4>
10000860:	d9800317 	ldw	r6,12(sp)
10000864:	d9c00417 	ldw	r7,16(sp)
10000868:	d9000117 	ldw	r4,4(sp)
1000086c:	d9400217 	ldw	r5,8(sp)
10000870:	00010580 	call	10001058 <__kernel_cos>
10000874:	18e0003c 	xorhi	r3,r3,32768
10000878:	003fee06 	br	10000834 <sin+0x38>
1000087c:	d8000015 	stw	zero,0(sp)
10000880:	000d883a 	mov	r6,zero
10000884:	000f883a 	mov	r7,zero
10000888:	000228c0 	call	1000228c <__kernel_sin>
1000088c:	dfc00517 	ldw	ra,20(sp)
10000890:	dec00604 	addi	sp,sp,24
10000894:	f800283a 	ret
10000898:	d9800317 	ldw	r6,12(sp)
1000089c:	d9c00417 	ldw	r7,16(sp)
100008a0:	d9000117 	ldw	r4,4(sp)
100008a4:	d9400217 	ldw	r5,8(sp)
100008a8:	d8c00015 	stw	r3,0(sp)
100008ac:	000228c0 	call	1000228c <__kernel_sin>
100008b0:	18e0003c 	xorhi	r3,r3,32768
100008b4:	003fdf06 	br	10000834 <sin+0x38>
100008b8:	d9800317 	ldw	r6,12(sp)
100008bc:	d9c00417 	ldw	r7,16(sp)
100008c0:	d9000117 	ldw	r4,4(sp)
100008c4:	d9400217 	ldw	r5,8(sp)
100008c8:	00010580 	call	10001058 <__kernel_cos>
100008cc:	003fd906 	br	10000834 <sin+0x38>
100008d0:	d9800317 	ldw	r6,12(sp)
100008d4:	d9c00417 	ldw	r7,16(sp)
100008d8:	d9000117 	ldw	r4,4(sp)
100008dc:	d9400217 	ldw	r5,8(sp)
100008e0:	d8c00015 	stw	r3,0(sp)
100008e4:	000228c0 	call	1000228c <__kernel_sin>
100008e8:	003fd206 	br	10000834 <sin+0x38>

100008ec <__ieee754_rem_pio2>:
100008ec:	02200034 	movhi	r8,32768
100008f0:	deffea04 	addi	sp,sp,-88
100008f4:	423fffc4 	addi	r8,r8,-1
100008f8:	00cffa74 	movhi	r3,16361
100008fc:	ddc01315 	stw	r23,76(sp)
10000900:	dc400d15 	stw	r17,52(sp)
10000904:	dfc01515 	stw	ra,84(sp)
10000908:	df001415 	stw	fp,80(sp)
1000090c:	dd801215 	stw	r22,72(sp)
10000910:	dd401115 	stw	r21,68(sp)
10000914:	dd001015 	stw	r20,64(sp)
10000918:	dcc00f15 	stw	r19,60(sp)
1000091c:	dc800e15 	stw	r18,56(sp)
10000920:	dc000c15 	stw	r16,48(sp)
10000924:	2a2e703a 	and	r23,r5,r8
10000928:	18c87ec4 	addi	r3,r3,8699
1000092c:	2823883a 	mov	r17,r5
10000930:	1dc0790e 	bge	r3,r23,10000b18 <__ieee754_rem_pio2+0x22c>
10000934:	009000f4 	movhi	r2,16387
10000938:	10b65ec4 	addi	r2,r2,-9861
1000093c:	3021883a 	mov	r16,r6
10000940:	2027883a 	mov	r19,r4
10000944:	15c02316 	blt	r2,r23,100009d4 <__ieee754_rem_pio2+0xe8>
10000948:	01cffe74 	movhi	r7,16377
1000094c:	39c87ec4 	addi	r7,r7,8699
10000950:	01951034 	movhi	r6,21568
10000954:	01417a0e 	bge	zero,r5,10000f40 <__ieee754_rem_pio2+0x654>
10000958:	0004bb40 	call	10004bb4 <__subdf3>
1000095c:	1025883a 	mov	r18,r2
10000960:	008ffe74 	movhi	r2,16377
10000964:	10887ec4 	addi	r2,r2,8699
10000968:	1823883a 	mov	r17,r3
1000096c:	b8808426 	beq	r23,r2,10000b80 <__ieee754_rem_pio2+0x294>
10000970:	018698b4 	movhi	r6,6754
10000974:	01cf7474 	movhi	r7,15825
10000978:	3198cc44 	addi	r6,r6,25393
1000097c:	39ed1844 	addi	r7,r7,-19359
10000980:	9009883a 	mov	r4,r18
10000984:	180b883a 	mov	r5,r3
10000988:	0004bb40 	call	10004bb4 <__subdf3>
1000098c:	100d883a 	mov	r6,r2
10000990:	180f883a 	mov	r7,r3
10000994:	9009883a 	mov	r4,r18
10000998:	880b883a 	mov	r5,r17
1000099c:	80800015 	stw	r2,0(r16)
100009a0:	80c00115 	stw	r3,4(r16)
100009a4:	0004bb40 	call	10004bb4 <__subdf3>
100009a8:	018698b4 	movhi	r6,6754
100009ac:	01cf7474 	movhi	r7,15825
100009b0:	3198cc44 	addi	r6,r6,25393
100009b4:	39ed1844 	addi	r7,r7,-19359
100009b8:	1009883a 	mov	r4,r2
100009bc:	180b883a 	mov	r5,r3
100009c0:	0004bb40 	call	10004bb4 <__subdf3>
100009c4:	80800215 	stw	r2,8(r16)
100009c8:	80c00315 	stw	r3,12(r16)
100009cc:	00800044 	movi	r2,1
100009d0:	00005606 	br	10000b2c <__ieee754_rem_pio2+0x240>
100009d4:	00904e74 	movhi	r2,16697
100009d8:	10887ec4 	addi	r2,r2,8699
100009dc:	15c0830e 	bge	r2,r23,10000bec <__ieee754_rem_pio2+0x300>
100009e0:	009ffc34 	movhi	r2,32752
100009e4:	10bfffc4 	addi	r2,r2,-1
100009e8:	15c05c16 	blt	r2,r23,10000b5c <__ieee754_rem_pio2+0x270>
100009ec:	b829d53a 	srai	r20,r23,20
100009f0:	a53efa84 	addi	r20,r20,-1046
100009f4:	a024953a 	slli	r18,r20,20
100009f8:	bca5c83a 	sub	r18,r23,r18
100009fc:	900b883a 	mov	r5,r18
10000a00:	00054b00 	call	100054b0 <__fixdfsi>
10000a04:	1009883a 	mov	r4,r2
10000a08:	00055300 	call	10005530 <__floatsidf>
10000a0c:	9809883a 	mov	r4,r19
10000a10:	900b883a 	mov	r5,r18
10000a14:	100d883a 	mov	r6,r2
10000a18:	180f883a 	mov	r7,r3
10000a1c:	d8800215 	stw	r2,8(sp)
10000a20:	d8c00315 	stw	r3,12(sp)
10000a24:	0004bb40 	call	10004bb4 <__subdf3>
10000a28:	000d883a 	mov	r6,zero
10000a2c:	01d05c34 	movhi	r7,16752
10000a30:	1009883a 	mov	r4,r2
10000a34:	180b883a 	mov	r5,r3
10000a38:	000449c0 	call	1000449c <__muldf3>
10000a3c:	180b883a 	mov	r5,r3
10000a40:	1009883a 	mov	r4,r2
10000a44:	182b883a 	mov	r21,r3
10000a48:	102d883a 	mov	r22,r2
10000a4c:	00054b00 	call	100054b0 <__fixdfsi>
10000a50:	1009883a 	mov	r4,r2
10000a54:	00055300 	call	10005530 <__floatsidf>
10000a58:	100d883a 	mov	r6,r2
10000a5c:	180f883a 	mov	r7,r3
10000a60:	b009883a 	mov	r4,r22
10000a64:	a80b883a 	mov	r5,r21
10000a68:	1027883a 	mov	r19,r2
10000a6c:	1825883a 	mov	r18,r3
10000a70:	d8800415 	stw	r2,16(sp)
10000a74:	d8c00515 	stw	r3,20(sp)
10000a78:	0004bb40 	call	10004bb4 <__subdf3>
10000a7c:	000d883a 	mov	r6,zero
10000a80:	01d05c34 	movhi	r7,16752
10000a84:	1009883a 	mov	r4,r2
10000a88:	180b883a 	mov	r5,r3
10000a8c:	000449c0 	call	1000449c <__muldf3>
10000a90:	000d883a 	mov	r6,zero
10000a94:	000f883a 	mov	r7,zero
10000a98:	1009883a 	mov	r4,r2
10000a9c:	180b883a 	mov	r5,r3
10000aa0:	d8800615 	stw	r2,24(sp)
10000aa4:	d8c00715 	stw	r3,28(sp)
10000aa8:	00042440 	call	10004244 <__eqdf2>
10000aac:	1001431e 	bne	r2,zero,10000fbc <__ieee754_rem_pio2+0x6d0>
10000ab0:	000f883a 	mov	r7,zero
10000ab4:	000d883a 	mov	r6,zero
10000ab8:	9809883a 	mov	r4,r19
10000abc:	900b883a 	mov	r5,r18
10000ac0:	00042440 	call	10004244 <__eqdf2>
10000ac4:	100f003a 	cmpeq	r7,r2,zero
10000ac8:	00800084 	movi	r2,2
10000acc:	11cfc83a 	sub	r7,r2,r7
10000ad0:	00800084 	movi	r2,2
10000ad4:	d8800015 	stw	r2,0(sp)
10000ad8:	00840774 	movhi	r2,4125
10000adc:	10a47304 	addi	r2,r2,-28212
10000ae0:	d8800115 	stw	r2,4(sp)
10000ae4:	a00d883a 	mov	r6,r20
10000ae8:	800b883a 	mov	r5,r16
10000aec:	d9000204 	addi	r4,sp,8
10000af0:	00014fc0 	call	100014fc <__kernel_rem_pio2>
10000af4:	88000d0e 	bge	r17,zero,10000b2c <__ieee754_rem_pio2+0x240>
10000af8:	81000117 	ldw	r4,4(r16)
10000afc:	80c00317 	ldw	r3,12(r16)
10000b00:	0085c83a 	sub	r2,zero,r2
10000b04:	2120003c 	xorhi	r4,r4,32768
10000b08:	18e0003c 	xorhi	r3,r3,32768
10000b0c:	81000115 	stw	r4,4(r16)
10000b10:	80c00315 	stw	r3,12(r16)
10000b14:	00000506 	br	10000b2c <__ieee754_rem_pio2+0x240>
10000b18:	31000015 	stw	r4,0(r6)
10000b1c:	31400115 	stw	r5,4(r6)
10000b20:	30000215 	stw	zero,8(r6)
10000b24:	30000315 	stw	zero,12(r6)
10000b28:	0005883a 	mov	r2,zero
10000b2c:	dfc01517 	ldw	ra,84(sp)
10000b30:	df001417 	ldw	fp,80(sp)
10000b34:	ddc01317 	ldw	r23,76(sp)
10000b38:	dd801217 	ldw	r22,72(sp)
10000b3c:	dd401117 	ldw	r21,68(sp)
10000b40:	dd001017 	ldw	r20,64(sp)
10000b44:	dcc00f17 	ldw	r19,60(sp)
10000b48:	dc800e17 	ldw	r18,56(sp)
10000b4c:	dc400d17 	ldw	r17,52(sp)
10000b50:	dc000c17 	ldw	r16,48(sp)
10000b54:	dec01604 	addi	sp,sp,88
10000b58:	f800283a 	ret
10000b5c:	200d883a 	mov	r6,r4
10000b60:	280f883a 	mov	r7,r5
10000b64:	0004bb40 	call	10004bb4 <__subdf3>
10000b68:	80800215 	stw	r2,8(r16)
10000b6c:	80800015 	stw	r2,0(r16)
10000b70:	80c00315 	stw	r3,12(r16)
10000b74:	80c00115 	stw	r3,4(r16)
10000b78:	0005883a 	mov	r2,zero
10000b7c:	003feb06 	br	10000b2c <__ieee754_rem_pio2+0x240>
10000b80:	01cf7474 	movhi	r7,15825
10000b84:	9009883a 	mov	r4,r18
10000b88:	39ed1844 	addi	r7,r7,-19359
10000b8c:	01869834 	movhi	r6,6752
10000b90:	180b883a 	mov	r5,r3
10000b94:	0004bb40 	call	10004bb4 <__subdf3>
10000b98:	018b80f4 	movhi	r6,11779
10000b9c:	01cee8f4 	movhi	r7,15267
10000ba0:	319c1cc4 	addi	r6,r6,28787
10000ba4:	39c66284 	addi	r7,r7,6538
10000ba8:	1009883a 	mov	r4,r2
10000bac:	180b883a 	mov	r5,r3
10000bb0:	1025883a 	mov	r18,r2
10000bb4:	1823883a 	mov	r17,r3
10000bb8:	0004bb40 	call	10004bb4 <__subdf3>
10000bbc:	100d883a 	mov	r6,r2
10000bc0:	180f883a 	mov	r7,r3
10000bc4:	9009883a 	mov	r4,r18
10000bc8:	880b883a 	mov	r5,r17
10000bcc:	80800015 	stw	r2,0(r16)
10000bd0:	80c00115 	stw	r3,4(r16)
10000bd4:	0004bb40 	call	10004bb4 <__subdf3>
10000bd8:	018b80f4 	movhi	r6,11779
10000bdc:	01cee8f4 	movhi	r7,15267
10000be0:	319c1cc4 	addi	r6,r6,28787
10000be4:	39c66284 	addi	r7,r7,6538
10000be8:	003f7306 	br	100009b8 <__ieee754_rem_pio2+0xcc>
10000bec:	00025580 	call	10002558 <fabs>
10000bf0:	019b72b4 	movhi	r6,28106
10000bf4:	01cff934 	movhi	r7,16356
10000bf8:	31b220c4 	addi	r6,r6,-14205
10000bfc:	39d7cc04 	addi	r7,r7,24368
10000c00:	1009883a 	mov	r4,r2
10000c04:	180b883a 	mov	r5,r3
10000c08:	102d883a 	mov	r22,r2
10000c0c:	182b883a 	mov	r21,r3
10000c10:	000449c0 	call	1000449c <__muldf3>
10000c14:	000d883a 	mov	r6,zero
10000c18:	01cff834 	movhi	r7,16352
10000c1c:	1009883a 	mov	r4,r2
10000c20:	180b883a 	mov	r5,r3
10000c24:	00030b00 	call	100030b0 <__adddf3>
10000c28:	180b883a 	mov	r5,r3
10000c2c:	1009883a 	mov	r4,r2
10000c30:	00054b00 	call	100054b0 <__fixdfsi>
10000c34:	1009883a 	mov	r4,r2
10000c38:	1025883a 	mov	r18,r2
10000c3c:	00055300 	call	10005530 <__floatsidf>
10000c40:	01cffe74 	movhi	r7,16377
10000c44:	39c87ec4 	addi	r7,r7,8699
10000c48:	01951034 	movhi	r6,21568
10000c4c:	1009883a 	mov	r4,r2
10000c50:	180b883a 	mov	r5,r3
10000c54:	1029883a 	mov	r20,r2
10000c58:	1827883a 	mov	r19,r3
10000c5c:	000449c0 	call	1000449c <__muldf3>
10000c60:	b009883a 	mov	r4,r22
10000c64:	a80b883a 	mov	r5,r21
10000c68:	100d883a 	mov	r6,r2
10000c6c:	180f883a 	mov	r7,r3
10000c70:	0004bb40 	call	10004bb4 <__subdf3>
10000c74:	018698b4 	movhi	r6,6754
10000c78:	01cf7474 	movhi	r7,15825
10000c7c:	a009883a 	mov	r4,r20
10000c80:	3198cc44 	addi	r6,r6,25393
10000c84:	39ed1844 	addi	r7,r7,-19359
10000c88:	980b883a 	mov	r5,r19
10000c8c:	1039883a 	mov	fp,r2
10000c90:	d8c00815 	stw	r3,32(sp)
10000c94:	000449c0 	call	1000449c <__muldf3>
10000c98:	010007c4 	movi	r4,31
10000c9c:	e017883a 	mov	r11,fp
10000ca0:	da800817 	ldw	r10,32(sp)
10000ca4:	102d883a 	mov	r22,r2
10000ca8:	182b883a 	mov	r21,r3
10000cac:	24802816 	blt	r4,r18,10000d50 <__ieee754_rem_pio2+0x464>
10000cb0:	913fffc4 	addi	r4,r18,-1
10000cb4:	2109883a 	add	r4,r4,r4
10000cb8:	01440774 	movhi	r5,4125
10000cbc:	2109883a 	add	r4,r4,r4
10000cc0:	29645304 	addi	r5,r5,-28340
10000cc4:	2909883a 	add	r4,r5,r4
10000cc8:	21000017 	ldw	r4,0(r4)
10000ccc:	b9002026 	beq	r23,r4,10000d50 <__ieee754_rem_pio2+0x464>
10000cd0:	100d883a 	mov	r6,r2
10000cd4:	180f883a 	mov	r7,r3
10000cd8:	e009883a 	mov	r4,fp
10000cdc:	500b883a 	mov	r5,r10
10000ce0:	da800b15 	stw	r10,44(sp)
10000ce4:	df000a15 	stw	fp,40(sp)
10000ce8:	0004bb40 	call	10004bb4 <__subdf3>
10000cec:	da800b17 	ldw	r10,44(sp)
10000cf0:	dac00a17 	ldw	r11,40(sp)
10000cf4:	1019883a 	mov	r12,r2
10000cf8:	1813883a 	mov	r9,r3
10000cfc:	80800015 	stw	r2,0(r16)
10000d00:	80c00115 	stw	r3,4(r16)
10000d04:	600d883a 	mov	r6,r12
10000d08:	480f883a 	mov	r7,r9
10000d0c:	5809883a 	mov	r4,r11
10000d10:	500b883a 	mov	r5,r10
10000d14:	da400b15 	stw	r9,44(sp)
10000d18:	db000a15 	stw	r12,40(sp)
10000d1c:	0004bb40 	call	10004bb4 <__subdf3>
10000d20:	b00d883a 	mov	r6,r22
10000d24:	a80f883a 	mov	r7,r21
10000d28:	1009883a 	mov	r4,r2
10000d2c:	180b883a 	mov	r5,r3
10000d30:	0004bb40 	call	10004bb4 <__subdf3>
10000d34:	80800215 	stw	r2,8(r16)
10000d38:	80c00315 	stw	r3,12(r16)
10000d3c:	da400b17 	ldw	r9,44(sp)
10000d40:	db000a17 	ldw	r12,40(sp)
10000d44:	88009f16 	blt	r17,zero,10000fc4 <__ieee754_rem_pio2+0x6d8>
10000d48:	9005883a 	mov	r2,r18
10000d4c:	003f7706 	br	10000b2c <__ieee754_rem_pio2+0x240>
10000d50:	d9400817 	ldw	r5,32(sp)
10000d54:	100d883a 	mov	r6,r2
10000d58:	180f883a 	mov	r7,r3
10000d5c:	e009883a 	mov	r4,fp
10000d60:	da800b15 	stw	r10,44(sp)
10000d64:	dac00a15 	stw	r11,40(sp)
10000d68:	0004bb40 	call	10004bb4 <__subdf3>
10000d6c:	1019883a 	mov	r12,r2
10000d70:	1804d53a 	srli	r2,r3,20
10000d74:	b811d53a 	srai	r8,r23,20
10000d78:	1813883a 	mov	r9,r3
10000d7c:	1081ffcc 	andi	r2,r2,2047
10000d80:	80c00115 	stw	r3,4(r16)
10000d84:	83000015 	stw	r12,0(r16)
10000d88:	4085c83a 	sub	r2,r8,r2
10000d8c:	00c00404 	movi	r3,16
10000d90:	da800b17 	ldw	r10,44(sp)
10000d94:	dac00a17 	ldw	r11,40(sp)
10000d98:	18bfda0e 	bge	r3,r2,10000d04 <__ieee754_rem_pio2+0x418>
10000d9c:	01cf7474 	movhi	r7,15825
10000da0:	39ed1844 	addi	r7,r7,-19359
10000da4:	01869834 	movhi	r6,6752
10000da8:	a009883a 	mov	r4,r20
10000dac:	980b883a 	mov	r5,r19
10000db0:	da000a15 	stw	r8,40(sp)
10000db4:	000449c0 	call	1000449c <__muldf3>
10000db8:	d9400817 	ldw	r5,32(sp)
10000dbc:	100d883a 	mov	r6,r2
10000dc0:	180f883a 	mov	r7,r3
10000dc4:	e009883a 	mov	r4,fp
10000dc8:	102d883a 	mov	r22,r2
10000dcc:	182b883a 	mov	r21,r3
10000dd0:	0004bb40 	call	10004bb4 <__subdf3>
10000dd4:	d9400817 	ldw	r5,32(sp)
10000dd8:	100d883a 	mov	r6,r2
10000ddc:	180f883a 	mov	r7,r3
10000de0:	e009883a 	mov	r4,fp
10000de4:	182f883a 	mov	r23,r3
10000de8:	d8800915 	stw	r2,36(sp)
10000dec:	0004bb40 	call	10004bb4 <__subdf3>
10000df0:	b00d883a 	mov	r6,r22
10000df4:	a80f883a 	mov	r7,r21
10000df8:	1009883a 	mov	r4,r2
10000dfc:	180b883a 	mov	r5,r3
10000e00:	0004bb40 	call	10004bb4 <__subdf3>
10000e04:	018b80f4 	movhi	r6,11779
10000e08:	01cee8f4 	movhi	r7,15267
10000e0c:	319c1cc4 	addi	r6,r6,28787
10000e10:	39c66284 	addi	r7,r7,6538
10000e14:	a009883a 	mov	r4,r20
10000e18:	980b883a 	mov	r5,r19
10000e1c:	102d883a 	mov	r22,r2
10000e20:	182b883a 	mov	r21,r3
10000e24:	000449c0 	call	1000449c <__muldf3>
10000e28:	b00d883a 	mov	r6,r22
10000e2c:	a80f883a 	mov	r7,r21
10000e30:	1009883a 	mov	r4,r2
10000e34:	180b883a 	mov	r5,r3
10000e38:	0004bb40 	call	10004bb4 <__subdf3>
10000e3c:	d9000917 	ldw	r4,36(sp)
10000e40:	100d883a 	mov	r6,r2
10000e44:	180f883a 	mov	r7,r3
10000e48:	b80b883a 	mov	r5,r23
10000e4c:	102d883a 	mov	r22,r2
10000e50:	182b883a 	mov	r21,r3
10000e54:	0004bb40 	call	10004bb4 <__subdf3>
10000e58:	1019883a 	mov	r12,r2
10000e5c:	1804d53a 	srli	r2,r3,20
10000e60:	da000a17 	ldw	r8,40(sp)
10000e64:	83000015 	stw	r12,0(r16)
10000e68:	1081ffcc 	andi	r2,r2,2047
10000e6c:	4091c83a 	sub	r8,r8,r2
10000e70:	80c00115 	stw	r3,4(r16)
10000e74:	00800c44 	movi	r2,49
10000e78:	1813883a 	mov	r9,r3
10000e7c:	1200730e 	bge	r2,r8,1000104c <__ieee754_rem_pio2+0x760>
10000e80:	01cee8f4 	movhi	r7,15267
10000e84:	39c66284 	addi	r7,r7,6538
10000e88:	018b8034 	movhi	r6,11776
10000e8c:	a009883a 	mov	r4,r20
10000e90:	980b883a 	mov	r5,r19
10000e94:	000449c0 	call	1000449c <__muldf3>
10000e98:	d9000917 	ldw	r4,36(sp)
10000e9c:	100d883a 	mov	r6,r2
10000ea0:	180f883a 	mov	r7,r3
10000ea4:	b80b883a 	mov	r5,r23
10000ea8:	102d883a 	mov	r22,r2
10000eac:	182b883a 	mov	r21,r3
10000eb0:	0004bb40 	call	10004bb4 <__subdf3>
10000eb4:	d9000917 	ldw	r4,36(sp)
10000eb8:	100d883a 	mov	r6,r2
10000ebc:	180f883a 	mov	r7,r3
10000ec0:	b80b883a 	mov	r5,r23
10000ec4:	d8c00b15 	stw	r3,44(sp)
10000ec8:	d8800a15 	stw	r2,40(sp)
10000ecc:	0004bb40 	call	10004bb4 <__subdf3>
10000ed0:	b00d883a 	mov	r6,r22
10000ed4:	a80f883a 	mov	r7,r21
10000ed8:	1009883a 	mov	r4,r2
10000edc:	180b883a 	mov	r5,r3
10000ee0:	0004bb40 	call	10004bb4 <__subdf3>
10000ee4:	01894834 	movhi	r6,9504
10000ee8:	01ce5f34 	movhi	r7,14716
10000eec:	31927044 	addi	r6,r6,18881
10000ef0:	39e0e684 	addi	r7,r7,-31846
10000ef4:	a009883a 	mov	r4,r20
10000ef8:	980b883a 	mov	r5,r19
10000efc:	102d883a 	mov	r22,r2
10000f00:	182b883a 	mov	r21,r3
10000f04:	000449c0 	call	1000449c <__muldf3>
10000f08:	b00d883a 	mov	r6,r22
10000f0c:	a80f883a 	mov	r7,r21
10000f10:	1009883a 	mov	r4,r2
10000f14:	180b883a 	mov	r5,r3
10000f18:	0004bb40 	call	10004bb4 <__subdf3>
10000f1c:	dac00a17 	ldw	r11,40(sp)
10000f20:	da800b17 	ldw	r10,44(sp)
10000f24:	102d883a 	mov	r22,r2
10000f28:	182b883a 	mov	r21,r3
10000f2c:	100d883a 	mov	r6,r2
10000f30:	180f883a 	mov	r7,r3
10000f34:	5809883a 	mov	r4,r11
10000f38:	500b883a 	mov	r5,r10
10000f3c:	003f6a06 	br	10000ce8 <__ieee754_rem_pio2+0x3fc>
10000f40:	00030b00 	call	100030b0 <__adddf3>
10000f44:	1025883a 	mov	r18,r2
10000f48:	008ffe74 	movhi	r2,16377
10000f4c:	10887ec4 	addi	r2,r2,8699
10000f50:	1823883a 	mov	r17,r3
10000f54:	b8802226 	beq	r23,r2,10000fe0 <__ieee754_rem_pio2+0x6f4>
10000f58:	018698b4 	movhi	r6,6754
10000f5c:	01cf7474 	movhi	r7,15825
10000f60:	3198cc44 	addi	r6,r6,25393
10000f64:	39ed1844 	addi	r7,r7,-19359
10000f68:	9009883a 	mov	r4,r18
10000f6c:	180b883a 	mov	r5,r3
10000f70:	00030b00 	call	100030b0 <__adddf3>
10000f74:	100d883a 	mov	r6,r2
10000f78:	180f883a 	mov	r7,r3
10000f7c:	9009883a 	mov	r4,r18
10000f80:	880b883a 	mov	r5,r17
10000f84:	80800015 	stw	r2,0(r16)
10000f88:	80c00115 	stw	r3,4(r16)
10000f8c:	0004bb40 	call	10004bb4 <__subdf3>
10000f90:	018698b4 	movhi	r6,6754
10000f94:	01cf7474 	movhi	r7,15825
10000f98:	3198cc44 	addi	r6,r6,25393
10000f9c:	39ed1844 	addi	r7,r7,-19359
10000fa0:	1009883a 	mov	r4,r2
10000fa4:	180b883a 	mov	r5,r3
10000fa8:	00030b00 	call	100030b0 <__adddf3>
10000fac:	80800215 	stw	r2,8(r16)
10000fb0:	80c00315 	stw	r3,12(r16)
10000fb4:	00bfffc4 	movi	r2,-1
10000fb8:	003edc06 	br	10000b2c <__ieee754_rem_pio2+0x240>
10000fbc:	01c000c4 	movi	r7,3
10000fc0:	003ec306 	br	10000ad0 <__ieee754_rem_pio2+0x1e4>
10000fc4:	4a60003c 	xorhi	r9,r9,32768
10000fc8:	18e0003c 	xorhi	r3,r3,32768
10000fcc:	83000015 	stw	r12,0(r16)
10000fd0:	82400115 	stw	r9,4(r16)
10000fd4:	80c00315 	stw	r3,12(r16)
10000fd8:	0485c83a 	sub	r2,zero,r18
10000fdc:	003ed306 	br	10000b2c <__ieee754_rem_pio2+0x240>
10000fe0:	01cf7474 	movhi	r7,15825
10000fe4:	9009883a 	mov	r4,r18
10000fe8:	39ed1844 	addi	r7,r7,-19359
10000fec:	01869834 	movhi	r6,6752
10000ff0:	180b883a 	mov	r5,r3
10000ff4:	00030b00 	call	100030b0 <__adddf3>
10000ff8:	018b80f4 	movhi	r6,11779
10000ffc:	01cee8f4 	movhi	r7,15267
10001000:	319c1cc4 	addi	r6,r6,28787
10001004:	39c66284 	addi	r7,r7,6538
10001008:	1009883a 	mov	r4,r2
1000100c:	180b883a 	mov	r5,r3
10001010:	1025883a 	mov	r18,r2
10001014:	1823883a 	mov	r17,r3
10001018:	00030b00 	call	100030b0 <__adddf3>
1000101c:	100d883a 	mov	r6,r2
10001020:	180f883a 	mov	r7,r3
10001024:	9009883a 	mov	r4,r18
10001028:	880b883a 	mov	r5,r17
1000102c:	80800015 	stw	r2,0(r16)
10001030:	80c00115 	stw	r3,4(r16)
10001034:	0004bb40 	call	10004bb4 <__subdf3>
10001038:	018b80f4 	movhi	r6,11779
1000103c:	01cee8f4 	movhi	r7,15267
10001040:	319c1cc4 	addi	r6,r6,28787
10001044:	39c66284 	addi	r7,r7,6538
10001048:	003fd506 	br	10000fa0 <__ieee754_rem_pio2+0x6b4>
1000104c:	dac00917 	ldw	r11,36(sp)
10001050:	b815883a 	mov	r10,r23
10001054:	003f2b06 	br	10000d04 <__ieee754_rem_pio2+0x418>

10001058 <__kernel_cos>:
10001058:	defff304 	addi	sp,sp,-52
1000105c:	dc000315 	stw	r16,12(sp)
10001060:	04200034 	movhi	r16,32768
10001064:	843fffc4 	addi	r16,r16,-1
10001068:	008f9034 	movhi	r2,15936
1000106c:	df000b15 	stw	fp,44(sp)
10001070:	ddc00a15 	stw	r23,40(sp)
10001074:	dd800915 	stw	r22,36(sp)
10001078:	dcc00615 	stw	r19,24(sp)
1000107c:	dfc00c15 	stw	ra,48(sp)
10001080:	dd400815 	stw	r21,32(sp)
10001084:	dd000715 	stw	r20,28(sp)
10001088:	dc800515 	stw	r18,20(sp)
1000108c:	dc400415 	stw	r17,16(sp)
10001090:	2c20703a 	and	r16,r5,r16
10001094:	10bfffc4 	addi	r2,r2,-1
10001098:	2827883a 	mov	r19,r5
1000109c:	202d883a 	mov	r22,r4
100010a0:	302f883a 	mov	r23,r6
100010a4:	3839883a 	mov	fp,r7
100010a8:	14007516 	blt	r2,r16,10001280 <__kernel_cos+0x228>
100010ac:	00054b00 	call	100054b0 <__fixdfsi>
100010b0:	10010f26 	beq	r2,zero,100014f0 <__kernel_cos+0x498>
100010b4:	b00d883a 	mov	r6,r22
100010b8:	980f883a 	mov	r7,r19
100010bc:	b009883a 	mov	r4,r22
100010c0:	980b883a 	mov	r5,r19
100010c4:	000449c0 	call	1000449c <__muldf3>
100010c8:	01afa234 	movhi	r6,48776
100010cc:	01ef6a74 	movhi	r7,48553
100010d0:	318e3504 	addi	r6,r6,14548
100010d4:	39feba44 	addi	r7,r7,-1303
100010d8:	1009883a 	mov	r4,r2
100010dc:	180b883a 	mov	r5,r3
100010e0:	102b883a 	mov	r21,r2
100010e4:	1829883a 	mov	r20,r3
100010e8:	000449c0 	call	1000449c <__muldf3>
100010ec:	01af6d74 	movhi	r6,48565
100010f0:	01cf88b4 	movhi	r7,15906
100010f4:	31ac7104 	addi	r6,r6,-20028
100010f8:	39fba784 	addi	r7,r7,-4450
100010fc:	1009883a 	mov	r4,r2
10001100:	180b883a 	mov	r5,r3
10001104:	00030b00 	call	100030b0 <__adddf3>
10001108:	a80d883a 	mov	r6,r21
1000110c:	a00f883a 	mov	r7,r20
10001110:	1009883a 	mov	r4,r2
10001114:	180b883a 	mov	r5,r3
10001118:	000449c0 	call	1000449c <__muldf3>
1000111c:	01a02734 	movhi	r6,32924
10001120:	01cfa4b4 	movhi	r7,16018
10001124:	3194ab44 	addi	r6,r6,21165
10001128:	39df93c4 	addi	r7,r7,32335
1000112c:	1009883a 	mov	r4,r2
10001130:	180b883a 	mov	r5,r3
10001134:	0004bb40 	call	10004bb4 <__subdf3>
10001138:	a80d883a 	mov	r6,r21
1000113c:	a00f883a 	mov	r7,r20
10001140:	1009883a 	mov	r4,r2
10001144:	180b883a 	mov	r5,r3
10001148:	000449c0 	call	1000449c <__muldf3>
1000114c:	018672f4 	movhi	r6,6603
10001150:	01cfbeb4 	movhi	r7,16122
10001154:	31856404 	addi	r6,r6,5520
10001158:	39c06804 	addi	r7,r7,416
1000115c:	1009883a 	mov	r4,r2
10001160:	180b883a 	mov	r5,r3
10001164:	00030b00 	call	100030b0 <__adddf3>
10001168:	a80d883a 	mov	r6,r21
1000116c:	a00f883a 	mov	r7,r20
10001170:	1009883a 	mov	r4,r2
10001174:	180b883a 	mov	r5,r3
10001178:	000449c0 	call	1000449c <__muldf3>
1000117c:	0185b074 	movhi	r6,5825
10001180:	01cfd5f4 	movhi	r7,16215
10001184:	31945dc4 	addi	r6,r6,20855
10001188:	39f05b04 	addi	r7,r7,-16020
1000118c:	1009883a 	mov	r4,r2
10001190:	180b883a 	mov	r5,r3
10001194:	0004bb40 	call	10004bb4 <__subdf3>
10001198:	a80d883a 	mov	r6,r21
1000119c:	a00f883a 	mov	r7,r20
100011a0:	1009883a 	mov	r4,r2
100011a4:	180b883a 	mov	r5,r3
100011a8:	000449c0 	call	1000449c <__muldf3>
100011ac:	01955574 	movhi	r6,21845
100011b0:	01cfe974 	movhi	r7,16293
100011b4:	31955304 	addi	r6,r6,21836
100011b8:	39d55544 	addi	r7,r7,21845
100011bc:	1009883a 	mov	r4,r2
100011c0:	180b883a 	mov	r5,r3
100011c4:	00030b00 	call	100030b0 <__adddf3>
100011c8:	a80d883a 	mov	r6,r21
100011cc:	a00f883a 	mov	r7,r20
100011d0:	1009883a 	mov	r4,r2
100011d4:	180b883a 	mov	r5,r3
100011d8:	000449c0 	call	1000449c <__muldf3>
100011dc:	1017883a 	mov	r11,r2
100011e0:	1815883a 	mov	r10,r3
100011e4:	a809883a 	mov	r4,r21
100011e8:	a00b883a 	mov	r5,r20
100011ec:	000d883a 	mov	r6,zero
100011f0:	01cff834 	movhi	r7,16352
100011f4:	da800215 	stw	r10,8(sp)
100011f8:	dac00115 	stw	r11,4(sp)
100011fc:	000449c0 	call	1000449c <__muldf3>
10001200:	dac00117 	ldw	r11,4(sp)
10001204:	da800217 	ldw	r10,8(sp)
10001208:	a809883a 	mov	r4,r21
1000120c:	580d883a 	mov	r6,r11
10001210:	500f883a 	mov	r7,r10
10001214:	a00b883a 	mov	r5,r20
10001218:	1023883a 	mov	r17,r2
1000121c:	1821883a 	mov	r16,r3
10001220:	000449c0 	call	1000449c <__muldf3>
10001224:	b80d883a 	mov	r6,r23
10001228:	e00f883a 	mov	r7,fp
1000122c:	b009883a 	mov	r4,r22
10001230:	980b883a 	mov	r5,r19
10001234:	1029883a 	mov	r20,r2
10001238:	1825883a 	mov	r18,r3
1000123c:	000449c0 	call	1000449c <__muldf3>
10001240:	a009883a 	mov	r4,r20
10001244:	900b883a 	mov	r5,r18
10001248:	100d883a 	mov	r6,r2
1000124c:	180f883a 	mov	r7,r3
10001250:	0004bb40 	call	10004bb4 <__subdf3>
10001254:	8809883a 	mov	r4,r17
10001258:	800b883a 	mov	r5,r16
1000125c:	100d883a 	mov	r6,r2
10001260:	180f883a 	mov	r7,r3
10001264:	0004bb40 	call	10004bb4 <__subdf3>
10001268:	100d883a 	mov	r6,r2
1000126c:	180f883a 	mov	r7,r3
10001270:	0009883a 	mov	r4,zero
10001274:	014ffc34 	movhi	r5,16368
10001278:	0004bb40 	call	10004bb4 <__subdf3>
1000127c:	00008b06 	br	100014ac <__kernel_cos+0x454>
10001280:	200d883a 	mov	r6,r4
10001284:	280f883a 	mov	r7,r5
10001288:	000449c0 	call	1000449c <__muldf3>
1000128c:	01afa234 	movhi	r6,48776
10001290:	01ef6a74 	movhi	r7,48553
10001294:	318e3504 	addi	r6,r6,14548
10001298:	39feba44 	addi	r7,r7,-1303
1000129c:	1009883a 	mov	r4,r2
100012a0:	180b883a 	mov	r5,r3
100012a4:	1025883a 	mov	r18,r2
100012a8:	1823883a 	mov	r17,r3
100012ac:	000449c0 	call	1000449c <__muldf3>
100012b0:	01af6d74 	movhi	r6,48565
100012b4:	01cf88b4 	movhi	r7,15906
100012b8:	31ac7104 	addi	r6,r6,-20028
100012bc:	39fba784 	addi	r7,r7,-4450
100012c0:	1009883a 	mov	r4,r2
100012c4:	180b883a 	mov	r5,r3
100012c8:	00030b00 	call	100030b0 <__adddf3>
100012cc:	900d883a 	mov	r6,r18
100012d0:	880f883a 	mov	r7,r17
100012d4:	1009883a 	mov	r4,r2
100012d8:	180b883a 	mov	r5,r3
100012dc:	000449c0 	call	1000449c <__muldf3>
100012e0:	01a02734 	movhi	r6,32924
100012e4:	01cfa4b4 	movhi	r7,16018
100012e8:	3194ab44 	addi	r6,r6,21165
100012ec:	39df93c4 	addi	r7,r7,32335
100012f0:	1009883a 	mov	r4,r2
100012f4:	180b883a 	mov	r5,r3
100012f8:	0004bb40 	call	10004bb4 <__subdf3>
100012fc:	900d883a 	mov	r6,r18
10001300:	880f883a 	mov	r7,r17
10001304:	1009883a 	mov	r4,r2
10001308:	180b883a 	mov	r5,r3
1000130c:	000449c0 	call	1000449c <__muldf3>
10001310:	018672f4 	movhi	r6,6603
10001314:	01cfbeb4 	movhi	r7,16122
10001318:	31856404 	addi	r6,r6,5520
1000131c:	39c06804 	addi	r7,r7,416
10001320:	1009883a 	mov	r4,r2
10001324:	180b883a 	mov	r5,r3
10001328:	00030b00 	call	100030b0 <__adddf3>
1000132c:	900d883a 	mov	r6,r18
10001330:	880f883a 	mov	r7,r17
10001334:	1009883a 	mov	r4,r2
10001338:	180b883a 	mov	r5,r3
1000133c:	000449c0 	call	1000449c <__muldf3>
10001340:	0185b074 	movhi	r6,5825
10001344:	01cfd5f4 	movhi	r7,16215
10001348:	31945dc4 	addi	r6,r6,20855
1000134c:	39f05b04 	addi	r7,r7,-16020
10001350:	1009883a 	mov	r4,r2
10001354:	180b883a 	mov	r5,r3
10001358:	0004bb40 	call	10004bb4 <__subdf3>
1000135c:	900d883a 	mov	r6,r18
10001360:	880f883a 	mov	r7,r17
10001364:	1009883a 	mov	r4,r2
10001368:	180b883a 	mov	r5,r3
1000136c:	000449c0 	call	1000449c <__muldf3>
10001370:	01955574 	movhi	r6,21845
10001374:	01cfe974 	movhi	r7,16293
10001378:	31955304 	addi	r6,r6,21836
1000137c:	39d55544 	addi	r7,r7,21845
10001380:	1009883a 	mov	r4,r2
10001384:	180b883a 	mov	r5,r3
10001388:	00030b00 	call	100030b0 <__adddf3>
1000138c:	900d883a 	mov	r6,r18
10001390:	880f883a 	mov	r7,r17
10001394:	1009883a 	mov	r4,r2
10001398:	180b883a 	mov	r5,r3
1000139c:	000449c0 	call	1000449c <__muldf3>
100013a0:	1013883a 	mov	r9,r2
100013a4:	1017883a 	mov	r11,r2
100013a8:	008ff4f4 	movhi	r2,16339
100013ac:	108ccc84 	addi	r2,r2,13106
100013b0:	1811883a 	mov	r8,r3
100013b4:	902b883a 	mov	r21,r18
100013b8:	8829883a 	mov	r20,r17
100013bc:	1815883a 	mov	r10,r3
100013c0:	143f880e 	bge	r2,r16,100011e4 <__kernel_cos+0x18c>
100013c4:	008ffa74 	movhi	r2,16361
100013c8:	14004416 	blt	r2,r16,100014dc <__kernel_cos+0x484>
100013cc:	00bff834 	movhi	r2,65504
100013d0:	80a1883a 	add	r16,r16,r2
100013d4:	000d883a 	mov	r6,zero
100013d8:	800f883a 	mov	r7,r16
100013dc:	0009883a 	mov	r4,zero
100013e0:	014ffc34 	movhi	r5,16368
100013e4:	da400115 	stw	r9,4(sp)
100013e8:	d8c00215 	stw	r3,8(sp)
100013ec:	0004bb40 	call	10004bb4 <__subdf3>
100013f0:	da000217 	ldw	r8,8(sp)
100013f4:	da400117 	ldw	r9,4(sp)
100013f8:	102b883a 	mov	r21,r2
100013fc:	d8c00015 	stw	r3,0(sp)
10001400:	9009883a 	mov	r4,r18
10001404:	880b883a 	mov	r5,r17
10001408:	000d883a 	mov	r6,zero
1000140c:	01cff834 	movhi	r7,16352
10001410:	da000215 	stw	r8,8(sp)
10001414:	da400115 	stw	r9,4(sp)
10001418:	000449c0 	call	1000449c <__muldf3>
1000141c:	800f883a 	mov	r7,r16
10001420:	000d883a 	mov	r6,zero
10001424:	1009883a 	mov	r4,r2
10001428:	180b883a 	mov	r5,r3
1000142c:	0004bb40 	call	10004bb4 <__subdf3>
10001430:	da400117 	ldw	r9,4(sp)
10001434:	da000217 	ldw	r8,8(sp)
10001438:	9009883a 	mov	r4,r18
1000143c:	480d883a 	mov	r6,r9
10001440:	400f883a 	mov	r7,r8
10001444:	880b883a 	mov	r5,r17
10001448:	1029883a 	mov	r20,r2
1000144c:	1821883a 	mov	r16,r3
10001450:	000449c0 	call	1000449c <__muldf3>
10001454:	b80d883a 	mov	r6,r23
10001458:	e00f883a 	mov	r7,fp
1000145c:	b009883a 	mov	r4,r22
10001460:	980b883a 	mov	r5,r19
10001464:	1025883a 	mov	r18,r2
10001468:	1823883a 	mov	r17,r3
1000146c:	000449c0 	call	1000449c <__muldf3>
10001470:	100d883a 	mov	r6,r2
10001474:	180f883a 	mov	r7,r3
10001478:	9009883a 	mov	r4,r18
1000147c:	880b883a 	mov	r5,r17
10001480:	0004bb40 	call	10004bb4 <__subdf3>
10001484:	100d883a 	mov	r6,r2
10001488:	180f883a 	mov	r7,r3
1000148c:	a009883a 	mov	r4,r20
10001490:	800b883a 	mov	r5,r16
10001494:	0004bb40 	call	10004bb4 <__subdf3>
10001498:	d9400017 	ldw	r5,0(sp)
1000149c:	100d883a 	mov	r6,r2
100014a0:	180f883a 	mov	r7,r3
100014a4:	a809883a 	mov	r4,r21
100014a8:	0004bb40 	call	10004bb4 <__subdf3>
100014ac:	dfc00c17 	ldw	ra,48(sp)
100014b0:	df000b17 	ldw	fp,44(sp)
100014b4:	ddc00a17 	ldw	r23,40(sp)
100014b8:	dd800917 	ldw	r22,36(sp)
100014bc:	dd400817 	ldw	r21,32(sp)
100014c0:	dd000717 	ldw	r20,28(sp)
100014c4:	dcc00617 	ldw	r19,24(sp)
100014c8:	dc800517 	ldw	r18,20(sp)
100014cc:	dc400417 	ldw	r17,16(sp)
100014d0:	dc000317 	ldw	r16,12(sp)
100014d4:	dec00d04 	addi	sp,sp,52
100014d8:	f800283a 	ret
100014dc:	008ff9f4 	movhi	r2,16359
100014e0:	002b883a 	mov	r21,zero
100014e4:	d8800015 	stw	r2,0(sp)
100014e8:	040ff4b4 	movhi	r16,16338
100014ec:	003fc406 	br	10001400 <__kernel_cos+0x3a8>
100014f0:	0005883a 	mov	r2,zero
100014f4:	00cffc34 	movhi	r3,16368
100014f8:	003fec06 	br	100014ac <__kernel_cos+0x454>

100014fc <__kernel_rem_pio2>:
100014fc:	deff5a04 	addi	sp,sp,-664
10001500:	da00a617 	ldw	r8,664(sp)
10001504:	00c40774 	movhi	r3,4125
10001508:	18e4c504 	addi	r3,r3,-27884
1000150c:	4205883a 	add	r2,r8,r8
10001510:	1085883a 	add	r2,r2,r2
10001514:	1885883a 	add	r2,r3,r2
10001518:	d9008e15 	stw	r4,568(sp)
1000151c:	d9408f15 	stw	r5,572(sp)
10001520:	313fff44 	addi	r4,r6,-3
10001524:	01400604 	movi	r5,24
10001528:	dd80a215 	stw	r22,648(sp)
1000152c:	dc009c15 	stw	r16,624(sp)
10001530:	dfc0a515 	stw	ra,660(sp)
10001534:	df00a415 	stw	fp,656(sp)
10001538:	ddc0a315 	stw	r23,652(sp)
1000153c:	dd40a115 	stw	r21,644(sp)
10001540:	dd00a015 	stw	r20,640(sp)
10001544:	dcc09f15 	stw	r19,636(sp)
10001548:	dc809e15 	stw	r18,632(sp)
1000154c:	dc409d15 	stw	r17,628(sp)
10001550:	3021883a 	mov	r16,r6
10001554:	d9c09315 	stw	r7,588(sp)
10001558:	15800017 	ldw	r22,0(r2)
1000155c:	0002efc0 	call	10002efc <__divsi3>
10001560:	da009317 	ldw	r8,588(sp)
10001564:	d8809215 	stw	r2,584(sp)
10001568:	423fffc4 	addi	r8,r8,-1
1000156c:	da008d15 	stw	r8,564(sp)
10001570:	10033b16 	blt	r2,zero,10002260 <__kernel_rem_pio2+0xd64>
10001574:	da009217 	ldw	r8,584(sp)
10001578:	d9009217 	ldw	r4,584(sp)
1000157c:	42000044 	addi	r8,r8,1
10001580:	40fffa24 	muli	r3,r8,-24
10001584:	da009515 	stw	r8,596(sp)
10001588:	da008d17 	ldw	r8,564(sp)
1000158c:	1c07883a 	add	r3,r3,r16
10001590:	d8c09015 	stw	r3,576(sp)
10001594:	b205883a 	add	r2,r22,r8
10001598:	2223c83a 	sub	r17,r4,r8
1000159c:	10001016 	blt	r2,zero,100015e0 <__kernel_rem_pio2+0xe4>
100015a0:	da00a717 	ldw	r8,668(sp)
100015a4:	8c65883a 	add	r18,r17,r17
100015a8:	94a5883a 	add	r18,r18,r18
100015ac:	1445883a 	add	r2,r2,r17
100015b0:	dcc05004 	addi	r19,sp,320
100015b4:	44a5883a 	add	r18,r8,r18
100015b8:	14000044 	addi	r16,r2,1
100015bc:	88015316 	blt	r17,zero,10001b0c <__kernel_rem_pio2+0x610>
100015c0:	91000017 	ldw	r4,0(r18)
100015c4:	00055300 	call	10005530 <__floatsidf>
100015c8:	98800015 	stw	r2,0(r19)
100015cc:	98c00115 	stw	r3,4(r19)
100015d0:	8c400044 	addi	r17,r17,1
100015d4:	9cc00204 	addi	r19,r19,8
100015d8:	94800104 	addi	r18,r18,4
100015dc:	8c3ff71e 	bne	r17,r16,100015bc <__kernel_rem_pio2+0xc0>
100015e0:	b0002816 	blt	r22,zero,10001684 <__kernel_rem_pio2+0x188>
100015e4:	da008d17 	ldw	r8,564(sp)
100015e8:	b4c00044 	addi	r19,r22,1
100015ec:	982690fa 	slli	r19,r19,3
100015f0:	402490fa 	slli	r18,r8,3
100015f4:	da008e17 	ldw	r8,568(sp)
100015f8:	d8805004 	addi	r2,sp,320
100015fc:	94000204 	addi	r16,r18,8
10001600:	d823883a 	mov	r17,sp
10001604:	14a5883a 	add	r18,r2,r18
10001608:	dcef883a 	add	r23,sp,r19
1000160c:	4421883a 	add	r16,r8,r16
10001610:	dd809115 	stw	r22,580(sp)
10001614:	4039883a 	mov	fp,r8
10001618:	da008d17 	ldw	r8,564(sp)
1000161c:	40016016 	blt	r8,zero,10001ba0 <__kernel_rem_pio2+0x6a4>
10001620:	e027883a 	mov	r19,fp
10001624:	9029883a 	mov	r20,r18
10001628:	002d883a 	mov	r22,zero
1000162c:	002b883a 	mov	r21,zero
10001630:	a1800017 	ldw	r6,0(r20)
10001634:	a1c00117 	ldw	r7,4(r20)
10001638:	99000017 	ldw	r4,0(r19)
1000163c:	99400117 	ldw	r5,4(r19)
10001640:	9cc00204 	addi	r19,r19,8
10001644:	a53ffe04 	addi	r20,r20,-8
10001648:	000449c0 	call	1000449c <__muldf3>
1000164c:	b009883a 	mov	r4,r22
10001650:	a80b883a 	mov	r5,r21
10001654:	100d883a 	mov	r6,r2
10001658:	180f883a 	mov	r7,r3
1000165c:	00030b00 	call	100030b0 <__adddf3>
10001660:	102d883a 	mov	r22,r2
10001664:	182b883a 	mov	r21,r3
10001668:	9c3ff11e 	bne	r19,r16,10001630 <__kernel_rem_pio2+0x134>
1000166c:	8d800015 	stw	r22,0(r17)
10001670:	8d400115 	stw	r21,4(r17)
10001674:	8c400204 	addi	r17,r17,8
10001678:	94800204 	addi	r18,r18,8
1000167c:	8dffe61e 	bne	r17,r23,10001618 <__kernel_rem_pio2+0x11c>
10001680:	dd809117 	ldw	r22,580(sp)
10001684:	00d00034 	movhi	r3,16384
10001688:	da009317 	ldw	r8,588(sp)
1000168c:	18ffff84 	addi	r3,r3,-2
10001690:	b0c7883a 	add	r3,r22,r3
10001694:	18c7883a 	add	r3,r3,r3
10001698:	402090fa 	slli	r16,r8,3
1000169c:	18c7883a 	add	r3,r3,r3
100016a0:	da007804 	addi	r8,sp,480
100016a4:	40d1883a 	add	r8,r8,r3
100016a8:	b0bfffc4 	addi	r2,r22,-1
100016ac:	da009615 	stw	r8,600(sp)
100016b0:	da008e17 	ldw	r8,568(sp)
100016b4:	1085883a 	add	r2,r2,r2
100016b8:	1085883a 	add	r2,r2,r2
100016bc:	19000104 	addi	r4,r3,4
100016c0:	d885883a 	add	r2,sp,r2
100016c4:	4421883a 	add	r16,r8,r16
100016c8:	da007804 	addi	r8,sp,480
100016cc:	4111883a 	add	r8,r8,r4
100016d0:	10807804 	addi	r2,r2,480
100016d4:	da009715 	stw	r8,604(sp)
100016d8:	b025883a 	mov	r18,r22
100016dc:	d8809815 	stw	r2,608(sp)
100016e0:	dd809415 	stw	r22,592(sp)
100016e4:	900490fa 	slli	r2,r18,3
100016e8:	d885883a 	add	r2,sp,r2
100016ec:	17000017 	ldw	fp,0(r2)
100016f0:	15400117 	ldw	r21,4(r2)
100016f4:	04802b0e 	bge	zero,r18,100017a4 <__kernel_rem_pio2+0x2a8>
100016f8:	00880034 	movhi	r2,8192
100016fc:	10bfffc4 	addi	r2,r2,-1
10001700:	90a9883a 	add	r20,r18,r2
10001704:	a02890fa 	slli	r20,r20,3
10001708:	dc407804 	addi	r17,sp,480
1000170c:	dcfffe04 	addi	r19,sp,-8
10001710:	dd29883a 	add	r20,sp,r20
10001714:	000d883a 	mov	r6,zero
10001718:	01cf9c34 	movhi	r7,15984
1000171c:	e009883a 	mov	r4,fp
10001720:	a80b883a 	mov	r5,r21
10001724:	000449c0 	call	1000449c <__muldf3>
10001728:	180b883a 	mov	r5,r3
1000172c:	1009883a 	mov	r4,r2
10001730:	00054b00 	call	100054b0 <__fixdfsi>
10001734:	1009883a 	mov	r4,r2
10001738:	00055300 	call	10005530 <__floatsidf>
1000173c:	000d883a 	mov	r6,zero
10001740:	01d05c34 	movhi	r7,16752
10001744:	1009883a 	mov	r4,r2
10001748:	180b883a 	mov	r5,r3
1000174c:	102f883a 	mov	r23,r2
10001750:	182d883a 	mov	r22,r3
10001754:	000449c0 	call	1000449c <__muldf3>
10001758:	100d883a 	mov	r6,r2
1000175c:	180f883a 	mov	r7,r3
10001760:	e009883a 	mov	r4,fp
10001764:	a80b883a 	mov	r5,r21
10001768:	0004bb40 	call	10004bb4 <__subdf3>
1000176c:	180b883a 	mov	r5,r3
10001770:	1009883a 	mov	r4,r2
10001774:	00054b00 	call	100054b0 <__fixdfsi>
10001778:	a1800017 	ldw	r6,0(r20)
1000177c:	a1c00117 	ldw	r7,4(r20)
10001780:	88800015 	stw	r2,0(r17)
10001784:	b809883a 	mov	r4,r23
10001788:	b00b883a 	mov	r5,r22
1000178c:	00030b00 	call	100030b0 <__adddf3>
10001790:	a53ffe04 	addi	r20,r20,-8
10001794:	1039883a 	mov	fp,r2
10001798:	182b883a 	mov	r21,r3
1000179c:	8c400104 	addi	r17,r17,4
100017a0:	a4ffdc1e 	bne	r20,r19,10001714 <__kernel_rem_pio2+0x218>
100017a4:	d9809017 	ldw	r6,576(sp)
100017a8:	a80b883a 	mov	r5,r21
100017ac:	e009883a 	mov	r4,fp
100017b0:	00027580 	call	10002758 <scalbn>
100017b4:	000d883a 	mov	r6,zero
100017b8:	01cff034 	movhi	r7,16320
100017bc:	1009883a 	mov	r4,r2
100017c0:	180b883a 	mov	r5,r3
100017c4:	1027883a 	mov	r19,r2
100017c8:	1823883a 	mov	r17,r3
100017cc:	000449c0 	call	1000449c <__muldf3>
100017d0:	1009883a 	mov	r4,r2
100017d4:	180b883a 	mov	r5,r3
100017d8:	000256c0 	call	1000256c <floor>
100017dc:	000d883a 	mov	r6,zero
100017e0:	01d00834 	movhi	r7,16416
100017e4:	1009883a 	mov	r4,r2
100017e8:	180b883a 	mov	r5,r3
100017ec:	000449c0 	call	1000449c <__muldf3>
100017f0:	100d883a 	mov	r6,r2
100017f4:	180f883a 	mov	r7,r3
100017f8:	9809883a 	mov	r4,r19
100017fc:	880b883a 	mov	r5,r17
10001800:	0004bb40 	call	10004bb4 <__subdf3>
10001804:	180b883a 	mov	r5,r3
10001808:	1009883a 	mov	r4,r2
1000180c:	1827883a 	mov	r19,r3
10001810:	1029883a 	mov	r20,r2
10001814:	00054b00 	call	100054b0 <__fixdfsi>
10001818:	1009883a 	mov	r4,r2
1000181c:	1023883a 	mov	r17,r2
10001820:	00055300 	call	10005530 <__floatsidf>
10001824:	a009883a 	mov	r4,r20
10001828:	100d883a 	mov	r6,r2
1000182c:	180f883a 	mov	r7,r3
10001830:	980b883a 	mov	r5,r19
10001834:	0004bb40 	call	10004bb4 <__subdf3>
10001838:	d9009017 	ldw	r4,576(sp)
1000183c:	1013883a 	mov	r9,r2
10001840:	102b883a 	mov	r21,r2
10001844:	1811883a 	mov	r8,r3
10001848:	0100b30e 	bge	zero,r4,10001b18 <__kernel_rem_pio2+0x61c>
1000184c:	90bfffc4 	addi	r2,r18,-1
10001850:	1085883a 	add	r2,r2,r2
10001854:	1085883a 	add	r2,r2,r2
10001858:	d885883a 	add	r2,sp,r2
1000185c:	10807804 	addi	r2,r2,480
10001860:	d9809017 	ldw	r6,576(sp)
10001864:	11400017 	ldw	r5,0(r2)
10001868:	01000604 	movi	r4,24
1000186c:	2189c83a 	sub	r4,r4,r6
10001870:	290dd83a 	sra	r6,r5,r4
10001874:	d9c09017 	ldw	r7,576(sp)
10001878:	04c005c4 	movi	r19,23
1000187c:	3108983a 	sll	r4,r6,r4
10001880:	99e7c83a 	sub	r19,r19,r7
10001884:	89a3883a 	add	r17,r17,r6
10001888:	2909c83a 	sub	r4,r5,r4
1000188c:	24e7d83a 	sra	r19,r4,r19
10001890:	11000015 	stw	r4,0(r2)
10001894:	04c02a0e 	bge	zero,r19,10001940 <__kernel_rem_pio2+0x444>
10001898:	8c400044 	addi	r17,r17,1
1000189c:	0481570e 	bge	zero,r18,10001dfc <__kernel_rem_pio2+0x900>
100018a0:	02804034 	movhi	r10,256
100018a4:	52bfffc4 	addi	r10,r10,-1
100018a8:	d8807804 	addi	r2,sp,480
100018ac:	000b883a 	mov	r5,zero
100018b0:	0029883a 	mov	r20,zero
100018b4:	01c04034 	movhi	r7,256
100018b8:	00000706 	br	100018d8 <__kernel_rem_pio2+0x3dc>
100018bc:	390dc83a 	sub	r6,r7,r4
100018c0:	20000226 	beq	r4,zero,100018cc <__kernel_rem_pio2+0x3d0>
100018c4:	11800015 	stw	r6,0(r2)
100018c8:	05000044 	movi	r20,1
100018cc:	29400044 	addi	r5,r5,1
100018d0:	10800104 	addi	r2,r2,4
100018d4:	2c80080e 	bge	r5,r18,100018f8 <__kernel_rem_pio2+0x3fc>
100018d8:	11000017 	ldw	r4,0(r2)
100018dc:	a03ff726 	beq	r20,zero,100018bc <__kernel_rem_pio2+0x3c0>
100018e0:	5109c83a 	sub	r4,r10,r4
100018e4:	11000015 	stw	r4,0(r2)
100018e8:	29400044 	addi	r5,r5,1
100018ec:	05000044 	movi	r20,1
100018f0:	10800104 	addi	r2,r2,4
100018f4:	2cbff816 	blt	r5,r18,100018d8 <__kernel_rem_pio2+0x3dc>
100018f8:	d9009017 	ldw	r4,576(sp)
100018fc:	01000e0e 	bge	zero,r4,10001938 <__kernel_rem_pio2+0x43c>
10001900:	00800044 	movi	r2,1
10001904:	20808d26 	beq	r4,r2,10001b3c <__kernel_rem_pio2+0x640>
10001908:	00800084 	movi	r2,2
1000190c:	20800a1e 	bne	r4,r2,10001938 <__kernel_rem_pio2+0x43c>
10001910:	90bfffc4 	addi	r2,r18,-1
10001914:	1085883a 	add	r2,r2,r2
10001918:	1085883a 	add	r2,r2,r2
1000191c:	d885883a 	add	r2,sp,r2
10001920:	10807804 	addi	r2,r2,480
10001924:	11400017 	ldw	r5,0(r2)
10001928:	01001034 	movhi	r4,64
1000192c:	213fffc4 	addi	r4,r4,-1
10001930:	2908703a 	and	r4,r5,r4
10001934:	11000015 	stw	r4,0(r2)
10001938:	00800084 	movi	r2,2
1000193c:	98805d26 	beq	r19,r2,10001ab4 <__kernel_rem_pio2+0x5b8>
10001940:	400b883a 	mov	r5,r8
10001944:	000d883a 	mov	r6,zero
10001948:	000f883a 	mov	r7,zero
1000194c:	a809883a 	mov	r4,r21
10001950:	da009b15 	stw	r8,620(sp)
10001954:	00042440 	call	10004244 <__eqdf2>
10001958:	da009b17 	ldw	r8,620(sp)
1000195c:	10012b1e 	bne	r2,zero,10001e0c <__kernel_rem_pio2+0x910>
10001960:	da009417 	ldw	r8,592(sp)
10001964:	917fffc4 	addi	r5,r18,-1
10001968:	2a000e16 	blt	r5,r8,100019a4 <__kernel_rem_pio2+0x4a8>
1000196c:	00900034 	movhi	r2,16384
10001970:	10bfffc4 	addi	r2,r2,-1
10001974:	9085883a 	add	r2,r18,r2
10001978:	1085883a 	add	r2,r2,r2
1000197c:	d9809717 	ldw	r6,604(sp)
10001980:	1085883a 	add	r2,r2,r2
10001984:	d9007804 	addi	r4,sp,480
10001988:	0007883a 	mov	r3,zero
1000198c:	2085883a 	add	r2,r4,r2
10001990:	11000017 	ldw	r4,0(r2)
10001994:	10bfff04 	addi	r2,r2,-4
10001998:	1906b03a 	or	r3,r3,r4
1000199c:	11bffc1e 	bne	r2,r6,10001990 <__kernel_rem_pio2+0x494>
100019a0:	1800821e 	bne	r3,zero,10001bac <__kernel_rem_pio2+0x6b0>
100019a4:	da009817 	ldw	r8,608(sp)
100019a8:	40800017 	ldw	r2,0(r8)
100019ac:	1001151e 	bne	r2,zero,10001e04 <__kernel_rem_pio2+0x908>
100019b0:	d8809617 	ldw	r2,600(sp)
100019b4:	05000044 	movi	r20,1
100019b8:	10bfff04 	addi	r2,r2,-4
100019bc:	10c00117 	ldw	r3,4(r2)
100019c0:	a5000044 	addi	r20,r20,1
100019c4:	183ffc26 	beq	r3,zero,100019b8 <__kernel_rem_pio2+0x4bc>
100019c8:	9529883a 	add	r20,r18,r20
100019cc:	90800044 	addi	r2,r18,1
100019d0:	dd009115 	stw	r20,580(sp)
100019d4:	a0803216 	blt	r20,r2,10001aa0 <__kernel_rem_pio2+0x5a4>
100019d8:	da009317 	ldw	r8,588(sp)
100019dc:	d8c09117 	ldw	r3,580(sp)
100019e0:	44a3883a 	add	r17,r8,r18
100019e4:	da009217 	ldw	r8,584(sp)
100019e8:	882290fa 	slli	r17,r17,3
100019ec:	40a5883a 	add	r18,r8,r2
100019f0:	da009517 	ldw	r8,596(sp)
100019f4:	100490fa 	slli	r2,r2,3
100019f8:	94a5883a 	add	r18,r18,r18
100019fc:	40eb883a 	add	r21,r8,r3
10001a00:	da00a717 	ldw	r8,668(sp)
10001a04:	ad6b883a 	add	r21,r21,r21
10001a08:	94a5883a 	add	r18,r18,r18
10001a0c:	ad6b883a 	add	r21,r21,r21
10001a10:	d8c05004 	addi	r3,sp,320
10001a14:	44a5883a 	add	r18,r8,r18
10001a18:	1c63883a 	add	r17,r3,r17
10001a1c:	d8a7883a 	add	r19,sp,r2
10001a20:	456b883a 	add	r21,r8,r21
10001a24:	91000017 	ldw	r4,0(r18)
10001a28:	00055300 	call	10005530 <__floatsidf>
10001a2c:	da008d17 	ldw	r8,564(sp)
10001a30:	88800015 	stw	r2,0(r17)
10001a34:	88c00115 	stw	r3,4(r17)
10001a38:	40001b16 	blt	r8,zero,10001aa8 <__kernel_rem_pio2+0x5ac>
10001a3c:	dd008e17 	ldw	r20,568(sp)
10001a40:	882d883a 	mov	r22,r17
10001a44:	002f883a 	mov	r23,zero
10001a48:	0039883a 	mov	fp,zero
10001a4c:	b1800017 	ldw	r6,0(r22)
10001a50:	b1c00117 	ldw	r7,4(r22)
10001a54:	a1000017 	ldw	r4,0(r20)
10001a58:	a1400117 	ldw	r5,4(r20)
10001a5c:	a5000204 	addi	r20,r20,8
10001a60:	b5bffe04 	addi	r22,r22,-8
10001a64:	000449c0 	call	1000449c <__muldf3>
10001a68:	b809883a 	mov	r4,r23
10001a6c:	e00b883a 	mov	r5,fp
10001a70:	100d883a 	mov	r6,r2
10001a74:	180f883a 	mov	r7,r3
10001a78:	00030b00 	call	100030b0 <__adddf3>
10001a7c:	102f883a 	mov	r23,r2
10001a80:	1839883a 	mov	fp,r3
10001a84:	a43ff11e 	bne	r20,r16,10001a4c <__kernel_rem_pio2+0x550>
10001a88:	9dc00015 	stw	r23,0(r19)
10001a8c:	9f000115 	stw	fp,4(r19)
10001a90:	94800104 	addi	r18,r18,4
10001a94:	8c400204 	addi	r17,r17,8
10001a98:	9cc00204 	addi	r19,r19,8
10001a9c:	957fe11e 	bne	r18,r21,10001a24 <__kernel_rem_pio2+0x528>
10001aa0:	dc809117 	ldw	r18,580(sp)
10001aa4:	003f0f06 	br	100016e4 <__kernel_rem_pio2+0x1e8>
10001aa8:	002f883a 	mov	r23,zero
10001aac:	0039883a 	mov	fp,zero
10001ab0:	003ff506 	br	10001a88 <__kernel_rem_pio2+0x58c>
10001ab4:	480d883a 	mov	r6,r9
10001ab8:	180f883a 	mov	r7,r3
10001abc:	0009883a 	mov	r4,zero
10001ac0:	014ffc34 	movhi	r5,16368
10001ac4:	0004bb40 	call	10004bb4 <__subdf3>
10001ac8:	102b883a 	mov	r21,r2
10001acc:	1811883a 	mov	r8,r3
10001ad0:	a03f9b26 	beq	r20,zero,10001940 <__kernel_rem_pio2+0x444>
10001ad4:	d9809017 	ldw	r6,576(sp)
10001ad8:	0009883a 	mov	r4,zero
10001adc:	014ffc34 	movhi	r5,16368
10001ae0:	d8c09b15 	stw	r3,620(sp)
10001ae4:	00027580 	call	10002758 <scalbn>
10001ae8:	da009b17 	ldw	r8,620(sp)
10001aec:	a809883a 	mov	r4,r21
10001af0:	100d883a 	mov	r6,r2
10001af4:	400b883a 	mov	r5,r8
10001af8:	180f883a 	mov	r7,r3
10001afc:	0004bb40 	call	10004bb4 <__subdf3>
10001b00:	102b883a 	mov	r21,r2
10001b04:	1811883a 	mov	r8,r3
10001b08:	003f8d06 	br	10001940 <__kernel_rem_pio2+0x444>
10001b0c:	0005883a 	mov	r2,zero
10001b10:	0007883a 	mov	r3,zero
10001b14:	003eac06 	br	100015c8 <__kernel_rem_pio2+0xcc>
10001b18:	d8809017 	ldw	r2,576(sp)
10001b1c:	1000121e 	bne	r2,zero,10001b68 <__kernel_rem_pio2+0x66c>
10001b20:	90bfffc4 	addi	r2,r18,-1
10001b24:	1085883a 	add	r2,r2,r2
10001b28:	1085883a 	add	r2,r2,r2
10001b2c:	d885883a 	add	r2,sp,r2
10001b30:	14c07817 	ldw	r19,480(r2)
10001b34:	9827d5fa 	srai	r19,r19,23
10001b38:	003f5606 	br	10001894 <__kernel_rem_pio2+0x398>
10001b3c:	90bfffc4 	addi	r2,r18,-1
10001b40:	1085883a 	add	r2,r2,r2
10001b44:	1085883a 	add	r2,r2,r2
10001b48:	d885883a 	add	r2,sp,r2
10001b4c:	10807804 	addi	r2,r2,480
10001b50:	11000017 	ldw	r4,0(r2)
10001b54:	01402034 	movhi	r5,128
10001b58:	297fffc4 	addi	r5,r5,-1
10001b5c:	2148703a 	and	r4,r4,r5
10001b60:	11000015 	stw	r4,0(r2)
10001b64:	003f7406 	br	10001938 <__kernel_rem_pio2+0x43c>
10001b68:	4809883a 	mov	r4,r9
10001b6c:	180b883a 	mov	r5,r3
10001b70:	000d883a 	mov	r6,zero
10001b74:	01cff834 	movhi	r7,16352
10001b78:	d8c09a15 	stw	r3,616(sp)
10001b7c:	d8c09b15 	stw	r3,620(sp)
10001b80:	da409915 	stw	r9,612(sp)
10001b84:	00042cc0 	call	100042cc <__gedf2>
10001b88:	d8c09a17 	ldw	r3,616(sp)
10001b8c:	da009b17 	ldw	r8,620(sp)
10001b90:	da409917 	ldw	r9,612(sp)
10001b94:	1000920e 	bge	r2,zero,10001de0 <__kernel_rem_pio2+0x8e4>
10001b98:	0027883a 	mov	r19,zero
10001b9c:	003f6806 	br	10001940 <__kernel_rem_pio2+0x444>
10001ba0:	002d883a 	mov	r22,zero
10001ba4:	002b883a 	mov	r21,zero
10001ba8:	003eb006 	br	1000166c <__kernel_rem_pio2+0x170>
10001bac:	2945883a 	add	r2,r5,r5
10001bb0:	da009017 	ldw	r8,576(sp)
10001bb4:	1085883a 	add	r2,r2,r2
10001bb8:	d885883a 	add	r2,sp,r2
10001bbc:	10807817 	ldw	r2,480(r2)
10001bc0:	423ffa04 	addi	r8,r8,-24
10001bc4:	dc409115 	stw	r17,580(sp)
10001bc8:	dcc08d15 	stw	r19,564(sp)
10001bcc:	da009015 	stw	r8,576(sp)
10001bd0:	dd809417 	ldw	r22,592(sp)
10001bd4:	2823883a 	mov	r17,r5
10001bd8:	10000e1e 	bne	r2,zero,10001c14 <__kernel_rem_pio2+0x718>
10001bdc:	00900034 	movhi	r2,16384
10001be0:	10bfffc4 	addi	r2,r2,-1
10001be4:	2885883a 	add	r2,r5,r2
10001be8:	1085883a 	add	r2,r2,r2
10001bec:	d8c07804 	addi	r3,sp,480
10001bf0:	1085883a 	add	r2,r2,r2
10001bf4:	1885883a 	add	r2,r3,r2
10001bf8:	4007883a 	mov	r3,r8
10001bfc:	10bfff04 	addi	r2,r2,-4
10001c00:	11000117 	ldw	r4,4(r2)
10001c04:	8c7fffc4 	addi	r17,r17,-1
10001c08:	18fffa04 	addi	r3,r3,-24
10001c0c:	203ffb26 	beq	r4,zero,10001bfc <__kernel_rem_pio2+0x700>
10001c10:	d8c09015 	stw	r3,576(sp)
10001c14:	d9809017 	ldw	r6,576(sp)
10001c18:	0009883a 	mov	r4,zero
10001c1c:	014ffc34 	movhi	r5,16368
10001c20:	00027580 	call	10002758 <scalbn>
10001c24:	1029883a 	mov	r20,r2
10001c28:	182b883a 	mov	r21,r3
10001c2c:	88018416 	blt	r17,zero,10002240 <__kernel_rem_pio2+0xd44>
10001c30:	881090fa 	slli	r8,r17,3
10001c34:	d8c07804 	addi	r3,sp,480
10001c38:	da008e15 	stw	r8,568(sp)
10001c3c:	d8808e17 	ldw	r2,568(sp)
10001c40:	8c51883a 	add	r8,r17,r17
10001c44:	4211883a 	add	r8,r8,r8
10001c48:	d8a1883a 	add	r16,sp,r2
10001c4c:	1a25883a 	add	r18,r3,r8
10001c50:	da3ffe04 	addi	r8,sp,-8
10001c54:	da008c15 	stw	r8,560(sp)
10001c58:	8039883a 	mov	fp,r16
10001c5c:	91000017 	ldw	r4,0(r18)
10001c60:	e73ffe04 	addi	fp,fp,-8
10001c64:	94bfff04 	addi	r18,r18,-4
10001c68:	00055300 	call	10005530 <__floatsidf>
10001c6c:	a00d883a 	mov	r6,r20
10001c70:	a80f883a 	mov	r7,r21
10001c74:	1009883a 	mov	r4,r2
10001c78:	180b883a 	mov	r5,r3
10001c7c:	000449c0 	call	1000449c <__muldf3>
10001c80:	a009883a 	mov	r4,r20
10001c84:	a80b883a 	mov	r5,r21
10001c88:	e0800215 	stw	r2,8(fp)
10001c8c:	e0c00315 	stw	r3,12(fp)
10001c90:	000d883a 	mov	r6,zero
10001c94:	01cf9c34 	movhi	r7,15984
10001c98:	000449c0 	call	1000449c <__muldf3>
10001c9c:	da008c17 	ldw	r8,560(sp)
10001ca0:	1029883a 	mov	r20,r2
10001ca4:	182b883a 	mov	r21,r3
10001ca8:	e23fec1e 	bne	fp,r8,10001c5c <__kernel_rem_pio2+0x760>
10001cac:	0029883a 	mov	r20,zero
10001cb0:	b0004f16 	blt	r22,zero,10001df0 <__kernel_rem_pio2+0x8f4>
10001cb4:	05440774 	movhi	r21,4125
10001cb8:	014ffe74 	movhi	r5,16377
10001cbc:	ad64b704 	addi	r21,r21,-27940
10001cc0:	8027883a 	mov	r19,r16
10001cc4:	01100034 	movhi	r4,16384
10001cc8:	29487ec4 	addi	r5,r5,8699
10001ccc:	0039883a 	mov	fp,zero
10001cd0:	002f883a 	mov	r23,zero
10001cd4:	0025883a 	mov	r18,zero
10001cd8:	00000506 	br	10001cf0 <__kernel_rem_pio2+0x7f4>
10001cdc:	9cc00204 	addi	r19,r19,8
10001ce0:	a4800f16 	blt	r20,r18,10001d20 <__kernel_rem_pio2+0x824>
10001ce4:	a9000017 	ldw	r4,0(r21)
10001ce8:	a9400117 	ldw	r5,4(r21)
10001cec:	ad400204 	addi	r21,r21,8
10001cf0:	99800017 	ldw	r6,0(r19)
10001cf4:	99c00117 	ldw	r7,4(r19)
10001cf8:	94800044 	addi	r18,r18,1
10001cfc:	000449c0 	call	1000449c <__muldf3>
10001d00:	e009883a 	mov	r4,fp
10001d04:	b80b883a 	mov	r5,r23
10001d08:	100d883a 	mov	r6,r2
10001d0c:	180f883a 	mov	r7,r3
10001d10:	00030b00 	call	100030b0 <__adddf3>
10001d14:	1039883a 	mov	fp,r2
10001d18:	182f883a 	mov	r23,r3
10001d1c:	b4bfef0e 	bge	r22,r18,10001cdc <__kernel_rem_pio2+0x7e0>
10001d20:	a00490fa 	slli	r2,r20,3
10001d24:	da008c17 	ldw	r8,560(sp)
10001d28:	843ffe04 	addi	r16,r16,-8
10001d2c:	d885883a 	add	r2,sp,r2
10001d30:	10802804 	addi	r2,r2,160
10001d34:	17000015 	stw	fp,0(r2)
10001d38:	15c00115 	stw	r23,4(r2)
10001d3c:	a5000044 	addi	r20,r20,1
10001d40:	823fdb1e 	bne	r16,r8,10001cb0 <__kernel_rem_pio2+0x7b4>
10001d44:	da00a617 	ldw	r8,664(sp)
10001d48:	00800084 	movi	r2,2
10001d4c:	12006616 	blt	r2,r8,10001ee8 <__kernel_rem_pio2+0x9ec>
10001d50:	0200de16 	blt	zero,r8,100020cc <__kernel_rem_pio2+0xbd0>
10001d54:	4000141e 	bne	r8,zero,10001da8 <__kernel_rem_pio2+0x8ac>
10001d58:	da008e17 	ldw	r8,568(sp)
10001d5c:	d8802804 	addi	r2,sp,160
10001d60:	0007883a 	mov	r3,zero
10001d64:	1225883a 	add	r18,r2,r8
10001d68:	043fffc4 	movi	r16,-1
10001d6c:	0005883a 	mov	r2,zero
10001d70:	91800017 	ldw	r6,0(r18)
10001d74:	91c00117 	ldw	r7,4(r18)
10001d78:	1009883a 	mov	r4,r2
10001d7c:	180b883a 	mov	r5,r3
10001d80:	8c7fffc4 	addi	r17,r17,-1
10001d84:	00030b00 	call	100030b0 <__adddf3>
10001d88:	94bffe04 	addi	r18,r18,-8
10001d8c:	8c3ff81e 	bne	r17,r16,10001d70 <__kernel_rem_pio2+0x874>
10001d90:	da008d17 	ldw	r8,564(sp)
10001d94:	40000126 	beq	r8,zero,10001d9c <__kernel_rem_pio2+0x8a0>
10001d98:	18e0003c 	xorhi	r3,r3,32768
10001d9c:	da008f17 	ldw	r8,572(sp)
10001da0:	40800015 	stw	r2,0(r8)
10001da4:	40c00115 	stw	r3,4(r8)
10001da8:	da009117 	ldw	r8,580(sp)
10001dac:	408001cc 	andi	r2,r8,7
10001db0:	dfc0a517 	ldw	ra,660(sp)
10001db4:	df00a417 	ldw	fp,656(sp)
10001db8:	ddc0a317 	ldw	r23,652(sp)
10001dbc:	dd80a217 	ldw	r22,648(sp)
10001dc0:	dd40a117 	ldw	r21,644(sp)
10001dc4:	dd00a017 	ldw	r20,640(sp)
10001dc8:	dcc09f17 	ldw	r19,636(sp)
10001dcc:	dc809e17 	ldw	r18,632(sp)
10001dd0:	dc409d17 	ldw	r17,628(sp)
10001dd4:	dc009c17 	ldw	r16,624(sp)
10001dd8:	dec0a604 	addi	sp,sp,664
10001ddc:	f800283a 	ret
10001de0:	8c400044 	addi	r17,r17,1
10001de4:	04810d0e 	bge	zero,r18,1000221c <__kernel_rem_pio2+0xd20>
10001de8:	04c00084 	movi	r19,2
10001dec:	003eac06 	br	100018a0 <__kernel_rem_pio2+0x3a4>
10001df0:	0039883a 	mov	fp,zero
10001df4:	002f883a 	mov	r23,zero
10001df8:	003fc906 	br	10001d20 <__kernel_rem_pio2+0x824>
10001dfc:	0029883a 	mov	r20,zero
10001e00:	003ebd06 	br	100018f8 <__kernel_rem_pio2+0x3fc>
10001e04:	05000044 	movi	r20,1
10001e08:	003eef06 	br	100019c8 <__kernel_rem_pio2+0x4cc>
10001e0c:	4029883a 	mov	r20,r8
10001e10:	da009017 	ldw	r8,576(sp)
10001e14:	a809883a 	mov	r4,r21
10001e18:	a00b883a 	mov	r5,r20
10001e1c:	020dc83a 	sub	r6,zero,r8
10001e20:	dc409115 	stw	r17,580(sp)
10001e24:	dd809417 	ldw	r22,592(sp)
10001e28:	dcc08d15 	stw	r19,564(sp)
10001e2c:	00027580 	call	10002758 <scalbn>
10001e30:	000d883a 	mov	r6,zero
10001e34:	01d05c34 	movhi	r7,16752
10001e38:	1009883a 	mov	r4,r2
10001e3c:	180b883a 	mov	r5,r3
10001e40:	102b883a 	mov	r21,r2
10001e44:	1823883a 	mov	r17,r3
10001e48:	00042cc0 	call	100042cc <__gedf2>
10001e4c:	1000e916 	blt	r2,zero,100021f4 <__kernel_rem_pio2+0xcf8>
10001e50:	000d883a 	mov	r6,zero
10001e54:	01cf9c34 	movhi	r7,15984
10001e58:	880b883a 	mov	r5,r17
10001e5c:	a809883a 	mov	r4,r21
10001e60:	000449c0 	call	1000449c <__muldf3>
10001e64:	180b883a 	mov	r5,r3
10001e68:	1009883a 	mov	r4,r2
10001e6c:	00054b00 	call	100054b0 <__fixdfsi>
10001e70:	1029883a 	mov	r20,r2
10001e74:	9485883a 	add	r2,r18,r18
10001e78:	1085883a 	add	r2,r2,r2
10001e7c:	a009883a 	mov	r4,r20
10001e80:	d8a1883a 	add	r16,sp,r2
10001e84:	00055300 	call	10005530 <__floatsidf>
10001e88:	000d883a 	mov	r6,zero
10001e8c:	01d05c34 	movhi	r7,16752
10001e90:	1009883a 	mov	r4,r2
10001e94:	180b883a 	mov	r5,r3
10001e98:	000449c0 	call	1000449c <__muldf3>
10001e9c:	880b883a 	mov	r5,r17
10001ea0:	100d883a 	mov	r6,r2
10001ea4:	180f883a 	mov	r7,r3
10001ea8:	a809883a 	mov	r4,r21
10001eac:	0004bb40 	call	10004bb4 <__subdf3>
10001eb0:	180b883a 	mov	r5,r3
10001eb4:	1009883a 	mov	r4,r2
10001eb8:	00054b00 	call	100054b0 <__fixdfsi>
10001ebc:	da009017 	ldw	r8,576(sp)
10001ec0:	94400044 	addi	r17,r18,1
10001ec4:	8c47883a 	add	r3,r17,r17
10001ec8:	84007804 	addi	r16,r16,480
10001ecc:	18c7883a 	add	r3,r3,r3
10001ed0:	80800015 	stw	r2,0(r16)
10001ed4:	d8c7883a 	add	r3,sp,r3
10001ed8:	42000604 	addi	r8,r8,24
10001edc:	da009015 	stw	r8,576(sp)
10001ee0:	1d007815 	stw	r20,480(r3)
10001ee4:	003f4b06 	br	10001c14 <__kernel_rem_pio2+0x718>
10001ee8:	da00a617 	ldw	r8,664(sp)
10001eec:	008000c4 	movi	r2,3
10001ef0:	40bfad1e 	bne	r8,r2,10001da8 <__kernel_rem_pio2+0x8ac>
10001ef4:	0440bc0e 	bge	zero,r17,100021e8 <__kernel_rem_pio2+0xcec>
10001ef8:	da008e17 	ldw	r8,568(sp)
10001efc:	882090fa 	slli	r16,r17,3
10001f00:	dd402804 	addi	r21,sp,160
10001f04:	da05883a 	add	r2,sp,r8
10001f08:	10802804 	addi	r2,r2,160
10001f0c:	15c00017 	ldw	r23,0(r2)
10001f10:	15800117 	ldw	r22,4(r2)
10001f14:	8029883a 	mov	r20,r16
10001f18:	843ffe04 	addi	r16,r16,-8
10001f1c:	ac21883a 	add	r16,r21,r16
10001f20:	ad29883a 	add	r20,r21,r20
10001f24:	dac02604 	addi	r11,sp,152
10001f28:	8811883a 	mov	r8,r17
10001f2c:	84400017 	ldw	r17,0(r16)
10001f30:	87000117 	ldw	fp,4(r16)
10001f34:	b80d883a 	mov	r6,r23
10001f38:	b00f883a 	mov	r7,r22
10001f3c:	8809883a 	mov	r4,r17
10001f40:	e00b883a 	mov	r5,fp
10001f44:	da009b15 	stw	r8,620(sp)
10001f48:	dac09915 	stw	r11,612(sp)
10001f4c:	00030b00 	call	100030b0 <__adddf3>
10001f50:	100d883a 	mov	r6,r2
10001f54:	180f883a 	mov	r7,r3
10001f58:	8809883a 	mov	r4,r17
10001f5c:	e00b883a 	mov	r5,fp
10001f60:	1027883a 	mov	r19,r2
10001f64:	1825883a 	mov	r18,r3
10001f68:	0004bb40 	call	10004bb4 <__subdf3>
10001f6c:	b80d883a 	mov	r6,r23
10001f70:	b00f883a 	mov	r7,r22
10001f74:	1009883a 	mov	r4,r2
10001f78:	180b883a 	mov	r5,r3
10001f7c:	00030b00 	call	100030b0 <__adddf3>
10001f80:	dac09917 	ldw	r11,612(sp)
10001f84:	a0800015 	stw	r2,0(r20)
10001f88:	a0c00115 	stw	r3,4(r20)
10001f8c:	84c00015 	stw	r19,0(r16)
10001f90:	84800115 	stw	r18,4(r16)
10001f94:	843ffe04 	addi	r16,r16,-8
10001f98:	a53ffe04 	addi	r20,r20,-8
10001f9c:	982f883a 	mov	r23,r19
10001fa0:	902d883a 	mov	r22,r18
10001fa4:	da009b17 	ldw	r8,620(sp)
10001fa8:	5c3fe01e 	bne	r11,r16,10001f2c <__kernel_rem_pio2+0xa30>
10001fac:	00800044 	movi	r2,1
10001fb0:	12008d0e 	bge	r2,r8,100021e8 <__kernel_rem_pio2+0xcec>
10001fb4:	402090fa 	slli	r16,r8,3
10001fb8:	da008e17 	ldw	r8,568(sp)
10001fbc:	8023883a 	mov	r17,r16
10001fc0:	da05883a 	add	r2,sp,r8
10001fc4:	10802804 	addi	r2,r2,160
10001fc8:	15800017 	ldw	r22,0(r2)
10001fcc:	15000117 	ldw	r20,4(r2)
10001fd0:	ac63883a 	add	r17,r21,r17
10001fd4:	843ffe04 	addi	r16,r16,-8
10001fd8:	ac21883a 	add	r16,r21,r16
10001fdc:	8825883a 	mov	r18,r17
10001fe0:	8811883a 	mov	r8,r17
10001fe4:	84400017 	ldw	r17,0(r16)
10001fe8:	87000117 	ldw	fp,4(r16)
10001fec:	b009883a 	mov	r4,r22
10001ff0:	a00b883a 	mov	r5,r20
10001ff4:	880d883a 	mov	r6,r17
10001ff8:	e00f883a 	mov	r7,fp
10001ffc:	da009b15 	stw	r8,620(sp)
10002000:	00030b00 	call	100030b0 <__adddf3>
10002004:	100d883a 	mov	r6,r2
10002008:	180f883a 	mov	r7,r3
1000200c:	8809883a 	mov	r4,r17
10002010:	e00b883a 	mov	r5,fp
10002014:	102f883a 	mov	r23,r2
10002018:	1827883a 	mov	r19,r3
1000201c:	0004bb40 	call	10004bb4 <__subdf3>
10002020:	b00d883a 	mov	r6,r22
10002024:	a00f883a 	mov	r7,r20
10002028:	1009883a 	mov	r4,r2
1000202c:	180b883a 	mov	r5,r3
10002030:	00030b00 	call	100030b0 <__adddf3>
10002034:	90800015 	stw	r2,0(r18)
10002038:	90c00115 	stw	r3,4(r18)
1000203c:	85c00015 	stw	r23,0(r16)
10002040:	84c00115 	stw	r19,4(r16)
10002044:	843ffe04 	addi	r16,r16,-8
10002048:	94bffe04 	addi	r18,r18,-8
1000204c:	b82d883a 	mov	r22,r23
10002050:	9829883a 	mov	r20,r19
10002054:	da009b17 	ldw	r8,620(sp)
10002058:	ac3fe21e 	bne	r21,r16,10001fe4 <__kernel_rem_pio2+0xae8>
1000205c:	4023883a 	mov	r17,r8
10002060:	dc002a04 	addi	r16,sp,168
10002064:	0005883a 	mov	r2,zero
10002068:	0007883a 	mov	r3,zero
1000206c:	89800017 	ldw	r6,0(r17)
10002070:	89c00117 	ldw	r7,4(r17)
10002074:	1009883a 	mov	r4,r2
10002078:	8c7ffe04 	addi	r17,r17,-8
1000207c:	180b883a 	mov	r5,r3
10002080:	00030b00 	call	100030b0 <__adddf3>
10002084:	847ff91e 	bne	r16,r17,1000206c <__kernel_rem_pio2+0xb70>
10002088:	da008d17 	ldw	r8,564(sp)
1000208c:	40004726 	beq	r8,zero,100021ac <__kernel_rem_pio2+0xcb0>
10002090:	d9002b17 	ldw	r4,172(sp)
10002094:	d9402917 	ldw	r5,164(sp)
10002098:	d9802a17 	ldw	r6,168(sp)
1000209c:	da008f17 	ldw	r8,572(sp)
100020a0:	d9c02817 	ldw	r7,160(sp)
100020a4:	2960003c 	xorhi	r5,r5,32768
100020a8:	2120003c 	xorhi	r4,r4,32768
100020ac:	18e0003c 	xorhi	r3,r3,32768
100020b0:	41c00015 	stw	r7,0(r8)
100020b4:	41400115 	stw	r5,4(r8)
100020b8:	41800215 	stw	r6,8(r8)
100020bc:	41000315 	stw	r4,12(r8)
100020c0:	40800415 	stw	r2,16(r8)
100020c4:	40c00515 	stw	r3,20(r8)
100020c8:	003f3706 	br	10001da8 <__kernel_rem_pio2+0x8ac>
100020cc:	da008e17 	ldw	r8,568(sp)
100020d0:	d8802804 	addi	r2,sp,160
100020d4:	dc002604 	addi	r16,sp,152
100020d8:	1225883a 	add	r18,r2,r8
100020dc:	0007883a 	mov	r3,zero
100020e0:	0005883a 	mov	r2,zero
100020e4:	91800017 	ldw	r6,0(r18)
100020e8:	91c00117 	ldw	r7,4(r18)
100020ec:	1009883a 	mov	r4,r2
100020f0:	94bffe04 	addi	r18,r18,-8
100020f4:	180b883a 	mov	r5,r3
100020f8:	00030b00 	call	100030b0 <__adddf3>
100020fc:	943ff91e 	bne	r18,r16,100020e4 <__kernel_rem_pio2+0xbe8>
10002100:	da008d17 	ldw	r8,564(sp)
10002104:	d9002817 	ldw	r4,160(sp)
10002108:	d9402917 	ldw	r5,164(sp)
1000210c:	40001a26 	beq	r8,zero,10002178 <__kernel_rem_pio2+0xc7c>
10002110:	da008f17 	ldw	r8,572(sp)
10002114:	19a0003c 	xorhi	r6,r3,32768
10002118:	180f883a 	mov	r7,r3
1000211c:	41800115 	stw	r6,4(r8)
10002120:	40800015 	stw	r2,0(r8)
10002124:	100d883a 	mov	r6,r2
10002128:	0004bb40 	call	10004bb4 <__subdf3>
1000212c:	04400c0e 	bge	zero,r17,10002160 <__kernel_rem_pio2+0xc64>
10002130:	dc002a04 	addi	r16,sp,168
10002134:	04800044 	movi	r18,1
10002138:	81800017 	ldw	r6,0(r16)
1000213c:	81c00117 	ldw	r7,4(r16)
10002140:	1009883a 	mov	r4,r2
10002144:	180b883a 	mov	r5,r3
10002148:	94800044 	addi	r18,r18,1
1000214c:	00030b00 	call	100030b0 <__adddf3>
10002150:	84000204 	addi	r16,r16,8
10002154:	8cbff80e 	bge	r17,r18,10002138 <__kernel_rem_pio2+0xc3c>
10002158:	da008d17 	ldw	r8,564(sp)
1000215c:	40004226 	beq	r8,zero,10002268 <__kernel_rem_pio2+0xd6c>
10002160:	da008f17 	ldw	r8,572(sp)
10002164:	1009883a 	mov	r4,r2
10002168:	18a0003c 	xorhi	r2,r3,32768
1000216c:	41000215 	stw	r4,8(r8)
10002170:	40800315 	stw	r2,12(r8)
10002174:	003f0c06 	br	10001da8 <__kernel_rem_pio2+0x8ac>
10002178:	da008f17 	ldw	r8,572(sp)
1000217c:	100d883a 	mov	r6,r2
10002180:	180f883a 	mov	r7,r3
10002184:	40800015 	stw	r2,0(r8)
10002188:	40c00115 	stw	r3,4(r8)
1000218c:	0004bb40 	call	10004bb4 <__subdf3>
10002190:	047fe716 	blt	zero,r17,10002130 <__kernel_rem_pio2+0xc34>
10002194:	da008f17 	ldw	r8,572(sp)
10002198:	1009883a 	mov	r4,r2
1000219c:	1805883a 	mov	r2,r3
100021a0:	41000215 	stw	r4,8(r8)
100021a4:	40800315 	stw	r2,12(r8)
100021a8:	003eff06 	br	10001da8 <__kernel_rem_pio2+0x8ac>
100021ac:	da008f17 	ldw	r8,572(sp)
100021b0:	d9802817 	ldw	r6,160(sp)
100021b4:	d9402a17 	ldw	r5,168(sp)
100021b8:	d9002b17 	ldw	r4,172(sp)
100021bc:	41800015 	stw	r6,0(r8)
100021c0:	d9802917 	ldw	r6,164(sp)
100021c4:	41400215 	stw	r5,8(r8)
100021c8:	41000315 	stw	r4,12(r8)
100021cc:	41800115 	stw	r6,4(r8)
100021d0:	40800415 	stw	r2,16(r8)
100021d4:	40c00515 	stw	r3,20(r8)
100021d8:	003ef306 	br	10001da8 <__kernel_rem_pio2+0x8ac>
100021dc:	da00a617 	ldw	r8,664(sp)
100021e0:	008000c4 	movi	r2,3
100021e4:	40bef01e 	bne	r8,r2,10001da8 <__kernel_rem_pio2+0x8ac>
100021e8:	0005883a 	mov	r2,zero
100021ec:	0007883a 	mov	r3,zero
100021f0:	003fa506 	br	10002088 <__kernel_rem_pio2+0xb8c>
100021f4:	9485883a 	add	r2,r18,r18
100021f8:	1085883a 	add	r2,r2,r2
100021fc:	d8a1883a 	add	r16,sp,r2
10002200:	880b883a 	mov	r5,r17
10002204:	a809883a 	mov	r4,r21
10002208:	84007804 	addi	r16,r16,480
1000220c:	00054b00 	call	100054b0 <__fixdfsi>
10002210:	80800015 	stw	r2,0(r16)
10002214:	9023883a 	mov	r17,r18
10002218:	003e7e06 	br	10001c14 <__kernel_rem_pio2+0x718>
1000221c:	a80d883a 	mov	r6,r21
10002220:	400f883a 	mov	r7,r8
10002224:	0009883a 	mov	r4,zero
10002228:	014ffc34 	movhi	r5,16368
1000222c:	0004bb40 	call	10004bb4 <__subdf3>
10002230:	102b883a 	mov	r21,r2
10002234:	1811883a 	mov	r8,r3
10002238:	04c00084 	movi	r19,2
1000223c:	003dc006 	br	10001940 <__kernel_rem_pio2+0x444>
10002240:	da00a617 	ldw	r8,664(sp)
10002244:	00800084 	movi	r2,2
10002248:	123fe416 	blt	r2,r8,100021dc <__kernel_rem_pio2+0xce0>
1000224c:	02000c16 	blt	zero,r8,10002280 <__kernel_rem_pio2+0xd84>
10002250:	403ed51e 	bne	r8,zero,10001da8 <__kernel_rem_pio2+0x8ac>
10002254:	0005883a 	mov	r2,zero
10002258:	0007883a 	mov	r3,zero
1000225c:	003ecc06 	br	10001d90 <__kernel_rem_pio2+0x894>
10002260:	d8009215 	stw	zero,584(sp)
10002264:	003cc306 	br	10001574 <__kernel_rem_pio2+0x78>
10002268:	da008f17 	ldw	r8,572(sp)
1000226c:	1009883a 	mov	r4,r2
10002270:	1805883a 	mov	r2,r3
10002274:	41000215 	stw	r4,8(r8)
10002278:	40800315 	stw	r2,12(r8)
1000227c:	003eca06 	br	10001da8 <__kernel_rem_pio2+0x8ac>
10002280:	0005883a 	mov	r2,zero
10002284:	0007883a 	mov	r3,zero
10002288:	003f9d06 	br	10002100 <__kernel_rem_pio2+0xc04>

1000228c <__kernel_sin>:
1000228c:	00a00034 	movhi	r2,32768
10002290:	defff404 	addi	sp,sp,-48
10002294:	10bfffc4 	addi	r2,r2,-1
10002298:	00cf9034 	movhi	r3,15936
1000229c:	ddc00915 	stw	r23,36(sp)
100022a0:	dd800815 	stw	r22,32(sp)
100022a4:	dc400315 	stw	r17,12(sp)
100022a8:	dc000215 	stw	r16,8(sp)
100022ac:	dfc00b15 	stw	ra,44(sp)
100022b0:	df000a15 	stw	fp,40(sp)
100022b4:	dd400715 	stw	r21,28(sp)
100022b8:	dd000615 	stw	r20,24(sp)
100022bc:	dcc00515 	stw	r19,20(sp)
100022c0:	dc800415 	stw	r18,16(sp)
100022c4:	2884703a 	and	r2,r5,r2
100022c8:	18ffffc4 	addi	r3,r3,-1
100022cc:	2821883a 	mov	r16,r5
100022d0:	2023883a 	mov	r17,r4
100022d4:	302f883a 	mov	r23,r6
100022d8:	382d883a 	mov	r22,r7
100022dc:	18800216 	blt	r3,r2,100022e8 <__kernel_sin+0x5c>
100022e0:	00054b00 	call	100054b0 <__fixdfsi>
100022e4:	10009926 	beq	r2,zero,1000254c <__kernel_sin+0x2c0>
100022e8:	880d883a 	mov	r6,r17
100022ec:	800f883a 	mov	r7,r16
100022f0:	8809883a 	mov	r4,r17
100022f4:	800b883a 	mov	r5,r16
100022f8:	000449c0 	call	1000449c <__muldf3>
100022fc:	100d883a 	mov	r6,r2
10002300:	180f883a 	mov	r7,r3
10002304:	8809883a 	mov	r4,r17
10002308:	800b883a 	mov	r5,r16
1000230c:	1027883a 	mov	r19,r2
10002310:	1825883a 	mov	r18,r3
10002314:	000449c0 	call	1000449c <__muldf3>
10002318:	0196b434 	movhi	r6,23248
1000231c:	01cf79b4 	movhi	r7,15846
10002320:	31b55f04 	addi	r6,r6,-10884
10002324:	39f64e84 	addi	r7,r7,-9926
10002328:	9809883a 	mov	r4,r19
1000232c:	900b883a 	mov	r5,r18
10002330:	102b883a 	mov	r21,r2
10002334:	1829883a 	mov	r20,r3
10002338:	000449c0 	call	1000449c <__muldf3>
1000233c:	01a28b34 	movhi	r6,35372
10002340:	01cf96f4 	movhi	r7,15963
10002344:	31a73ac4 	addi	r6,r6,-25365
10002348:	39f97984 	addi	r7,r7,-6682
1000234c:	1009883a 	mov	r4,r2
10002350:	180b883a 	mov	r5,r3
10002354:	0004bb40 	call	10004bb4 <__subdf3>
10002358:	980d883a 	mov	r6,r19
1000235c:	900f883a 	mov	r7,r18
10002360:	1009883a 	mov	r4,r2
10002364:	180b883a 	mov	r5,r3
10002368:	000449c0 	call	1000449c <__muldf3>
1000236c:	0195ecb4 	movhi	r6,22450
10002370:	01cfb1f4 	movhi	r7,16071
10002374:	31bf9f44 	addi	r6,r6,-387
10002378:	39c778c4 	addi	r7,r7,7651
1000237c:	1009883a 	mov	r4,r2
10002380:	180b883a 	mov	r5,r3
10002384:	00030b00 	call	100030b0 <__adddf3>
10002388:	980d883a 	mov	r6,r19
1000238c:	900f883a 	mov	r7,r18
10002390:	1009883a 	mov	r4,r2
10002394:	180b883a 	mov	r5,r3
10002398:	000449c0 	call	1000449c <__muldf3>
1000239c:	01867074 	movhi	r6,6593
100023a0:	01cfcab4 	movhi	r7,16170
100023a4:	31987544 	addi	r6,r6,25045
100023a8:	39c06804 	addi	r7,r7,416
100023ac:	1009883a 	mov	r4,r2
100023b0:	180b883a 	mov	r5,r3
100023b4:	0004bb40 	call	10004bb4 <__subdf3>
100023b8:	980d883a 	mov	r6,r19
100023bc:	900f883a 	mov	r7,r18
100023c0:	1009883a 	mov	r4,r2
100023c4:	180b883a 	mov	r5,r3
100023c8:	000449c0 	call	1000449c <__muldf3>
100023cc:	01844474 	movhi	r6,4369
100023d0:	01cfe074 	movhi	r7,16257
100023d4:	31be2984 	addi	r6,r6,-1882
100023d8:	39c44444 	addi	r7,r7,4369
100023dc:	1009883a 	mov	r4,r2
100023e0:	180b883a 	mov	r5,r3
100023e4:	00030b00 	call	100030b0 <__adddf3>
100023e8:	1011883a 	mov	r8,r2
100023ec:	d8800c17 	ldw	r2,48(sp)
100023f0:	1839883a 	mov	fp,r3
100023f4:	10003e26 	beq	r2,zero,100024f0 <__kernel_sin+0x264>
100023f8:	000d883a 	mov	r6,zero
100023fc:	01cff834 	movhi	r7,16352
10002400:	b809883a 	mov	r4,r23
10002404:	b00b883a 	mov	r5,r22
10002408:	da000015 	stw	r8,0(sp)
1000240c:	000449c0 	call	1000449c <__muldf3>
10002410:	da000017 	ldw	r8,0(sp)
10002414:	e00f883a 	mov	r7,fp
10002418:	a809883a 	mov	r4,r21
1000241c:	400d883a 	mov	r6,r8
10002420:	a00b883a 	mov	r5,r20
10002424:	d8c00115 	stw	r3,4(sp)
10002428:	d8800015 	stw	r2,0(sp)
1000242c:	000449c0 	call	1000449c <__muldf3>
10002430:	da800017 	ldw	r10,0(sp)
10002434:	da400117 	ldw	r9,4(sp)
10002438:	100d883a 	mov	r6,r2
1000243c:	5009883a 	mov	r4,r10
10002440:	480b883a 	mov	r5,r9
10002444:	180f883a 	mov	r7,r3
10002448:	0004bb40 	call	10004bb4 <__subdf3>
1000244c:	980d883a 	mov	r6,r19
10002450:	900f883a 	mov	r7,r18
10002454:	1009883a 	mov	r4,r2
10002458:	180b883a 	mov	r5,r3
1000245c:	000449c0 	call	1000449c <__muldf3>
10002460:	b80d883a 	mov	r6,r23
10002464:	b00f883a 	mov	r7,r22
10002468:	1009883a 	mov	r4,r2
1000246c:	180b883a 	mov	r5,r3
10002470:	0004bb40 	call	10004bb4 <__subdf3>
10002474:	01955574 	movhi	r6,21845
10002478:	01cff174 	movhi	r7,16325
1000247c:	31955244 	addi	r6,r6,21833
10002480:	39d55544 	addi	r7,r7,21845
10002484:	a809883a 	mov	r4,r21
10002488:	a00b883a 	mov	r5,r20
1000248c:	1027883a 	mov	r19,r2
10002490:	1825883a 	mov	r18,r3
10002494:	000449c0 	call	1000449c <__muldf3>
10002498:	100d883a 	mov	r6,r2
1000249c:	180f883a 	mov	r7,r3
100024a0:	9809883a 	mov	r4,r19
100024a4:	900b883a 	mov	r5,r18
100024a8:	00030b00 	call	100030b0 <__adddf3>
100024ac:	100d883a 	mov	r6,r2
100024b0:	180f883a 	mov	r7,r3
100024b4:	8809883a 	mov	r4,r17
100024b8:	800b883a 	mov	r5,r16
100024bc:	0004bb40 	call	10004bb4 <__subdf3>
100024c0:	dfc00b17 	ldw	ra,44(sp)
100024c4:	df000a17 	ldw	fp,40(sp)
100024c8:	ddc00917 	ldw	r23,36(sp)
100024cc:	dd800817 	ldw	r22,32(sp)
100024d0:	dd400717 	ldw	r21,28(sp)
100024d4:	dd000617 	ldw	r20,24(sp)
100024d8:	dcc00517 	ldw	r19,20(sp)
100024dc:	dc800417 	ldw	r18,16(sp)
100024e0:	dc400317 	ldw	r17,12(sp)
100024e4:	dc000217 	ldw	r16,8(sp)
100024e8:	dec00c04 	addi	sp,sp,48
100024ec:	f800283a 	ret
100024f0:	400d883a 	mov	r6,r8
100024f4:	9809883a 	mov	r4,r19
100024f8:	900b883a 	mov	r5,r18
100024fc:	180f883a 	mov	r7,r3
10002500:	000449c0 	call	1000449c <__muldf3>
10002504:	01955574 	movhi	r6,21845
10002508:	01cff174 	movhi	r7,16325
1000250c:	31955244 	addi	r6,r6,21833
10002510:	39d55544 	addi	r7,r7,21845
10002514:	1009883a 	mov	r4,r2
10002518:	180b883a 	mov	r5,r3
1000251c:	0004bb40 	call	10004bb4 <__subdf3>
10002520:	a80d883a 	mov	r6,r21
10002524:	a00f883a 	mov	r7,r20
10002528:	1009883a 	mov	r4,r2
1000252c:	180b883a 	mov	r5,r3
10002530:	000449c0 	call	1000449c <__muldf3>
10002534:	880d883a 	mov	r6,r17
10002538:	800f883a 	mov	r7,r16
1000253c:	1009883a 	mov	r4,r2
10002540:	180b883a 	mov	r5,r3
10002544:	00030b00 	call	100030b0 <__adddf3>
10002548:	003fdd06 	br	100024c0 <__kernel_sin+0x234>
1000254c:	8805883a 	mov	r2,r17
10002550:	8007883a 	mov	r3,r16
10002554:	003fda06 	br	100024c0 <__kernel_sin+0x234>

10002558 <fabs>:
10002558:	00e00034 	movhi	r3,32768
1000255c:	18ffffc4 	addi	r3,r3,-1
10002560:	2005883a 	mov	r2,r4
10002564:	28c6703a 	and	r3,r5,r3
10002568:	f800283a 	ret

1000256c <floor>:
1000256c:	2811d53a 	srai	r8,r5,20
10002570:	defffa04 	addi	sp,sp,-24
10002574:	dcc00315 	stw	r19,12(sp)
10002578:	4201ffcc 	andi	r8,r8,2047
1000257c:	dc800215 	stw	r18,8(sp)
10002580:	dc400115 	stw	r17,4(sp)
10002584:	dc000015 	stw	r16,0(sp)
10002588:	dfc00515 	stw	ra,20(sp)
1000258c:	dd000415 	stw	r20,16(sp)
10002590:	44bf0044 	addi	r18,r8,-1023
10002594:	018004c4 	movi	r6,19
10002598:	2821883a 	mov	r16,r5
1000259c:	2005883a 	mov	r2,r4
100025a0:	280f883a 	mov	r7,r5
100025a4:	2827883a 	mov	r19,r5
100025a8:	2023883a 	mov	r17,r4
100025ac:	34801916 	blt	r6,r18,10002614 <floor+0xa8>
100025b0:	90003c16 	blt	r18,zero,100026a4 <floor+0x138>
100025b4:	05000434 	movhi	r20,16
100025b8:	a53fffc4 	addi	r20,r20,-1
100025bc:	a4a9d83a 	sra	r20,r20,r18
100025c0:	2d0c703a 	and	r6,r5,r20
100025c4:	310cb03a 	or	r6,r6,r4
100025c8:	30001626 	beq	r6,zero,10002624 <floor+0xb8>
100025cc:	01a20034 	movhi	r6,34816
100025d0:	01df8e34 	movhi	r7,32312
100025d4:	319d6704 	addi	r6,r6,30108
100025d8:	39f90f04 	addi	r7,r7,-7108
100025dc:	00030b00 	call	100030b0 <__adddf3>
100025e0:	000d883a 	mov	r6,zero
100025e4:	000f883a 	mov	r7,zero
100025e8:	1009883a 	mov	r4,r2
100025ec:	180b883a 	mov	r5,r3
100025f0:	00042cc0 	call	100042cc <__gedf2>
100025f4:	0080040e 	bge	zero,r2,10002608 <floor+0x9c>
100025f8:	80003c16 	blt	r16,zero,100026ec <floor+0x180>
100025fc:	0520303a 	nor	r16,zero,r20
10002600:	84e0703a 	and	r16,r16,r19
10002604:	0023883a 	mov	r17,zero
10002608:	8805883a 	mov	r2,r17
1000260c:	8007883a 	mov	r3,r16
10002610:	00000506 	br	10002628 <floor+0xbc>
10002614:	01800cc4 	movi	r6,51
10002618:	34800b0e 	bge	r6,r18,10002648 <floor+0xdc>
1000261c:	01810004 	movi	r6,1024
10002620:	91802f26 	beq	r18,r6,100026e0 <floor+0x174>
10002624:	3807883a 	mov	r3,r7
10002628:	dfc00517 	ldw	ra,20(sp)
1000262c:	dd000417 	ldw	r20,16(sp)
10002630:	dcc00317 	ldw	r19,12(sp)
10002634:	dc800217 	ldw	r18,8(sp)
10002638:	dc400117 	ldw	r17,4(sp)
1000263c:	dc000017 	ldw	r16,0(sp)
10002640:	dec00604 	addi	sp,sp,24
10002644:	f800283a 	ret
10002648:	423efb44 	addi	r8,r8,-1043
1000264c:	053fffc4 	movi	r20,-1
10002650:	a228d83a 	srl	r20,r20,r8
10002654:	250c703a 	and	r6,r4,r20
10002658:	303ff226 	beq	r6,zero,10002624 <floor+0xb8>
1000265c:	01a20034 	movhi	r6,34816
10002660:	01df8e34 	movhi	r7,32312
10002664:	319d6704 	addi	r6,r6,30108
10002668:	39f90f04 	addi	r7,r7,-7108
1000266c:	00030b00 	call	100030b0 <__adddf3>
10002670:	000d883a 	mov	r6,zero
10002674:	000f883a 	mov	r7,zero
10002678:	1009883a 	mov	r4,r2
1000267c:	180b883a 	mov	r5,r3
10002680:	00042cc0 	call	100042cc <__gedf2>
10002684:	00bfe00e 	bge	zero,r2,10002608 <floor+0x9c>
10002688:	80001c16 	blt	r16,zero,100026fc <floor+0x190>
1000268c:	0510303a 	nor	r8,zero,r20
10002690:	9821883a 	mov	r16,r19
10002694:	8a22703a 	and	r17,r17,r8
10002698:	8805883a 	mov	r2,r17
1000269c:	8007883a 	mov	r3,r16
100026a0:	003fe106 	br	10002628 <floor+0xbc>
100026a4:	01a20034 	movhi	r6,34816
100026a8:	01df8e34 	movhi	r7,32312
100026ac:	319d6704 	addi	r6,r6,30108
100026b0:	39f90f04 	addi	r7,r7,-7108
100026b4:	00030b00 	call	100030b0 <__adddf3>
100026b8:	000d883a 	mov	r6,zero
100026bc:	000f883a 	mov	r7,zero
100026c0:	1009883a 	mov	r4,r2
100026c4:	180b883a 	mov	r5,r3
100026c8:	00042cc0 	call	100042cc <__gedf2>
100026cc:	00bfce0e 	bge	zero,r2,10002608 <floor+0x9c>
100026d0:	80001516 	blt	r16,zero,10002728 <floor+0x1bc>
100026d4:	0023883a 	mov	r17,zero
100026d8:	0021883a 	mov	r16,zero
100026dc:	003fca06 	br	10002608 <floor+0x9c>
100026e0:	200d883a 	mov	r6,r4
100026e4:	00030b00 	call	100030b0 <__adddf3>
100026e8:	003fcf06 	br	10002628 <floor+0xbc>
100026ec:	00800434 	movhi	r2,16
100026f0:	14a5d83a 	sra	r18,r2,r18
100026f4:	84a7883a 	add	r19,r16,r18
100026f8:	003fc006 	br	100025fc <floor+0x90>
100026fc:	00800504 	movi	r2,20
10002700:	90801326 	beq	r18,r2,10002750 <floor+0x1e4>
10002704:	00800d04 	movi	r2,52
10002708:	14a5c83a 	sub	r18,r2,r18
1000270c:	00800044 	movi	r2,1
10002710:	1484983a 	sll	r2,r2,r18
10002714:	1445883a 	add	r2,r2,r17
10002718:	14400b2e 	bgeu	r2,r17,10002748 <floor+0x1dc>
1000271c:	84c00044 	addi	r19,r16,1
10002720:	1023883a 	mov	r17,r2
10002724:	003fd906 	br	1000268c <floor+0x120>
10002728:	00a00034 	movhi	r2,32768
1000272c:	10bfffc4 	addi	r2,r2,-1
10002730:	8084703a 	and	r2,r16,r2
10002734:	1462b03a 	or	r17,r2,r17
10002738:	883fb326 	beq	r17,zero,10002608 <floor+0x9c>
1000273c:	0023883a 	mov	r17,zero
10002740:	042ffc34 	movhi	r16,49136
10002744:	003fb006 	br	10002608 <floor+0x9c>
10002748:	1023883a 	mov	r17,r2
1000274c:	003fcf06 	br	1000268c <floor+0x120>
10002750:	84c00044 	addi	r19,r16,1
10002754:	003fcd06 	br	1000268c <floor+0x120>

10002758 <scalbn>:
10002758:	2a1ffc2c 	andhi	r8,r5,32752
1000275c:	4011d53a 	srai	r8,r8,20
10002760:	defffe04 	addi	sp,sp,-8
10002764:	dc000015 	stw	r16,0(sp)
10002768:	dfc00115 	stw	ra,4(sp)
1000276c:	280f883a 	mov	r7,r5
10002770:	2015883a 	mov	r10,r4
10002774:	3021883a 	mov	r16,r6
10002778:	40001e1e 	bne	r8,zero,100027f4 <scalbn+0x9c>
1000277c:	00a00034 	movhi	r2,32768
10002780:	10bfffc4 	addi	r2,r2,-1
10002784:	2884703a 	and	r2,r5,r2
10002788:	1104b03a 	or	r2,r2,r4
1000278c:	10002226 	beq	r2,zero,10002818 <scalbn+0xc0>
10002790:	01d0d434 	movhi	r7,17232
10002794:	000d883a 	mov	r6,zero
10002798:	000449c0 	call	1000449c <__muldf3>
1000279c:	013ffff4 	movhi	r4,65535
100027a0:	210f2c04 	addi	r4,r4,15536
100027a4:	1015883a 	mov	r10,r2
100027a8:	180f883a 	mov	r7,r3
100027ac:	81002a16 	blt	r16,r4,10002858 <scalbn+0x100>
100027b0:	191ffc2c 	andhi	r4,r3,32752
100027b4:	2009d53a 	srai	r4,r4,20
100027b8:	223ff284 	addi	r8,r4,-54
100027bc:	8211883a 	add	r8,r16,r8
100027c0:	0081ff84 	movi	r2,2046
100027c4:	12002f16 	blt	r2,r8,10002884 <scalbn+0x12c>
100027c8:	0200190e 	bge	zero,r8,10002830 <scalbn+0xd8>
100027cc:	4010953a 	slli	r8,r8,20
100027d0:	01600434 	movhi	r5,32784
100027d4:	297fffc4 	addi	r5,r5,-1
100027d8:	194e703a 	and	r7,r3,r5
100027dc:	5005883a 	mov	r2,r10
100027e0:	3a06b03a 	or	r3,r7,r8
100027e4:	dfc00117 	ldw	ra,4(sp)
100027e8:	dc000017 	ldw	r16,0(sp)
100027ec:	dec00204 	addi	sp,sp,8
100027f0:	f800283a 	ret
100027f4:	0081ffc4 	movi	r2,2047
100027f8:	2807883a 	mov	r3,r5
100027fc:	40bfef1e 	bne	r8,r2,100027bc <scalbn+0x64>
10002800:	200d883a 	mov	r6,r4
10002804:	00030b00 	call	100030b0 <__adddf3>
10002808:	dfc00117 	ldw	ra,4(sp)
1000280c:	dc000017 	ldw	r16,0(sp)
10002810:	dec00204 	addi	sp,sp,8
10002814:	f800283a 	ret
10002818:	2005883a 	mov	r2,r4
1000281c:	2807883a 	mov	r3,r5
10002820:	dfc00117 	ldw	ra,4(sp)
10002824:	dc000017 	ldw	r16,0(sp)
10002828:	dec00204 	addi	sp,sp,8
1000282c:	f800283a 	ret
10002830:	00bff2c4 	movi	r2,-53
10002834:	4080240e 	bge	r8,r2,100028c8 <scalbn+0x170>
10002838:	00b0d414 	movui	r2,50000
1000283c:	14001116 	blt	r2,r16,10002884 <scalbn+0x12c>
10002840:	0130be74 	movhi	r4,49913
10002844:	01406974 	movhi	r5,421
10002848:	213cd644 	addi	r4,r4,-3239
1000284c:	295b87c4 	addi	r5,r5,28191
10002850:	500d883a 	mov	r6,r10
10002854:	00028f40 	call	100028f4 <copysign>
10002858:	01b0be74 	movhi	r6,49913
1000285c:	01c06974 	movhi	r7,421
10002860:	31bcd644 	addi	r6,r6,-3239
10002864:	39db87c4 	addi	r7,r7,28191
10002868:	1009883a 	mov	r4,r2
1000286c:	180b883a 	mov	r5,r3
10002870:	000449c0 	call	1000449c <__muldf3>
10002874:	dfc00117 	ldw	ra,4(sp)
10002878:	dc000017 	ldw	r16,0(sp)
1000287c:	dec00204 	addi	sp,sp,8
10002880:	f800283a 	ret
10002884:	01220034 	movhi	r4,34816
10002888:	015f8e34 	movhi	r5,32312
1000288c:	500d883a 	mov	r6,r10
10002890:	211d6704 	addi	r4,r4,30108
10002894:	29790f04 	addi	r5,r5,-7108
10002898:	00028f40 	call	100028f4 <copysign>
1000289c:	01a20034 	movhi	r6,34816
100028a0:	01df8e34 	movhi	r7,32312
100028a4:	319d6704 	addi	r6,r6,30108
100028a8:	39f90f04 	addi	r7,r7,-7108
100028ac:	1009883a 	mov	r4,r2
100028b0:	180b883a 	mov	r5,r3
100028b4:	000449c0 	call	1000449c <__muldf3>
100028b8:	dfc00117 	ldw	ra,4(sp)
100028bc:	dc000017 	ldw	r16,0(sp)
100028c0:	dec00204 	addi	sp,sp,8
100028c4:	f800283a 	ret
100028c8:	42000d84 	addi	r8,r8,54
100028cc:	4012953a 	slli	r9,r8,20
100028d0:	01e00434 	movhi	r7,32784
100028d4:	39ffffc4 	addi	r7,r7,-1
100028d8:	19ca703a 	and	r5,r3,r7
100028dc:	000d883a 	mov	r6,zero
100028e0:	01cf2434 	movhi	r7,15504
100028e4:	5009883a 	mov	r4,r10
100028e8:	494ab03a 	or	r5,r9,r5
100028ec:	000449c0 	call	1000449c <__muldf3>
100028f0:	003fbc06 	br	100027e4 <scalbn+0x8c>

100028f4 <copysign>:
100028f4:	2005883a 	mov	r2,r4
100028f8:	01200034 	movhi	r4,32768
100028fc:	213fffc4 	addi	r4,r4,-1
10002900:	38e0002c 	andhi	r3,r7,32768
10002904:	290a703a 	and	r5,r5,r4
10002908:	28c6b03a 	or	r3,r5,r3
1000290c:	f800283a 	ret

10002910 <__fixunsdfsi>:
10002910:	defffd04 	addi	sp,sp,-12
10002914:	000d883a 	mov	r6,zero
10002918:	01d07834 	movhi	r7,16864
1000291c:	dc400115 	stw	r17,4(sp)
10002920:	dc000015 	stw	r16,0(sp)
10002924:	dfc00215 	stw	ra,8(sp)
10002928:	2023883a 	mov	r17,r4
1000292c:	2821883a 	mov	r16,r5
10002930:	00042cc0 	call	100042cc <__gedf2>
10002934:	1000080e 	bge	r2,zero,10002958 <__fixunsdfsi+0x48>
10002938:	8809883a 	mov	r4,r17
1000293c:	800b883a 	mov	r5,r16
10002940:	00054b00 	call	100054b0 <__fixdfsi>
10002944:	dfc00217 	ldw	ra,8(sp)
10002948:	dc400117 	ldw	r17,4(sp)
1000294c:	dc000017 	ldw	r16,0(sp)
10002950:	dec00304 	addi	sp,sp,12
10002954:	f800283a 	ret
10002958:	000d883a 	mov	r6,zero
1000295c:	01d07834 	movhi	r7,16864
10002960:	8809883a 	mov	r4,r17
10002964:	800b883a 	mov	r5,r16
10002968:	0004bb40 	call	10004bb4 <__subdf3>
1000296c:	180b883a 	mov	r5,r3
10002970:	1009883a 	mov	r4,r2
10002974:	00054b00 	call	100054b0 <__fixdfsi>
10002978:	00e00034 	movhi	r3,32768
1000297c:	10c5883a 	add	r2,r2,r3
10002980:	003ff006 	br	10002944 <__fixunsdfsi+0x34>

10002984 <__udivdi3>:
10002984:	defff504 	addi	sp,sp,-44
10002988:	dcc00415 	stw	r19,16(sp)
1000298c:	dc000115 	stw	r16,4(sp)
10002990:	dfc00a15 	stw	ra,40(sp)
10002994:	df000915 	stw	fp,36(sp)
10002998:	ddc00815 	stw	r23,32(sp)
1000299c:	dd800715 	stw	r22,28(sp)
100029a0:	dd400615 	stw	r21,24(sp)
100029a4:	dd000515 	stw	r20,20(sp)
100029a8:	dc800315 	stw	r18,12(sp)
100029ac:	dc400215 	stw	r17,8(sp)
100029b0:	2027883a 	mov	r19,r4
100029b4:	2821883a 	mov	r16,r5
100029b8:	3800411e 	bne	r7,zero,10002ac0 <__udivdi3+0x13c>
100029bc:	3023883a 	mov	r17,r6
100029c0:	2025883a 	mov	r18,r4
100029c4:	2980522e 	bgeu	r5,r6,10002b10 <__udivdi3+0x18c>
100029c8:	00bfffd4 	movui	r2,65535
100029cc:	282d883a 	mov	r22,r5
100029d0:	1180a836 	bltu	r2,r6,10002c74 <__udivdi3+0x2f0>
100029d4:	00803fc4 	movi	r2,255
100029d8:	1185803a 	cmpltu	r2,r2,r6
100029dc:	100490fa 	slli	r2,r2,3
100029e0:	3086d83a 	srl	r3,r6,r2
100029e4:	01040774 	movhi	r4,4125
100029e8:	2124c904 	addi	r4,r4,-27868
100029ec:	20c7883a 	add	r3,r4,r3
100029f0:	18c00003 	ldbu	r3,0(r3)
100029f4:	1885883a 	add	r2,r3,r2
100029f8:	00c00804 	movi	r3,32
100029fc:	1887c83a 	sub	r3,r3,r2
10002a00:	18000526 	beq	r3,zero,10002a18 <__udivdi3+0x94>
10002a04:	80e0983a 	sll	r16,r16,r3
10002a08:	9884d83a 	srl	r2,r19,r2
10002a0c:	30e2983a 	sll	r17,r6,r3
10002a10:	98e4983a 	sll	r18,r19,r3
10002a14:	142cb03a 	or	r22,r2,r16
10002a18:	882ad43a 	srli	r21,r17,16
10002a1c:	b009883a 	mov	r4,r22
10002a20:	8d3fffcc 	andi	r20,r17,65535
10002a24:	a80b883a 	mov	r5,r21
10002a28:	00030580 	call	10003058 <__umodsi3>
10002a2c:	b009883a 	mov	r4,r22
10002a30:	a80b883a 	mov	r5,r21
10002a34:	1027883a 	mov	r19,r2
10002a38:	0002ff40 	call	10002ff4 <__udivsi3>
10002a3c:	102d883a 	mov	r22,r2
10002a40:	9826943a 	slli	r19,r19,16
10002a44:	9004d43a 	srli	r2,r18,16
10002a48:	a5a1383a 	mul	r16,r20,r22
10002a4c:	14c4b03a 	or	r2,r2,r19
10002a50:	1400052e 	bgeu	r2,r16,10002a68 <__udivdi3+0xe4>
10002a54:	1445883a 	add	r2,r2,r17
10002a58:	b0ffffc4 	addi	r3,r22,-1
10002a5c:	14400136 	bltu	r2,r17,10002a64 <__udivdi3+0xe0>
10002a60:	14012336 	bltu	r2,r16,10002ef0 <__udivdi3+0x56c>
10002a64:	182d883a 	mov	r22,r3
10002a68:	1421c83a 	sub	r16,r2,r16
10002a6c:	a80b883a 	mov	r5,r21
10002a70:	8009883a 	mov	r4,r16
10002a74:	00030580 	call	10003058 <__umodsi3>
10002a78:	1027883a 	mov	r19,r2
10002a7c:	a80b883a 	mov	r5,r21
10002a80:	8009883a 	mov	r4,r16
10002a84:	0002ff40 	call	10002ff4 <__udivsi3>
10002a88:	9826943a 	slli	r19,r19,16
10002a8c:	a0a9383a 	mul	r20,r20,r2
10002a90:	94bfffcc 	andi	r18,r18,65535
10002a94:	94e4b03a 	or	r18,r18,r19
10002a98:	9500052e 	bgeu	r18,r20,10002ab0 <__udivdi3+0x12c>
10002a9c:	8ca5883a 	add	r18,r17,r18
10002aa0:	10ffffc4 	addi	r3,r2,-1
10002aa4:	9440f136 	bltu	r18,r17,10002e6c <__udivdi3+0x4e8>
10002aa8:	9500f02e 	bgeu	r18,r20,10002e6c <__udivdi3+0x4e8>
10002aac:	10bfff84 	addi	r2,r2,-2
10002ab0:	b00c943a 	slli	r6,r22,16
10002ab4:	0007883a 	mov	r3,zero
10002ab8:	3084b03a 	or	r2,r6,r2
10002abc:	00005906 	br	10002c24 <__udivdi3+0x2a0>
10002ac0:	29c05636 	bltu	r5,r7,10002c1c <__udivdi3+0x298>
10002ac4:	00bfffd4 	movui	r2,65535
10002ac8:	11c0622e 	bgeu	r2,r7,10002c54 <__udivdi3+0x2d0>
10002acc:	00804034 	movhi	r2,256
10002ad0:	10bfffc4 	addi	r2,r2,-1
10002ad4:	11c0ee36 	bltu	r2,r7,10002e90 <__udivdi3+0x50c>
10002ad8:	00800404 	movi	r2,16
10002adc:	3886d83a 	srl	r3,r7,r2
10002ae0:	01040774 	movhi	r4,4125
10002ae4:	2124c904 	addi	r4,r4,-27868
10002ae8:	20c7883a 	add	r3,r4,r3
10002aec:	18c00003 	ldbu	r3,0(r3)
10002af0:	05400804 	movi	r21,32
10002af4:	1885883a 	add	r2,r3,r2
10002af8:	a8abc83a 	sub	r21,r21,r2
10002afc:	a800621e 	bne	r21,zero,10002c88 <__udivdi3+0x304>
10002b00:	3c00e936 	bltu	r7,r16,10002ea8 <__udivdi3+0x524>
10002b04:	9985403a 	cmpgeu	r2,r19,r6
10002b08:	0007883a 	mov	r3,zero
10002b0c:	00004506 	br	10002c24 <__udivdi3+0x2a0>
10002b10:	3000041e 	bne	r6,zero,10002b24 <__udivdi3+0x1a0>
10002b14:	000b883a 	mov	r5,zero
10002b18:	01000044 	movi	r4,1
10002b1c:	0002ff40 	call	10002ff4 <__udivsi3>
10002b20:	1023883a 	mov	r17,r2
10002b24:	00bfffd4 	movui	r2,65535
10002b28:	14404e2e 	bgeu	r2,r17,10002c64 <__udivdi3+0x2e0>
10002b2c:	00804034 	movhi	r2,256
10002b30:	10bfffc4 	addi	r2,r2,-1
10002b34:	1440d836 	bltu	r2,r17,10002e98 <__udivdi3+0x514>
10002b38:	00800404 	movi	r2,16
10002b3c:	8886d83a 	srl	r3,r17,r2
10002b40:	01040774 	movhi	r4,4125
10002b44:	2124c904 	addi	r4,r4,-27868
10002b48:	20c7883a 	add	r3,r4,r3
10002b4c:	18c00003 	ldbu	r3,0(r3)
10002b50:	1885883a 	add	r2,r3,r2
10002b54:	00c00804 	movi	r3,32
10002b58:	1887c83a 	sub	r3,r3,r2
10002b5c:	18008f1e 	bne	r3,zero,10002d9c <__udivdi3+0x418>
10002b60:	882ad43a 	srli	r21,r17,16
10002b64:	8461c83a 	sub	r16,r16,r17
10002b68:	8d3fffcc 	andi	r20,r17,65535
10002b6c:	00c00044 	movi	r3,1
10002b70:	8009883a 	mov	r4,r16
10002b74:	a80b883a 	mov	r5,r21
10002b78:	d8c00015 	stw	r3,0(sp)
10002b7c:	00030580 	call	10003058 <__umodsi3>
10002b80:	8009883a 	mov	r4,r16
10002b84:	a80b883a 	mov	r5,r21
10002b88:	1027883a 	mov	r19,r2
10002b8c:	0002ff40 	call	10002ff4 <__udivsi3>
10002b90:	9826943a 	slli	r19,r19,16
10002b94:	9008d43a 	srli	r4,r18,16
10002b98:	1521383a 	mul	r16,r2,r20
10002b9c:	102d883a 	mov	r22,r2
10002ba0:	24c8b03a 	or	r4,r4,r19
10002ba4:	d8c00017 	ldw	r3,0(sp)
10002ba8:	2400052e 	bgeu	r4,r16,10002bc0 <__udivdi3+0x23c>
10002bac:	2449883a 	add	r4,r4,r17
10002bb0:	b0bfffc4 	addi	r2,r22,-1
10002bb4:	24400136 	bltu	r4,r17,10002bbc <__udivdi3+0x238>
10002bb8:	2400ca36 	bltu	r4,r16,10002ee4 <__udivdi3+0x560>
10002bbc:	102d883a 	mov	r22,r2
10002bc0:	2421c83a 	sub	r16,r4,r16
10002bc4:	a80b883a 	mov	r5,r21
10002bc8:	8009883a 	mov	r4,r16
10002bcc:	d8c00015 	stw	r3,0(sp)
10002bd0:	00030580 	call	10003058 <__umodsi3>
10002bd4:	1027883a 	mov	r19,r2
10002bd8:	a80b883a 	mov	r5,r21
10002bdc:	8009883a 	mov	r4,r16
10002be0:	0002ff40 	call	10002ff4 <__udivsi3>
10002be4:	9826943a 	slli	r19,r19,16
10002be8:	1529383a 	mul	r20,r2,r20
10002bec:	94bfffcc 	andi	r18,r18,65535
10002bf0:	94e4b03a 	or	r18,r18,r19
10002bf4:	d8c00017 	ldw	r3,0(sp)
10002bf8:	9500052e 	bgeu	r18,r20,10002c10 <__udivdi3+0x28c>
10002bfc:	8ca5883a 	add	r18,r17,r18
10002c00:	113fffc4 	addi	r4,r2,-1
10002c04:	94409736 	bltu	r18,r17,10002e64 <__udivdi3+0x4e0>
10002c08:	9500962e 	bgeu	r18,r20,10002e64 <__udivdi3+0x4e0>
10002c0c:	10bfff84 	addi	r2,r2,-2
10002c10:	b00c943a 	slli	r6,r22,16
10002c14:	3084b03a 	or	r2,r6,r2
10002c18:	00000206 	br	10002c24 <__udivdi3+0x2a0>
10002c1c:	0007883a 	mov	r3,zero
10002c20:	0005883a 	mov	r2,zero
10002c24:	dfc00a17 	ldw	ra,40(sp)
10002c28:	df000917 	ldw	fp,36(sp)
10002c2c:	ddc00817 	ldw	r23,32(sp)
10002c30:	dd800717 	ldw	r22,28(sp)
10002c34:	dd400617 	ldw	r21,24(sp)
10002c38:	dd000517 	ldw	r20,20(sp)
10002c3c:	dcc00417 	ldw	r19,16(sp)
10002c40:	dc800317 	ldw	r18,12(sp)
10002c44:	dc400217 	ldw	r17,8(sp)
10002c48:	dc000117 	ldw	r16,4(sp)
10002c4c:	dec00b04 	addi	sp,sp,44
10002c50:	f800283a 	ret
10002c54:	00803fc4 	movi	r2,255
10002c58:	11c5803a 	cmpltu	r2,r2,r7
10002c5c:	100490fa 	slli	r2,r2,3
10002c60:	003f9e06 	br	10002adc <__udivdi3+0x158>
10002c64:	00803fc4 	movi	r2,255
10002c68:	1445803a 	cmpltu	r2,r2,r17
10002c6c:	100490fa 	slli	r2,r2,3
10002c70:	003fb206 	br	10002b3c <__udivdi3+0x1b8>
10002c74:	00804034 	movhi	r2,256
10002c78:	10bfffc4 	addi	r2,r2,-1
10002c7c:	11808836 	bltu	r2,r6,10002ea0 <__udivdi3+0x51c>
10002c80:	00800404 	movi	r2,16
10002c84:	003f5606 	br	100029e0 <__udivdi3+0x5c>
10002c88:	30aed83a 	srl	r23,r6,r2
10002c8c:	3d4e983a 	sll	r7,r7,r21
10002c90:	80acd83a 	srl	r22,r16,r2
10002c94:	9884d83a 	srl	r2,r19,r2
10002c98:	3deeb03a 	or	r23,r7,r23
10002c9c:	b824d43a 	srli	r18,r23,16
10002ca0:	8560983a 	sll	r16,r16,r21
10002ca4:	b009883a 	mov	r4,r22
10002ca8:	900b883a 	mov	r5,r18
10002cac:	3568983a 	sll	r20,r6,r21
10002cb0:	1420b03a 	or	r16,r2,r16
10002cb4:	00030580 	call	10003058 <__umodsi3>
10002cb8:	b009883a 	mov	r4,r22
10002cbc:	900b883a 	mov	r5,r18
10002cc0:	1023883a 	mov	r17,r2
10002cc4:	0002ff40 	call	10002ff4 <__udivsi3>
10002cc8:	8808943a 	slli	r4,r17,16
10002ccc:	bf3fffcc 	andi	fp,r23,65535
10002cd0:	8006d43a 	srli	r3,r16,16
10002cd4:	e0a3383a 	mul	r17,fp,r2
10002cd8:	100d883a 	mov	r6,r2
10002cdc:	1906b03a 	or	r3,r3,r4
10002ce0:	1c40042e 	bgeu	r3,r17,10002cf4 <__udivdi3+0x370>
10002ce4:	1dc7883a 	add	r3,r3,r23
10002ce8:	10bfffc4 	addi	r2,r2,-1
10002cec:	1dc0752e 	bgeu	r3,r23,10002ec4 <__udivdi3+0x540>
10002cf0:	100d883a 	mov	r6,r2
10002cf4:	1c63c83a 	sub	r17,r3,r17
10002cf8:	900b883a 	mov	r5,r18
10002cfc:	8809883a 	mov	r4,r17
10002d00:	d9800015 	stw	r6,0(sp)
10002d04:	00030580 	call	10003058 <__umodsi3>
10002d08:	102d883a 	mov	r22,r2
10002d0c:	8809883a 	mov	r4,r17
10002d10:	900b883a 	mov	r5,r18
10002d14:	0002ff40 	call	10002ff4 <__udivsi3>
10002d18:	b02c943a 	slli	r22,r22,16
10002d1c:	e089383a 	mul	r4,fp,r2
10002d20:	843fffcc 	andi	r16,r16,65535
10002d24:	85a0b03a 	or	r16,r16,r22
10002d28:	d9800017 	ldw	r6,0(sp)
10002d2c:	8100042e 	bgeu	r16,r4,10002d40 <__udivdi3+0x3bc>
10002d30:	85e1883a 	add	r16,r16,r23
10002d34:	10ffffc4 	addi	r3,r2,-1
10002d38:	85c05e2e 	bgeu	r16,r23,10002eb4 <__udivdi3+0x530>
10002d3c:	1805883a 	mov	r2,r3
10002d40:	300c943a 	slli	r6,r6,16
10002d44:	a17fffcc 	andi	r5,r20,65535
10002d48:	a028d43a 	srli	r20,r20,16
10002d4c:	3084b03a 	or	r2,r6,r2
10002d50:	10ffffcc 	andi	r3,r2,65535
10002d54:	100cd43a 	srli	r6,r2,16
10002d58:	194f383a 	mul	r7,r3,r5
10002d5c:	1d07383a 	mul	r3,r3,r20
10002d60:	314b383a 	mul	r5,r6,r5
10002d64:	3810d43a 	srli	r8,r7,16
10002d68:	8121c83a 	sub	r16,r16,r4
10002d6c:	1947883a 	add	r3,r3,r5
10002d70:	40c7883a 	add	r3,r8,r3
10002d74:	350d383a 	mul	r6,r6,r20
10002d78:	1940022e 	bgeu	r3,r5,10002d84 <__udivdi3+0x400>
10002d7c:	01000074 	movhi	r4,1
10002d80:	310d883a 	add	r6,r6,r4
10002d84:	1828d43a 	srli	r20,r3,16
10002d88:	a18d883a 	add	r6,r20,r6
10002d8c:	81803e36 	bltu	r16,r6,10002e88 <__udivdi3+0x504>
10002d90:	81803826 	beq	r16,r6,10002e74 <__udivdi3+0x4f0>
10002d94:	0007883a 	mov	r3,zero
10002d98:	003fa206 	br	10002c24 <__udivdi3+0x2a0>
10002d9c:	88e2983a 	sll	r17,r17,r3
10002da0:	80a8d83a 	srl	r20,r16,r2
10002da4:	80e0983a 	sll	r16,r16,r3
10002da8:	882ad43a 	srli	r21,r17,16
10002dac:	9884d83a 	srl	r2,r19,r2
10002db0:	a009883a 	mov	r4,r20
10002db4:	a80b883a 	mov	r5,r21
10002db8:	142eb03a 	or	r23,r2,r16
10002dbc:	98e4983a 	sll	r18,r19,r3
10002dc0:	00030580 	call	10003058 <__umodsi3>
10002dc4:	a009883a 	mov	r4,r20
10002dc8:	a80b883a 	mov	r5,r21
10002dcc:	1021883a 	mov	r16,r2
10002dd0:	0002ff40 	call	10002ff4 <__udivsi3>
10002dd4:	1039883a 	mov	fp,r2
10002dd8:	8d3fffcc 	andi	r20,r17,65535
10002ddc:	8020943a 	slli	r16,r16,16
10002de0:	b804d43a 	srli	r2,r23,16
10002de4:	a72d383a 	mul	r22,r20,fp
10002de8:	1404b03a 	or	r2,r2,r16
10002dec:	1580062e 	bgeu	r2,r22,10002e08 <__udivdi3+0x484>
10002df0:	1445883a 	add	r2,r2,r17
10002df4:	e0ffffc4 	addi	r3,fp,-1
10002df8:	14403836 	bltu	r2,r17,10002edc <__udivdi3+0x558>
10002dfc:	1580372e 	bgeu	r2,r22,10002edc <__udivdi3+0x558>
10002e00:	e73fff84 	addi	fp,fp,-2
10002e04:	1445883a 	add	r2,r2,r17
10002e08:	15adc83a 	sub	r22,r2,r22
10002e0c:	a80b883a 	mov	r5,r21
10002e10:	b009883a 	mov	r4,r22
10002e14:	00030580 	call	10003058 <__umodsi3>
10002e18:	1027883a 	mov	r19,r2
10002e1c:	b009883a 	mov	r4,r22
10002e20:	a80b883a 	mov	r5,r21
10002e24:	0002ff40 	call	10002ff4 <__udivsi3>
10002e28:	9826943a 	slli	r19,r19,16
10002e2c:	a0a1383a 	mul	r16,r20,r2
10002e30:	b93fffcc 	andi	r4,r23,65535
10002e34:	24c8b03a 	or	r4,r4,r19
10002e38:	2400062e 	bgeu	r4,r16,10002e54 <__udivdi3+0x4d0>
10002e3c:	2449883a 	add	r4,r4,r17
10002e40:	10ffffc4 	addi	r3,r2,-1
10002e44:	24402336 	bltu	r4,r17,10002ed4 <__udivdi3+0x550>
10002e48:	2400222e 	bgeu	r4,r16,10002ed4 <__udivdi3+0x550>
10002e4c:	10bfff84 	addi	r2,r2,-2
10002e50:	2449883a 	add	r4,r4,r17
10002e54:	e038943a 	slli	fp,fp,16
10002e58:	2421c83a 	sub	r16,r4,r16
10002e5c:	e086b03a 	or	r3,fp,r2
10002e60:	003f4306 	br	10002b70 <__udivdi3+0x1ec>
10002e64:	2005883a 	mov	r2,r4
10002e68:	003f6906 	br	10002c10 <__udivdi3+0x28c>
10002e6c:	1805883a 	mov	r2,r3
10002e70:	003f0f06 	br	10002ab0 <__udivdi3+0x12c>
10002e74:	1806943a 	slli	r3,r3,16
10002e78:	9d66983a 	sll	r19,r19,r21
10002e7c:	39ffffcc 	andi	r7,r7,65535
10002e80:	19c7883a 	add	r3,r3,r7
10002e84:	98ffc32e 	bgeu	r19,r3,10002d94 <__udivdi3+0x410>
10002e88:	10bfffc4 	addi	r2,r2,-1
10002e8c:	003fc106 	br	10002d94 <__udivdi3+0x410>
10002e90:	00800604 	movi	r2,24
10002e94:	003f1106 	br	10002adc <__udivdi3+0x158>
10002e98:	00800604 	movi	r2,24
10002e9c:	003f2706 	br	10002b3c <__udivdi3+0x1b8>
10002ea0:	00800604 	movi	r2,24
10002ea4:	003ece06 	br	100029e0 <__udivdi3+0x5c>
10002ea8:	0007883a 	mov	r3,zero
10002eac:	00800044 	movi	r2,1
10002eb0:	003f5c06 	br	10002c24 <__udivdi3+0x2a0>
10002eb4:	813fa12e 	bgeu	r16,r4,10002d3c <__udivdi3+0x3b8>
10002eb8:	10bfff84 	addi	r2,r2,-2
10002ebc:	85e1883a 	add	r16,r16,r23
10002ec0:	003f9f06 	br	10002d40 <__udivdi3+0x3bc>
10002ec4:	1c7f8a2e 	bgeu	r3,r17,10002cf0 <__udivdi3+0x36c>
10002ec8:	31bfff84 	addi	r6,r6,-2
10002ecc:	1dc7883a 	add	r3,r3,r23
10002ed0:	003f8806 	br	10002cf4 <__udivdi3+0x370>
10002ed4:	1805883a 	mov	r2,r3
10002ed8:	003fde06 	br	10002e54 <__udivdi3+0x4d0>
10002edc:	1839883a 	mov	fp,r3
10002ee0:	003fc906 	br	10002e08 <__udivdi3+0x484>
10002ee4:	b5bfff84 	addi	r22,r22,-2
10002ee8:	2449883a 	add	r4,r4,r17
10002eec:	003f3406 	br	10002bc0 <__udivdi3+0x23c>
10002ef0:	b5bfff84 	addi	r22,r22,-2
10002ef4:	1445883a 	add	r2,r2,r17
10002ef8:	003edb06 	br	10002a68 <__udivdi3+0xe4>

10002efc <__divsi3>:
10002efc:	20001b16 	blt	r4,zero,10002f6c <__divsi3+0x70>
10002f00:	000f883a 	mov	r7,zero
10002f04:	28001616 	blt	r5,zero,10002f60 <__divsi3+0x64>
10002f08:	200d883a 	mov	r6,r4
10002f0c:	29001a2e 	bgeu	r5,r4,10002f78 <__divsi3+0x7c>
10002f10:	00800804 	movi	r2,32
10002f14:	00c00044 	movi	r3,1
10002f18:	00000106 	br	10002f20 <__divsi3+0x24>
10002f1c:	10000d26 	beq	r2,zero,10002f54 <__divsi3+0x58>
10002f20:	294b883a 	add	r5,r5,r5
10002f24:	10bfffc4 	addi	r2,r2,-1
10002f28:	18c7883a 	add	r3,r3,r3
10002f2c:	293ffb36 	bltu	r5,r4,10002f1c <__divsi3+0x20>
10002f30:	0005883a 	mov	r2,zero
10002f34:	18000726 	beq	r3,zero,10002f54 <__divsi3+0x58>
10002f38:	0005883a 	mov	r2,zero
10002f3c:	31400236 	bltu	r6,r5,10002f48 <__divsi3+0x4c>
10002f40:	314dc83a 	sub	r6,r6,r5
10002f44:	10c4b03a 	or	r2,r2,r3
10002f48:	1806d07a 	srli	r3,r3,1
10002f4c:	280ad07a 	srli	r5,r5,1
10002f50:	183ffa1e 	bne	r3,zero,10002f3c <__divsi3+0x40>
10002f54:	38000126 	beq	r7,zero,10002f5c <__divsi3+0x60>
10002f58:	0085c83a 	sub	r2,zero,r2
10002f5c:	f800283a 	ret
10002f60:	014bc83a 	sub	r5,zero,r5
10002f64:	39c0005c 	xori	r7,r7,1
10002f68:	003fe706 	br	10002f08 <__divsi3+0xc>
10002f6c:	0109c83a 	sub	r4,zero,r4
10002f70:	01c00044 	movi	r7,1
10002f74:	003fe306 	br	10002f04 <__divsi3+0x8>
10002f78:	00c00044 	movi	r3,1
10002f7c:	003fee06 	br	10002f38 <__divsi3+0x3c>

10002f80 <__modsi3>:
10002f80:	20001716 	blt	r4,zero,10002fe0 <__modsi3+0x60>
10002f84:	000f883a 	mov	r7,zero
10002f88:	2005883a 	mov	r2,r4
10002f8c:	28001216 	blt	r5,zero,10002fd8 <__modsi3+0x58>
10002f90:	2900162e 	bgeu	r5,r4,10002fec <__modsi3+0x6c>
10002f94:	01800804 	movi	r6,32
10002f98:	00c00044 	movi	r3,1
10002f9c:	00000106 	br	10002fa4 <__modsi3+0x24>
10002fa0:	30000a26 	beq	r6,zero,10002fcc <__modsi3+0x4c>
10002fa4:	294b883a 	add	r5,r5,r5
10002fa8:	31bfffc4 	addi	r6,r6,-1
10002fac:	18c7883a 	add	r3,r3,r3
10002fb0:	293ffb36 	bltu	r5,r4,10002fa0 <__modsi3+0x20>
10002fb4:	18000526 	beq	r3,zero,10002fcc <__modsi3+0x4c>
10002fb8:	1806d07a 	srli	r3,r3,1
10002fbc:	11400136 	bltu	r2,r5,10002fc4 <__modsi3+0x44>
10002fc0:	1145c83a 	sub	r2,r2,r5
10002fc4:	280ad07a 	srli	r5,r5,1
10002fc8:	183ffb1e 	bne	r3,zero,10002fb8 <__modsi3+0x38>
10002fcc:	38000126 	beq	r7,zero,10002fd4 <__modsi3+0x54>
10002fd0:	0085c83a 	sub	r2,zero,r2
10002fd4:	f800283a 	ret
10002fd8:	014bc83a 	sub	r5,zero,r5
10002fdc:	003fec06 	br	10002f90 <__modsi3+0x10>
10002fe0:	0109c83a 	sub	r4,zero,r4
10002fe4:	01c00044 	movi	r7,1
10002fe8:	003fe706 	br	10002f88 <__modsi3+0x8>
10002fec:	00c00044 	movi	r3,1
10002ff0:	003ff106 	br	10002fb8 <__modsi3+0x38>

10002ff4 <__udivsi3>:
10002ff4:	200d883a 	mov	r6,r4
10002ff8:	2900152e 	bgeu	r5,r4,10003050 <__udivsi3+0x5c>
10002ffc:	28001416 	blt	r5,zero,10003050 <__udivsi3+0x5c>
10003000:	00800804 	movi	r2,32
10003004:	00c00044 	movi	r3,1
10003008:	00000206 	br	10003014 <__udivsi3+0x20>
1000300c:	10000e26 	beq	r2,zero,10003048 <__udivsi3+0x54>
10003010:	28000516 	blt	r5,zero,10003028 <__udivsi3+0x34>
10003014:	294b883a 	add	r5,r5,r5
10003018:	10bfffc4 	addi	r2,r2,-1
1000301c:	18c7883a 	add	r3,r3,r3
10003020:	293ffa36 	bltu	r5,r4,1000300c <__udivsi3+0x18>
10003024:	18000826 	beq	r3,zero,10003048 <__udivsi3+0x54>
10003028:	0005883a 	mov	r2,zero
1000302c:	31400236 	bltu	r6,r5,10003038 <__udivsi3+0x44>
10003030:	314dc83a 	sub	r6,r6,r5
10003034:	10c4b03a 	or	r2,r2,r3
10003038:	1806d07a 	srli	r3,r3,1
1000303c:	280ad07a 	srli	r5,r5,1
10003040:	183ffa1e 	bne	r3,zero,1000302c <__udivsi3+0x38>
10003044:	f800283a 	ret
10003048:	0005883a 	mov	r2,zero
1000304c:	f800283a 	ret
10003050:	00c00044 	movi	r3,1
10003054:	003ff406 	br	10003028 <__udivsi3+0x34>

10003058 <__umodsi3>:
10003058:	2005883a 	mov	r2,r4
1000305c:	2900122e 	bgeu	r5,r4,100030a8 <__umodsi3+0x50>
10003060:	28001116 	blt	r5,zero,100030a8 <__umodsi3+0x50>
10003064:	01800804 	movi	r6,32
10003068:	00c00044 	movi	r3,1
1000306c:	00000206 	br	10003078 <__umodsi3+0x20>
10003070:	30000c26 	beq	r6,zero,100030a4 <__umodsi3+0x4c>
10003074:	28000516 	blt	r5,zero,1000308c <__umodsi3+0x34>
10003078:	294b883a 	add	r5,r5,r5
1000307c:	31bfffc4 	addi	r6,r6,-1
10003080:	18c7883a 	add	r3,r3,r3
10003084:	293ffa36 	bltu	r5,r4,10003070 <__umodsi3+0x18>
10003088:	18000626 	beq	r3,zero,100030a4 <__umodsi3+0x4c>
1000308c:	1806d07a 	srli	r3,r3,1
10003090:	11400136 	bltu	r2,r5,10003098 <__umodsi3+0x40>
10003094:	1145c83a 	sub	r2,r2,r5
10003098:	280ad07a 	srli	r5,r5,1
1000309c:	183ffb1e 	bne	r3,zero,1000308c <__umodsi3+0x34>
100030a0:	f800283a 	ret
100030a4:	f800283a 	ret
100030a8:	00c00044 	movi	r3,1
100030ac:	003ff706 	br	1000308c <__umodsi3+0x34>

100030b0 <__adddf3>:
100030b0:	02c00434 	movhi	r11,16
100030b4:	5affffc4 	addi	r11,r11,-1
100030b8:	2806d7fa 	srli	r3,r5,31
100030bc:	2ad4703a 	and	r10,r5,r11
100030c0:	3ad2703a 	and	r9,r7,r11
100030c4:	3804d53a 	srli	r2,r7,20
100030c8:	3018d77a 	srli	r12,r6,29
100030cc:	280ad53a 	srli	r5,r5,20
100030d0:	501490fa 	slli	r10,r10,3
100030d4:	2010d77a 	srli	r8,r4,29
100030d8:	481290fa 	slli	r9,r9,3
100030dc:	380ed7fa 	srli	r7,r7,31
100030e0:	defffb04 	addi	sp,sp,-20
100030e4:	dc800215 	stw	r18,8(sp)
100030e8:	dc400115 	stw	r17,4(sp)
100030ec:	dc000015 	stw	r16,0(sp)
100030f0:	dfc00415 	stw	ra,16(sp)
100030f4:	dcc00315 	stw	r19,12(sp)
100030f8:	1c803fcc 	andi	r18,r3,255
100030fc:	2c01ffcc 	andi	r16,r5,2047
10003100:	5210b03a 	or	r8,r10,r8
10003104:	202290fa 	slli	r17,r4,3
10003108:	1081ffcc 	andi	r2,r2,2047
1000310c:	4b12b03a 	or	r9,r9,r12
10003110:	300c90fa 	slli	r6,r6,3
10003114:	91c07526 	beq	r18,r7,100032ec <__adddf3+0x23c>
10003118:	8087c83a 	sub	r3,r16,r2
1000311c:	00c0ab0e 	bge	zero,r3,100033cc <__adddf3+0x31c>
10003120:	10002a1e 	bne	r2,zero,100031cc <__adddf3+0x11c>
10003124:	4984b03a 	or	r2,r9,r6
10003128:	1000961e 	bne	r2,zero,10003384 <__adddf3+0x2d4>
1000312c:	888001cc 	andi	r2,r17,7
10003130:	10000726 	beq	r2,zero,10003150 <__adddf3+0xa0>
10003134:	888003cc 	andi	r2,r17,15
10003138:	00c00104 	movi	r3,4
1000313c:	10c00426 	beq	r2,r3,10003150 <__adddf3+0xa0>
10003140:	88c7883a 	add	r3,r17,r3
10003144:	1c63803a 	cmpltu	r17,r3,r17
10003148:	4451883a 	add	r8,r8,r17
1000314c:	1823883a 	mov	r17,r3
10003150:	4080202c 	andhi	r2,r8,128
10003154:	10005926 	beq	r2,zero,100032bc <__adddf3+0x20c>
10003158:	84000044 	addi	r16,r16,1
1000315c:	0081ffc4 	movi	r2,2047
10003160:	8080ba26 	beq	r16,r2,1000344c <__adddf3+0x39c>
10003164:	00bfe034 	movhi	r2,65408
10003168:	10bfffc4 	addi	r2,r2,-1
1000316c:	4090703a 	and	r8,r8,r2
10003170:	4004977a 	slli	r2,r8,29
10003174:	4010927a 	slli	r8,r8,9
10003178:	8822d0fa 	srli	r17,r17,3
1000317c:	8401ffcc 	andi	r16,r16,2047
10003180:	4010d33a 	srli	r8,r8,12
10003184:	9007883a 	mov	r3,r18
10003188:	1444b03a 	or	r2,r2,r17
1000318c:	8401ffcc 	andi	r16,r16,2047
10003190:	8020953a 	slli	r16,r16,20
10003194:	18c03fcc 	andi	r3,r3,255
10003198:	01000434 	movhi	r4,16
1000319c:	213fffc4 	addi	r4,r4,-1
100031a0:	180697fa 	slli	r3,r3,31
100031a4:	4110703a 	and	r8,r8,r4
100031a8:	4410b03a 	or	r8,r8,r16
100031ac:	40c6b03a 	or	r3,r8,r3
100031b0:	dfc00417 	ldw	ra,16(sp)
100031b4:	dcc00317 	ldw	r19,12(sp)
100031b8:	dc800217 	ldw	r18,8(sp)
100031bc:	dc400117 	ldw	r17,4(sp)
100031c0:	dc000017 	ldw	r16,0(sp)
100031c4:	dec00504 	addi	sp,sp,20
100031c8:	f800283a 	ret
100031cc:	0081ffc4 	movi	r2,2047
100031d0:	80bfd626 	beq	r16,r2,1000312c <__adddf3+0x7c>
100031d4:	4a402034 	orhi	r9,r9,128
100031d8:	00800e04 	movi	r2,56
100031dc:	10c09f16 	blt	r2,r3,1000345c <__adddf3+0x3ac>
100031e0:	008007c4 	movi	r2,31
100031e4:	10c0c216 	blt	r2,r3,100034f0 <__adddf3+0x440>
100031e8:	00800804 	movi	r2,32
100031ec:	10c5c83a 	sub	r2,r2,r3
100031f0:	488a983a 	sll	r5,r9,r2
100031f4:	30c8d83a 	srl	r4,r6,r3
100031f8:	3084983a 	sll	r2,r6,r2
100031fc:	48c6d83a 	srl	r3,r9,r3
10003200:	290cb03a 	or	r6,r5,r4
10003204:	1004c03a 	cmpne	r2,r2,zero
10003208:	308cb03a 	or	r6,r6,r2
1000320c:	898dc83a 	sub	r6,r17,r6
10003210:	89a3803a 	cmpltu	r17,r17,r6
10003214:	40d1c83a 	sub	r8,r8,r3
10003218:	4451c83a 	sub	r8,r8,r17
1000321c:	3023883a 	mov	r17,r6
10003220:	4080202c 	andhi	r2,r8,128
10003224:	10002326 	beq	r2,zero,100032b4 <__adddf3+0x204>
10003228:	04c02034 	movhi	r19,128
1000322c:	9cffffc4 	addi	r19,r19,-1
10003230:	44e6703a 	and	r19,r8,r19
10003234:	98007626 	beq	r19,zero,10003410 <__adddf3+0x360>
10003238:	9809883a 	mov	r4,r19
1000323c:	000560c0 	call	1000560c <__clzsi2>
10003240:	10fffe04 	addi	r3,r2,-8
10003244:	010007c4 	movi	r4,31
10003248:	20c07716 	blt	r4,r3,10003428 <__adddf3+0x378>
1000324c:	00800804 	movi	r2,32
10003250:	10c5c83a 	sub	r2,r2,r3
10003254:	8884d83a 	srl	r2,r17,r2
10003258:	98d0983a 	sll	r8,r19,r3
1000325c:	88e2983a 	sll	r17,r17,r3
10003260:	1204b03a 	or	r2,r2,r8
10003264:	1c007416 	blt	r3,r16,10003438 <__adddf3+0x388>
10003268:	1c21c83a 	sub	r16,r3,r16
1000326c:	82000044 	addi	r8,r16,1
10003270:	00c007c4 	movi	r3,31
10003274:	1a009116 	blt	r3,r8,100034bc <__adddf3+0x40c>
10003278:	00c00804 	movi	r3,32
1000327c:	1a07c83a 	sub	r3,r3,r8
10003280:	8a08d83a 	srl	r4,r17,r8
10003284:	88e2983a 	sll	r17,r17,r3
10003288:	10c6983a 	sll	r3,r2,r3
1000328c:	1210d83a 	srl	r8,r2,r8
10003290:	8804c03a 	cmpne	r2,r17,zero
10003294:	1906b03a 	or	r3,r3,r4
10003298:	18a2b03a 	or	r17,r3,r2
1000329c:	0021883a 	mov	r16,zero
100032a0:	003fa206 	br	1000312c <__adddf3+0x7c>
100032a4:	1890b03a 	or	r8,r3,r2
100032a8:	40017d26 	beq	r8,zero,100038a0 <__adddf3+0x7f0>
100032ac:	1011883a 	mov	r8,r2
100032b0:	1823883a 	mov	r17,r3
100032b4:	888001cc 	andi	r2,r17,7
100032b8:	103f9e1e 	bne	r2,zero,10003134 <__adddf3+0x84>
100032bc:	4004977a 	slli	r2,r8,29
100032c0:	8822d0fa 	srli	r17,r17,3
100032c4:	4010d0fa 	srli	r8,r8,3
100032c8:	9007883a 	mov	r3,r18
100032cc:	1444b03a 	or	r2,r2,r17
100032d0:	0101ffc4 	movi	r4,2047
100032d4:	81002426 	beq	r16,r4,10003368 <__adddf3+0x2b8>
100032d8:	8120703a 	and	r16,r16,r4
100032dc:	01000434 	movhi	r4,16
100032e0:	213fffc4 	addi	r4,r4,-1
100032e4:	4110703a 	and	r8,r8,r4
100032e8:	003fa806 	br	1000318c <__adddf3+0xdc>
100032ec:	8089c83a 	sub	r4,r16,r2
100032f0:	01005e0e 	bge	zero,r4,1000346c <__adddf3+0x3bc>
100032f4:	10002b26 	beq	r2,zero,100033a4 <__adddf3+0x2f4>
100032f8:	0081ffc4 	movi	r2,2047
100032fc:	80bf8b26 	beq	r16,r2,1000312c <__adddf3+0x7c>
10003300:	4a402034 	orhi	r9,r9,128
10003304:	00800e04 	movi	r2,56
10003308:	1100a40e 	bge	r2,r4,1000359c <__adddf3+0x4ec>
1000330c:	498cb03a 	or	r6,r9,r6
10003310:	300ac03a 	cmpne	r5,r6,zero
10003314:	0013883a 	mov	r9,zero
10003318:	2c4b883a 	add	r5,r5,r17
1000331c:	2c63803a 	cmpltu	r17,r5,r17
10003320:	4a11883a 	add	r8,r9,r8
10003324:	8a11883a 	add	r8,r17,r8
10003328:	2823883a 	mov	r17,r5
1000332c:	4080202c 	andhi	r2,r8,128
10003330:	103fe026 	beq	r2,zero,100032b4 <__adddf3+0x204>
10003334:	84000044 	addi	r16,r16,1
10003338:	0081ffc4 	movi	r2,2047
1000333c:	8080d226 	beq	r16,r2,10003688 <__adddf3+0x5d8>
10003340:	00bfe034 	movhi	r2,65408
10003344:	10bfffc4 	addi	r2,r2,-1
10003348:	4090703a 	and	r8,r8,r2
1000334c:	880ad07a 	srli	r5,r17,1
10003350:	400897fa 	slli	r4,r8,31
10003354:	88c0004c 	andi	r3,r17,1
10003358:	28e2b03a 	or	r17,r5,r3
1000335c:	4010d07a 	srli	r8,r8,1
10003360:	2462b03a 	or	r17,r4,r17
10003364:	003f7106 	br	1000312c <__adddf3+0x7c>
10003368:	4088b03a 	or	r4,r8,r2
1000336c:	20014526 	beq	r4,zero,10003884 <__adddf3+0x7d4>
10003370:	01000434 	movhi	r4,16
10003374:	42000234 	orhi	r8,r8,8
10003378:	213fffc4 	addi	r4,r4,-1
1000337c:	4110703a 	and	r8,r8,r4
10003380:	003f8206 	br	1000318c <__adddf3+0xdc>
10003384:	18ffffc4 	addi	r3,r3,-1
10003388:	1800491e 	bne	r3,zero,100034b0 <__adddf3+0x400>
1000338c:	898bc83a 	sub	r5,r17,r6
10003390:	8963803a 	cmpltu	r17,r17,r5
10003394:	4251c83a 	sub	r8,r8,r9
10003398:	4451c83a 	sub	r8,r8,r17
1000339c:	2823883a 	mov	r17,r5
100033a0:	003f9f06 	br	10003220 <__adddf3+0x170>
100033a4:	4984b03a 	or	r2,r9,r6
100033a8:	103f6026 	beq	r2,zero,1000312c <__adddf3+0x7c>
100033ac:	213fffc4 	addi	r4,r4,-1
100033b0:	2000931e 	bne	r4,zero,10003600 <__adddf3+0x550>
100033b4:	898d883a 	add	r6,r17,r6
100033b8:	3463803a 	cmpltu	r17,r6,r17
100033bc:	4251883a 	add	r8,r8,r9
100033c0:	8a11883a 	add	r8,r17,r8
100033c4:	3023883a 	mov	r17,r6
100033c8:	003fd806 	br	1000332c <__adddf3+0x27c>
100033cc:	1800541e 	bne	r3,zero,10003520 <__adddf3+0x470>
100033d0:	80800044 	addi	r2,r16,1
100033d4:	1081ffcc 	andi	r2,r2,2047
100033d8:	00c00044 	movi	r3,1
100033dc:	1880a00e 	bge	r3,r2,10003660 <__adddf3+0x5b0>
100033e0:	8989c83a 	sub	r4,r17,r6
100033e4:	8905803a 	cmpltu	r2,r17,r4
100033e8:	4267c83a 	sub	r19,r8,r9
100033ec:	98a7c83a 	sub	r19,r19,r2
100033f0:	9880202c 	andhi	r2,r19,128
100033f4:	10006326 	beq	r2,zero,10003584 <__adddf3+0x4d4>
100033f8:	3463c83a 	sub	r17,r6,r17
100033fc:	4a07c83a 	sub	r3,r9,r8
10003400:	344d803a 	cmpltu	r6,r6,r17
10003404:	19a7c83a 	sub	r19,r3,r6
10003408:	3825883a 	mov	r18,r7
1000340c:	983f8a1e 	bne	r19,zero,10003238 <__adddf3+0x188>
10003410:	8809883a 	mov	r4,r17
10003414:	000560c0 	call	1000560c <__clzsi2>
10003418:	10800804 	addi	r2,r2,32
1000341c:	10fffe04 	addi	r3,r2,-8
10003420:	010007c4 	movi	r4,31
10003424:	20ff890e 	bge	r4,r3,1000324c <__adddf3+0x19c>
10003428:	10bff604 	addi	r2,r2,-40
1000342c:	8884983a 	sll	r2,r17,r2
10003430:	0023883a 	mov	r17,zero
10003434:	1c3f8c0e 	bge	r3,r16,10003268 <__adddf3+0x1b8>
10003438:	023fe034 	movhi	r8,65408
1000343c:	423fffc4 	addi	r8,r8,-1
10003440:	80e1c83a 	sub	r16,r16,r3
10003444:	1210703a 	and	r8,r2,r8
10003448:	003f3806 	br	1000312c <__adddf3+0x7c>
1000344c:	9007883a 	mov	r3,r18
10003450:	0011883a 	mov	r8,zero
10003454:	0005883a 	mov	r2,zero
10003458:	003f4c06 	br	1000318c <__adddf3+0xdc>
1000345c:	498cb03a 	or	r6,r9,r6
10003460:	300cc03a 	cmpne	r6,r6,zero
10003464:	0007883a 	mov	r3,zero
10003468:	003f6806 	br	1000320c <__adddf3+0x15c>
1000346c:	20009c1e 	bne	r4,zero,100036e0 <__adddf3+0x630>
10003470:	80800044 	addi	r2,r16,1
10003474:	1141ffcc 	andi	r5,r2,2047
10003478:	01000044 	movi	r4,1
1000347c:	2140670e 	bge	r4,r5,1000361c <__adddf3+0x56c>
10003480:	0101ffc4 	movi	r4,2047
10003484:	11007f26 	beq	r2,r4,10003684 <__adddf3+0x5d4>
10003488:	898d883a 	add	r6,r17,r6
1000348c:	4247883a 	add	r3,r8,r9
10003490:	3451803a 	cmpltu	r8,r6,r17
10003494:	40d1883a 	add	r8,r8,r3
10003498:	402297fa 	slli	r17,r8,31
1000349c:	300cd07a 	srli	r6,r6,1
100034a0:	4010d07a 	srli	r8,r8,1
100034a4:	1021883a 	mov	r16,r2
100034a8:	89a2b03a 	or	r17,r17,r6
100034ac:	003f1f06 	br	1000312c <__adddf3+0x7c>
100034b0:	0081ffc4 	movi	r2,2047
100034b4:	80bf481e 	bne	r16,r2,100031d8 <__adddf3+0x128>
100034b8:	003f1c06 	br	1000312c <__adddf3+0x7c>
100034bc:	843ff844 	addi	r16,r16,-31
100034c0:	01000804 	movi	r4,32
100034c4:	1406d83a 	srl	r3,r2,r16
100034c8:	41005026 	beq	r8,r4,1000360c <__adddf3+0x55c>
100034cc:	01001004 	movi	r4,64
100034d0:	2211c83a 	sub	r8,r4,r8
100034d4:	1204983a 	sll	r2,r2,r8
100034d8:	88a2b03a 	or	r17,r17,r2
100034dc:	8822c03a 	cmpne	r17,r17,zero
100034e0:	1c62b03a 	or	r17,r3,r17
100034e4:	0011883a 	mov	r8,zero
100034e8:	0021883a 	mov	r16,zero
100034ec:	003f7106 	br	100032b4 <__adddf3+0x204>
100034f0:	193ff804 	addi	r4,r3,-32
100034f4:	00800804 	movi	r2,32
100034f8:	4908d83a 	srl	r4,r9,r4
100034fc:	18804526 	beq	r3,r2,10003614 <__adddf3+0x564>
10003500:	00801004 	movi	r2,64
10003504:	10c5c83a 	sub	r2,r2,r3
10003508:	4886983a 	sll	r3,r9,r2
1000350c:	198cb03a 	or	r6,r3,r6
10003510:	300cc03a 	cmpne	r6,r6,zero
10003514:	218cb03a 	or	r6,r4,r6
10003518:	0007883a 	mov	r3,zero
1000351c:	003f3b06 	br	1000320c <__adddf3+0x15c>
10003520:	80002a26 	beq	r16,zero,100035cc <__adddf3+0x51c>
10003524:	0101ffc4 	movi	r4,2047
10003528:	11006826 	beq	r2,r4,100036cc <__adddf3+0x61c>
1000352c:	00c7c83a 	sub	r3,zero,r3
10003530:	42002034 	orhi	r8,r8,128
10003534:	01000e04 	movi	r4,56
10003538:	20c07c16 	blt	r4,r3,1000372c <__adddf3+0x67c>
1000353c:	010007c4 	movi	r4,31
10003540:	20c0da16 	blt	r4,r3,100038ac <__adddf3+0x7fc>
10003544:	01000804 	movi	r4,32
10003548:	20c9c83a 	sub	r4,r4,r3
1000354c:	4114983a 	sll	r10,r8,r4
10003550:	88cad83a 	srl	r5,r17,r3
10003554:	8908983a 	sll	r4,r17,r4
10003558:	40c6d83a 	srl	r3,r8,r3
1000355c:	5162b03a 	or	r17,r10,r5
10003560:	2008c03a 	cmpne	r4,r4,zero
10003564:	8922b03a 	or	r17,r17,r4
10003568:	3463c83a 	sub	r17,r6,r17
1000356c:	48c7c83a 	sub	r3,r9,r3
10003570:	344d803a 	cmpltu	r6,r6,r17
10003574:	1991c83a 	sub	r8,r3,r6
10003578:	1021883a 	mov	r16,r2
1000357c:	3825883a 	mov	r18,r7
10003580:	003f2706 	br	10003220 <__adddf3+0x170>
10003584:	24d0b03a 	or	r8,r4,r19
10003588:	40001b1e 	bne	r8,zero,100035f8 <__adddf3+0x548>
1000358c:	0005883a 	mov	r2,zero
10003590:	0007883a 	mov	r3,zero
10003594:	0021883a 	mov	r16,zero
10003598:	003f4d06 	br	100032d0 <__adddf3+0x220>
1000359c:	008007c4 	movi	r2,31
100035a0:	11003c16 	blt	r2,r4,10003694 <__adddf3+0x5e4>
100035a4:	00800804 	movi	r2,32
100035a8:	1105c83a 	sub	r2,r2,r4
100035ac:	488e983a 	sll	r7,r9,r2
100035b0:	310ad83a 	srl	r5,r6,r4
100035b4:	3084983a 	sll	r2,r6,r2
100035b8:	4912d83a 	srl	r9,r9,r4
100035bc:	394ab03a 	or	r5,r7,r5
100035c0:	1004c03a 	cmpne	r2,r2,zero
100035c4:	288ab03a 	or	r5,r5,r2
100035c8:	003f5306 	br	10003318 <__adddf3+0x268>
100035cc:	4448b03a 	or	r4,r8,r17
100035d0:	20003e26 	beq	r4,zero,100036cc <__adddf3+0x61c>
100035d4:	00c6303a 	nor	r3,zero,r3
100035d8:	18003a1e 	bne	r3,zero,100036c4 <__adddf3+0x614>
100035dc:	3463c83a 	sub	r17,r6,r17
100035e0:	4a07c83a 	sub	r3,r9,r8
100035e4:	344d803a 	cmpltu	r6,r6,r17
100035e8:	1991c83a 	sub	r8,r3,r6
100035ec:	1021883a 	mov	r16,r2
100035f0:	3825883a 	mov	r18,r7
100035f4:	003f0a06 	br	10003220 <__adddf3+0x170>
100035f8:	2023883a 	mov	r17,r4
100035fc:	003f0d06 	br	10003234 <__adddf3+0x184>
10003600:	0081ffc4 	movi	r2,2047
10003604:	80bf3f1e 	bne	r16,r2,10003304 <__adddf3+0x254>
10003608:	003ec806 	br	1000312c <__adddf3+0x7c>
1000360c:	0005883a 	mov	r2,zero
10003610:	003fb106 	br	100034d8 <__adddf3+0x428>
10003614:	0007883a 	mov	r3,zero
10003618:	003fbc06 	br	1000350c <__adddf3+0x45c>
1000361c:	4444b03a 	or	r2,r8,r17
10003620:	8000871e 	bne	r16,zero,10003840 <__adddf3+0x790>
10003624:	1000ba26 	beq	r2,zero,10003910 <__adddf3+0x860>
10003628:	4984b03a 	or	r2,r9,r6
1000362c:	103ebf26 	beq	r2,zero,1000312c <__adddf3+0x7c>
10003630:	8985883a 	add	r2,r17,r6
10003634:	4247883a 	add	r3,r8,r9
10003638:	1451803a 	cmpltu	r8,r2,r17
1000363c:	40d1883a 	add	r8,r8,r3
10003640:	40c0202c 	andhi	r3,r8,128
10003644:	1023883a 	mov	r17,r2
10003648:	183f1a26 	beq	r3,zero,100032b4 <__adddf3+0x204>
1000364c:	00bfe034 	movhi	r2,65408
10003650:	10bfffc4 	addi	r2,r2,-1
10003654:	2021883a 	mov	r16,r4
10003658:	4090703a 	and	r8,r8,r2
1000365c:	003eb306 	br	1000312c <__adddf3+0x7c>
10003660:	4444b03a 	or	r2,r8,r17
10003664:	8000291e 	bne	r16,zero,1000370c <__adddf3+0x65c>
10003668:	10004b1e 	bne	r2,zero,10003798 <__adddf3+0x6e8>
1000366c:	4990b03a 	or	r8,r9,r6
10003670:	40008b26 	beq	r8,zero,100038a0 <__adddf3+0x7f0>
10003674:	4811883a 	mov	r8,r9
10003678:	3023883a 	mov	r17,r6
1000367c:	3825883a 	mov	r18,r7
10003680:	003eaa06 	br	1000312c <__adddf3+0x7c>
10003684:	1021883a 	mov	r16,r2
10003688:	0011883a 	mov	r8,zero
1000368c:	0005883a 	mov	r2,zero
10003690:	003f0f06 	br	100032d0 <__adddf3+0x220>
10003694:	217ff804 	addi	r5,r4,-32
10003698:	00800804 	movi	r2,32
1000369c:	494ad83a 	srl	r5,r9,r5
100036a0:	20807d26 	beq	r4,r2,10003898 <__adddf3+0x7e8>
100036a4:	00801004 	movi	r2,64
100036a8:	1109c83a 	sub	r4,r2,r4
100036ac:	4912983a 	sll	r9,r9,r4
100036b0:	498cb03a 	or	r6,r9,r6
100036b4:	300cc03a 	cmpne	r6,r6,zero
100036b8:	298ab03a 	or	r5,r5,r6
100036bc:	0013883a 	mov	r9,zero
100036c0:	003f1506 	br	10003318 <__adddf3+0x268>
100036c4:	0101ffc4 	movi	r4,2047
100036c8:	113f9a1e 	bne	r2,r4,10003534 <__adddf3+0x484>
100036cc:	4811883a 	mov	r8,r9
100036d0:	3023883a 	mov	r17,r6
100036d4:	1021883a 	mov	r16,r2
100036d8:	3825883a 	mov	r18,r7
100036dc:	003e9306 	br	1000312c <__adddf3+0x7c>
100036e0:	8000161e 	bne	r16,zero,1000373c <__adddf3+0x68c>
100036e4:	444ab03a 	or	r5,r8,r17
100036e8:	28005126 	beq	r5,zero,10003830 <__adddf3+0x780>
100036ec:	0108303a 	nor	r4,zero,r4
100036f0:	20004d1e 	bne	r4,zero,10003828 <__adddf3+0x778>
100036f4:	89a3883a 	add	r17,r17,r6
100036f8:	4253883a 	add	r9,r8,r9
100036fc:	898d803a 	cmpltu	r6,r17,r6
10003700:	3251883a 	add	r8,r6,r9
10003704:	1021883a 	mov	r16,r2
10003708:	003f0806 	br	1000332c <__adddf3+0x27c>
1000370c:	1000301e 	bne	r2,zero,100037d0 <__adddf3+0x720>
10003710:	4984b03a 	or	r2,r9,r6
10003714:	10007126 	beq	r2,zero,100038dc <__adddf3+0x82c>
10003718:	4811883a 	mov	r8,r9
1000371c:	3023883a 	mov	r17,r6
10003720:	3825883a 	mov	r18,r7
10003724:	0401ffc4 	movi	r16,2047
10003728:	003e8006 	br	1000312c <__adddf3+0x7c>
1000372c:	4462b03a 	or	r17,r8,r17
10003730:	8822c03a 	cmpne	r17,r17,zero
10003734:	0007883a 	mov	r3,zero
10003738:	003f8b06 	br	10003568 <__adddf3+0x4b8>
1000373c:	0141ffc4 	movi	r5,2047
10003740:	11403b26 	beq	r2,r5,10003830 <__adddf3+0x780>
10003744:	0109c83a 	sub	r4,zero,r4
10003748:	42002034 	orhi	r8,r8,128
1000374c:	01400e04 	movi	r5,56
10003750:	29006716 	blt	r5,r4,100038f0 <__adddf3+0x840>
10003754:	014007c4 	movi	r5,31
10003758:	29007016 	blt	r5,r4,1000391c <__adddf3+0x86c>
1000375c:	01400804 	movi	r5,32
10003760:	290bc83a 	sub	r5,r5,r4
10003764:	4154983a 	sll	r10,r8,r5
10003768:	890ed83a 	srl	r7,r17,r4
1000376c:	894a983a 	sll	r5,r17,r5
10003770:	4108d83a 	srl	r4,r8,r4
10003774:	51e2b03a 	or	r17,r10,r7
10003778:	280ac03a 	cmpne	r5,r5,zero
1000377c:	8962b03a 	or	r17,r17,r5
10003780:	89a3883a 	add	r17,r17,r6
10003784:	2253883a 	add	r9,r4,r9
10003788:	898d803a 	cmpltu	r6,r17,r6
1000378c:	3251883a 	add	r8,r6,r9
10003790:	1021883a 	mov	r16,r2
10003794:	003ee506 	br	1000332c <__adddf3+0x27c>
10003798:	4984b03a 	or	r2,r9,r6
1000379c:	103e6326 	beq	r2,zero,1000312c <__adddf3+0x7c>
100037a0:	8987c83a 	sub	r3,r17,r6
100037a4:	88c9803a 	cmpltu	r4,r17,r3
100037a8:	4245c83a 	sub	r2,r8,r9
100037ac:	1105c83a 	sub	r2,r2,r4
100037b0:	1100202c 	andhi	r4,r2,128
100037b4:	203ebb26 	beq	r4,zero,100032a4 <__adddf3+0x1f4>
100037b8:	3463c83a 	sub	r17,r6,r17
100037bc:	4a07c83a 	sub	r3,r9,r8
100037c0:	344d803a 	cmpltu	r6,r6,r17
100037c4:	1991c83a 	sub	r8,r3,r6
100037c8:	3825883a 	mov	r18,r7
100037cc:	003e5706 	br	1000312c <__adddf3+0x7c>
100037d0:	4984b03a 	or	r2,r9,r6
100037d4:	10002e26 	beq	r2,zero,10003890 <__adddf3+0x7e0>
100037d8:	4004d0fa 	srli	r2,r8,3
100037dc:	8822d0fa 	srli	r17,r17,3
100037e0:	4010977a 	slli	r8,r8,29
100037e4:	10c0022c 	andhi	r3,r2,8
100037e8:	4462b03a 	or	r17,r8,r17
100037ec:	18000826 	beq	r3,zero,10003810 <__adddf3+0x760>
100037f0:	4808d0fa 	srli	r4,r9,3
100037f4:	20c0022c 	andhi	r3,r4,8
100037f8:	1800051e 	bne	r3,zero,10003810 <__adddf3+0x760>
100037fc:	300cd0fa 	srli	r6,r6,3
10003800:	4806977a 	slli	r3,r9,29
10003804:	2005883a 	mov	r2,r4
10003808:	3825883a 	mov	r18,r7
1000380c:	19a2b03a 	or	r17,r3,r6
10003810:	8810d77a 	srli	r8,r17,29
10003814:	100490fa 	slli	r2,r2,3
10003818:	882290fa 	slli	r17,r17,3
1000381c:	0401ffc4 	movi	r16,2047
10003820:	4090b03a 	or	r8,r8,r2
10003824:	003e4106 	br	1000312c <__adddf3+0x7c>
10003828:	0141ffc4 	movi	r5,2047
1000382c:	117fc71e 	bne	r2,r5,1000374c <__adddf3+0x69c>
10003830:	4811883a 	mov	r8,r9
10003834:	3023883a 	mov	r17,r6
10003838:	1021883a 	mov	r16,r2
1000383c:	003e3b06 	br	1000312c <__adddf3+0x7c>
10003840:	10002f26 	beq	r2,zero,10003900 <__adddf3+0x850>
10003844:	4984b03a 	or	r2,r9,r6
10003848:	10001126 	beq	r2,zero,10003890 <__adddf3+0x7e0>
1000384c:	4004d0fa 	srli	r2,r8,3
10003850:	8822d0fa 	srli	r17,r17,3
10003854:	4010977a 	slli	r8,r8,29
10003858:	10c0022c 	andhi	r3,r2,8
1000385c:	4462b03a 	or	r17,r8,r17
10003860:	183feb26 	beq	r3,zero,10003810 <__adddf3+0x760>
10003864:	4808d0fa 	srli	r4,r9,3
10003868:	20c0022c 	andhi	r3,r4,8
1000386c:	183fe81e 	bne	r3,zero,10003810 <__adddf3+0x760>
10003870:	300cd0fa 	srli	r6,r6,3
10003874:	4806977a 	slli	r3,r9,29
10003878:	2005883a 	mov	r2,r4
1000387c:	19a2b03a 	or	r17,r3,r6
10003880:	003fe306 	br	10003810 <__adddf3+0x760>
10003884:	0011883a 	mov	r8,zero
10003888:	0005883a 	mov	r2,zero
1000388c:	003e3f06 	br	1000318c <__adddf3+0xdc>
10003890:	0401ffc4 	movi	r16,2047
10003894:	003e2506 	br	1000312c <__adddf3+0x7c>
10003898:	0013883a 	mov	r9,zero
1000389c:	003f8406 	br	100036b0 <__adddf3+0x600>
100038a0:	0005883a 	mov	r2,zero
100038a4:	0007883a 	mov	r3,zero
100038a8:	003e8906 	br	100032d0 <__adddf3+0x220>
100038ac:	197ff804 	addi	r5,r3,-32
100038b0:	01000804 	movi	r4,32
100038b4:	414ad83a 	srl	r5,r8,r5
100038b8:	19002426 	beq	r3,r4,1000394c <__adddf3+0x89c>
100038bc:	01001004 	movi	r4,64
100038c0:	20c7c83a 	sub	r3,r4,r3
100038c4:	40c6983a 	sll	r3,r8,r3
100038c8:	1c46b03a 	or	r3,r3,r17
100038cc:	1806c03a 	cmpne	r3,r3,zero
100038d0:	28e2b03a 	or	r17,r5,r3
100038d4:	0007883a 	mov	r3,zero
100038d8:	003f2306 	br	10003568 <__adddf3+0x4b8>
100038dc:	0007883a 	mov	r3,zero
100038e0:	5811883a 	mov	r8,r11
100038e4:	00bfffc4 	movi	r2,-1
100038e8:	0401ffc4 	movi	r16,2047
100038ec:	003e7806 	br	100032d0 <__adddf3+0x220>
100038f0:	4462b03a 	or	r17,r8,r17
100038f4:	8822c03a 	cmpne	r17,r17,zero
100038f8:	0009883a 	mov	r4,zero
100038fc:	003fa006 	br	10003780 <__adddf3+0x6d0>
10003900:	4811883a 	mov	r8,r9
10003904:	3023883a 	mov	r17,r6
10003908:	0401ffc4 	movi	r16,2047
1000390c:	003e0706 	br	1000312c <__adddf3+0x7c>
10003910:	4811883a 	mov	r8,r9
10003914:	3023883a 	mov	r17,r6
10003918:	003e0406 	br	1000312c <__adddf3+0x7c>
1000391c:	21fff804 	addi	r7,r4,-32
10003920:	01400804 	movi	r5,32
10003924:	41ced83a 	srl	r7,r8,r7
10003928:	21400a26 	beq	r4,r5,10003954 <__adddf3+0x8a4>
1000392c:	01401004 	movi	r5,64
10003930:	2909c83a 	sub	r4,r5,r4
10003934:	4108983a 	sll	r4,r8,r4
10003938:	2448b03a 	or	r4,r4,r17
1000393c:	2008c03a 	cmpne	r4,r4,zero
10003940:	3922b03a 	or	r17,r7,r4
10003944:	0009883a 	mov	r4,zero
10003948:	003f8d06 	br	10003780 <__adddf3+0x6d0>
1000394c:	0007883a 	mov	r3,zero
10003950:	003fdd06 	br	100038c8 <__adddf3+0x818>
10003954:	0009883a 	mov	r4,zero
10003958:	003ff706 	br	10003938 <__adddf3+0x888>

1000395c <__divdf3>:
1000395c:	defff204 	addi	sp,sp,-56
10003960:	dd400915 	stw	r21,36(sp)
10003964:	282ad53a 	srli	r21,r5,20
10003968:	dd000815 	stw	r20,32(sp)
1000396c:	2828d7fa 	srli	r20,r5,31
10003970:	dc000415 	stw	r16,16(sp)
10003974:	04000434 	movhi	r16,16
10003978:	df000c15 	stw	fp,48(sp)
1000397c:	843fffc4 	addi	r16,r16,-1
10003980:	dfc00d15 	stw	ra,52(sp)
10003984:	ddc00b15 	stw	r23,44(sp)
10003988:	dd800a15 	stw	r22,40(sp)
1000398c:	dcc00715 	stw	r19,28(sp)
10003990:	dc800615 	stw	r18,24(sp)
10003994:	dc400515 	stw	r17,20(sp)
10003998:	ad41ffcc 	andi	r21,r21,2047
1000399c:	2c20703a 	and	r16,r5,r16
100039a0:	a7003fcc 	andi	fp,r20,255
100039a4:	a8006126 	beq	r21,zero,10003b2c <__divdf3+0x1d0>
100039a8:	0081ffc4 	movi	r2,2047
100039ac:	2025883a 	mov	r18,r4
100039b0:	a8803726 	beq	r21,r2,10003a90 <__divdf3+0x134>
100039b4:	80800434 	orhi	r2,r16,16
100039b8:	100490fa 	slli	r2,r2,3
100039bc:	2020d77a 	srli	r16,r4,29
100039c0:	202490fa 	slli	r18,r4,3
100039c4:	ad7f0044 	addi	r21,r21,-1023
100039c8:	80a0b03a 	or	r16,r16,r2
100039cc:	0027883a 	mov	r19,zero
100039d0:	0013883a 	mov	r9,zero
100039d4:	3804d53a 	srli	r2,r7,20
100039d8:	382cd7fa 	srli	r22,r7,31
100039dc:	04400434 	movhi	r17,16
100039e0:	8c7fffc4 	addi	r17,r17,-1
100039e4:	1081ffcc 	andi	r2,r2,2047
100039e8:	3011883a 	mov	r8,r6
100039ec:	3c62703a 	and	r17,r7,r17
100039f0:	b5c03fcc 	andi	r23,r22,255
100039f4:	10006c26 	beq	r2,zero,10003ba8 <__divdf3+0x24c>
100039f8:	00c1ffc4 	movi	r3,2047
100039fc:	10c06426 	beq	r2,r3,10003b90 <__divdf3+0x234>
10003a00:	88c00434 	orhi	r3,r17,16
10003a04:	180690fa 	slli	r3,r3,3
10003a08:	3022d77a 	srli	r17,r6,29
10003a0c:	301090fa 	slli	r8,r6,3
10003a10:	10bf0044 	addi	r2,r2,-1023
10003a14:	88e2b03a 	or	r17,r17,r3
10003a18:	000f883a 	mov	r7,zero
10003a1c:	a58cf03a 	xor	r6,r20,r22
10003a20:	3cc8b03a 	or	r4,r7,r19
10003a24:	a8abc83a 	sub	r21,r21,r2
10003a28:	008003c4 	movi	r2,15
10003a2c:	3007883a 	mov	r3,r6
10003a30:	34c03fcc 	andi	r19,r6,255
10003a34:	11009036 	bltu	r2,r4,10003c78 <__divdf3+0x31c>
10003a38:	200890ba 	slli	r4,r4,2
10003a3c:	00840034 	movhi	r2,4096
10003a40:	108e9404 	addi	r2,r2,14928
10003a44:	2089883a 	add	r4,r4,r2
10003a48:	20800017 	ldw	r2,0(r4)
10003a4c:	1000683a 	jmp	r2
10003a50:	10003c78 	rdprs	zero,r2,241
10003a54:	10003ac8 	cmpgei	zero,r2,235
10003a58:	10003c68 	cmpgeui	zero,r2,241
10003a5c:	10003abc 	xorhi	zero,r2,234
10003a60:	10003c68 	cmpgeui	zero,r2,241
10003a64:	10003c3c 	xorhi	zero,r2,240
10003a68:	10003c68 	cmpgeui	zero,r2,241
10003a6c:	10003abc 	xorhi	zero,r2,234
10003a70:	10003ac8 	cmpgei	zero,r2,235
10003a74:	10003ac8 	cmpgei	zero,r2,235
10003a78:	10003c3c 	xorhi	zero,r2,240
10003a7c:	10003abc 	xorhi	zero,r2,234
10003a80:	10003aac 	andhi	zero,r2,234
10003a84:	10003aac 	andhi	zero,r2,234
10003a88:	10003aac 	andhi	zero,r2,234
10003a8c:	10003f5c 	xori	zero,r2,253
10003a90:	2404b03a 	or	r2,r4,r16
10003a94:	1000661e 	bne	r2,zero,10003c30 <__divdf3+0x2d4>
10003a98:	04c00204 	movi	r19,8
10003a9c:	0021883a 	mov	r16,zero
10003aa0:	0025883a 	mov	r18,zero
10003aa4:	02400084 	movi	r9,2
10003aa8:	003fca06 	br	100039d4 <__divdf3+0x78>
10003aac:	8023883a 	mov	r17,r16
10003ab0:	9011883a 	mov	r8,r18
10003ab4:	e02f883a 	mov	r23,fp
10003ab8:	480f883a 	mov	r7,r9
10003abc:	00800084 	movi	r2,2
10003ac0:	3881311e 	bne	r7,r2,10003f88 <__divdf3+0x62c>
10003ac4:	b827883a 	mov	r19,r23
10003ac8:	98c0004c 	andi	r3,r19,1
10003acc:	0081ffc4 	movi	r2,2047
10003ad0:	000b883a 	mov	r5,zero
10003ad4:	0025883a 	mov	r18,zero
10003ad8:	1004953a 	slli	r2,r2,20
10003adc:	18c03fcc 	andi	r3,r3,255
10003ae0:	04400434 	movhi	r17,16
10003ae4:	8c7fffc4 	addi	r17,r17,-1
10003ae8:	180697fa 	slli	r3,r3,31
10003aec:	2c4a703a 	and	r5,r5,r17
10003af0:	288ab03a 	or	r5,r5,r2
10003af4:	28c6b03a 	or	r3,r5,r3
10003af8:	9005883a 	mov	r2,r18
10003afc:	dfc00d17 	ldw	ra,52(sp)
10003b00:	df000c17 	ldw	fp,48(sp)
10003b04:	ddc00b17 	ldw	r23,44(sp)
10003b08:	dd800a17 	ldw	r22,40(sp)
10003b0c:	dd400917 	ldw	r21,36(sp)
10003b10:	dd000817 	ldw	r20,32(sp)
10003b14:	dcc00717 	ldw	r19,28(sp)
10003b18:	dc800617 	ldw	r18,24(sp)
10003b1c:	dc400517 	ldw	r17,20(sp)
10003b20:	dc000417 	ldw	r16,16(sp)
10003b24:	dec00e04 	addi	sp,sp,56
10003b28:	f800283a 	ret
10003b2c:	2404b03a 	or	r2,r4,r16
10003b30:	2027883a 	mov	r19,r4
10003b34:	10003926 	beq	r2,zero,10003c1c <__divdf3+0x2c0>
10003b38:	80012e26 	beq	r16,zero,10003ff4 <__divdf3+0x698>
10003b3c:	8009883a 	mov	r4,r16
10003b40:	d9800315 	stw	r6,12(sp)
10003b44:	d9c00215 	stw	r7,8(sp)
10003b48:	000560c0 	call	1000560c <__clzsi2>
10003b4c:	d9800317 	ldw	r6,12(sp)
10003b50:	d9c00217 	ldw	r7,8(sp)
10003b54:	113ffd44 	addi	r4,r2,-11
10003b58:	00c00704 	movi	r3,28
10003b5c:	19012116 	blt	r3,r4,10003fe4 <__divdf3+0x688>
10003b60:	00c00744 	movi	r3,29
10003b64:	147ffe04 	addi	r17,r2,-8
10003b68:	1907c83a 	sub	r3,r3,r4
10003b6c:	8460983a 	sll	r16,r16,r17
10003b70:	98c6d83a 	srl	r3,r19,r3
10003b74:	9c64983a 	sll	r18,r19,r17
10003b78:	1c20b03a 	or	r16,r3,r16
10003b7c:	1080fcc4 	addi	r2,r2,1011
10003b80:	00abc83a 	sub	r21,zero,r2
10003b84:	0027883a 	mov	r19,zero
10003b88:	0013883a 	mov	r9,zero
10003b8c:	003f9106 	br	100039d4 <__divdf3+0x78>
10003b90:	3446b03a 	or	r3,r6,r17
10003b94:	18001f1e 	bne	r3,zero,10003c14 <__divdf3+0x2b8>
10003b98:	0023883a 	mov	r17,zero
10003b9c:	0011883a 	mov	r8,zero
10003ba0:	01c00084 	movi	r7,2
10003ba4:	003f9d06 	br	10003a1c <__divdf3+0xc0>
10003ba8:	3446b03a 	or	r3,r6,r17
10003bac:	18001526 	beq	r3,zero,10003c04 <__divdf3+0x2a8>
10003bb0:	88011b26 	beq	r17,zero,10004020 <__divdf3+0x6c4>
10003bb4:	8809883a 	mov	r4,r17
10003bb8:	d9800315 	stw	r6,12(sp)
10003bbc:	da400115 	stw	r9,4(sp)
10003bc0:	000560c0 	call	1000560c <__clzsi2>
10003bc4:	d9800317 	ldw	r6,12(sp)
10003bc8:	da400117 	ldw	r9,4(sp)
10003bcc:	113ffd44 	addi	r4,r2,-11
10003bd0:	00c00704 	movi	r3,28
10003bd4:	19010e16 	blt	r3,r4,10004010 <__divdf3+0x6b4>
10003bd8:	00c00744 	movi	r3,29
10003bdc:	123ffe04 	addi	r8,r2,-8
10003be0:	1907c83a 	sub	r3,r3,r4
10003be4:	8a22983a 	sll	r17,r17,r8
10003be8:	30c6d83a 	srl	r3,r6,r3
10003bec:	3210983a 	sll	r8,r6,r8
10003bf0:	1c62b03a 	or	r17,r3,r17
10003bf4:	1080fcc4 	addi	r2,r2,1011
10003bf8:	0085c83a 	sub	r2,zero,r2
10003bfc:	000f883a 	mov	r7,zero
10003c00:	003f8606 	br	10003a1c <__divdf3+0xc0>
10003c04:	0023883a 	mov	r17,zero
10003c08:	0011883a 	mov	r8,zero
10003c0c:	01c00044 	movi	r7,1
10003c10:	003f8206 	br	10003a1c <__divdf3+0xc0>
10003c14:	01c000c4 	movi	r7,3
10003c18:	003f8006 	br	10003a1c <__divdf3+0xc0>
10003c1c:	04c00104 	movi	r19,4
10003c20:	0021883a 	mov	r16,zero
10003c24:	0025883a 	mov	r18,zero
10003c28:	02400044 	movi	r9,1
10003c2c:	003f6906 	br	100039d4 <__divdf3+0x78>
10003c30:	04c00304 	movi	r19,12
10003c34:	024000c4 	movi	r9,3
10003c38:	003f6606 	br	100039d4 <__divdf3+0x78>
10003c3c:	01400434 	movhi	r5,16
10003c40:	0007883a 	mov	r3,zero
10003c44:	297fffc4 	addi	r5,r5,-1
10003c48:	04bfffc4 	movi	r18,-1
10003c4c:	0081ffc4 	movi	r2,2047
10003c50:	003fa106 	br	10003ad8 <__divdf3+0x17c>
10003c54:	00c00044 	movi	r3,1
10003c58:	1887c83a 	sub	r3,r3,r2
10003c5c:	01000e04 	movi	r4,56
10003c60:	20c1210e 	bge	r4,r3,100040e8 <__divdf3+0x78c>
10003c64:	98c0004c 	andi	r3,r19,1
10003c68:	0005883a 	mov	r2,zero
10003c6c:	000b883a 	mov	r5,zero
10003c70:	0025883a 	mov	r18,zero
10003c74:	003f9806 	br	10003ad8 <__divdf3+0x17c>
10003c78:	8c00fd36 	bltu	r17,r16,10004070 <__divdf3+0x714>
10003c7c:	8440fb26 	beq	r16,r17,1000406c <__divdf3+0x710>
10003c80:	8007883a 	mov	r3,r16
10003c84:	ad7fffc4 	addi	r21,r21,-1
10003c88:	0021883a 	mov	r16,zero
10003c8c:	4004d63a 	srli	r2,r8,24
10003c90:	8822923a 	slli	r17,r17,8
10003c94:	1809883a 	mov	r4,r3
10003c98:	402c923a 	slli	r22,r8,8
10003c9c:	88b8b03a 	or	fp,r17,r2
10003ca0:	e028d43a 	srli	r20,fp,16
10003ca4:	d8c00015 	stw	r3,0(sp)
10003ca8:	e5ffffcc 	andi	r23,fp,65535
10003cac:	a00b883a 	mov	r5,r20
10003cb0:	0002ff40 	call	10002ff4 <__udivsi3>
10003cb4:	d8c00017 	ldw	r3,0(sp)
10003cb8:	a00b883a 	mov	r5,r20
10003cbc:	d8800315 	stw	r2,12(sp)
10003cc0:	1809883a 	mov	r4,r3
10003cc4:	00030580 	call	10003058 <__umodsi3>
10003cc8:	d9800317 	ldw	r6,12(sp)
10003ccc:	1006943a 	slli	r3,r2,16
10003cd0:	9004d43a 	srli	r2,r18,16
10003cd4:	b9a3383a 	mul	r17,r23,r6
10003cd8:	10c4b03a 	or	r2,r2,r3
10003cdc:	1440062e 	bgeu	r2,r17,10003cf8 <__divdf3+0x39c>
10003ce0:	1705883a 	add	r2,r2,fp
10003ce4:	30ffffc4 	addi	r3,r6,-1
10003ce8:	1700ee36 	bltu	r2,fp,100040a4 <__divdf3+0x748>
10003cec:	1440ed2e 	bgeu	r2,r17,100040a4 <__divdf3+0x748>
10003cf0:	31bfff84 	addi	r6,r6,-2
10003cf4:	1705883a 	add	r2,r2,fp
10003cf8:	1463c83a 	sub	r17,r2,r17
10003cfc:	a00b883a 	mov	r5,r20
10003d00:	8809883a 	mov	r4,r17
10003d04:	d9800315 	stw	r6,12(sp)
10003d08:	0002ff40 	call	10002ff4 <__udivsi3>
10003d0c:	a00b883a 	mov	r5,r20
10003d10:	8809883a 	mov	r4,r17
10003d14:	d8800215 	stw	r2,8(sp)
10003d18:	00030580 	call	10003058 <__umodsi3>
10003d1c:	d9c00217 	ldw	r7,8(sp)
10003d20:	1004943a 	slli	r2,r2,16
10003d24:	94bfffcc 	andi	r18,r18,65535
10003d28:	b9d1383a 	mul	r8,r23,r7
10003d2c:	90a4b03a 	or	r18,r18,r2
10003d30:	d9800317 	ldw	r6,12(sp)
10003d34:	9200062e 	bgeu	r18,r8,10003d50 <__divdf3+0x3f4>
10003d38:	9725883a 	add	r18,r18,fp
10003d3c:	38bfffc4 	addi	r2,r7,-1
10003d40:	9700d636 	bltu	r18,fp,1000409c <__divdf3+0x740>
10003d44:	9200d52e 	bgeu	r18,r8,1000409c <__divdf3+0x740>
10003d48:	39ffff84 	addi	r7,r7,-2
10003d4c:	9725883a 	add	r18,r18,fp
10003d50:	3004943a 	slli	r2,r6,16
10003d54:	b012d43a 	srli	r9,r22,16
10003d58:	b1bfffcc 	andi	r6,r22,65535
10003d5c:	11e2b03a 	or	r17,r2,r7
10003d60:	8806d43a 	srli	r3,r17,16
10003d64:	893fffcc 	andi	r4,r17,65535
10003d68:	218b383a 	mul	r5,r4,r6
10003d6c:	30c5383a 	mul	r2,r6,r3
10003d70:	2249383a 	mul	r4,r4,r9
10003d74:	280ed43a 	srli	r7,r5,16
10003d78:	9225c83a 	sub	r18,r18,r8
10003d7c:	2089883a 	add	r4,r4,r2
10003d80:	3909883a 	add	r4,r7,r4
10003d84:	1a47383a 	mul	r3,r3,r9
10003d88:	2080022e 	bgeu	r4,r2,10003d94 <__divdf3+0x438>
10003d8c:	00800074 	movhi	r2,1
10003d90:	1887883a 	add	r3,r3,r2
10003d94:	2004d43a 	srli	r2,r4,16
10003d98:	2008943a 	slli	r4,r4,16
10003d9c:	297fffcc 	andi	r5,r5,65535
10003da0:	10c7883a 	add	r3,r2,r3
10003da4:	2149883a 	add	r4,r4,r5
10003da8:	90c0a536 	bltu	r18,r3,10004040 <__divdf3+0x6e4>
10003dac:	90c0bf26 	beq	r18,r3,100040ac <__divdf3+0x750>
10003db0:	90c7c83a 	sub	r3,r18,r3
10003db4:	810fc83a 	sub	r7,r16,r4
10003db8:	81e5803a 	cmpltu	r18,r16,r7
10003dbc:	1ca5c83a 	sub	r18,r3,r18
10003dc0:	e480c126 	beq	fp,r18,100040c8 <__divdf3+0x76c>
10003dc4:	a00b883a 	mov	r5,r20
10003dc8:	9009883a 	mov	r4,r18
10003dcc:	d9800315 	stw	r6,12(sp)
10003dd0:	d9c00215 	stw	r7,8(sp)
10003dd4:	da400115 	stw	r9,4(sp)
10003dd8:	0002ff40 	call	10002ff4 <__udivsi3>
10003ddc:	a00b883a 	mov	r5,r20
10003de0:	9009883a 	mov	r4,r18
10003de4:	d8800015 	stw	r2,0(sp)
10003de8:	00030580 	call	10003058 <__umodsi3>
10003dec:	d9c00217 	ldw	r7,8(sp)
10003df0:	da000017 	ldw	r8,0(sp)
10003df4:	1006943a 	slli	r3,r2,16
10003df8:	3804d43a 	srli	r2,r7,16
10003dfc:	ba21383a 	mul	r16,r23,r8
10003e00:	d9800317 	ldw	r6,12(sp)
10003e04:	10c4b03a 	or	r2,r2,r3
10003e08:	da400117 	ldw	r9,4(sp)
10003e0c:	1400062e 	bgeu	r2,r16,10003e28 <__divdf3+0x4cc>
10003e10:	1705883a 	add	r2,r2,fp
10003e14:	40ffffc4 	addi	r3,r8,-1
10003e18:	1700ad36 	bltu	r2,fp,100040d0 <__divdf3+0x774>
10003e1c:	1400ac2e 	bgeu	r2,r16,100040d0 <__divdf3+0x774>
10003e20:	423fff84 	addi	r8,r8,-2
10003e24:	1705883a 	add	r2,r2,fp
10003e28:	1421c83a 	sub	r16,r2,r16
10003e2c:	a00b883a 	mov	r5,r20
10003e30:	8009883a 	mov	r4,r16
10003e34:	d9800315 	stw	r6,12(sp)
10003e38:	d9c00215 	stw	r7,8(sp)
10003e3c:	da000015 	stw	r8,0(sp)
10003e40:	da400115 	stw	r9,4(sp)
10003e44:	0002ff40 	call	10002ff4 <__udivsi3>
10003e48:	8009883a 	mov	r4,r16
10003e4c:	a00b883a 	mov	r5,r20
10003e50:	1025883a 	mov	r18,r2
10003e54:	00030580 	call	10003058 <__umodsi3>
10003e58:	d9c00217 	ldw	r7,8(sp)
10003e5c:	1004943a 	slli	r2,r2,16
10003e60:	bcaf383a 	mul	r23,r23,r18
10003e64:	393fffcc 	andi	r4,r7,65535
10003e68:	2088b03a 	or	r4,r4,r2
10003e6c:	d9800317 	ldw	r6,12(sp)
10003e70:	da000017 	ldw	r8,0(sp)
10003e74:	da400117 	ldw	r9,4(sp)
10003e78:	25c0062e 	bgeu	r4,r23,10003e94 <__divdf3+0x538>
10003e7c:	2709883a 	add	r4,r4,fp
10003e80:	90bfffc4 	addi	r2,r18,-1
10003e84:	27009436 	bltu	r4,fp,100040d8 <__divdf3+0x77c>
10003e88:	25c0932e 	bgeu	r4,r23,100040d8 <__divdf3+0x77c>
10003e8c:	94bfff84 	addi	r18,r18,-2
10003e90:	2709883a 	add	r4,r4,fp
10003e94:	4004943a 	slli	r2,r8,16
10003e98:	25efc83a 	sub	r23,r4,r23
10003e9c:	1490b03a 	or	r8,r2,r18
10003ea0:	4008d43a 	srli	r4,r8,16
10003ea4:	40ffffcc 	andi	r3,r8,65535
10003ea8:	30c5383a 	mul	r2,r6,r3
10003eac:	1a47383a 	mul	r3,r3,r9
10003eb0:	310d383a 	mul	r6,r6,r4
10003eb4:	100ad43a 	srli	r5,r2,16
10003eb8:	4913383a 	mul	r9,r9,r4
10003ebc:	1987883a 	add	r3,r3,r6
10003ec0:	28c7883a 	add	r3,r5,r3
10003ec4:	1980022e 	bgeu	r3,r6,10003ed0 <__divdf3+0x574>
10003ec8:	01000074 	movhi	r4,1
10003ecc:	4913883a 	add	r9,r9,r4
10003ed0:	1808d43a 	srli	r4,r3,16
10003ed4:	1806943a 	slli	r3,r3,16
10003ed8:	10bfffcc 	andi	r2,r2,65535
10003edc:	2253883a 	add	r9,r4,r9
10003ee0:	1887883a 	add	r3,r3,r2
10003ee4:	ba403836 	bltu	r23,r9,10003fc8 <__divdf3+0x66c>
10003ee8:	ba403626 	beq	r23,r9,10003fc4 <__divdf3+0x668>
10003eec:	42000054 	ori	r8,r8,1
10003ef0:	a880ffc4 	addi	r2,r21,1023
10003ef4:	00bf570e 	bge	zero,r2,10003c54 <__divdf3+0x2f8>
10003ef8:	40c001cc 	andi	r3,r8,7
10003efc:	18000726 	beq	r3,zero,10003f1c <__divdf3+0x5c0>
10003f00:	40c003cc 	andi	r3,r8,15
10003f04:	01000104 	movi	r4,4
10003f08:	19000426 	beq	r3,r4,10003f1c <__divdf3+0x5c0>
10003f0c:	4107883a 	add	r3,r8,r4
10003f10:	1a11803a 	cmpltu	r8,r3,r8
10003f14:	8a23883a 	add	r17,r17,r8
10003f18:	1811883a 	mov	r8,r3
10003f1c:	88c0402c 	andhi	r3,r17,256
10003f20:	18000426 	beq	r3,zero,10003f34 <__divdf3+0x5d8>
10003f24:	00ffc034 	movhi	r3,65280
10003f28:	18ffffc4 	addi	r3,r3,-1
10003f2c:	a8810004 	addi	r2,r21,1024
10003f30:	88e2703a 	and	r17,r17,r3
10003f34:	00c1ff84 	movi	r3,2046
10003f38:	18bee316 	blt	r3,r2,10003ac8 <__divdf3+0x16c>
10003f3c:	8824977a 	slli	r18,r17,29
10003f40:	4010d0fa 	srli	r8,r8,3
10003f44:	8822927a 	slli	r17,r17,9
10003f48:	1081ffcc 	andi	r2,r2,2047
10003f4c:	9224b03a 	or	r18,r18,r8
10003f50:	880ad33a 	srli	r5,r17,12
10003f54:	98c0004c 	andi	r3,r19,1
10003f58:	003edf06 	br	10003ad8 <__divdf3+0x17c>
10003f5c:	8080022c 	andhi	r2,r16,8
10003f60:	10001226 	beq	r2,zero,10003fac <__divdf3+0x650>
10003f64:	8880022c 	andhi	r2,r17,8
10003f68:	1000101e 	bne	r2,zero,10003fac <__divdf3+0x650>
10003f6c:	00800434 	movhi	r2,16
10003f70:	89400234 	orhi	r5,r17,8
10003f74:	10bfffc4 	addi	r2,r2,-1
10003f78:	b007883a 	mov	r3,r22
10003f7c:	288a703a 	and	r5,r5,r2
10003f80:	4025883a 	mov	r18,r8
10003f84:	003f3106 	br	10003c4c <__divdf3+0x2f0>
10003f88:	008000c4 	movi	r2,3
10003f8c:	3880a626 	beq	r7,r2,10004228 <__divdf3+0x8cc>
10003f90:	00800044 	movi	r2,1
10003f94:	3880521e 	bne	r7,r2,100040e0 <__divdf3+0x784>
10003f98:	b807883a 	mov	r3,r23
10003f9c:	0005883a 	mov	r2,zero
10003fa0:	000b883a 	mov	r5,zero
10003fa4:	0025883a 	mov	r18,zero
10003fa8:	003ecb06 	br	10003ad8 <__divdf3+0x17c>
10003fac:	00800434 	movhi	r2,16
10003fb0:	81400234 	orhi	r5,r16,8
10003fb4:	10bfffc4 	addi	r2,r2,-1
10003fb8:	a007883a 	mov	r3,r20
10003fbc:	288a703a 	and	r5,r5,r2
10003fc0:	003f2206 	br	10003c4c <__divdf3+0x2f0>
10003fc4:	183fca26 	beq	r3,zero,10003ef0 <__divdf3+0x594>
10003fc8:	e5ef883a 	add	r23,fp,r23
10003fcc:	40bfffc4 	addi	r2,r8,-1
10003fd0:	bf00392e 	bgeu	r23,fp,100040b8 <__divdf3+0x75c>
10003fd4:	1011883a 	mov	r8,r2
10003fd8:	ba7fc41e 	bne	r23,r9,10003eec <__divdf3+0x590>
10003fdc:	b0ffc31e 	bne	r22,r3,10003eec <__divdf3+0x590>
10003fe0:	003fc306 	br	10003ef0 <__divdf3+0x594>
10003fe4:	143ff604 	addi	r16,r2,-40
10003fe8:	9c20983a 	sll	r16,r19,r16
10003fec:	0025883a 	mov	r18,zero
10003ff0:	003ee206 	br	10003b7c <__divdf3+0x220>
10003ff4:	d9800315 	stw	r6,12(sp)
10003ff8:	d9c00215 	stw	r7,8(sp)
10003ffc:	000560c0 	call	1000560c <__clzsi2>
10004000:	10800804 	addi	r2,r2,32
10004004:	d9c00217 	ldw	r7,8(sp)
10004008:	d9800317 	ldw	r6,12(sp)
1000400c:	003ed106 	br	10003b54 <__divdf3+0x1f8>
10004010:	147ff604 	addi	r17,r2,-40
10004014:	3462983a 	sll	r17,r6,r17
10004018:	0011883a 	mov	r8,zero
1000401c:	003ef506 	br	10003bf4 <__divdf3+0x298>
10004020:	3009883a 	mov	r4,r6
10004024:	d9800315 	stw	r6,12(sp)
10004028:	da400115 	stw	r9,4(sp)
1000402c:	000560c0 	call	1000560c <__clzsi2>
10004030:	10800804 	addi	r2,r2,32
10004034:	da400117 	ldw	r9,4(sp)
10004038:	d9800317 	ldw	r6,12(sp)
1000403c:	003ee306 	br	10003bcc <__divdf3+0x270>
10004040:	85a1883a 	add	r16,r16,r22
10004044:	8585803a 	cmpltu	r2,r16,r22
10004048:	1705883a 	add	r2,r2,fp
1000404c:	14a5883a 	add	r18,r2,r18
10004050:	88bfffc4 	addi	r2,r17,-1
10004054:	e4800c2e 	bgeu	fp,r18,10004088 <__divdf3+0x72c>
10004058:	90c03e36 	bltu	r18,r3,10004154 <__divdf3+0x7f8>
1000405c:	1c806926 	beq	r3,r18,10004204 <__divdf3+0x8a8>
10004060:	90c7c83a 	sub	r3,r18,r3
10004064:	1023883a 	mov	r17,r2
10004068:	003f5206 	br	10003db4 <__divdf3+0x458>
1000406c:	923f0436 	bltu	r18,r8,10003c80 <__divdf3+0x324>
10004070:	800897fa 	slli	r4,r16,31
10004074:	9004d07a 	srli	r2,r18,1
10004078:	8006d07a 	srli	r3,r16,1
1000407c:	902097fa 	slli	r16,r18,31
10004080:	20a4b03a 	or	r18,r4,r2
10004084:	003f0106 	br	10003c8c <__divdf3+0x330>
10004088:	e4bff51e 	bne	fp,r18,10004060 <__divdf3+0x704>
1000408c:	85bff22e 	bgeu	r16,r22,10004058 <__divdf3+0x6fc>
10004090:	e0c7c83a 	sub	r3,fp,r3
10004094:	1023883a 	mov	r17,r2
10004098:	003f4606 	br	10003db4 <__divdf3+0x458>
1000409c:	100f883a 	mov	r7,r2
100040a0:	003f2b06 	br	10003d50 <__divdf3+0x3f4>
100040a4:	180d883a 	mov	r6,r3
100040a8:	003f1306 	br	10003cf8 <__divdf3+0x39c>
100040ac:	813fe436 	bltu	r16,r4,10004040 <__divdf3+0x6e4>
100040b0:	0007883a 	mov	r3,zero
100040b4:	003f3f06 	br	10003db4 <__divdf3+0x458>
100040b8:	ba402c36 	bltu	r23,r9,1000416c <__divdf3+0x810>
100040bc:	4dc05426 	beq	r9,r23,10004210 <__divdf3+0x8b4>
100040c0:	1011883a 	mov	r8,r2
100040c4:	003f8906 	br	10003eec <__divdf3+0x590>
100040c8:	023fffc4 	movi	r8,-1
100040cc:	003f8806 	br	10003ef0 <__divdf3+0x594>
100040d0:	1811883a 	mov	r8,r3
100040d4:	003f5406 	br	10003e28 <__divdf3+0x4cc>
100040d8:	1025883a 	mov	r18,r2
100040dc:	003f6d06 	br	10003e94 <__divdf3+0x538>
100040e0:	b827883a 	mov	r19,r23
100040e4:	003f8206 	br	10003ef0 <__divdf3+0x594>
100040e8:	010007c4 	movi	r4,31
100040ec:	20c02616 	blt	r4,r3,10004188 <__divdf3+0x82c>
100040f0:	00800804 	movi	r2,32
100040f4:	10c5c83a 	sub	r2,r2,r3
100040f8:	888a983a 	sll	r5,r17,r2
100040fc:	40c8d83a 	srl	r4,r8,r3
10004100:	4084983a 	sll	r2,r8,r2
10004104:	88e2d83a 	srl	r17,r17,r3
10004108:	2906b03a 	or	r3,r5,r4
1000410c:	1004c03a 	cmpne	r2,r2,zero
10004110:	1886b03a 	or	r3,r3,r2
10004114:	188001cc 	andi	r2,r3,7
10004118:	10000726 	beq	r2,zero,10004138 <__divdf3+0x7dc>
1000411c:	188003cc 	andi	r2,r3,15
10004120:	01000104 	movi	r4,4
10004124:	11000426 	beq	r2,r4,10004138 <__divdf3+0x7dc>
10004128:	1805883a 	mov	r2,r3
1000412c:	10c00104 	addi	r3,r2,4
10004130:	1885803a 	cmpltu	r2,r3,r2
10004134:	88a3883a 	add	r17,r17,r2
10004138:	8880202c 	andhi	r2,r17,128
1000413c:	10002726 	beq	r2,zero,100041dc <__divdf3+0x880>
10004140:	98c0004c 	andi	r3,r19,1
10004144:	00800044 	movi	r2,1
10004148:	000b883a 	mov	r5,zero
1000414c:	0025883a 	mov	r18,zero
10004150:	003e6106 	br	10003ad8 <__divdf3+0x17c>
10004154:	85a1883a 	add	r16,r16,r22
10004158:	8585803a 	cmpltu	r2,r16,r22
1000415c:	1705883a 	add	r2,r2,fp
10004160:	14a5883a 	add	r18,r2,r18
10004164:	8c7fff84 	addi	r17,r17,-2
10004168:	003f1106 	br	10003db0 <__divdf3+0x454>
1000416c:	b589883a 	add	r4,r22,r22
10004170:	25ad803a 	cmpltu	r22,r4,r22
10004174:	b739883a 	add	fp,r22,fp
10004178:	40bfff84 	addi	r2,r8,-2
1000417c:	bf2f883a 	add	r23,r23,fp
10004180:	202d883a 	mov	r22,r4
10004184:	003f9306 	br	10003fd4 <__divdf3+0x678>
10004188:	013ff844 	movi	r4,-31
1000418c:	2085c83a 	sub	r2,r4,r2
10004190:	8888d83a 	srl	r4,r17,r2
10004194:	00800804 	movi	r2,32
10004198:	18802126 	beq	r3,r2,10004220 <__divdf3+0x8c4>
1000419c:	00801004 	movi	r2,64
100041a0:	10c5c83a 	sub	r2,r2,r3
100041a4:	8884983a 	sll	r2,r17,r2
100041a8:	1204b03a 	or	r2,r2,r8
100041ac:	1004c03a 	cmpne	r2,r2,zero
100041b0:	2084b03a 	or	r2,r4,r2
100041b4:	144001cc 	andi	r17,r2,7
100041b8:	88000d1e 	bne	r17,zero,100041f0 <__divdf3+0x894>
100041bc:	000b883a 	mov	r5,zero
100041c0:	1024d0fa 	srli	r18,r2,3
100041c4:	98c0004c 	andi	r3,r19,1
100041c8:	0005883a 	mov	r2,zero
100041cc:	9464b03a 	or	r18,r18,r17
100041d0:	003e4106 	br	10003ad8 <__divdf3+0x17c>
100041d4:	1007883a 	mov	r3,r2
100041d8:	0023883a 	mov	r17,zero
100041dc:	880a927a 	slli	r5,r17,9
100041e0:	1805883a 	mov	r2,r3
100041e4:	8822977a 	slli	r17,r17,29
100041e8:	280ad33a 	srli	r5,r5,12
100041ec:	003ff406 	br	100041c0 <__divdf3+0x864>
100041f0:	10c003cc 	andi	r3,r2,15
100041f4:	01000104 	movi	r4,4
100041f8:	193ff626 	beq	r3,r4,100041d4 <__divdf3+0x878>
100041fc:	0023883a 	mov	r17,zero
10004200:	003fca06 	br	1000412c <__divdf3+0x7d0>
10004204:	813fd336 	bltu	r16,r4,10004154 <__divdf3+0x7f8>
10004208:	1023883a 	mov	r17,r2
1000420c:	003fa806 	br	100040b0 <__divdf3+0x754>
10004210:	b0ffd636 	bltu	r22,r3,1000416c <__divdf3+0x810>
10004214:	1011883a 	mov	r8,r2
10004218:	b0ff341e 	bne	r22,r3,10003eec <__divdf3+0x590>
1000421c:	003f3406 	br	10003ef0 <__divdf3+0x594>
10004220:	0005883a 	mov	r2,zero
10004224:	003fe006 	br	100041a8 <__divdf3+0x84c>
10004228:	00800434 	movhi	r2,16
1000422c:	89400234 	orhi	r5,r17,8
10004230:	10bfffc4 	addi	r2,r2,-1
10004234:	b807883a 	mov	r3,r23
10004238:	288a703a 	and	r5,r5,r2
1000423c:	4025883a 	mov	r18,r8
10004240:	003e8206 	br	10003c4c <__divdf3+0x2f0>

10004244 <__eqdf2>:
10004244:	2804d53a 	srli	r2,r5,20
10004248:	3806d53a 	srli	r3,r7,20
1000424c:	02000434 	movhi	r8,16
10004250:	423fffc4 	addi	r8,r8,-1
10004254:	1081ffcc 	andi	r2,r2,2047
10004258:	0281ffc4 	movi	r10,2047
1000425c:	2a12703a 	and	r9,r5,r8
10004260:	18c1ffcc 	andi	r3,r3,2047
10004264:	3a10703a 	and	r8,r7,r8
10004268:	280ad7fa 	srli	r5,r5,31
1000426c:	380ed7fa 	srli	r7,r7,31
10004270:	12801026 	beq	r2,r10,100042b4 <__eqdf2+0x70>
10004274:	0281ffc4 	movi	r10,2047
10004278:	1a800a26 	beq	r3,r10,100042a4 <__eqdf2+0x60>
1000427c:	10c00226 	beq	r2,r3,10004288 <__eqdf2+0x44>
10004280:	00800044 	movi	r2,1
10004284:	f800283a 	ret
10004288:	4a3ffd1e 	bne	r9,r8,10004280 <__eqdf2+0x3c>
1000428c:	21bffc1e 	bne	r4,r6,10004280 <__eqdf2+0x3c>
10004290:	29c00c26 	beq	r5,r7,100042c4 <__eqdf2+0x80>
10004294:	103ffa1e 	bne	r2,zero,10004280 <__eqdf2+0x3c>
10004298:	2244b03a 	or	r2,r4,r9
1000429c:	1004c03a 	cmpne	r2,r2,zero
100042a0:	f800283a 	ret
100042a4:	3214b03a 	or	r10,r6,r8
100042a8:	503ff426 	beq	r10,zero,1000427c <__eqdf2+0x38>
100042ac:	00800044 	movi	r2,1
100042b0:	f800283a 	ret
100042b4:	2254b03a 	or	r10,r4,r9
100042b8:	503fee26 	beq	r10,zero,10004274 <__eqdf2+0x30>
100042bc:	00800044 	movi	r2,1
100042c0:	f800283a 	ret
100042c4:	0005883a 	mov	r2,zero
100042c8:	f800283a 	ret

100042cc <__gedf2>:
100042cc:	2804d53a 	srli	r2,r5,20
100042d0:	3806d53a 	srli	r3,r7,20
100042d4:	02000434 	movhi	r8,16
100042d8:	423fffc4 	addi	r8,r8,-1
100042dc:	1081ffcc 	andi	r2,r2,2047
100042e0:	0241ffc4 	movi	r9,2047
100042e4:	2a14703a 	and	r10,r5,r8
100042e8:	18c1ffcc 	andi	r3,r3,2047
100042ec:	3a10703a 	and	r8,r7,r8
100042f0:	280ad7fa 	srli	r5,r5,31
100042f4:	380ed7fa 	srli	r7,r7,31
100042f8:	12401d26 	beq	r2,r9,10004370 <__gedf2+0xa4>
100042fc:	0241ffc4 	movi	r9,2047
10004300:	1a401226 	beq	r3,r9,1000434c <__gedf2+0x80>
10004304:	1000081e 	bne	r2,zero,10004328 <__gedf2+0x5c>
10004308:	2296b03a 	or	r11,r4,r10
1000430c:	5813003a 	cmpeq	r9,r11,zero
10004310:	1800091e 	bne	r3,zero,10004338 <__gedf2+0x6c>
10004314:	3218b03a 	or	r12,r6,r8
10004318:	6000071e 	bne	r12,zero,10004338 <__gedf2+0x6c>
1000431c:	0005883a 	mov	r2,zero
10004320:	5800101e 	bne	r11,zero,10004364 <__gedf2+0x98>
10004324:	f800283a 	ret
10004328:	18000c1e 	bne	r3,zero,1000435c <__gedf2+0x90>
1000432c:	3212b03a 	or	r9,r6,r8
10004330:	48000c26 	beq	r9,zero,10004364 <__gedf2+0x98>
10004334:	0013883a 	mov	r9,zero
10004338:	39c03fcc 	andi	r7,r7,255
1000433c:	48000826 	beq	r9,zero,10004360 <__gedf2+0x94>
10004340:	38000926 	beq	r7,zero,10004368 <__gedf2+0x9c>
10004344:	00800044 	movi	r2,1
10004348:	f800283a 	ret
1000434c:	3212b03a 	or	r9,r6,r8
10004350:	483fec26 	beq	r9,zero,10004304 <__gedf2+0x38>
10004354:	00bfff84 	movi	r2,-2
10004358:	f800283a 	ret
1000435c:	39c03fcc 	andi	r7,r7,255
10004360:	29c00626 	beq	r5,r7,1000437c <__gedf2+0xb0>
10004364:	283ff726 	beq	r5,zero,10004344 <__gedf2+0x78>
10004368:	00bfffc4 	movi	r2,-1
1000436c:	f800283a 	ret
10004370:	2292b03a 	or	r9,r4,r10
10004374:	483fe126 	beq	r9,zero,100042fc <__gedf2+0x30>
10004378:	003ff606 	br	10004354 <__gedf2+0x88>
1000437c:	18bff916 	blt	r3,r2,10004364 <__gedf2+0x98>
10004380:	10c00316 	blt	r2,r3,10004390 <__gedf2+0xc4>
10004384:	42bff736 	bltu	r8,r10,10004364 <__gedf2+0x98>
10004388:	52000326 	beq	r10,r8,10004398 <__gedf2+0xcc>
1000438c:	5200042e 	bgeu	r10,r8,100043a0 <__gedf2+0xd4>
10004390:	283fec1e 	bne	r5,zero,10004344 <__gedf2+0x78>
10004394:	003ff406 	br	10004368 <__gedf2+0x9c>
10004398:	313ff236 	bltu	r6,r4,10004364 <__gedf2+0x98>
1000439c:	21bffc36 	bltu	r4,r6,10004390 <__gedf2+0xc4>
100043a0:	0005883a 	mov	r2,zero
100043a4:	f800283a 	ret

100043a8 <__ledf2>:
100043a8:	2804d53a 	srli	r2,r5,20
100043ac:	3810d53a 	srli	r8,r7,20
100043b0:	00c00434 	movhi	r3,16
100043b4:	18ffffc4 	addi	r3,r3,-1
100043b8:	1081ffcc 	andi	r2,r2,2047
100043bc:	0241ffc4 	movi	r9,2047
100043c0:	28d4703a 	and	r10,r5,r3
100043c4:	4201ffcc 	andi	r8,r8,2047
100043c8:	38c6703a 	and	r3,r7,r3
100043cc:	280ad7fa 	srli	r5,r5,31
100043d0:	380ed7fa 	srli	r7,r7,31
100043d4:	12401f26 	beq	r2,r9,10004454 <__ledf2+0xac>
100043d8:	0241ffc4 	movi	r9,2047
100043dc:	42401426 	beq	r8,r9,10004430 <__ledf2+0x88>
100043e0:	1000091e 	bne	r2,zero,10004408 <__ledf2+0x60>
100043e4:	2296b03a 	or	r11,r4,r10
100043e8:	5813003a 	cmpeq	r9,r11,zero
100043ec:	29403fcc 	andi	r5,r5,255
100043f0:	40000a1e 	bne	r8,zero,1000441c <__ledf2+0x74>
100043f4:	30d8b03a 	or	r12,r6,r3
100043f8:	6000081e 	bne	r12,zero,1000441c <__ledf2+0x74>
100043fc:	0005883a 	mov	r2,zero
10004400:	5800111e 	bne	r11,zero,10004448 <__ledf2+0xa0>
10004404:	f800283a 	ret
10004408:	29403fcc 	andi	r5,r5,255
1000440c:	40000c1e 	bne	r8,zero,10004440 <__ledf2+0x98>
10004410:	30d2b03a 	or	r9,r6,r3
10004414:	48000c26 	beq	r9,zero,10004448 <__ledf2+0xa0>
10004418:	0013883a 	mov	r9,zero
1000441c:	39c03fcc 	andi	r7,r7,255
10004420:	48000826 	beq	r9,zero,10004444 <__ledf2+0x9c>
10004424:	38001126 	beq	r7,zero,1000446c <__ledf2+0xc4>
10004428:	00800044 	movi	r2,1
1000442c:	f800283a 	ret
10004430:	30d2b03a 	or	r9,r6,r3
10004434:	483fea26 	beq	r9,zero,100043e0 <__ledf2+0x38>
10004438:	00800084 	movi	r2,2
1000443c:	f800283a 	ret
10004440:	39c03fcc 	andi	r7,r7,255
10004444:	39400726 	beq	r7,r5,10004464 <__ledf2+0xbc>
10004448:	2800081e 	bne	r5,zero,1000446c <__ledf2+0xc4>
1000444c:	00800044 	movi	r2,1
10004450:	f800283a 	ret
10004454:	2292b03a 	or	r9,r4,r10
10004458:	483fdf26 	beq	r9,zero,100043d8 <__ledf2+0x30>
1000445c:	00800084 	movi	r2,2
10004460:	f800283a 	ret
10004464:	4080030e 	bge	r8,r2,10004474 <__ledf2+0xcc>
10004468:	383fef26 	beq	r7,zero,10004428 <__ledf2+0x80>
1000446c:	00bfffc4 	movi	r2,-1
10004470:	f800283a 	ret
10004474:	123feb16 	blt	r2,r8,10004424 <__ledf2+0x7c>
10004478:	1abff336 	bltu	r3,r10,10004448 <__ledf2+0xa0>
1000447c:	50c00326 	beq	r10,r3,1000448c <__ledf2+0xe4>
10004480:	50c0042e 	bgeu	r10,r3,10004494 <__ledf2+0xec>
10004484:	283fe81e 	bne	r5,zero,10004428 <__ledf2+0x80>
10004488:	003ff806 	br	1000446c <__ledf2+0xc4>
1000448c:	313fee36 	bltu	r6,r4,10004448 <__ledf2+0xa0>
10004490:	21bffc36 	bltu	r4,r6,10004484 <__ledf2+0xdc>
10004494:	0005883a 	mov	r2,zero
10004498:	f800283a 	ret

1000449c <__muldf3>:
1000449c:	defff304 	addi	sp,sp,-52
100044a0:	2804d53a 	srli	r2,r5,20
100044a4:	dd800915 	stw	r22,36(sp)
100044a8:	282cd7fa 	srli	r22,r5,31
100044ac:	dc000315 	stw	r16,12(sp)
100044b0:	04000434 	movhi	r16,16
100044b4:	dd400815 	stw	r21,32(sp)
100044b8:	dc800515 	stw	r18,20(sp)
100044bc:	843fffc4 	addi	r16,r16,-1
100044c0:	dfc00c15 	stw	ra,48(sp)
100044c4:	df000b15 	stw	fp,44(sp)
100044c8:	ddc00a15 	stw	r23,40(sp)
100044cc:	dd000715 	stw	r20,28(sp)
100044d0:	dcc00615 	stw	r19,24(sp)
100044d4:	dc400415 	stw	r17,16(sp)
100044d8:	1481ffcc 	andi	r18,r2,2047
100044dc:	2c20703a 	and	r16,r5,r16
100044e0:	b02b883a 	mov	r21,r22
100044e4:	b2403fcc 	andi	r9,r22,255
100044e8:	90006026 	beq	r18,zero,1000466c <__muldf3+0x1d0>
100044ec:	0081ffc4 	movi	r2,2047
100044f0:	2029883a 	mov	r20,r4
100044f4:	90803626 	beq	r18,r2,100045d0 <__muldf3+0x134>
100044f8:	80800434 	orhi	r2,r16,16
100044fc:	100490fa 	slli	r2,r2,3
10004500:	2020d77a 	srli	r16,r4,29
10004504:	202890fa 	slli	r20,r4,3
10004508:	94bf0044 	addi	r18,r18,-1023
1000450c:	80a0b03a 	or	r16,r16,r2
10004510:	0027883a 	mov	r19,zero
10004514:	0039883a 	mov	fp,zero
10004518:	3804d53a 	srli	r2,r7,20
1000451c:	382ed7fa 	srli	r23,r7,31
10004520:	04400434 	movhi	r17,16
10004524:	8c7fffc4 	addi	r17,r17,-1
10004528:	1081ffcc 	andi	r2,r2,2047
1000452c:	3011883a 	mov	r8,r6
10004530:	3c62703a 	and	r17,r7,r17
10004534:	ba803fcc 	andi	r10,r23,255
10004538:	10006d26 	beq	r2,zero,100046f0 <__muldf3+0x254>
1000453c:	00c1ffc4 	movi	r3,2047
10004540:	10c06526 	beq	r2,r3,100046d8 <__muldf3+0x23c>
10004544:	88c00434 	orhi	r3,r17,16
10004548:	180690fa 	slli	r3,r3,3
1000454c:	3022d77a 	srli	r17,r6,29
10004550:	301090fa 	slli	r8,r6,3
10004554:	10bf0044 	addi	r2,r2,-1023
10004558:	88e2b03a 	or	r17,r17,r3
1000455c:	000b883a 	mov	r5,zero
10004560:	9085883a 	add	r2,r18,r2
10004564:	2cc8b03a 	or	r4,r5,r19
10004568:	00c003c4 	movi	r3,15
1000456c:	bdacf03a 	xor	r22,r23,r22
10004570:	12c00044 	addi	r11,r2,1
10004574:	19009936 	bltu	r3,r4,100047dc <__muldf3+0x340>
10004578:	200890ba 	slli	r4,r4,2
1000457c:	00c40034 	movhi	r3,4096
10004580:	18d16404 	addi	r3,r3,17808
10004584:	20c9883a 	add	r4,r4,r3
10004588:	20c00017 	ldw	r3,0(r4)
1000458c:	1800683a 	jmp	r3
10004590:	100047dc 	xori	zero,r2,287
10004594:	100045f0 	cmpltui	zero,r2,279
10004598:	100045f0 	cmpltui	zero,r2,279
1000459c:	100045ec 	andhi	zero,r2,279
100045a0:	100047b8 	rdprs	zero,r2,286
100045a4:	100047b8 	rdprs	zero,r2,286
100045a8:	100047a0 	cmpeqi	zero,r2,286
100045ac:	100045ec 	andhi	zero,r2,279
100045b0:	100047b8 	rdprs	zero,r2,286
100045b4:	100047a0 	cmpeqi	zero,r2,286
100045b8:	100047b8 	rdprs	zero,r2,286
100045bc:	100045ec 	andhi	zero,r2,279
100045c0:	100047c8 	cmpgei	zero,r2,287
100045c4:	100047c8 	cmpgei	zero,r2,287
100045c8:	100047c8 	cmpgei	zero,r2,287
100045cc:	100049e4 	muli	zero,r2,295
100045d0:	2404b03a 	or	r2,r4,r16
100045d4:	10006f1e 	bne	r2,zero,10004794 <__muldf3+0x2f8>
100045d8:	04c00204 	movi	r19,8
100045dc:	0021883a 	mov	r16,zero
100045e0:	0029883a 	mov	r20,zero
100045e4:	07000084 	movi	fp,2
100045e8:	003fcb06 	br	10004518 <__muldf3+0x7c>
100045ec:	502d883a 	mov	r22,r10
100045f0:	00800084 	movi	r2,2
100045f4:	28805726 	beq	r5,r2,10004754 <__muldf3+0x2b8>
100045f8:	008000c4 	movi	r2,3
100045fc:	28816626 	beq	r5,r2,10004b98 <__muldf3+0x6fc>
10004600:	00800044 	movi	r2,1
10004604:	2881411e 	bne	r5,r2,10004b0c <__muldf3+0x670>
10004608:	b02b883a 	mov	r21,r22
1000460c:	0005883a 	mov	r2,zero
10004610:	000b883a 	mov	r5,zero
10004614:	0029883a 	mov	r20,zero
10004618:	1004953a 	slli	r2,r2,20
1000461c:	a8c03fcc 	andi	r3,r21,255
10004620:	04400434 	movhi	r17,16
10004624:	8c7fffc4 	addi	r17,r17,-1
10004628:	180697fa 	slli	r3,r3,31
1000462c:	2c4a703a 	and	r5,r5,r17
10004630:	288ab03a 	or	r5,r5,r2
10004634:	28c6b03a 	or	r3,r5,r3
10004638:	a005883a 	mov	r2,r20
1000463c:	dfc00c17 	ldw	ra,48(sp)
10004640:	df000b17 	ldw	fp,44(sp)
10004644:	ddc00a17 	ldw	r23,40(sp)
10004648:	dd800917 	ldw	r22,36(sp)
1000464c:	dd400817 	ldw	r21,32(sp)
10004650:	dd000717 	ldw	r20,28(sp)
10004654:	dcc00617 	ldw	r19,24(sp)
10004658:	dc800517 	ldw	r18,20(sp)
1000465c:	dc400417 	ldw	r17,16(sp)
10004660:	dc000317 	ldw	r16,12(sp)
10004664:	dec00d04 	addi	sp,sp,52
10004668:	f800283a 	ret
1000466c:	2404b03a 	or	r2,r4,r16
10004670:	2027883a 	mov	r19,r4
10004674:	10004226 	beq	r2,zero,10004780 <__muldf3+0x2e4>
10004678:	8000fc26 	beq	r16,zero,10004a6c <__muldf3+0x5d0>
1000467c:	8009883a 	mov	r4,r16
10004680:	d9800215 	stw	r6,8(sp)
10004684:	d9c00015 	stw	r7,0(sp)
10004688:	da400115 	stw	r9,4(sp)
1000468c:	000560c0 	call	1000560c <__clzsi2>
10004690:	d9800217 	ldw	r6,8(sp)
10004694:	d9c00017 	ldw	r7,0(sp)
10004698:	da400117 	ldw	r9,4(sp)
1000469c:	113ffd44 	addi	r4,r2,-11
100046a0:	00c00704 	movi	r3,28
100046a4:	1900ed16 	blt	r3,r4,10004a5c <__muldf3+0x5c0>
100046a8:	00c00744 	movi	r3,29
100046ac:	147ffe04 	addi	r17,r2,-8
100046b0:	1907c83a 	sub	r3,r3,r4
100046b4:	8460983a 	sll	r16,r16,r17
100046b8:	98c6d83a 	srl	r3,r19,r3
100046bc:	9c68983a 	sll	r20,r19,r17
100046c0:	1c20b03a 	or	r16,r3,r16
100046c4:	1080fcc4 	addi	r2,r2,1011
100046c8:	00a5c83a 	sub	r18,zero,r2
100046cc:	0027883a 	mov	r19,zero
100046d0:	0039883a 	mov	fp,zero
100046d4:	003f9006 	br	10004518 <__muldf3+0x7c>
100046d8:	3446b03a 	or	r3,r6,r17
100046dc:	1800261e 	bne	r3,zero,10004778 <__muldf3+0x2dc>
100046e0:	0023883a 	mov	r17,zero
100046e4:	0011883a 	mov	r8,zero
100046e8:	01400084 	movi	r5,2
100046ec:	003f9c06 	br	10004560 <__muldf3+0xc4>
100046f0:	3446b03a 	or	r3,r6,r17
100046f4:	18001c26 	beq	r3,zero,10004768 <__muldf3+0x2cc>
100046f8:	8800ce26 	beq	r17,zero,10004a34 <__muldf3+0x598>
100046fc:	8809883a 	mov	r4,r17
10004700:	d9800215 	stw	r6,8(sp)
10004704:	da400115 	stw	r9,4(sp)
10004708:	da800015 	stw	r10,0(sp)
1000470c:	000560c0 	call	1000560c <__clzsi2>
10004710:	d9800217 	ldw	r6,8(sp)
10004714:	da400117 	ldw	r9,4(sp)
10004718:	da800017 	ldw	r10,0(sp)
1000471c:	113ffd44 	addi	r4,r2,-11
10004720:	00c00704 	movi	r3,28
10004724:	1900bf16 	blt	r3,r4,10004a24 <__muldf3+0x588>
10004728:	00c00744 	movi	r3,29
1000472c:	123ffe04 	addi	r8,r2,-8
10004730:	1907c83a 	sub	r3,r3,r4
10004734:	8a22983a 	sll	r17,r17,r8
10004738:	30c6d83a 	srl	r3,r6,r3
1000473c:	3210983a 	sll	r8,r6,r8
10004740:	1c62b03a 	or	r17,r3,r17
10004744:	1080fcc4 	addi	r2,r2,1011
10004748:	0085c83a 	sub	r2,zero,r2
1000474c:	000b883a 	mov	r5,zero
10004750:	003f8306 	br	10004560 <__muldf3+0xc4>
10004754:	b02b883a 	mov	r21,r22
10004758:	0081ffc4 	movi	r2,2047
1000475c:	000b883a 	mov	r5,zero
10004760:	0029883a 	mov	r20,zero
10004764:	003fac06 	br	10004618 <__muldf3+0x17c>
10004768:	0023883a 	mov	r17,zero
1000476c:	0011883a 	mov	r8,zero
10004770:	01400044 	movi	r5,1
10004774:	003f7a06 	br	10004560 <__muldf3+0xc4>
10004778:	014000c4 	movi	r5,3
1000477c:	003f7806 	br	10004560 <__muldf3+0xc4>
10004780:	04c00104 	movi	r19,4
10004784:	0021883a 	mov	r16,zero
10004788:	0029883a 	mov	r20,zero
1000478c:	07000044 	movi	fp,1
10004790:	003f6106 	br	10004518 <__muldf3+0x7c>
10004794:	04c00304 	movi	r19,12
10004798:	070000c4 	movi	fp,3
1000479c:	003f5e06 	br	10004518 <__muldf3+0x7c>
100047a0:	01400434 	movhi	r5,16
100047a4:	002b883a 	mov	r21,zero
100047a8:	297fffc4 	addi	r5,r5,-1
100047ac:	053fffc4 	movi	r20,-1
100047b0:	0081ffc4 	movi	r2,2047
100047b4:	003f9806 	br	10004618 <__muldf3+0x17c>
100047b8:	8023883a 	mov	r17,r16
100047bc:	a011883a 	mov	r8,r20
100047c0:	e00b883a 	mov	r5,fp
100047c4:	003f8a06 	br	100045f0 <__muldf3+0x154>
100047c8:	8023883a 	mov	r17,r16
100047cc:	a011883a 	mov	r8,r20
100047d0:	482d883a 	mov	r22,r9
100047d4:	e00b883a 	mov	r5,fp
100047d8:	003f8506 	br	100045f0 <__muldf3+0x154>
100047dc:	a00ad43a 	srli	r5,r20,16
100047e0:	401ad43a 	srli	r13,r8,16
100047e4:	a53fffcc 	andi	r20,r20,65535
100047e8:	423fffcc 	andi	r8,r8,65535
100047ec:	4519383a 	mul	r12,r8,r20
100047f0:	4147383a 	mul	r3,r8,r5
100047f4:	6d09383a 	mul	r4,r13,r20
100047f8:	600cd43a 	srli	r6,r12,16
100047fc:	2b5d383a 	mul	r14,r5,r13
10004800:	20c9883a 	add	r4,r4,r3
10004804:	310d883a 	add	r6,r6,r4
10004808:	30c0022e 	bgeu	r6,r3,10004814 <__muldf3+0x378>
1000480c:	00c00074 	movhi	r3,1
10004810:	70dd883a 	add	r14,r14,r3
10004814:	8826d43a 	srli	r19,r17,16
10004818:	8bffffcc 	andi	r15,r17,65535
1000481c:	7d23383a 	mul	r17,r15,r20
10004820:	7949383a 	mul	r4,r15,r5
10004824:	9d29383a 	mul	r20,r19,r20
10004828:	8814d43a 	srli	r10,r17,16
1000482c:	3012943a 	slli	r9,r6,16
10004830:	a129883a 	add	r20,r20,r4
10004834:	633fffcc 	andi	r12,r12,65535
10004838:	5515883a 	add	r10,r10,r20
1000483c:	3006d43a 	srli	r3,r6,16
10004840:	4b13883a 	add	r9,r9,r12
10004844:	2ccb383a 	mul	r5,r5,r19
10004848:	5100022e 	bgeu	r10,r4,10004854 <__muldf3+0x3b8>
1000484c:	01000074 	movhi	r4,1
10004850:	290b883a 	add	r5,r5,r4
10004854:	802ad43a 	srli	r21,r16,16
10004858:	843fffcc 	andi	r16,r16,65535
1000485c:	440d383a 	mul	r6,r8,r16
10004860:	4565383a 	mul	r18,r8,r21
10004864:	8349383a 	mul	r4,r16,r13
10004868:	500e943a 	slli	r7,r10,16
1000486c:	3010d43a 	srli	r8,r6,16
10004870:	5028d43a 	srli	r20,r10,16
10004874:	2489883a 	add	r4,r4,r18
10004878:	8abfffcc 	andi	r10,r17,65535
1000487c:	3a95883a 	add	r10,r7,r10
10004880:	4119883a 	add	r12,r8,r4
10004884:	a169883a 	add	r20,r20,r5
10004888:	1a87883a 	add	r3,r3,r10
1000488c:	6d5b383a 	mul	r13,r13,r21
10004890:	6480022e 	bgeu	r12,r18,1000489c <__muldf3+0x400>
10004894:	01000074 	movhi	r4,1
10004898:	691b883a 	add	r13,r13,r4
1000489c:	7c25383a 	mul	r18,r15,r16
100048a0:	7d4b383a 	mul	r5,r15,r21
100048a4:	84cf383a 	mul	r7,r16,r19
100048a8:	901ed43a 	srli	r15,r18,16
100048ac:	6008d43a 	srli	r4,r12,16
100048b0:	6010943a 	slli	r8,r12,16
100048b4:	394f883a 	add	r7,r7,r5
100048b8:	333fffcc 	andi	r12,r6,65535
100048bc:	79df883a 	add	r15,r15,r7
100048c0:	235b883a 	add	r13,r4,r13
100048c4:	9d63383a 	mul	r17,r19,r21
100048c8:	4309883a 	add	r4,r8,r12
100048cc:	7940022e 	bgeu	r15,r5,100048d8 <__muldf3+0x43c>
100048d0:	01400074 	movhi	r5,1
100048d4:	8963883a 	add	r17,r17,r5
100048d8:	780a943a 	slli	r5,r15,16
100048dc:	91bfffcc 	andi	r6,r18,65535
100048e0:	70c7883a 	add	r3,r14,r3
100048e4:	298d883a 	add	r6,r5,r6
100048e8:	1a8f803a 	cmpltu	r7,r3,r10
100048ec:	350b883a 	add	r5,r6,r20
100048f0:	20c7883a 	add	r3,r4,r3
100048f4:	3955883a 	add	r10,r7,r5
100048f8:	1909803a 	cmpltu	r4,r3,r4
100048fc:	6a91883a 	add	r8,r13,r10
10004900:	780cd43a 	srli	r6,r15,16
10004904:	2219883a 	add	r12,r4,r8
10004908:	2d0b803a 	cmpltu	r5,r5,r20
1000490c:	51cf803a 	cmpltu	r7,r10,r7
10004910:	29ceb03a 	or	r7,r5,r7
10004914:	4351803a 	cmpltu	r8,r8,r13
10004918:	610b803a 	cmpltu	r5,r12,r4
1000491c:	4148b03a 	or	r4,r8,r5
10004920:	398f883a 	add	r7,r7,r6
10004924:	3909883a 	add	r4,r7,r4
10004928:	1810927a 	slli	r8,r3,9
1000492c:	2449883a 	add	r4,r4,r17
10004930:	2008927a 	slli	r4,r4,9
10004934:	6022d5fa 	srli	r17,r12,23
10004938:	1806d5fa 	srli	r3,r3,23
1000493c:	4252b03a 	or	r9,r8,r9
10004940:	600a927a 	slli	r5,r12,9
10004944:	4810c03a 	cmpne	r8,r9,zero
10004948:	2462b03a 	or	r17,r4,r17
1000494c:	40c6b03a 	or	r3,r8,r3
10004950:	8900402c 	andhi	r4,r17,256
10004954:	1950b03a 	or	r8,r3,r5
10004958:	20000726 	beq	r4,zero,10004978 <__muldf3+0x4dc>
1000495c:	4006d07a 	srli	r3,r8,1
10004960:	880497fa 	slli	r2,r17,31
10004964:	4200004c 	andi	r8,r8,1
10004968:	8822d07a 	srli	r17,r17,1
1000496c:	1a10b03a 	or	r8,r3,r8
10004970:	1210b03a 	or	r8,r2,r8
10004974:	5805883a 	mov	r2,r11
10004978:	1140ffc4 	addi	r5,r2,1023
1000497c:	0140440e 	bge	zero,r5,10004a90 <__muldf3+0x5f4>
10004980:	40c001cc 	andi	r3,r8,7
10004984:	18000726 	beq	r3,zero,100049a4 <__muldf3+0x508>
10004988:	40c003cc 	andi	r3,r8,15
1000498c:	01000104 	movi	r4,4
10004990:	19000426 	beq	r3,r4,100049a4 <__muldf3+0x508>
10004994:	4107883a 	add	r3,r8,r4
10004998:	1a11803a 	cmpltu	r8,r3,r8
1000499c:	8a23883a 	add	r17,r17,r8
100049a0:	1811883a 	mov	r8,r3
100049a4:	88c0402c 	andhi	r3,r17,256
100049a8:	18000426 	beq	r3,zero,100049bc <__muldf3+0x520>
100049ac:	11410004 	addi	r5,r2,1024
100049b0:	00bfc034 	movhi	r2,65280
100049b4:	10bfffc4 	addi	r2,r2,-1
100049b8:	88a2703a 	and	r17,r17,r2
100049bc:	0081ff84 	movi	r2,2046
100049c0:	117f6416 	blt	r2,r5,10004754 <__muldf3+0x2b8>
100049c4:	8828977a 	slli	r20,r17,29
100049c8:	4010d0fa 	srli	r8,r8,3
100049cc:	8822927a 	slli	r17,r17,9
100049d0:	2881ffcc 	andi	r2,r5,2047
100049d4:	a228b03a 	or	r20,r20,r8
100049d8:	880ad33a 	srli	r5,r17,12
100049dc:	b02b883a 	mov	r21,r22
100049e0:	003f0d06 	br	10004618 <__muldf3+0x17c>
100049e4:	8080022c 	andhi	r2,r16,8
100049e8:	10000926 	beq	r2,zero,10004a10 <__muldf3+0x574>
100049ec:	8880022c 	andhi	r2,r17,8
100049f0:	1000071e 	bne	r2,zero,10004a10 <__muldf3+0x574>
100049f4:	00800434 	movhi	r2,16
100049f8:	89400234 	orhi	r5,r17,8
100049fc:	10bfffc4 	addi	r2,r2,-1
10004a00:	b82b883a 	mov	r21,r23
10004a04:	288a703a 	and	r5,r5,r2
10004a08:	4029883a 	mov	r20,r8
10004a0c:	003f6806 	br	100047b0 <__muldf3+0x314>
10004a10:	00800434 	movhi	r2,16
10004a14:	81400234 	orhi	r5,r16,8
10004a18:	10bfffc4 	addi	r2,r2,-1
10004a1c:	288a703a 	and	r5,r5,r2
10004a20:	003f6306 	br	100047b0 <__muldf3+0x314>
10004a24:	147ff604 	addi	r17,r2,-40
10004a28:	3462983a 	sll	r17,r6,r17
10004a2c:	0011883a 	mov	r8,zero
10004a30:	003f4406 	br	10004744 <__muldf3+0x2a8>
10004a34:	3009883a 	mov	r4,r6
10004a38:	d9800215 	stw	r6,8(sp)
10004a3c:	da400115 	stw	r9,4(sp)
10004a40:	da800015 	stw	r10,0(sp)
10004a44:	000560c0 	call	1000560c <__clzsi2>
10004a48:	10800804 	addi	r2,r2,32
10004a4c:	da800017 	ldw	r10,0(sp)
10004a50:	da400117 	ldw	r9,4(sp)
10004a54:	d9800217 	ldw	r6,8(sp)
10004a58:	003f3006 	br	1000471c <__muldf3+0x280>
10004a5c:	143ff604 	addi	r16,r2,-40
10004a60:	9c20983a 	sll	r16,r19,r16
10004a64:	0029883a 	mov	r20,zero
10004a68:	003f1606 	br	100046c4 <__muldf3+0x228>
10004a6c:	d9800215 	stw	r6,8(sp)
10004a70:	d9c00015 	stw	r7,0(sp)
10004a74:	da400115 	stw	r9,4(sp)
10004a78:	000560c0 	call	1000560c <__clzsi2>
10004a7c:	10800804 	addi	r2,r2,32
10004a80:	da400117 	ldw	r9,4(sp)
10004a84:	d9c00017 	ldw	r7,0(sp)
10004a88:	d9800217 	ldw	r6,8(sp)
10004a8c:	003f0306 	br	1000469c <__muldf3+0x200>
10004a90:	00c00044 	movi	r3,1
10004a94:	1947c83a 	sub	r3,r3,r5
10004a98:	00800e04 	movi	r2,56
10004a9c:	10feda16 	blt	r2,r3,10004608 <__muldf3+0x16c>
10004aa0:	008007c4 	movi	r2,31
10004aa4:	10c01b16 	blt	r2,r3,10004b14 <__muldf3+0x678>
10004aa8:	00800804 	movi	r2,32
10004aac:	10c5c83a 	sub	r2,r2,r3
10004ab0:	888a983a 	sll	r5,r17,r2
10004ab4:	40c8d83a 	srl	r4,r8,r3
10004ab8:	4084983a 	sll	r2,r8,r2
10004abc:	88e2d83a 	srl	r17,r17,r3
10004ac0:	2906b03a 	or	r3,r5,r4
10004ac4:	1004c03a 	cmpne	r2,r2,zero
10004ac8:	1886b03a 	or	r3,r3,r2
10004acc:	188001cc 	andi	r2,r3,7
10004ad0:	10000726 	beq	r2,zero,10004af0 <__muldf3+0x654>
10004ad4:	188003cc 	andi	r2,r3,15
10004ad8:	01000104 	movi	r4,4
10004adc:	11000426 	beq	r2,r4,10004af0 <__muldf3+0x654>
10004ae0:	1805883a 	mov	r2,r3
10004ae4:	10c00104 	addi	r3,r2,4
10004ae8:	1885803a 	cmpltu	r2,r3,r2
10004aec:	88a3883a 	add	r17,r17,r2
10004af0:	8880202c 	andhi	r2,r17,128
10004af4:	10001c26 	beq	r2,zero,10004b68 <__muldf3+0x6cc>
10004af8:	b02b883a 	mov	r21,r22
10004afc:	00800044 	movi	r2,1
10004b00:	000b883a 	mov	r5,zero
10004b04:	0029883a 	mov	r20,zero
10004b08:	003ec306 	br	10004618 <__muldf3+0x17c>
10004b0c:	5805883a 	mov	r2,r11
10004b10:	003f9906 	br	10004978 <__muldf3+0x4dc>
10004b14:	00bff844 	movi	r2,-31
10004b18:	1145c83a 	sub	r2,r2,r5
10004b1c:	8888d83a 	srl	r4,r17,r2
10004b20:	00800804 	movi	r2,32
10004b24:	18801a26 	beq	r3,r2,10004b90 <__muldf3+0x6f4>
10004b28:	00801004 	movi	r2,64
10004b2c:	10c5c83a 	sub	r2,r2,r3
10004b30:	8884983a 	sll	r2,r17,r2
10004b34:	1204b03a 	or	r2,r2,r8
10004b38:	1004c03a 	cmpne	r2,r2,zero
10004b3c:	2084b03a 	or	r2,r4,r2
10004b40:	144001cc 	andi	r17,r2,7
10004b44:	88000d1e 	bne	r17,zero,10004b7c <__muldf3+0x6e0>
10004b48:	000b883a 	mov	r5,zero
10004b4c:	1028d0fa 	srli	r20,r2,3
10004b50:	b02b883a 	mov	r21,r22
10004b54:	0005883a 	mov	r2,zero
10004b58:	a468b03a 	or	r20,r20,r17
10004b5c:	003eae06 	br	10004618 <__muldf3+0x17c>
10004b60:	1007883a 	mov	r3,r2
10004b64:	0023883a 	mov	r17,zero
10004b68:	880a927a 	slli	r5,r17,9
10004b6c:	1805883a 	mov	r2,r3
10004b70:	8822977a 	slli	r17,r17,29
10004b74:	280ad33a 	srli	r5,r5,12
10004b78:	003ff406 	br	10004b4c <__muldf3+0x6b0>
10004b7c:	10c003cc 	andi	r3,r2,15
10004b80:	01000104 	movi	r4,4
10004b84:	193ff626 	beq	r3,r4,10004b60 <__muldf3+0x6c4>
10004b88:	0023883a 	mov	r17,zero
10004b8c:	003fd506 	br	10004ae4 <__muldf3+0x648>
10004b90:	0005883a 	mov	r2,zero
10004b94:	003fe706 	br	10004b34 <__muldf3+0x698>
10004b98:	00800434 	movhi	r2,16
10004b9c:	89400234 	orhi	r5,r17,8
10004ba0:	10bfffc4 	addi	r2,r2,-1
10004ba4:	b02b883a 	mov	r21,r22
10004ba8:	288a703a 	and	r5,r5,r2
10004bac:	4029883a 	mov	r20,r8
10004bb0:	003eff06 	br	100047b0 <__muldf3+0x314>

10004bb4 <__subdf3>:
10004bb4:	02000434 	movhi	r8,16
10004bb8:	423fffc4 	addi	r8,r8,-1
10004bbc:	defffb04 	addi	sp,sp,-20
10004bc0:	2a14703a 	and	r10,r5,r8
10004bc4:	3812d53a 	srli	r9,r7,20
10004bc8:	3a10703a 	and	r8,r7,r8
10004bcc:	2006d77a 	srli	r3,r4,29
10004bd0:	3004d77a 	srli	r2,r6,29
10004bd4:	dc000015 	stw	r16,0(sp)
10004bd8:	501490fa 	slli	r10,r10,3
10004bdc:	2820d53a 	srli	r16,r5,20
10004be0:	401090fa 	slli	r8,r8,3
10004be4:	dc800215 	stw	r18,8(sp)
10004be8:	dc400115 	stw	r17,4(sp)
10004bec:	dfc00415 	stw	ra,16(sp)
10004bf0:	202290fa 	slli	r17,r4,3
10004bf4:	dcc00315 	stw	r19,12(sp)
10004bf8:	4a41ffcc 	andi	r9,r9,2047
10004bfc:	0101ffc4 	movi	r4,2047
10004c00:	2824d7fa 	srli	r18,r5,31
10004c04:	8401ffcc 	andi	r16,r16,2047
10004c08:	50c6b03a 	or	r3,r10,r3
10004c0c:	380ed7fa 	srli	r7,r7,31
10004c10:	408ab03a 	or	r5,r8,r2
10004c14:	300c90fa 	slli	r6,r6,3
10004c18:	49009626 	beq	r9,r4,10004e74 <__subdf3+0x2c0>
10004c1c:	39c0005c 	xori	r7,r7,1
10004c20:	8245c83a 	sub	r2,r16,r9
10004c24:	3c807426 	beq	r7,r18,10004df8 <__subdf3+0x244>
10004c28:	0080af0e 	bge	zero,r2,10004ee8 <__subdf3+0x334>
10004c2c:	48002a1e 	bne	r9,zero,10004cd8 <__subdf3+0x124>
10004c30:	2988b03a 	or	r4,r5,r6
10004c34:	20009a1e 	bne	r4,zero,10004ea0 <__subdf3+0x2ec>
10004c38:	888001cc 	andi	r2,r17,7
10004c3c:	10000726 	beq	r2,zero,10004c5c <__subdf3+0xa8>
10004c40:	888003cc 	andi	r2,r17,15
10004c44:	01000104 	movi	r4,4
10004c48:	11000426 	beq	r2,r4,10004c5c <__subdf3+0xa8>
10004c4c:	890b883a 	add	r5,r17,r4
10004c50:	2c63803a 	cmpltu	r17,r5,r17
10004c54:	1c47883a 	add	r3,r3,r17
10004c58:	2823883a 	mov	r17,r5
10004c5c:	1880202c 	andhi	r2,r3,128
10004c60:	10005926 	beq	r2,zero,10004dc8 <__subdf3+0x214>
10004c64:	84000044 	addi	r16,r16,1
10004c68:	0081ffc4 	movi	r2,2047
10004c6c:	8080be26 	beq	r16,r2,10004f68 <__subdf3+0x3b4>
10004c70:	017fe034 	movhi	r5,65408
10004c74:	297fffc4 	addi	r5,r5,-1
10004c78:	1946703a 	and	r3,r3,r5
10004c7c:	1804977a 	slli	r2,r3,29
10004c80:	1806927a 	slli	r3,r3,9
10004c84:	8822d0fa 	srli	r17,r17,3
10004c88:	8401ffcc 	andi	r16,r16,2047
10004c8c:	180ad33a 	srli	r5,r3,12
10004c90:	9100004c 	andi	r4,r18,1
10004c94:	1444b03a 	or	r2,r2,r17
10004c98:	80c1ffcc 	andi	r3,r16,2047
10004c9c:	1820953a 	slli	r16,r3,20
10004ca0:	20c03fcc 	andi	r3,r4,255
10004ca4:	180897fa 	slli	r4,r3,31
10004ca8:	00c00434 	movhi	r3,16
10004cac:	18ffffc4 	addi	r3,r3,-1
10004cb0:	28c6703a 	and	r3,r5,r3
10004cb4:	1c06b03a 	or	r3,r3,r16
10004cb8:	1906b03a 	or	r3,r3,r4
10004cbc:	dfc00417 	ldw	ra,16(sp)
10004cc0:	dcc00317 	ldw	r19,12(sp)
10004cc4:	dc800217 	ldw	r18,8(sp)
10004cc8:	dc400117 	ldw	r17,4(sp)
10004ccc:	dc000017 	ldw	r16,0(sp)
10004cd0:	dec00504 	addi	sp,sp,20
10004cd4:	f800283a 	ret
10004cd8:	0101ffc4 	movi	r4,2047
10004cdc:	813fd626 	beq	r16,r4,10004c38 <__subdf3+0x84>
10004ce0:	29402034 	orhi	r5,r5,128
10004ce4:	01000e04 	movi	r4,56
10004ce8:	2080a316 	blt	r4,r2,10004f78 <__subdf3+0x3c4>
10004cec:	010007c4 	movi	r4,31
10004cf0:	2080c616 	blt	r4,r2,1000500c <__subdf3+0x458>
10004cf4:	01000804 	movi	r4,32
10004cf8:	2089c83a 	sub	r4,r4,r2
10004cfc:	2910983a 	sll	r8,r5,r4
10004d00:	308ed83a 	srl	r7,r6,r2
10004d04:	3108983a 	sll	r4,r6,r4
10004d08:	2884d83a 	srl	r2,r5,r2
10004d0c:	41ccb03a 	or	r6,r8,r7
10004d10:	2008c03a 	cmpne	r4,r4,zero
10004d14:	310cb03a 	or	r6,r6,r4
10004d18:	898dc83a 	sub	r6,r17,r6
10004d1c:	89a3803a 	cmpltu	r17,r17,r6
10004d20:	1887c83a 	sub	r3,r3,r2
10004d24:	1c47c83a 	sub	r3,r3,r17
10004d28:	3023883a 	mov	r17,r6
10004d2c:	1880202c 	andhi	r2,r3,128
10004d30:	10002326 	beq	r2,zero,10004dc0 <__subdf3+0x20c>
10004d34:	04c02034 	movhi	r19,128
10004d38:	9cffffc4 	addi	r19,r19,-1
10004d3c:	1ce6703a 	and	r19,r3,r19
10004d40:	98007a26 	beq	r19,zero,10004f2c <__subdf3+0x378>
10004d44:	9809883a 	mov	r4,r19
10004d48:	000560c0 	call	1000560c <__clzsi2>
10004d4c:	113ffe04 	addi	r4,r2,-8
10004d50:	00c007c4 	movi	r3,31
10004d54:	19007b16 	blt	r3,r4,10004f44 <__subdf3+0x390>
10004d58:	00800804 	movi	r2,32
10004d5c:	1105c83a 	sub	r2,r2,r4
10004d60:	8884d83a 	srl	r2,r17,r2
10004d64:	9906983a 	sll	r3,r19,r4
10004d68:	8922983a 	sll	r17,r17,r4
10004d6c:	10c4b03a 	or	r2,r2,r3
10004d70:	24007816 	blt	r4,r16,10004f54 <__subdf3+0x3a0>
10004d74:	2421c83a 	sub	r16,r4,r16
10004d78:	80c00044 	addi	r3,r16,1
10004d7c:	010007c4 	movi	r4,31
10004d80:	20c09516 	blt	r4,r3,10004fd8 <__subdf3+0x424>
10004d84:	01400804 	movi	r5,32
10004d88:	28cbc83a 	sub	r5,r5,r3
10004d8c:	88c8d83a 	srl	r4,r17,r3
10004d90:	8962983a 	sll	r17,r17,r5
10004d94:	114a983a 	sll	r5,r2,r5
10004d98:	10c6d83a 	srl	r3,r2,r3
10004d9c:	8804c03a 	cmpne	r2,r17,zero
10004da0:	290ab03a 	or	r5,r5,r4
10004da4:	28a2b03a 	or	r17,r5,r2
10004da8:	0021883a 	mov	r16,zero
10004dac:	003fa206 	br	10004c38 <__subdf3+0x84>
10004db0:	2090b03a 	or	r8,r4,r2
10004db4:	40018e26 	beq	r8,zero,100053f0 <__subdf3+0x83c>
10004db8:	1007883a 	mov	r3,r2
10004dbc:	2023883a 	mov	r17,r4
10004dc0:	888001cc 	andi	r2,r17,7
10004dc4:	103f9e1e 	bne	r2,zero,10004c40 <__subdf3+0x8c>
10004dc8:	1804977a 	slli	r2,r3,29
10004dcc:	8822d0fa 	srli	r17,r17,3
10004dd0:	1810d0fa 	srli	r8,r3,3
10004dd4:	9100004c 	andi	r4,r18,1
10004dd8:	1444b03a 	or	r2,r2,r17
10004ddc:	00c1ffc4 	movi	r3,2047
10004de0:	80c02826 	beq	r16,r3,10004e84 <__subdf3+0x2d0>
10004de4:	01400434 	movhi	r5,16
10004de8:	297fffc4 	addi	r5,r5,-1
10004dec:	80e0703a 	and	r16,r16,r3
10004df0:	414a703a 	and	r5,r8,r5
10004df4:	003fa806 	br	10004c98 <__subdf3+0xe4>
10004df8:	0080630e 	bge	zero,r2,10004f88 <__subdf3+0x3d4>
10004dfc:	48003026 	beq	r9,zero,10004ec0 <__subdf3+0x30c>
10004e00:	0101ffc4 	movi	r4,2047
10004e04:	813f8c26 	beq	r16,r4,10004c38 <__subdf3+0x84>
10004e08:	29402034 	orhi	r5,r5,128
10004e0c:	01000e04 	movi	r4,56
10004e10:	2080a90e 	bge	r4,r2,100050b8 <__subdf3+0x504>
10004e14:	298cb03a 	or	r6,r5,r6
10004e18:	3012c03a 	cmpne	r9,r6,zero
10004e1c:	0005883a 	mov	r2,zero
10004e20:	4c53883a 	add	r9,r9,r17
10004e24:	4c63803a 	cmpltu	r17,r9,r17
10004e28:	10c7883a 	add	r3,r2,r3
10004e2c:	88c7883a 	add	r3,r17,r3
10004e30:	4823883a 	mov	r17,r9
10004e34:	1880202c 	andhi	r2,r3,128
10004e38:	1000d026 	beq	r2,zero,1000517c <__subdf3+0x5c8>
10004e3c:	84000044 	addi	r16,r16,1
10004e40:	0081ffc4 	movi	r2,2047
10004e44:	8080fe26 	beq	r16,r2,10005240 <__subdf3+0x68c>
10004e48:	00bfe034 	movhi	r2,65408
10004e4c:	10bfffc4 	addi	r2,r2,-1
10004e50:	1886703a 	and	r3,r3,r2
10004e54:	880ad07a 	srli	r5,r17,1
10004e58:	180497fa 	slli	r2,r3,31
10004e5c:	8900004c 	andi	r4,r17,1
10004e60:	2922b03a 	or	r17,r5,r4
10004e64:	1806d07a 	srli	r3,r3,1
10004e68:	1462b03a 	or	r17,r2,r17
10004e6c:	3825883a 	mov	r18,r7
10004e70:	003f7106 	br	10004c38 <__subdf3+0x84>
10004e74:	2984b03a 	or	r2,r5,r6
10004e78:	103f6826 	beq	r2,zero,10004c1c <__subdf3+0x68>
10004e7c:	39c03fcc 	andi	r7,r7,255
10004e80:	003f6706 	br	10004c20 <__subdf3+0x6c>
10004e84:	4086b03a 	or	r3,r8,r2
10004e88:	18015226 	beq	r3,zero,100053d4 <__subdf3+0x820>
10004e8c:	00c00434 	movhi	r3,16
10004e90:	41400234 	orhi	r5,r8,8
10004e94:	18ffffc4 	addi	r3,r3,-1
10004e98:	28ca703a 	and	r5,r5,r3
10004e9c:	003f7e06 	br	10004c98 <__subdf3+0xe4>
10004ea0:	10bfffc4 	addi	r2,r2,-1
10004ea4:	1000491e 	bne	r2,zero,10004fcc <__subdf3+0x418>
10004ea8:	898fc83a 	sub	r7,r17,r6
10004eac:	89e3803a 	cmpltu	r17,r17,r7
10004eb0:	1947c83a 	sub	r3,r3,r5
10004eb4:	1c47c83a 	sub	r3,r3,r17
10004eb8:	3823883a 	mov	r17,r7
10004ebc:	003f9b06 	br	10004d2c <__subdf3+0x178>
10004ec0:	2988b03a 	or	r4,r5,r6
10004ec4:	203f5c26 	beq	r4,zero,10004c38 <__subdf3+0x84>
10004ec8:	10bfffc4 	addi	r2,r2,-1
10004ecc:	1000931e 	bne	r2,zero,1000511c <__subdf3+0x568>
10004ed0:	898d883a 	add	r6,r17,r6
10004ed4:	3463803a 	cmpltu	r17,r6,r17
10004ed8:	1947883a 	add	r3,r3,r5
10004edc:	88c7883a 	add	r3,r17,r3
10004ee0:	3023883a 	mov	r17,r6
10004ee4:	003fd306 	br	10004e34 <__subdf3+0x280>
10004ee8:	1000541e 	bne	r2,zero,1000503c <__subdf3+0x488>
10004eec:	80800044 	addi	r2,r16,1
10004ef0:	1081ffcc 	andi	r2,r2,2047
10004ef4:	01000044 	movi	r4,1
10004ef8:	2080a20e 	bge	r4,r2,10005184 <__subdf3+0x5d0>
10004efc:	8989c83a 	sub	r4,r17,r6
10004f00:	8905803a 	cmpltu	r2,r17,r4
10004f04:	1967c83a 	sub	r19,r3,r5
10004f08:	98a7c83a 	sub	r19,r19,r2
10004f0c:	9880202c 	andhi	r2,r19,128
10004f10:	10006326 	beq	r2,zero,100050a0 <__subdf3+0x4ec>
10004f14:	3463c83a 	sub	r17,r6,r17
10004f18:	28c7c83a 	sub	r3,r5,r3
10004f1c:	344d803a 	cmpltu	r6,r6,r17
10004f20:	19a7c83a 	sub	r19,r3,r6
10004f24:	3825883a 	mov	r18,r7
10004f28:	983f861e 	bne	r19,zero,10004d44 <__subdf3+0x190>
10004f2c:	8809883a 	mov	r4,r17
10004f30:	000560c0 	call	1000560c <__clzsi2>
10004f34:	10800804 	addi	r2,r2,32
10004f38:	113ffe04 	addi	r4,r2,-8
10004f3c:	00c007c4 	movi	r3,31
10004f40:	193f850e 	bge	r3,r4,10004d58 <__subdf3+0x1a4>
10004f44:	10bff604 	addi	r2,r2,-40
10004f48:	8884983a 	sll	r2,r17,r2
10004f4c:	0023883a 	mov	r17,zero
10004f50:	243f880e 	bge	r4,r16,10004d74 <__subdf3+0x1c0>
10004f54:	00ffe034 	movhi	r3,65408
10004f58:	18ffffc4 	addi	r3,r3,-1
10004f5c:	8121c83a 	sub	r16,r16,r4
10004f60:	10c6703a 	and	r3,r2,r3
10004f64:	003f3406 	br	10004c38 <__subdf3+0x84>
10004f68:	9100004c 	andi	r4,r18,1
10004f6c:	000b883a 	mov	r5,zero
10004f70:	0005883a 	mov	r2,zero
10004f74:	003f4806 	br	10004c98 <__subdf3+0xe4>
10004f78:	298cb03a 	or	r6,r5,r6
10004f7c:	300cc03a 	cmpne	r6,r6,zero
10004f80:	0005883a 	mov	r2,zero
10004f84:	003f6406 	br	10004d18 <__subdf3+0x164>
10004f88:	10009a1e 	bne	r2,zero,100051f4 <__subdf3+0x640>
10004f8c:	82400044 	addi	r9,r16,1
10004f90:	4881ffcc 	andi	r2,r9,2047
10004f94:	02800044 	movi	r10,1
10004f98:	5080670e 	bge	r10,r2,10005138 <__subdf3+0x584>
10004f9c:	0081ffc4 	movi	r2,2047
10004fa0:	4880af26 	beq	r9,r2,10005260 <__subdf3+0x6ac>
10004fa4:	898d883a 	add	r6,r17,r6
10004fa8:	1945883a 	add	r2,r3,r5
10004fac:	3447803a 	cmpltu	r3,r6,r17
10004fb0:	1887883a 	add	r3,r3,r2
10004fb4:	182297fa 	slli	r17,r3,31
10004fb8:	300cd07a 	srli	r6,r6,1
10004fbc:	1806d07a 	srli	r3,r3,1
10004fc0:	4821883a 	mov	r16,r9
10004fc4:	89a2b03a 	or	r17,r17,r6
10004fc8:	003f1b06 	br	10004c38 <__subdf3+0x84>
10004fcc:	0101ffc4 	movi	r4,2047
10004fd0:	813f441e 	bne	r16,r4,10004ce4 <__subdf3+0x130>
10004fd4:	003f1806 	br	10004c38 <__subdf3+0x84>
10004fd8:	843ff844 	addi	r16,r16,-31
10004fdc:	01400804 	movi	r5,32
10004fe0:	1408d83a 	srl	r4,r2,r16
10004fe4:	19405026 	beq	r3,r5,10005128 <__subdf3+0x574>
10004fe8:	01401004 	movi	r5,64
10004fec:	28c7c83a 	sub	r3,r5,r3
10004ff0:	10c4983a 	sll	r2,r2,r3
10004ff4:	88a2b03a 	or	r17,r17,r2
10004ff8:	8822c03a 	cmpne	r17,r17,zero
10004ffc:	2462b03a 	or	r17,r4,r17
10005000:	0007883a 	mov	r3,zero
10005004:	0021883a 	mov	r16,zero
10005008:	003f6d06 	br	10004dc0 <__subdf3+0x20c>
1000500c:	11fff804 	addi	r7,r2,-32
10005010:	01000804 	movi	r4,32
10005014:	29ced83a 	srl	r7,r5,r7
10005018:	11004526 	beq	r2,r4,10005130 <__subdf3+0x57c>
1000501c:	01001004 	movi	r4,64
10005020:	2089c83a 	sub	r4,r4,r2
10005024:	2904983a 	sll	r2,r5,r4
10005028:	118cb03a 	or	r6,r2,r6
1000502c:	300cc03a 	cmpne	r6,r6,zero
10005030:	398cb03a 	or	r6,r7,r6
10005034:	0005883a 	mov	r2,zero
10005038:	003f3706 	br	10004d18 <__subdf3+0x164>
1000503c:	80002a26 	beq	r16,zero,100050e8 <__subdf3+0x534>
10005040:	0101ffc4 	movi	r4,2047
10005044:	49006626 	beq	r9,r4,100051e0 <__subdf3+0x62c>
10005048:	0085c83a 	sub	r2,zero,r2
1000504c:	18c02034 	orhi	r3,r3,128
10005050:	01000e04 	movi	r4,56
10005054:	20807e16 	blt	r4,r2,10005250 <__subdf3+0x69c>
10005058:	010007c4 	movi	r4,31
1000505c:	2080e716 	blt	r4,r2,100053fc <__subdf3+0x848>
10005060:	01000804 	movi	r4,32
10005064:	2089c83a 	sub	r4,r4,r2
10005068:	1914983a 	sll	r10,r3,r4
1000506c:	8890d83a 	srl	r8,r17,r2
10005070:	8908983a 	sll	r4,r17,r4
10005074:	1884d83a 	srl	r2,r3,r2
10005078:	5222b03a 	or	r17,r10,r8
1000507c:	2006c03a 	cmpne	r3,r4,zero
10005080:	88e2b03a 	or	r17,r17,r3
10005084:	3463c83a 	sub	r17,r6,r17
10005088:	2885c83a 	sub	r2,r5,r2
1000508c:	344d803a 	cmpltu	r6,r6,r17
10005090:	1187c83a 	sub	r3,r2,r6
10005094:	4821883a 	mov	r16,r9
10005098:	3825883a 	mov	r18,r7
1000509c:	003f2306 	br	10004d2c <__subdf3+0x178>
100050a0:	24d0b03a 	or	r8,r4,r19
100050a4:	40001b1e 	bne	r8,zero,10005114 <__subdf3+0x560>
100050a8:	0005883a 	mov	r2,zero
100050ac:	0009883a 	mov	r4,zero
100050b0:	0021883a 	mov	r16,zero
100050b4:	003f4906 	br	10004ddc <__subdf3+0x228>
100050b8:	010007c4 	movi	r4,31
100050bc:	20803a16 	blt	r4,r2,100051a8 <__subdf3+0x5f4>
100050c0:	01000804 	movi	r4,32
100050c4:	2089c83a 	sub	r4,r4,r2
100050c8:	2912983a 	sll	r9,r5,r4
100050cc:	3090d83a 	srl	r8,r6,r2
100050d0:	3108983a 	sll	r4,r6,r4
100050d4:	2884d83a 	srl	r2,r5,r2
100050d8:	4a12b03a 	or	r9,r9,r8
100050dc:	2008c03a 	cmpne	r4,r4,zero
100050e0:	4912b03a 	or	r9,r9,r4
100050e4:	003f4e06 	br	10004e20 <__subdf3+0x26c>
100050e8:	1c48b03a 	or	r4,r3,r17
100050ec:	20003c26 	beq	r4,zero,100051e0 <__subdf3+0x62c>
100050f0:	0084303a 	nor	r2,zero,r2
100050f4:	1000381e 	bne	r2,zero,100051d8 <__subdf3+0x624>
100050f8:	3463c83a 	sub	r17,r6,r17
100050fc:	28c5c83a 	sub	r2,r5,r3
10005100:	344d803a 	cmpltu	r6,r6,r17
10005104:	1187c83a 	sub	r3,r2,r6
10005108:	4821883a 	mov	r16,r9
1000510c:	3825883a 	mov	r18,r7
10005110:	003f0606 	br	10004d2c <__subdf3+0x178>
10005114:	2023883a 	mov	r17,r4
10005118:	003f0906 	br	10004d40 <__subdf3+0x18c>
1000511c:	0101ffc4 	movi	r4,2047
10005120:	813f3a1e 	bne	r16,r4,10004e0c <__subdf3+0x258>
10005124:	003ec406 	br	10004c38 <__subdf3+0x84>
10005128:	0005883a 	mov	r2,zero
1000512c:	003fb106 	br	10004ff4 <__subdf3+0x440>
10005130:	0005883a 	mov	r2,zero
10005134:	003fbc06 	br	10005028 <__subdf3+0x474>
10005138:	1c44b03a 	or	r2,r3,r17
1000513c:	80008e1e 	bne	r16,zero,10005378 <__subdf3+0x7c4>
10005140:	1000c826 	beq	r2,zero,10005464 <__subdf3+0x8b0>
10005144:	2984b03a 	or	r2,r5,r6
10005148:	103ebb26 	beq	r2,zero,10004c38 <__subdf3+0x84>
1000514c:	8989883a 	add	r4,r17,r6
10005150:	1945883a 	add	r2,r3,r5
10005154:	2447803a 	cmpltu	r3,r4,r17
10005158:	1887883a 	add	r3,r3,r2
1000515c:	1880202c 	andhi	r2,r3,128
10005160:	2023883a 	mov	r17,r4
10005164:	103f1626 	beq	r2,zero,10004dc0 <__subdf3+0x20c>
10005168:	00bfe034 	movhi	r2,65408
1000516c:	10bfffc4 	addi	r2,r2,-1
10005170:	5021883a 	mov	r16,r10
10005174:	1886703a 	and	r3,r3,r2
10005178:	003eaf06 	br	10004c38 <__subdf3+0x84>
1000517c:	3825883a 	mov	r18,r7
10005180:	003f0f06 	br	10004dc0 <__subdf3+0x20c>
10005184:	1c44b03a 	or	r2,r3,r17
10005188:	8000251e 	bne	r16,zero,10005220 <__subdf3+0x66c>
1000518c:	1000661e 	bne	r2,zero,10005328 <__subdf3+0x774>
10005190:	2990b03a 	or	r8,r5,r6
10005194:	40009626 	beq	r8,zero,100053f0 <__subdf3+0x83c>
10005198:	2807883a 	mov	r3,r5
1000519c:	3023883a 	mov	r17,r6
100051a0:	3825883a 	mov	r18,r7
100051a4:	003ea406 	br	10004c38 <__subdf3+0x84>
100051a8:	127ff804 	addi	r9,r2,-32
100051ac:	01000804 	movi	r4,32
100051b0:	2a52d83a 	srl	r9,r5,r9
100051b4:	11008c26 	beq	r2,r4,100053e8 <__subdf3+0x834>
100051b8:	01001004 	movi	r4,64
100051bc:	2085c83a 	sub	r2,r4,r2
100051c0:	2884983a 	sll	r2,r5,r2
100051c4:	118cb03a 	or	r6,r2,r6
100051c8:	300cc03a 	cmpne	r6,r6,zero
100051cc:	4992b03a 	or	r9,r9,r6
100051d0:	0005883a 	mov	r2,zero
100051d4:	003f1206 	br	10004e20 <__subdf3+0x26c>
100051d8:	0101ffc4 	movi	r4,2047
100051dc:	493f9c1e 	bne	r9,r4,10005050 <__subdf3+0x49c>
100051e0:	2807883a 	mov	r3,r5
100051e4:	3023883a 	mov	r17,r6
100051e8:	4821883a 	mov	r16,r9
100051ec:	3825883a 	mov	r18,r7
100051f0:	003e9106 	br	10004c38 <__subdf3+0x84>
100051f4:	80001f1e 	bne	r16,zero,10005274 <__subdf3+0x6c0>
100051f8:	1c48b03a 	or	r4,r3,r17
100051fc:	20005a26 	beq	r4,zero,10005368 <__subdf3+0x7b4>
10005200:	0084303a 	nor	r2,zero,r2
10005204:	1000561e 	bne	r2,zero,10005360 <__subdf3+0x7ac>
10005208:	89a3883a 	add	r17,r17,r6
1000520c:	1945883a 	add	r2,r3,r5
10005210:	898d803a 	cmpltu	r6,r17,r6
10005214:	3087883a 	add	r3,r6,r2
10005218:	4821883a 	mov	r16,r9
1000521c:	003f0506 	br	10004e34 <__subdf3+0x280>
10005220:	10002b1e 	bne	r2,zero,100052d0 <__subdf3+0x71c>
10005224:	2984b03a 	or	r2,r5,r6
10005228:	10008026 	beq	r2,zero,1000542c <__subdf3+0x878>
1000522c:	2807883a 	mov	r3,r5
10005230:	3023883a 	mov	r17,r6
10005234:	3825883a 	mov	r18,r7
10005238:	0401ffc4 	movi	r16,2047
1000523c:	003e7e06 	br	10004c38 <__subdf3+0x84>
10005240:	3809883a 	mov	r4,r7
10005244:	0011883a 	mov	r8,zero
10005248:	0005883a 	mov	r2,zero
1000524c:	003ee306 	br	10004ddc <__subdf3+0x228>
10005250:	1c62b03a 	or	r17,r3,r17
10005254:	8822c03a 	cmpne	r17,r17,zero
10005258:	0005883a 	mov	r2,zero
1000525c:	003f8906 	br	10005084 <__subdf3+0x4d0>
10005260:	3809883a 	mov	r4,r7
10005264:	4821883a 	mov	r16,r9
10005268:	0011883a 	mov	r8,zero
1000526c:	0005883a 	mov	r2,zero
10005270:	003eda06 	br	10004ddc <__subdf3+0x228>
10005274:	0101ffc4 	movi	r4,2047
10005278:	49003b26 	beq	r9,r4,10005368 <__subdf3+0x7b4>
1000527c:	0085c83a 	sub	r2,zero,r2
10005280:	18c02034 	orhi	r3,r3,128
10005284:	01000e04 	movi	r4,56
10005288:	20806e16 	blt	r4,r2,10005444 <__subdf3+0x890>
1000528c:	010007c4 	movi	r4,31
10005290:	20807716 	blt	r4,r2,10005470 <__subdf3+0x8bc>
10005294:	01000804 	movi	r4,32
10005298:	2089c83a 	sub	r4,r4,r2
1000529c:	1914983a 	sll	r10,r3,r4
100052a0:	8890d83a 	srl	r8,r17,r2
100052a4:	8908983a 	sll	r4,r17,r4
100052a8:	1884d83a 	srl	r2,r3,r2
100052ac:	5222b03a 	or	r17,r10,r8
100052b0:	2006c03a 	cmpne	r3,r4,zero
100052b4:	88e2b03a 	or	r17,r17,r3
100052b8:	89a3883a 	add	r17,r17,r6
100052bc:	1145883a 	add	r2,r2,r5
100052c0:	898d803a 	cmpltu	r6,r17,r6
100052c4:	3087883a 	add	r3,r6,r2
100052c8:	4821883a 	mov	r16,r9
100052cc:	003ed906 	br	10004e34 <__subdf3+0x280>
100052d0:	2984b03a 	or	r2,r5,r6
100052d4:	10004226 	beq	r2,zero,100053e0 <__subdf3+0x82c>
100052d8:	1808d0fa 	srli	r4,r3,3
100052dc:	8822d0fa 	srli	r17,r17,3
100052e0:	1806977a 	slli	r3,r3,29
100052e4:	2080022c 	andhi	r2,r4,8
100052e8:	1c62b03a 	or	r17,r3,r17
100052ec:	10000826 	beq	r2,zero,10005310 <__subdf3+0x75c>
100052f0:	2812d0fa 	srli	r9,r5,3
100052f4:	4880022c 	andhi	r2,r9,8
100052f8:	1000051e 	bne	r2,zero,10005310 <__subdf3+0x75c>
100052fc:	300cd0fa 	srli	r6,r6,3
10005300:	2804977a 	slli	r2,r5,29
10005304:	4809883a 	mov	r4,r9
10005308:	3825883a 	mov	r18,r7
1000530c:	11a2b03a 	or	r17,r2,r6
10005310:	8806d77a 	srli	r3,r17,29
10005314:	200890fa 	slli	r4,r4,3
10005318:	882290fa 	slli	r17,r17,3
1000531c:	0401ffc4 	movi	r16,2047
10005320:	1906b03a 	or	r3,r3,r4
10005324:	003e4406 	br	10004c38 <__subdf3+0x84>
10005328:	2984b03a 	or	r2,r5,r6
1000532c:	103e4226 	beq	r2,zero,10004c38 <__subdf3+0x84>
10005330:	8989c83a 	sub	r4,r17,r6
10005334:	8911803a 	cmpltu	r8,r17,r4
10005338:	1945c83a 	sub	r2,r3,r5
1000533c:	1205c83a 	sub	r2,r2,r8
10005340:	1200202c 	andhi	r8,r2,128
10005344:	403e9a26 	beq	r8,zero,10004db0 <__subdf3+0x1fc>
10005348:	3463c83a 	sub	r17,r6,r17
1000534c:	28c5c83a 	sub	r2,r5,r3
10005350:	344d803a 	cmpltu	r6,r6,r17
10005354:	1187c83a 	sub	r3,r2,r6
10005358:	3825883a 	mov	r18,r7
1000535c:	003e3606 	br	10004c38 <__subdf3+0x84>
10005360:	0101ffc4 	movi	r4,2047
10005364:	493fc71e 	bne	r9,r4,10005284 <__subdf3+0x6d0>
10005368:	2807883a 	mov	r3,r5
1000536c:	3023883a 	mov	r17,r6
10005370:	4821883a 	mov	r16,r9
10005374:	003e3006 	br	10004c38 <__subdf3+0x84>
10005378:	10003626 	beq	r2,zero,10005454 <__subdf3+0x8a0>
1000537c:	2984b03a 	or	r2,r5,r6
10005380:	10001726 	beq	r2,zero,100053e0 <__subdf3+0x82c>
10005384:	1808d0fa 	srli	r4,r3,3
10005388:	8822d0fa 	srli	r17,r17,3
1000538c:	1806977a 	slli	r3,r3,29
10005390:	2080022c 	andhi	r2,r4,8
10005394:	1c62b03a 	or	r17,r3,r17
10005398:	10000726 	beq	r2,zero,100053b8 <__subdf3+0x804>
1000539c:	2812d0fa 	srli	r9,r5,3
100053a0:	4880022c 	andhi	r2,r9,8
100053a4:	1000041e 	bne	r2,zero,100053b8 <__subdf3+0x804>
100053a8:	300cd0fa 	srli	r6,r6,3
100053ac:	2804977a 	slli	r2,r5,29
100053b0:	4809883a 	mov	r4,r9
100053b4:	11a2b03a 	or	r17,r2,r6
100053b8:	8806d77a 	srli	r3,r17,29
100053bc:	200890fa 	slli	r4,r4,3
100053c0:	882290fa 	slli	r17,r17,3
100053c4:	3825883a 	mov	r18,r7
100053c8:	1906b03a 	or	r3,r3,r4
100053cc:	0401ffc4 	movi	r16,2047
100053d0:	003e1906 	br	10004c38 <__subdf3+0x84>
100053d4:	000b883a 	mov	r5,zero
100053d8:	0005883a 	mov	r2,zero
100053dc:	003e2e06 	br	10004c98 <__subdf3+0xe4>
100053e0:	0401ffc4 	movi	r16,2047
100053e4:	003e1406 	br	10004c38 <__subdf3+0x84>
100053e8:	0005883a 	mov	r2,zero
100053ec:	003f7506 	br	100051c4 <__subdf3+0x610>
100053f0:	0005883a 	mov	r2,zero
100053f4:	0009883a 	mov	r4,zero
100053f8:	003e7806 	br	10004ddc <__subdf3+0x228>
100053fc:	123ff804 	addi	r8,r2,-32
10005400:	01000804 	movi	r4,32
10005404:	1a10d83a 	srl	r8,r3,r8
10005408:	11002526 	beq	r2,r4,100054a0 <__subdf3+0x8ec>
1000540c:	01001004 	movi	r4,64
10005410:	2085c83a 	sub	r2,r4,r2
10005414:	1884983a 	sll	r2,r3,r2
10005418:	1444b03a 	or	r2,r2,r17
1000541c:	1004c03a 	cmpne	r2,r2,zero
10005420:	40a2b03a 	or	r17,r8,r2
10005424:	0005883a 	mov	r2,zero
10005428:	003f1606 	br	10005084 <__subdf3+0x4d0>
1000542c:	02000434 	movhi	r8,16
10005430:	0009883a 	mov	r4,zero
10005434:	423fffc4 	addi	r8,r8,-1
10005438:	00bfffc4 	movi	r2,-1
1000543c:	0401ffc4 	movi	r16,2047
10005440:	003e6606 	br	10004ddc <__subdf3+0x228>
10005444:	1c62b03a 	or	r17,r3,r17
10005448:	8822c03a 	cmpne	r17,r17,zero
1000544c:	0005883a 	mov	r2,zero
10005450:	003f9906 	br	100052b8 <__subdf3+0x704>
10005454:	2807883a 	mov	r3,r5
10005458:	3023883a 	mov	r17,r6
1000545c:	0401ffc4 	movi	r16,2047
10005460:	003df506 	br	10004c38 <__subdf3+0x84>
10005464:	2807883a 	mov	r3,r5
10005468:	3023883a 	mov	r17,r6
1000546c:	003df206 	br	10004c38 <__subdf3+0x84>
10005470:	123ff804 	addi	r8,r2,-32
10005474:	01000804 	movi	r4,32
10005478:	1a10d83a 	srl	r8,r3,r8
1000547c:	11000a26 	beq	r2,r4,100054a8 <__subdf3+0x8f4>
10005480:	01001004 	movi	r4,64
10005484:	2085c83a 	sub	r2,r4,r2
10005488:	1884983a 	sll	r2,r3,r2
1000548c:	1444b03a 	or	r2,r2,r17
10005490:	1004c03a 	cmpne	r2,r2,zero
10005494:	40a2b03a 	or	r17,r8,r2
10005498:	0005883a 	mov	r2,zero
1000549c:	003f8606 	br	100052b8 <__subdf3+0x704>
100054a0:	0005883a 	mov	r2,zero
100054a4:	003fdc06 	br	10005418 <__subdf3+0x864>
100054a8:	0005883a 	mov	r2,zero
100054ac:	003ff706 	br	1000548c <__subdf3+0x8d8>

100054b0 <__fixdfsi>:
100054b0:	280cd53a 	srli	r6,r5,20
100054b4:	00c00434 	movhi	r3,16
100054b8:	18ffffc4 	addi	r3,r3,-1
100054bc:	3181ffcc 	andi	r6,r6,2047
100054c0:	01c0ff84 	movi	r7,1022
100054c4:	28c6703a 	and	r3,r5,r3
100054c8:	280ad7fa 	srli	r5,r5,31
100054cc:	3980120e 	bge	r7,r6,10005518 <__fixdfsi+0x68>
100054d0:	00810744 	movi	r2,1053
100054d4:	11800c16 	blt	r2,r6,10005508 <__fixdfsi+0x58>
100054d8:	00810cc4 	movi	r2,1075
100054dc:	1185c83a 	sub	r2,r2,r6
100054e0:	01c007c4 	movi	r7,31
100054e4:	18c00434 	orhi	r3,r3,16
100054e8:	38800d16 	blt	r7,r2,10005520 <__fixdfsi+0x70>
100054ec:	31befb44 	addi	r6,r6,-1043
100054f0:	2084d83a 	srl	r2,r4,r2
100054f4:	1986983a 	sll	r3,r3,r6
100054f8:	1884b03a 	or	r2,r3,r2
100054fc:	28000726 	beq	r5,zero,1000551c <__fixdfsi+0x6c>
10005500:	0085c83a 	sub	r2,zero,r2
10005504:	f800283a 	ret
10005508:	00a00034 	movhi	r2,32768
1000550c:	10bfffc4 	addi	r2,r2,-1
10005510:	2885883a 	add	r2,r5,r2
10005514:	f800283a 	ret
10005518:	0005883a 	mov	r2,zero
1000551c:	f800283a 	ret
10005520:	008104c4 	movi	r2,1043
10005524:	1185c83a 	sub	r2,r2,r6
10005528:	1884d83a 	srl	r2,r3,r2
1000552c:	003ff306 	br	100054fc <__fixdfsi+0x4c>

10005530 <__floatsidf>:
10005530:	defffd04 	addi	sp,sp,-12
10005534:	dfc00215 	stw	ra,8(sp)
10005538:	dc400115 	stw	r17,4(sp)
1000553c:	dc000015 	stw	r16,0(sp)
10005540:	20002b26 	beq	r4,zero,100055f0 <__floatsidf+0xc0>
10005544:	2023883a 	mov	r17,r4
10005548:	2020d7fa 	srli	r16,r4,31
1000554c:	20002d16 	blt	r4,zero,10005604 <__floatsidf+0xd4>
10005550:	8809883a 	mov	r4,r17
10005554:	000560c0 	call	1000560c <__clzsi2>
10005558:	01410784 	movi	r5,1054
1000555c:	288bc83a 	sub	r5,r5,r2
10005560:	01010cc4 	movi	r4,1075
10005564:	2149c83a 	sub	r4,r4,r5
10005568:	00c007c4 	movi	r3,31
1000556c:	1900160e 	bge	r3,r4,100055c8 <__floatsidf+0x98>
10005570:	00c104c4 	movi	r3,1043
10005574:	1947c83a 	sub	r3,r3,r5
10005578:	88c6983a 	sll	r3,r17,r3
1000557c:	00800434 	movhi	r2,16
10005580:	10bfffc4 	addi	r2,r2,-1
10005584:	1886703a 	and	r3,r3,r2
10005588:	2941ffcc 	andi	r5,r5,2047
1000558c:	800d883a 	mov	r6,r16
10005590:	0005883a 	mov	r2,zero
10005594:	280a953a 	slli	r5,r5,20
10005598:	31803fcc 	andi	r6,r6,255
1000559c:	01000434 	movhi	r4,16
100055a0:	300c97fa 	slli	r6,r6,31
100055a4:	213fffc4 	addi	r4,r4,-1
100055a8:	1906703a 	and	r3,r3,r4
100055ac:	1946b03a 	or	r3,r3,r5
100055b0:	1986b03a 	or	r3,r3,r6
100055b4:	dfc00217 	ldw	ra,8(sp)
100055b8:	dc400117 	ldw	r17,4(sp)
100055bc:	dc000017 	ldw	r16,0(sp)
100055c0:	dec00304 	addi	sp,sp,12
100055c4:	f800283a 	ret
100055c8:	00c002c4 	movi	r3,11
100055cc:	1887c83a 	sub	r3,r3,r2
100055d0:	88c6d83a 	srl	r3,r17,r3
100055d4:	8904983a 	sll	r2,r17,r4
100055d8:	01000434 	movhi	r4,16
100055dc:	213fffc4 	addi	r4,r4,-1
100055e0:	2941ffcc 	andi	r5,r5,2047
100055e4:	1906703a 	and	r3,r3,r4
100055e8:	800d883a 	mov	r6,r16
100055ec:	003fe906 	br	10005594 <__floatsidf+0x64>
100055f0:	000d883a 	mov	r6,zero
100055f4:	000b883a 	mov	r5,zero
100055f8:	0007883a 	mov	r3,zero
100055fc:	0005883a 	mov	r2,zero
10005600:	003fe406 	br	10005594 <__floatsidf+0x64>
10005604:	0123c83a 	sub	r17,zero,r4
10005608:	003fd106 	br	10005550 <__floatsidf+0x20>

1000560c <__clzsi2>:
1000560c:	00bfffd4 	movui	r2,65535
10005610:	11000536 	bltu	r2,r4,10005628 <__clzsi2+0x1c>
10005614:	00803fc4 	movi	r2,255
10005618:	11000f36 	bltu	r2,r4,10005658 <__clzsi2+0x4c>
1000561c:	00800804 	movi	r2,32
10005620:	0007883a 	mov	r3,zero
10005624:	00000506 	br	1000563c <__clzsi2+0x30>
10005628:	00804034 	movhi	r2,256
1000562c:	10bfffc4 	addi	r2,r2,-1
10005630:	11000c2e 	bgeu	r2,r4,10005664 <__clzsi2+0x58>
10005634:	00800204 	movi	r2,8
10005638:	00c00604 	movi	r3,24
1000563c:	20c8d83a 	srl	r4,r4,r3
10005640:	00c40774 	movhi	r3,4125
10005644:	18e4c904 	addi	r3,r3,-27868
10005648:	1909883a 	add	r4,r3,r4
1000564c:	20c00003 	ldbu	r3,0(r4)
10005650:	10c5c83a 	sub	r2,r2,r3
10005654:	f800283a 	ret
10005658:	00800604 	movi	r2,24
1000565c:	00c00204 	movi	r3,8
10005660:	003ff606 	br	1000563c <__clzsi2+0x30>
10005664:	00800404 	movi	r2,16
10005668:	1007883a 	mov	r3,r2
1000566c:	003ff306 	br	1000563c <__clzsi2+0x30>

10005670 <_printf_r>:
10005670:	defffd04 	addi	sp,sp,-12
10005674:	dfc00015 	stw	ra,0(sp)
10005678:	d9800115 	stw	r6,4(sp)
1000567c:	d9c00215 	stw	r7,8(sp)
10005680:	20c00217 	ldw	r3,8(r4)
10005684:	01840034 	movhi	r6,4096
10005688:	31975504 	addi	r6,r6,23892
1000568c:	19800115 	stw	r6,4(r3)
10005690:	280d883a 	mov	r6,r5
10005694:	21400217 	ldw	r5,8(r4)
10005698:	d9c00104 	addi	r7,sp,4
1000569c:	00058140 	call	10005814 <___vfprintf_internal_r>
100056a0:	dfc00017 	ldw	ra,0(sp)
100056a4:	dec00304 	addi	sp,sp,12
100056a8:	f800283a 	ret

100056ac <printf>:
100056ac:	defffc04 	addi	sp,sp,-16
100056b0:	dfc00015 	stw	ra,0(sp)
100056b4:	d9400115 	stw	r5,4(sp)
100056b8:	d9800215 	stw	r6,8(sp)
100056bc:	d9c00315 	stw	r7,12(sp)
100056c0:	00840774 	movhi	r2,4125
100056c4:	10a5af04 	addi	r2,r2,-26948
100056c8:	10800017 	ldw	r2,0(r2)
100056cc:	01440034 	movhi	r5,4096
100056d0:	29575504 	addi	r5,r5,23892
100056d4:	10c00217 	ldw	r3,8(r2)
100056d8:	d9800104 	addi	r6,sp,4
100056dc:	19400115 	stw	r5,4(r3)
100056e0:	200b883a 	mov	r5,r4
100056e4:	11000217 	ldw	r4,8(r2)
100056e8:	0005d380 	call	10005d38 <__vfprintf_internal>
100056ec:	dfc00017 	ldw	ra,0(sp)
100056f0:	dec00404 	addi	sp,sp,16
100056f4:	f800283a 	ret

100056f8 <_puts_r>:
100056f8:	defffd04 	addi	sp,sp,-12
100056fc:	dc000015 	stw	r16,0(sp)
10005700:	2021883a 	mov	r16,r4
10005704:	2809883a 	mov	r4,r5
10005708:	dfc00215 	stw	ra,8(sp)
1000570c:	dc400115 	stw	r17,4(sp)
10005710:	2823883a 	mov	r17,r5
10005714:	000578c0 	call	1000578c <strlen>
10005718:	81400217 	ldw	r5,8(r16)
1000571c:	01040034 	movhi	r4,4096
10005720:	21175504 	addi	r4,r4,23892
10005724:	29000115 	stw	r4,4(r5)
10005728:	100f883a 	mov	r7,r2
1000572c:	880d883a 	mov	r6,r17
10005730:	8009883a 	mov	r4,r16
10005734:	0005d540 	call	10005d54 <__sfvwrite_small_dev>
10005738:	00ffffc4 	movi	r3,-1
1000573c:	10c00926 	beq	r2,r3,10005764 <_puts_r+0x6c>
10005740:	81400217 	ldw	r5,8(r16)
10005744:	01840034 	movhi	r6,4096
10005748:	01c00044 	movi	r7,1
1000574c:	28800117 	ldw	r2,4(r5)
10005750:	319c3404 	addi	r6,r6,28880
10005754:	8009883a 	mov	r4,r16
10005758:	103ee83a 	callr	r2
1000575c:	10bfffe0 	cmpeqi	r2,r2,-1
10005760:	0085c83a 	sub	r2,zero,r2
10005764:	dfc00217 	ldw	ra,8(sp)
10005768:	dc400117 	ldw	r17,4(sp)
1000576c:	dc000017 	ldw	r16,0(sp)
10005770:	dec00304 	addi	sp,sp,12
10005774:	f800283a 	ret

10005778 <puts>:
10005778:	00840774 	movhi	r2,4125
1000577c:	10a5af04 	addi	r2,r2,-26948
10005780:	200b883a 	mov	r5,r4
10005784:	11000017 	ldw	r4,0(r2)
10005788:	00056f81 	jmpi	100056f8 <_puts_r>

1000578c <strlen>:
1000578c:	2005883a 	mov	r2,r4
10005790:	10c00007 	ldb	r3,0(r2)
10005794:	18000226 	beq	r3,zero,100057a0 <strlen+0x14>
10005798:	10800044 	addi	r2,r2,1
1000579c:	003ffc06 	br	10005790 <strlen+0x4>
100057a0:	1105c83a 	sub	r2,r2,r4
100057a4:	f800283a 	ret

100057a8 <print_repeat>:
100057a8:	defffb04 	addi	sp,sp,-20
100057ac:	dc800315 	stw	r18,12(sp)
100057b0:	dc400215 	stw	r17,8(sp)
100057b4:	dc000115 	stw	r16,4(sp)
100057b8:	dfc00415 	stw	ra,16(sp)
100057bc:	2025883a 	mov	r18,r4
100057c0:	2823883a 	mov	r17,r5
100057c4:	d9800005 	stb	r6,0(sp)
100057c8:	3821883a 	mov	r16,r7
100057cc:	04000a0e 	bge	zero,r16,100057f8 <print_repeat+0x50>
100057d0:	88800117 	ldw	r2,4(r17)
100057d4:	01c00044 	movi	r7,1
100057d8:	d80d883a 	mov	r6,sp
100057dc:	880b883a 	mov	r5,r17
100057e0:	9009883a 	mov	r4,r18
100057e4:	103ee83a 	callr	r2
100057e8:	843fffc4 	addi	r16,r16,-1
100057ec:	103ff726 	beq	r2,zero,100057cc <print_repeat+0x24>
100057f0:	00bfffc4 	movi	r2,-1
100057f4:	00000106 	br	100057fc <print_repeat+0x54>
100057f8:	0005883a 	mov	r2,zero
100057fc:	dfc00417 	ldw	ra,16(sp)
10005800:	dc800317 	ldw	r18,12(sp)
10005804:	dc400217 	ldw	r17,8(sp)
10005808:	dc000117 	ldw	r16,4(sp)
1000580c:	dec00504 	addi	sp,sp,20
10005810:	f800283a 	ret

10005814 <___vfprintf_internal_r>:
10005814:	deffe504 	addi	sp,sp,-108
10005818:	d8c00804 	addi	r3,sp,32
1000581c:	df001915 	stw	fp,100(sp)
10005820:	ddc01815 	stw	r23,96(sp)
10005824:	dd801715 	stw	r22,92(sp)
10005828:	dd401615 	stw	r21,88(sp)
1000582c:	dd001515 	stw	r20,84(sp)
10005830:	dcc01415 	stw	r19,80(sp)
10005834:	dc801315 	stw	r18,76(sp)
10005838:	dc401215 	stw	r17,72(sp)
1000583c:	dc001115 	stw	r16,68(sp)
10005840:	dfc01a15 	stw	ra,104(sp)
10005844:	2027883a 	mov	r19,r4
10005848:	2839883a 	mov	fp,r5
1000584c:	382d883a 	mov	r22,r7
10005850:	d9800f15 	stw	r6,60(sp)
10005854:	0021883a 	mov	r16,zero
10005858:	d8000e15 	stw	zero,56(sp)
1000585c:	002f883a 	mov	r23,zero
10005860:	002b883a 	mov	r21,zero
10005864:	0025883a 	mov	r18,zero
10005868:	0023883a 	mov	r17,zero
1000586c:	d8000c15 	stw	zero,48(sp)
10005870:	d8000b15 	stw	zero,44(sp)
10005874:	0029883a 	mov	r20,zero
10005878:	d8c00915 	stw	r3,36(sp)
1000587c:	d8c00f17 	ldw	r3,60(sp)
10005880:	19000003 	ldbu	r4,0(r3)
10005884:	20803fcc 	andi	r2,r4,255
10005888:	1080201c 	xori	r2,r2,128
1000588c:	10bfe004 	addi	r2,r2,-128
10005890:	10011c26 	beq	r2,zero,10005d04 <___vfprintf_internal_r+0x4f0>
10005894:	00c00044 	movi	r3,1
10005898:	a0c01426 	beq	r20,r3,100058ec <___vfprintf_internal_r+0xd8>
1000589c:	1d000216 	blt	r3,r20,100058a8 <___vfprintf_internal_r+0x94>
100058a0:	a0000626 	beq	r20,zero,100058bc <___vfprintf_internal_r+0xa8>
100058a4:	00011306 	br	10005cf4 <___vfprintf_internal_r+0x4e0>
100058a8:	01400084 	movi	r5,2
100058ac:	a1401d26 	beq	r20,r5,10005924 <___vfprintf_internal_r+0x110>
100058b0:	014000c4 	movi	r5,3
100058b4:	a1402926 	beq	r20,r5,1000595c <___vfprintf_internal_r+0x148>
100058b8:	00010e06 	br	10005cf4 <___vfprintf_internal_r+0x4e0>
100058bc:	01400944 	movi	r5,37
100058c0:	1140fb26 	beq	r2,r5,10005cb0 <___vfprintf_internal_r+0x49c>
100058c4:	e0800117 	ldw	r2,4(fp)
100058c8:	d9000005 	stb	r4,0(sp)
100058cc:	01c00044 	movi	r7,1
100058d0:	d80d883a 	mov	r6,sp
100058d4:	e00b883a 	mov	r5,fp
100058d8:	9809883a 	mov	r4,r19
100058dc:	103ee83a 	callr	r2
100058e0:	1000d61e 	bne	r2,zero,10005c3c <___vfprintf_internal_r+0x428>
100058e4:	84000044 	addi	r16,r16,1
100058e8:	00010206 	br	10005cf4 <___vfprintf_internal_r+0x4e0>
100058ec:	01400c04 	movi	r5,48
100058f0:	1140f826 	beq	r2,r5,10005cd4 <___vfprintf_internal_r+0x4c0>
100058f4:	01400944 	movi	r5,37
100058f8:	11400a1e 	bne	r2,r5,10005924 <___vfprintf_internal_r+0x110>
100058fc:	d8800005 	stb	r2,0(sp)
10005900:	e0800117 	ldw	r2,4(fp)
10005904:	a00f883a 	mov	r7,r20
10005908:	d80d883a 	mov	r6,sp
1000590c:	e00b883a 	mov	r5,fp
10005910:	9809883a 	mov	r4,r19
10005914:	103ee83a 	callr	r2
10005918:	1000c81e 	bne	r2,zero,10005c3c <___vfprintf_internal_r+0x428>
1000591c:	84000044 	addi	r16,r16,1
10005920:	0000f306 	br	10005cf0 <___vfprintf_internal_r+0x4dc>
10005924:	217ff404 	addi	r5,r4,-48
10005928:	29403fcc 	andi	r5,r5,255
1000592c:	00c00244 	movi	r3,9
10005930:	19400736 	bltu	r3,r5,10005950 <___vfprintf_internal_r+0x13c>
10005934:	00bfffc4 	movi	r2,-1
10005938:	88800226 	beq	r17,r2,10005944 <___vfprintf_internal_r+0x130>
1000593c:	8c4002a4 	muli	r17,r17,10
10005940:	00000106 	br	10005948 <___vfprintf_internal_r+0x134>
10005944:	0023883a 	mov	r17,zero
10005948:	2c63883a 	add	r17,r5,r17
1000594c:	0000e206 	br	10005cd8 <___vfprintf_internal_r+0x4c4>
10005950:	01400b84 	movi	r5,46
10005954:	1140e426 	beq	r2,r5,10005ce8 <___vfprintf_internal_r+0x4d4>
10005958:	05000084 	movi	r20,2
1000595c:	213ff404 	addi	r4,r4,-48
10005960:	21003fcc 	andi	r4,r4,255
10005964:	00c00244 	movi	r3,9
10005968:	19000736 	bltu	r3,r4,10005988 <___vfprintf_internal_r+0x174>
1000596c:	00bfffc4 	movi	r2,-1
10005970:	90800226 	beq	r18,r2,1000597c <___vfprintf_internal_r+0x168>
10005974:	948002a4 	muli	r18,r18,10
10005978:	00000106 	br	10005980 <___vfprintf_internal_r+0x16c>
1000597c:	0025883a 	mov	r18,zero
10005980:	24a5883a 	add	r18,r4,r18
10005984:	0000db06 	br	10005cf4 <___vfprintf_internal_r+0x4e0>
10005988:	00c01b04 	movi	r3,108
1000598c:	10c0d426 	beq	r2,r3,10005ce0 <___vfprintf_internal_r+0x4cc>
10005990:	013fffc4 	movi	r4,-1
10005994:	91000226 	beq	r18,r4,100059a0 <___vfprintf_internal_r+0x18c>
10005998:	d8000b15 	stw	zero,44(sp)
1000599c:	00000106 	br	100059a4 <___vfprintf_internal_r+0x190>
100059a0:	04800044 	movi	r18,1
100059a4:	01001a44 	movi	r4,105
100059a8:	11001626 	beq	r2,r4,10005a04 <___vfprintf_internal_r+0x1f0>
100059ac:	20800916 	blt	r4,r2,100059d4 <___vfprintf_internal_r+0x1c0>
100059b0:	010018c4 	movi	r4,99
100059b4:	11008a26 	beq	r2,r4,10005be0 <___vfprintf_internal_r+0x3cc>
100059b8:	01001904 	movi	r4,100
100059bc:	11001126 	beq	r2,r4,10005a04 <___vfprintf_internal_r+0x1f0>
100059c0:	01001604 	movi	r4,88
100059c4:	1100ca1e 	bne	r2,r4,10005cf0 <___vfprintf_internal_r+0x4dc>
100059c8:	00c00044 	movi	r3,1
100059cc:	d8c00e15 	stw	r3,56(sp)
100059d0:	00001406 	br	10005a24 <___vfprintf_internal_r+0x210>
100059d4:	01001cc4 	movi	r4,115
100059d8:	11009a26 	beq	r2,r4,10005c44 <___vfprintf_internal_r+0x430>
100059dc:	20800416 	blt	r4,r2,100059f0 <___vfprintf_internal_r+0x1dc>
100059e0:	01001bc4 	movi	r4,111
100059e4:	1100c21e 	bne	r2,r4,10005cf0 <___vfprintf_internal_r+0x4dc>
100059e8:	05400204 	movi	r21,8
100059ec:	00000e06 	br	10005a28 <___vfprintf_internal_r+0x214>
100059f0:	01001d44 	movi	r4,117
100059f4:	11000c26 	beq	r2,r4,10005a28 <___vfprintf_internal_r+0x214>
100059f8:	01001e04 	movi	r4,120
100059fc:	11000926 	beq	r2,r4,10005a24 <___vfprintf_internal_r+0x210>
10005a00:	0000bb06 	br	10005cf0 <___vfprintf_internal_r+0x4dc>
10005a04:	b5000104 	addi	r20,r22,4
10005a08:	b8000726 	beq	r23,zero,10005a28 <___vfprintf_internal_r+0x214>
10005a0c:	dd000d15 	stw	r20,52(sp)
10005a10:	b5800017 	ldw	r22,0(r22)
10005a14:	b000080e 	bge	r22,zero,10005a38 <___vfprintf_internal_r+0x224>
10005a18:	05adc83a 	sub	r22,zero,r22
10005a1c:	02800044 	movi	r10,1
10005a20:	00000606 	br	10005a3c <___vfprintf_internal_r+0x228>
10005a24:	05400404 	movi	r21,16
10005a28:	b0c00104 	addi	r3,r22,4
10005a2c:	d8c00d15 	stw	r3,52(sp)
10005a30:	b5800017 	ldw	r22,0(r22)
10005a34:	002f883a 	mov	r23,zero
10005a38:	0015883a 	mov	r10,zero
10005a3c:	d829883a 	mov	r20,sp
10005a40:	b0001426 	beq	r22,zero,10005a94 <___vfprintf_internal_r+0x280>
10005a44:	b009883a 	mov	r4,r22
10005a48:	a80b883a 	mov	r5,r21
10005a4c:	da801015 	stw	r10,64(sp)
10005a50:	0002ff40 	call	10002ff4 <__udivsi3>
10005a54:	1549383a 	mul	r4,r2,r21
10005a58:	00c00244 	movi	r3,9
10005a5c:	da801017 	ldw	r10,64(sp)
10005a60:	b12dc83a 	sub	r22,r22,r4
10005a64:	1d800216 	blt	r3,r22,10005a70 <___vfprintf_internal_r+0x25c>
10005a68:	b5800c04 	addi	r22,r22,48
10005a6c:	00000506 	br	10005a84 <___vfprintf_internal_r+0x270>
10005a70:	d8c00e17 	ldw	r3,56(sp)
10005a74:	18000226 	beq	r3,zero,10005a80 <___vfprintf_internal_r+0x26c>
10005a78:	b5800dc4 	addi	r22,r22,55
10005a7c:	00000106 	br	10005a84 <___vfprintf_internal_r+0x270>
10005a80:	b58015c4 	addi	r22,r22,87
10005a84:	a5800005 	stb	r22,0(r20)
10005a88:	a5000044 	addi	r20,r20,1
10005a8c:	102d883a 	mov	r22,r2
10005a90:	003feb06 	br	10005a40 <___vfprintf_internal_r+0x22c>
10005a94:	a6c7c83a 	sub	r3,r20,sp
10005a98:	d8c00a15 	stw	r3,40(sp)
10005a9c:	90c5c83a 	sub	r2,r18,r3
10005aa0:	00800a0e 	bge	zero,r2,10005acc <___vfprintf_internal_r+0x2b8>
10005aa4:	a085883a 	add	r2,r20,r2
10005aa8:	01400c04 	movi	r5,48
10005aac:	d8c00917 	ldw	r3,36(sp)
10005ab0:	a009883a 	mov	r4,r20
10005ab4:	a0c0032e 	bgeu	r20,r3,10005ac4 <___vfprintf_internal_r+0x2b0>
10005ab8:	a5000044 	addi	r20,r20,1
10005abc:	21400005 	stb	r5,0(r4)
10005ac0:	a0bffa1e 	bne	r20,r2,10005aac <___vfprintf_internal_r+0x298>
10005ac4:	a6c7c83a 	sub	r3,r20,sp
10005ac8:	d8c00a15 	stw	r3,40(sp)
10005acc:	d8c00a17 	ldw	r3,40(sp)
10005ad0:	50d3883a 	add	r9,r10,r3
10005ad4:	d8c00b17 	ldw	r3,44(sp)
10005ad8:	8a6dc83a 	sub	r22,r17,r9
10005adc:	18001726 	beq	r3,zero,10005b3c <___vfprintf_internal_r+0x328>
10005ae0:	50000a26 	beq	r10,zero,10005b0c <___vfprintf_internal_r+0x2f8>
10005ae4:	00800b44 	movi	r2,45
10005ae8:	d8800805 	stb	r2,32(sp)
10005aec:	e0800117 	ldw	r2,4(fp)
10005af0:	01c00044 	movi	r7,1
10005af4:	d9800804 	addi	r6,sp,32
10005af8:	e00b883a 	mov	r5,fp
10005afc:	9809883a 	mov	r4,r19
10005b00:	103ee83a 	callr	r2
10005b04:	10004d1e 	bne	r2,zero,10005c3c <___vfprintf_internal_r+0x428>
10005b08:	84000044 	addi	r16,r16,1
10005b0c:	0580070e 	bge	zero,r22,10005b2c <___vfprintf_internal_r+0x318>
10005b10:	b00f883a 	mov	r7,r22
10005b14:	01800c04 	movi	r6,48
10005b18:	e00b883a 	mov	r5,fp
10005b1c:	9809883a 	mov	r4,r19
10005b20:	00057a80 	call	100057a8 <print_repeat>
10005b24:	1000451e 	bne	r2,zero,10005c3c <___vfprintf_internal_r+0x428>
10005b28:	85a1883a 	add	r16,r16,r22
10005b2c:	d8c00a17 	ldw	r3,40(sp)
10005b30:	a013883a 	mov	r9,r20
10005b34:	1d2dc83a 	sub	r22,r3,r20
10005b38:	00002206 	br	10005bc4 <___vfprintf_internal_r+0x3b0>
10005b3c:	0580090e 	bge	zero,r22,10005b64 <___vfprintf_internal_r+0x350>
10005b40:	b00f883a 	mov	r7,r22
10005b44:	01800804 	movi	r6,32
10005b48:	e00b883a 	mov	r5,fp
10005b4c:	9809883a 	mov	r4,r19
10005b50:	da801015 	stw	r10,64(sp)
10005b54:	00057a80 	call	100057a8 <print_repeat>
10005b58:	da801017 	ldw	r10,64(sp)
10005b5c:	1000371e 	bne	r2,zero,10005c3c <___vfprintf_internal_r+0x428>
10005b60:	85a1883a 	add	r16,r16,r22
10005b64:	503ff126 	beq	r10,zero,10005b2c <___vfprintf_internal_r+0x318>
10005b68:	00800b44 	movi	r2,45
10005b6c:	d8800805 	stb	r2,32(sp)
10005b70:	e0800117 	ldw	r2,4(fp)
10005b74:	01c00044 	movi	r7,1
10005b78:	d9800804 	addi	r6,sp,32
10005b7c:	e00b883a 	mov	r5,fp
10005b80:	9809883a 	mov	r4,r19
10005b84:	103ee83a 	callr	r2
10005b88:	10002c1e 	bne	r2,zero,10005c3c <___vfprintf_internal_r+0x428>
10005b8c:	84000044 	addi	r16,r16,1
10005b90:	003fe606 	br	10005b2c <___vfprintf_internal_r+0x318>
10005b94:	4a7fffc4 	addi	r9,r9,-1
10005b98:	48800003 	ldbu	r2,0(r9)
10005b9c:	01c00044 	movi	r7,1
10005ba0:	d9800804 	addi	r6,sp,32
10005ba4:	d8800805 	stb	r2,32(sp)
10005ba8:	e0800117 	ldw	r2,4(fp)
10005bac:	e00b883a 	mov	r5,fp
10005bb0:	da401015 	stw	r9,64(sp)
10005bb4:	9809883a 	mov	r4,r19
10005bb8:	103ee83a 	callr	r2
10005bbc:	da401017 	ldw	r9,64(sp)
10005bc0:	10001e1e 	bne	r2,zero,10005c3c <___vfprintf_internal_r+0x428>
10005bc4:	8245c83a 	sub	r2,r16,r9
10005bc8:	4d89883a 	add	r4,r9,r22
10005bcc:	a085883a 	add	r2,r20,r2
10005bd0:	013ff016 	blt	zero,r4,10005b94 <___vfprintf_internal_r+0x380>
10005bd4:	1021883a 	mov	r16,r2
10005bd8:	dd800d17 	ldw	r22,52(sp)
10005bdc:	00004406 	br	10005cf0 <___vfprintf_internal_r+0x4dc>
10005be0:	00800044 	movi	r2,1
10005be4:	1440080e 	bge	r2,r17,10005c08 <___vfprintf_internal_r+0x3f4>
10005be8:	8d3fffc4 	addi	r20,r17,-1
10005bec:	a00f883a 	mov	r7,r20
10005bf0:	01800804 	movi	r6,32
10005bf4:	e00b883a 	mov	r5,fp
10005bf8:	9809883a 	mov	r4,r19
10005bfc:	00057a80 	call	100057a8 <print_repeat>
10005c00:	10000e1e 	bne	r2,zero,10005c3c <___vfprintf_internal_r+0x428>
10005c04:	8521883a 	add	r16,r16,r20
10005c08:	b0800017 	ldw	r2,0(r22)
10005c0c:	01c00044 	movi	r7,1
10005c10:	d80d883a 	mov	r6,sp
10005c14:	d8800005 	stb	r2,0(sp)
10005c18:	e0800117 	ldw	r2,4(fp)
10005c1c:	e00b883a 	mov	r5,fp
10005c20:	9809883a 	mov	r4,r19
10005c24:	b5000104 	addi	r20,r22,4
10005c28:	103ee83a 	callr	r2
10005c2c:	1000031e 	bne	r2,zero,10005c3c <___vfprintf_internal_r+0x428>
10005c30:	84000044 	addi	r16,r16,1
10005c34:	a02d883a 	mov	r22,r20
10005c38:	00002d06 	br	10005cf0 <___vfprintf_internal_r+0x4dc>
10005c3c:	00bfffc4 	movi	r2,-1
10005c40:	00003106 	br	10005d08 <___vfprintf_internal_r+0x4f4>
10005c44:	b5000017 	ldw	r20,0(r22)
10005c48:	b0c00104 	addi	r3,r22,4
10005c4c:	d8c00a15 	stw	r3,40(sp)
10005c50:	a009883a 	mov	r4,r20
10005c54:	000578c0 	call	1000578c <strlen>
10005c58:	8893c83a 	sub	r9,r17,r2
10005c5c:	102d883a 	mov	r22,r2
10005c60:	0240090e 	bge	zero,r9,10005c88 <___vfprintf_internal_r+0x474>
10005c64:	480f883a 	mov	r7,r9
10005c68:	01800804 	movi	r6,32
10005c6c:	e00b883a 	mov	r5,fp
10005c70:	9809883a 	mov	r4,r19
10005c74:	da401015 	stw	r9,64(sp)
10005c78:	00057a80 	call	100057a8 <print_repeat>
10005c7c:	da401017 	ldw	r9,64(sp)
10005c80:	103fee1e 	bne	r2,zero,10005c3c <___vfprintf_internal_r+0x428>
10005c84:	8261883a 	add	r16,r16,r9
10005c88:	e0800117 	ldw	r2,4(fp)
10005c8c:	b00f883a 	mov	r7,r22
10005c90:	a00d883a 	mov	r6,r20
10005c94:	e00b883a 	mov	r5,fp
10005c98:	9809883a 	mov	r4,r19
10005c9c:	103ee83a 	callr	r2
10005ca0:	103fe61e 	bne	r2,zero,10005c3c <___vfprintf_internal_r+0x428>
10005ca4:	85a1883a 	add	r16,r16,r22
10005ca8:	dd800a17 	ldw	r22,40(sp)
10005cac:	00001006 	br	10005cf0 <___vfprintf_internal_r+0x4dc>
10005cb0:	05c00044 	movi	r23,1
10005cb4:	04bfffc4 	movi	r18,-1
10005cb8:	d8000e15 	stw	zero,56(sp)
10005cbc:	05400284 	movi	r21,10
10005cc0:	9023883a 	mov	r17,r18
10005cc4:	d8000c15 	stw	zero,48(sp)
10005cc8:	d8000b15 	stw	zero,44(sp)
10005ccc:	b829883a 	mov	r20,r23
10005cd0:	00000806 	br	10005cf4 <___vfprintf_internal_r+0x4e0>
10005cd4:	dd000b15 	stw	r20,44(sp)
10005cd8:	05000084 	movi	r20,2
10005cdc:	00000506 	br	10005cf4 <___vfprintf_internal_r+0x4e0>
10005ce0:	00c00044 	movi	r3,1
10005ce4:	d8c00c15 	stw	r3,48(sp)
10005ce8:	050000c4 	movi	r20,3
10005cec:	00000106 	br	10005cf4 <___vfprintf_internal_r+0x4e0>
10005cf0:	0029883a 	mov	r20,zero
10005cf4:	d8c00f17 	ldw	r3,60(sp)
10005cf8:	18c00044 	addi	r3,r3,1
10005cfc:	d8c00f15 	stw	r3,60(sp)
10005d00:	003ede06 	br	1000587c <___vfprintf_internal_r+0x68>
10005d04:	8005883a 	mov	r2,r16
10005d08:	dfc01a17 	ldw	ra,104(sp)
10005d0c:	df001917 	ldw	fp,100(sp)
10005d10:	ddc01817 	ldw	r23,96(sp)
10005d14:	dd801717 	ldw	r22,92(sp)
10005d18:	dd401617 	ldw	r21,88(sp)
10005d1c:	dd001517 	ldw	r20,84(sp)
10005d20:	dcc01417 	ldw	r19,80(sp)
10005d24:	dc801317 	ldw	r18,76(sp)
10005d28:	dc401217 	ldw	r17,72(sp)
10005d2c:	dc001117 	ldw	r16,68(sp)
10005d30:	dec01b04 	addi	sp,sp,108
10005d34:	f800283a 	ret

10005d38 <__vfprintf_internal>:
10005d38:	00840774 	movhi	r2,4125
10005d3c:	10a5af04 	addi	r2,r2,-26948
10005d40:	300f883a 	mov	r7,r6
10005d44:	280d883a 	mov	r6,r5
10005d48:	200b883a 	mov	r5,r4
10005d4c:	11000017 	ldw	r4,0(r2)
10005d50:	00058141 	jmpi	10005814 <___vfprintf_internal_r>

10005d54 <__sfvwrite_small_dev>:
10005d54:	2880000b 	ldhu	r2,0(r5)
10005d58:	1080020c 	andi	r2,r2,8
10005d5c:	10002126 	beq	r2,zero,10005de4 <__sfvwrite_small_dev+0x90>
10005d60:	2880008f 	ldh	r2,2(r5)
10005d64:	defffa04 	addi	sp,sp,-24
10005d68:	dc000015 	stw	r16,0(sp)
10005d6c:	dfc00515 	stw	ra,20(sp)
10005d70:	dd000415 	stw	r20,16(sp)
10005d74:	dcc00315 	stw	r19,12(sp)
10005d78:	dc800215 	stw	r18,8(sp)
10005d7c:	dc400115 	stw	r17,4(sp)
10005d80:	2821883a 	mov	r16,r5
10005d84:	10001216 	blt	r2,zero,10005dd0 <__sfvwrite_small_dev+0x7c>
10005d88:	2027883a 	mov	r19,r4
10005d8c:	3025883a 	mov	r18,r6
10005d90:	3823883a 	mov	r17,r7
10005d94:	05010004 	movi	r20,1024
10005d98:	04400b0e 	bge	zero,r17,10005dc8 <__sfvwrite_small_dev+0x74>
10005d9c:	880f883a 	mov	r7,r17
10005da0:	a440010e 	bge	r20,r17,10005da8 <__sfvwrite_small_dev+0x54>
10005da4:	01c10004 	movi	r7,1024
10005da8:	8140008f 	ldh	r5,2(r16)
10005dac:	900d883a 	mov	r6,r18
10005db0:	9809883a 	mov	r4,r19
10005db4:	0005e0c0 	call	10005e0c <_write_r>
10005db8:	0080050e 	bge	zero,r2,10005dd0 <__sfvwrite_small_dev+0x7c>
10005dbc:	88a3c83a 	sub	r17,r17,r2
10005dc0:	90a5883a 	add	r18,r18,r2
10005dc4:	003ff406 	br	10005d98 <__sfvwrite_small_dev+0x44>
10005dc8:	0005883a 	mov	r2,zero
10005dcc:	00000706 	br	10005dec <__sfvwrite_small_dev+0x98>
10005dd0:	8080000b 	ldhu	r2,0(r16)
10005dd4:	10801014 	ori	r2,r2,64
10005dd8:	8080000d 	sth	r2,0(r16)
10005ddc:	00bfffc4 	movi	r2,-1
10005de0:	00000206 	br	10005dec <__sfvwrite_small_dev+0x98>
10005de4:	00bfffc4 	movi	r2,-1
10005de8:	f800283a 	ret
10005dec:	dfc00517 	ldw	ra,20(sp)
10005df0:	dd000417 	ldw	r20,16(sp)
10005df4:	dcc00317 	ldw	r19,12(sp)
10005df8:	dc800217 	ldw	r18,8(sp)
10005dfc:	dc400117 	ldw	r17,4(sp)
10005e00:	dc000017 	ldw	r16,0(sp)
10005e04:	dec00604 	addi	sp,sp,24
10005e08:	f800283a 	ret

10005e0c <_write_r>:
10005e0c:	defffd04 	addi	sp,sp,-12
10005e10:	dc000015 	stw	r16,0(sp)
10005e14:	04040774 	movhi	r16,4125
10005e18:	dc400115 	stw	r17,4(sp)
10005e1c:	84265704 	addi	r16,r16,-26276
10005e20:	2023883a 	mov	r17,r4
10005e24:	2809883a 	mov	r4,r5
10005e28:	300b883a 	mov	r5,r6
10005e2c:	380d883a 	mov	r6,r7
10005e30:	dfc00215 	stw	ra,8(sp)
10005e34:	80000015 	stw	zero,0(r16)
10005e38:	00060940 	call	10006094 <write>
10005e3c:	00ffffc4 	movi	r3,-1
10005e40:	10c0031e 	bne	r2,r3,10005e50 <_write_r+0x44>
10005e44:	80c00017 	ldw	r3,0(r16)
10005e48:	18000126 	beq	r3,zero,10005e50 <_write_r+0x44>
10005e4c:	88c00015 	stw	r3,0(r17)
10005e50:	dfc00217 	ldw	ra,8(sp)
10005e54:	dc400117 	ldw	r17,4(sp)
10005e58:	dc000017 	ldw	r16,0(sp)
10005e5c:	dec00304 	addi	sp,sp,12
10005e60:	f800283a 	ret

10005e64 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10005e64:	deffff04 	addi	sp,sp,-4
10005e68:	01040774 	movhi	r4,4125
10005e6c:	01440774 	movhi	r5,4125
10005e70:	dfc00015 	stw	ra,0(sp)
10005e74:	21252804 	addi	r4,r4,-27488
10005e78:	2965ba04 	addi	r5,r5,-26904

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
10005e7c:	2140061e 	bne	r4,r5,10005e98 <alt_load+0x34>
10005e80:	01040034 	movhi	r4,4096
10005e84:	01440034 	movhi	r5,4096
10005e88:	21000804 	addi	r4,r4,32
10005e8c:	29400804 	addi	r5,r5,32
10005e90:	2140121e 	bne	r4,r5,10005edc <alt_load+0x78>
10005e94:	00000b06 	br	10005ec4 <alt_load+0x60>
10005e98:	00c40774 	movhi	r3,4125
10005e9c:	18e5ba04 	addi	r3,r3,-26904
10005ea0:	1907c83a 	sub	r3,r3,r4
10005ea4:	0005883a 	mov	r2,zero
  {
    while( to != end )
10005ea8:	10fff526 	beq	r2,r3,10005e80 <alt_load+0x1c>
    {
      *to++ = *from++;
10005eac:	114f883a 	add	r7,r2,r5
10005eb0:	39c00017 	ldw	r7,0(r7)
10005eb4:	110d883a 	add	r6,r2,r4
10005eb8:	10800104 	addi	r2,r2,4
10005ebc:	31c00015 	stw	r7,0(r6)
10005ec0:	003ff906 	br	10005ea8 <alt_load+0x44>
10005ec4:	01040034 	movhi	r4,4096
10005ec8:	01440034 	movhi	r5,4096
10005ecc:	211c2704 	addi	r4,r4,28828
10005ed0:	295c2704 	addi	r5,r5,28828

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
10005ed4:	2140101e 	bne	r4,r5,10005f18 <alt_load+0xb4>
10005ed8:	00000b06 	br	10005f08 <alt_load+0xa4>
10005edc:	00c40034 	movhi	r3,4096
10005ee0:	18c06204 	addi	r3,r3,392
10005ee4:	1907c83a 	sub	r3,r3,r4
10005ee8:	0005883a 	mov	r2,zero
  {
    while( to != end )
10005eec:	10fff526 	beq	r2,r3,10005ec4 <alt_load+0x60>
    {
      *to++ = *from++;
10005ef0:	114f883a 	add	r7,r2,r5
10005ef4:	39c00017 	ldw	r7,0(r7)
10005ef8:	110d883a 	add	r6,r2,r4
10005efc:	10800104 	addi	r2,r2,4
10005f00:	31c00015 	stw	r7,0(r6)
10005f04:	003ff906 	br	10005eec <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10005f08:	0006d800 	call	10006d80 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
10005f0c:	dfc00017 	ldw	ra,0(sp)
10005f10:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
10005f14:	0006e801 	jmpi	10006e80 <alt_icache_flush_all>
10005f18:	00c40774 	movhi	r3,4125
10005f1c:	18e52804 	addi	r3,r3,-27488
10005f20:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
10005f24:	0005883a 	mov	r2,zero
  {
    while( to != end )
10005f28:	18bff726 	beq	r3,r2,10005f08 <alt_load+0xa4>
    {
      *to++ = *from++;
10005f2c:	114f883a 	add	r7,r2,r5
10005f30:	39c00017 	ldw	r7,0(r7)
10005f34:	110d883a 	add	r6,r2,r4
10005f38:	10800104 	addi	r2,r2,4
10005f3c:	31c00015 	stw	r7,0(r6)
10005f40:	003ff906 	br	10005f28 <alt_load+0xc4>

10005f44 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10005f44:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10005f48:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10005f4c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10005f50:	00060f40 	call	100060f4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10005f54:	00061140 	call	10006114 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
10005f58:	d1a0aa17 	ldw	r6,-32088(gp)
10005f5c:	d160ab17 	ldw	r5,-32084(gp)
10005f60:	d120ac17 	ldw	r4,-32080(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
10005f64:	dfc00017 	ldw	ra,0(sp)
10005f68:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
10005f6c:	00004b81 	jmpi	100004b8 <main>

10005f70 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
10005f70:	defffe04 	addi	sp,sp,-8
10005f74:	dc000015 	stw	r16,0(sp)
10005f78:	dfc00115 	stw	ra,4(sp)
10005f7c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
10005f80:	000578c0 	call	1000578c <strlen>
10005f84:	01040774 	movhi	r4,4125
10005f88:	000f883a 	mov	r7,zero
10005f8c:	100d883a 	mov	r6,r2
10005f90:	800b883a 	mov	r5,r16
10005f94:	2125b204 	addi	r4,r4,-26936
#else
    return fputs(str, stdout);
#endif
#endif
}
10005f98:	dfc00117 	ldw	ra,4(sp)
10005f9c:	dc000017 	ldw	r16,0(sp)
10005fa0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
10005fa4:	00062d81 	jmpi	100062d8 <altera_avalon_jtag_uart_write>

10005fa8 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10005fa8:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10005fac:	00bfff84 	movi	r2,-2
10005fb0:	1884703a 	and	r2,r3,r2
10005fb4:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10005fb8:	21400117 	ldw	r5,4(r4)
10005fbc:	20800017 	ldw	r2,0(r4)
10005fc0:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
10005fc4:	21400117 	ldw	r5,4(r4)
10005fc8:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10005fcc:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
10005fd0:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10005fd4:	1801703a 	wrctl	status,r3
10005fd8:	f800283a 	ret

10005fdc <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10005fdc:	d0a0ad17 	ldw	r2,-32076(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10005fe0:	defffb04 	addi	sp,sp,-20
10005fe4:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10005fe8:	d4200217 	ldw	r16,-32760(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10005fec:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10005ff0:	dc800215 	stw	r18,8(sp)
10005ff4:	dc400115 	stw	r17,4(sp)
10005ff8:	dfc00415 	stw	ra,16(sp)
10005ffc:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10006000:	d0a0ad15 	stw	r2,-32076(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10006004:	d4600204 	addi	r17,gp,-32760
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
10006008:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000600c:	84401a26 	beq	r16,r17,10006078 <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10006010:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
10006014:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10006018:	10000326 	beq	r2,zero,10006028 <alt_tick+0x4c>
1000601c:	d0a0ad17 	ldw	r2,-32076(gp)
10006020:	1000011e 	bne	r2,zero,10006028 <alt_tick+0x4c>
    {
      alarm->rollover = 0;
10006024:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10006028:	d0e0ad17 	ldw	r3,-32076(gp)
1000602c:	80800217 	ldw	r2,8(r16)
10006030:	18800f36 	bltu	r3,r2,10006070 <alt_tick+0x94>
10006034:	80800403 	ldbu	r2,16(r16)
10006038:	10000d1e 	bne	r2,zero,10006070 <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
1000603c:	80800317 	ldw	r2,12(r16)
10006040:	81000517 	ldw	r4,20(r16)
10006044:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10006048:	1000031e 	bne	r2,zero,10006058 <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
1000604c:	8009883a 	mov	r4,r16
10006050:	0005fa80 	call	10005fa8 <alt_alarm_stop>
10006054:	00000606 	br	10006070 <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
10006058:	80c00217 	ldw	r3,8(r16)
1000605c:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10006060:	d0e0ad17 	ldw	r3,-32076(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
10006064:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10006068:	10c0012e 	bgeu	r2,r3,10006070 <alt_tick+0x94>
        {
          alarm->rollover = 1;
1000606c:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10006070:	9821883a 	mov	r16,r19
10006074:	003fe506 	br	1000600c <alt_tick+0x30>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
10006078:	dfc00417 	ldw	ra,16(sp)
1000607c:	dcc00317 	ldw	r19,12(sp)
10006080:	dc800217 	ldw	r18,8(sp)
10006084:	dc400117 	ldw	r17,4(sp)
10006088:	dc000017 	ldw	r16,0(sp)
1000608c:	dec00504 	addi	sp,sp,20
10006090:	f800283a 	ret

10006094 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
10006094:	00800044 	movi	r2,1
10006098:	20800226 	beq	r4,r2,100060a4 <write+0x10>
1000609c:	00800084 	movi	r2,2
100060a0:	2080041e 	bne	r4,r2,100060b4 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
100060a4:	01040774 	movhi	r4,4125
100060a8:	000f883a 	mov	r7,zero
100060ac:	2125b204 	addi	r4,r4,-26936
100060b0:	00062d81 	jmpi	100062d8 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
100060b4:	d0a00a17 	ldw	r2,-32728(gp)
100060b8:	10000926 	beq	r2,zero,100060e0 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
100060bc:	deffff04 	addi	sp,sp,-4
100060c0:	dfc00015 	stw	ra,0(sp)
100060c4:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
100060c8:	00c01444 	movi	r3,81
100060cc:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
100060d0:	00bfffc4 	movi	r2,-1
100060d4:	dfc00017 	ldw	ra,0(sp)
100060d8:	dec00104 	addi	sp,sp,4
100060dc:	f800283a 	ret
100060e0:	d0a0a904 	addi	r2,gp,-32092
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
100060e4:	00c01444 	movi	r3,81
100060e8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
100060ec:	00bfffc4 	movi	r2,-1
100060f0:	f800283a 	ret

100060f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
100060f4:	deffff04 	addi	sp,sp,-4
100060f8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( PROCESSOR, processor);
100060fc:	0006f800 	call	10006f80 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10006100:	00800044 	movi	r2,1
10006104:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10006108:	dfc00017 	ldw	ra,0(sp)
1000610c:	dec00104 	addi	sp,sp,4
10006110:	f800283a 	ret

10006114 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
10006114:	01000834 	movhi	r4,32
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10006118:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
1000611c:	000b883a 	mov	r5,zero
10006120:	210c0004 	addi	r4,r4,12288
10006124:	01c9c404 	movi	r7,10000
10006128:	000d883a 	mov	r6,zero
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000612c:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
10006130:	00063480 	call	10006348 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA_0, video_character_buffer_with_dma_0);
10006134:	00840774 	movhi	r2,4125
10006138:	10a58604 	addi	r2,r2,-27112
1000613c:	10c00a17 	ldw	r3,40(r2)
10006140:	01401004 	movi	r5,64
10006144:	18c00117 	ldw	r3,4(r3)
10006148:	193fffcc 	andi	r4,r3,65535
1000614c:	1806d43a 	srli	r3,r3,16
10006150:	11000c15 	stw	r4,48(r2)
10006154:	10c00d15 	stw	r3,52(r2)
10006158:	29000436 	bltu	r5,r4,1000616c <alt_sys_init+0x58>
1000615c:	01000fc4 	movi	r4,63
10006160:	11000f15 	stw	r4,60(r2)
10006164:	01000184 	movi	r4,6
10006168:	11001015 	stw	r4,64(r2)
1000616c:	01000804 	movi	r4,32
10006170:	20c00236 	bltu	r4,r3,1000617c <alt_sys_init+0x68>
10006174:	00c007c4 	movi	r3,31
10006178:	10c01115 	stw	r3,68(r2)
1000617c:	01040774 	movhi	r4,4125
10006180:	21258604 	addi	r4,r4,-27112
10006184:	00063900 	call	10006390 <alt_up_char_buffer_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10006188:	01040774 	movhi	r4,4125
1000618c:	d1600604 	addi	r5,gp,-32744
10006190:	21258604 	addi	r4,r4,-27112
10006194:	0006da00 	call	10006da0 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( DMA_BUFFER, dma_buffer);
10006198:	00840774 	movhi	r2,4125
1000619c:	10a57104 	addi	r2,r2,-27196
100061a0:	10c00a17 	ldw	r3,40(r2)
100061a4:	01c00044 	movi	r7,1
100061a8:	19000017 	ldw	r4,0(r3)
100061ac:	11000b15 	stw	r4,44(r2)
100061b0:	19000117 	ldw	r4,4(r3)
100061b4:	11000c15 	stw	r4,48(r2)
100061b8:	19000204 	addi	r4,r3,8
100061bc:	2140000b 	ldhu	r5,0(r4)
100061c0:	18c00304 	addi	r3,r3,12
100061c4:	11400f15 	stw	r5,60(r2)
100061c8:	21000017 	ldw	r4,0(r4)
100061cc:	2008d43a 	srli	r4,r4,16
100061d0:	11001015 	stw	r4,64(r2)
100061d4:	19000017 	ldw	r4,0(r3)
100061d8:	2009d07a 	srai	r4,r4,1
100061dc:	2100004c 	andi	r4,r4,1
100061e0:	11000d15 	stw	r4,52(r2)
100061e4:	19000017 	ldw	r4,0(r3)
100061e8:	2009d13a 	srai	r4,r4,4
100061ec:	210003cc 	andi	r4,r4,15
100061f0:	11000e15 	stw	r4,56(r2)
100061f4:	19400017 	ldw	r5,0(r3)
100061f8:	2807d43a 	srai	r3,r5,16
100061fc:	280cd63a 	srli	r6,r5,24
10006200:	21c0021e 	bne	r4,r7,1000620c <alt_sys_init+0xf8>
10006204:	10001115 	stw	zero,68(r2)
10006208:	00000506 	br	10006220 <alt_sys_init+0x10c>
1000620c:	01400084 	movi	r5,2
10006210:	2140021e 	bne	r4,r5,1000621c <alt_sys_init+0x108>
10006214:	11c01115 	stw	r7,68(r2)
10006218:	00000106 	br	10006220 <alt_sys_init+0x10c>
1000621c:	11401115 	stw	r5,68(r2)
10006220:	18c03fcc 	andi	r3,r3,255
10006224:	01400804 	movi	r5,32
10006228:	28cfc83a 	sub	r7,r5,r3
1000622c:	013fffc4 	movi	r4,-1
10006230:	21ced83a 	srl	r7,r4,r7
10006234:	298bc83a 	sub	r5,r5,r6
10006238:	2148d83a 	srl	r4,r4,r5
1000623c:	11c01215 	stw	r7,72(r2)
10006240:	11c01117 	ldw	r7,68(r2)
10006244:	11001415 	stw	r4,80(r2)
10006248:	01040774 	movhi	r4,4125
1000624c:	38c7883a 	add	r3,r7,r3
10006250:	d1600604 	addi	r5,gp,-32744
10006254:	21257104 	addi	r4,r4,-27196
10006258:	10c01315 	stw	r3,76(r2)
1000625c:	0006da00 	call	10006da0 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( RGB_RESAMPLER, rgb_resampler);
10006260:	01040774 	movhi	r4,4125
10006264:	21256004 	addi	r4,r4,-27264
10006268:	20800a17 	ldw	r2,40(r4)
1000626c:	d1600604 	addi	r5,gp,-32744
10006270:	10c00017 	ldw	r3,0(r2)
10006274:	18c003cc 	andi	r3,r3,15
10006278:	20c00b15 	stw	r3,44(r4)
1000627c:	10c00017 	ldw	r3,0(r2)
10006280:	1807d13a 	srai	r3,r3,4
10006284:	18c0004c 	andi	r3,r3,1
10006288:	20c00c15 	stw	r3,48(r4)
1000628c:	10c00017 	ldw	r3,0(r2)
10006290:	1807d17a 	srai	r3,r3,5
10006294:	18c0004c 	andi	r3,r3,1
10006298:	20c00d15 	stw	r3,52(r4)
1000629c:	10c00017 	ldw	r3,0(r2)
100062a0:	1807d43a 	srai	r3,r3,16
100062a4:	18c003cc 	andi	r3,r3,15
100062a8:	20c00e15 	stw	r3,56(r4)
100062ac:	10c00017 	ldw	r3,0(r2)
100062b0:	1807d53a 	srai	r3,r3,20
100062b4:	18c0004c 	andi	r3,r3,1
100062b8:	20c00f15 	stw	r3,60(r4)
100062bc:	10800017 	ldw	r2,0(r2)
100062c0:	1005d57a 	srai	r2,r2,21
100062c4:	1080004c 	andi	r2,r2,1
100062c8:	20801015 	stw	r2,64(r4)
}
100062cc:	dfc00017 	ldw	ra,0(sp)
100062d0:	dec00104 	addi	sp,sp,4
100062d4:	0006da01 	jmpi	10006da0 <alt_dev_llist_insert>

100062d8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
100062d8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
100062dc:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
100062e0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
100062e4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
100062e8:	2980072e 	bgeu	r5,r6,10006308 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
100062ec:	38c00037 	ldwio	r3,0(r7)
100062f0:	18ffffec 	andhi	r3,r3,65535
100062f4:	183ffc26 	beq	r3,zero,100062e8 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
100062f8:	28c00007 	ldb	r3,0(r5)
100062fc:	20c00035 	stwio	r3,0(r4)
10006300:	29400044 	addi	r5,r5,1
10006304:	003ff806 	br	100062e8 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
10006308:	f800283a 	ret

1000630c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
1000630c:	defffe04 	addi	sp,sp,-8
10006310:	dfc00115 	stw	ra,4(sp)
10006314:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
10006318:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
1000631c:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10006320:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10006324:	00bfff84 	movi	r2,-2
10006328:	8084703a 	and	r2,r16,r2
1000632c:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
10006330:	0005fdc0 	call	10005fdc <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10006334:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
10006338:	dfc00117 	ldw	ra,4(sp)
1000633c:	dc000017 	ldw	r16,0(sp)
10006340:	dec00204 	addi	sp,sp,8
10006344:	f800283a 	ret

10006348 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
10006348:	d0e0ae17 	ldw	r3,-32072(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
1000634c:	defffe04 	addi	sp,sp,-8
10006350:	dfc00115 	stw	ra,4(sp)
10006354:	2005883a 	mov	r2,r4
10006358:	2809883a 	mov	r4,r5
1000635c:	300b883a 	mov	r5,r6
10006360:	1800011e 	bne	r3,zero,10006368 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
10006364:	d1e0ae15 	stw	r7,-32072(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
10006368:	00c001c4 	movi	r3,7
1000636c:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
10006370:	01840034 	movhi	r6,4096
10006374:	d8000015 	stw	zero,0(sp)
10006378:	100f883a 	mov	r7,r2
1000637c:	3198c304 	addi	r6,r6,25356
10006380:	0006e8c0 	call	10006e8c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
10006384:	dfc00117 	ldw	ra,4(sp)
10006388:	dec00204 	addi	sp,sp,8
1000638c:	f800283a 	ret

10006390 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
10006390:	defffe04 	addi	sp,sp,-8
10006394:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
10006398:	24000217 	ldw	r16,8(r4)
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
1000639c:	dfc00115 	stw	ra,4(sp)
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
100063a0:	80800007 	ldb	r2,0(r16)
100063a4:	10000926 	beq	r2,zero,100063cc <alt_up_char_buffer_init+0x3c>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
100063a8:	01440774 	movhi	r5,4125
100063ac:	29651e04 	addi	r5,r5,-27528
100063b0:	8009883a 	mov	r4,r16
100063b4:	00070640 	call	10007064 <strcmp>
100063b8:	1000021e 	bne	r2,zero,100063c4 <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
100063bc:	80000005 	stb	zero,0(r16)
			break;
100063c0:	00000206 	br	100063cc <alt_up_char_buffer_init+0x3c>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
100063c4:	84000044 	addi	r16,r16,1
100063c8:	003ff506 	br	100063a0 <alt_up_char_buffer_init+0x10>
			break;
		}
	}
	
	return;
}
100063cc:	dfc00117 	ldw	ra,4(sp)
100063d0:	dc000017 	ldw	r16,0(sp)
100063d4:	dec00204 	addi	sp,sp,8
100063d8:	f800283a 	ret

100063dc <alt_up_char_buffer_open_dev>:
alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
100063dc:	d1600604 	addi	r5,gp,-32744
100063e0:	0006e0c1 	jmpi	10006e0c <alt_find_dev>

100063e4 <alt_up_char_buffer_draw>:
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
100063e4:	20800c17 	ldw	r2,48(r4)
100063e8:	3080102e 	bgeu	r6,r2,1000642c <alt_up_char_buffer_draw+0x48>
100063ec:	20800d17 	ldw	r2,52(r4)
100063f0:	38800e2e 	bgeu	r7,r2,1000642c <alt_up_char_buffer_draw+0x48>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
100063f4:	20800f17 	ldw	r2,60(r4)
100063f8:	3084703a 	and	r2,r6,r2
100063fc:	21800e17 	ldw	r6,56(r4)
10006400:	1186983a 	sll	r3,r2,r6
10006404:	20801117 	ldw	r2,68(r4)
10006408:	21801017 	ldw	r6,64(r4)
1000640c:	388e703a 	and	r7,r7,r2
10006410:	398e983a 	sll	r7,r7,r6
10006414:	20800b17 	ldw	r2,44(r4)
10006418:	19ccb03a 	or	r6,r3,r7
1000641c:	308d883a 	add	r6,r6,r2
10006420:	31400025 	stbio	r5,0(r6)

	return 0;
10006424:	0005883a 	mov	r2,zero
10006428:	f800283a 	ret

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
1000642c:	00bfffc4 	movi	r2,-1
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);

	return 0;
}
10006430:	f800283a 	ret

10006434 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
10006434:	20800c17 	ldw	r2,48(r4)
10006438:	30800236 	bltu	r6,r2,10006444 <alt_up_char_buffer_string+0x10>
		return -1;
1000643c:	00bfffc4 	movi	r2,-1
10006440:	f800283a 	ret
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
10006444:	20800d17 	ldw	r2,52(r4)
10006448:	38bffc2e 	bgeu	r7,r2,1000643c <alt_up_char_buffer_string+0x8>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
1000644c:	20801017 	ldw	r2,64(r4)
10006450:	388e983a 	sll	r7,r7,r2
10006454:	398f883a 	add	r7,r7,r6
10006458:	394fc83a 	sub	r7,r7,r5

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
1000645c:	314dc83a 	sub	r6,r6,r5
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
10006460:	28c00003 	ldbu	r3,0(r5)
10006464:	29d3883a 	add	r9,r5,r7
10006468:	1a003fcc 	andi	r8,r3,255
1000646c:	4200201c 	xori	r8,r8,128
10006470:	423fe004 	addi	r8,r8,-128
10006474:	40000826 	beq	r8,zero,10006498 <alt_up_char_buffer_string+0x64>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
10006478:	20800b17 	ldw	r2,44(r4)
1000647c:	4885883a 	add	r2,r9,r2
10006480:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
10006484:	20800c17 	ldw	r2,48(r4)
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
10006488:	29400044 	addi	r5,r5,1
		if (++x >= char_buffer->x_resolution)
1000648c:	2987883a 	add	r3,r5,r6
10006490:	18bff336 	bltu	r3,r2,10006460 <alt_up_char_buffer_string+0x2c>
10006494:	003fe906 	br	1000643c <alt_up_char_buffer_string+0x8>
			return -1;
		++offset;
	}
	return 0;
10006498:	0005883a 	mov	r2,zero
}
1000649c:	f800283a 	ret

100064a0 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
100064a0:	20800a17 	ldw	r2,40(r4)
100064a4:	00c00044 	movi	r3,1
100064a8:	10c000a5 	stbio	r3,2(r2)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
100064ac:	20800a17 	ldw	r2,40(r4)
100064b0:	108000a3 	ldbuio	r2,2(r2)
100064b4:	1080004c 	andi	r2,r2,1
100064b8:	103ffc1e 	bne	r2,zero,100064ac <alt_up_char_buffer_clear+0xc>
	return 0;
}
100064bc:	f800283a 	ret

100064c0 <alt_up_pixel_buffer_dma_open_dev>:
alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
100064c0:	d1600604 	addi	r5,gp,-32744
100064c4:	0006e0c1 	jmpi	10006e0c <alt_find_dev>

100064c8 <alt_up_pixel_buffer_dma_draw>:
int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
100064c8:	20800f17 	ldw	r2,60(r4)
100064cc:	3080222e 	bgeu	r6,r2,10006558 <alt_up_pixel_buffer_dma_draw+0x90>
100064d0:	20c01017 	ldw	r3,64(r4)
100064d4:	38c0202e 	bgeu	r7,r3,10006558 <alt_up_pixel_buffer_dma_draw+0x90>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
100064d8:	22800d17 	ldw	r10,52(r4)
100064dc:	22001217 	ldw	r8,72(r4)
100064e0:	22401117 	ldw	r9,68(r4)
100064e4:	20c01417 	ldw	r3,80(r4)
100064e8:	5000071e 	bne	r10,zero,10006508 <alt_up_pixel_buffer_dma_draw+0x40>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
100064ec:	3210703a 	and	r8,r6,r8
100064f0:	21801317 	ldw	r6,76(r4)
100064f4:	38c6703a 	and	r3,r7,r3
100064f8:	4250983a 	sll	r8,r8,r9
100064fc:	1986983a 	sll	r3,r3,r6
10006500:	40cd883a 	add	r6,r8,r3
10006504:	00000506 	br	1000651c <alt_up_pixel_buffer_dma_draw+0x54>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
10006508:	38c6703a 	and	r3,r7,r3
1000650c:	1885383a 	mul	r2,r3,r2
10006510:	3210703a 	and	r8,r6,r8
10006514:	4085883a 	add	r2,r8,r2
10006518:	124c983a 	sll	r6,r2,r9
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
1000651c:	20c00e17 	ldw	r3,56(r4)
10006520:	20800c17 	ldw	r2,48(r4)
10006524:	01000044 	movi	r4,1
10006528:	1900031e 	bne	r3,r4,10006538 <alt_up_pixel_buffer_dma_draw+0x70>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
1000652c:	308d883a 	add	r6,r6,r2
10006530:	31400025 	stbio	r5,0(r6)
10006534:	00000606 	br	10006550 <alt_up_pixel_buffer_dma_draw+0x88>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10006538:	01000084 	movi	r4,2
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
1000653c:	308d883a 	add	r6,r6,r2
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10006540:	1900021e 	bne	r3,r4,1000654c <alt_up_pixel_buffer_dma_draw+0x84>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
10006544:	3140002d 	sthio	r5,0(r6)
10006548:	00000106 	br	10006550 <alt_up_pixel_buffer_dma_draw+0x88>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
1000654c:	31400035 	stwio	r5,0(r6)
	}

	return 0;
10006550:	0005883a 	mov	r2,zero
10006554:	f800283a 	ret
/* This function draws a pixel to the back buffer.
 */
{
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
		return -1;
10006558:	00bfffc4 	movi	r2,-1
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	}

	return 0;
}
1000655c:	f800283a 	ret

10006560 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
10006560:	20800a17 	ldw	r2,40(r4)
10006564:	11400135 	stwio	r5,4(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
10006568:	20800a17 	ldw	r2,40(r4)
1000656c:	10800137 	ldwio	r2,4(r2)
10006570:	20800c15 	stw	r2,48(r4)
	return 0;
}
10006574:	0005883a 	mov	r2,zero
10006578:	f800283a 	ret

1000657c <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
1000657c:	20800c17 	ldw	r2,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
10006580:	20c00a17 	ldw	r3,40(r4)
10006584:	01400044 	movi	r5,1
10006588:	19400035 	stwio	r5,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
1000658c:	20c00b17 	ldw	r3,44(r4)
	pixel_buffer->buffer_start_address = temp;
10006590:	20800b15 	stw	r2,44(r4)
	return 0;
}
10006594:	0005883a 	mov	r2,zero
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
10006598:	20c00c15 	stw	r3,48(r4)
	pixel_buffer->buffer_start_address = temp;
	return 0;
}
1000659c:	f800283a 	ret

100065a0 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
100065a0:	20800a17 	ldw	r2,40(r4)
100065a4:	10800337 	ldwio	r2,12(r2)
}
100065a8:	1080004c 	andi	r2,r2,1
100065ac:	f800283a 	ret

100065b0 <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
100065b0:	00800044 	movi	r2,1
100065b4:	2880021e 	bne	r5,r2,100065c0 <alt_up_pixel_buffer_dma_clear_screen+0x10>
		addr = pixel_buffer->back_buffer_start_address;
100065b8:	20c00c17 	ldw	r3,48(r4)
100065bc:	00000106 	br	100065c4 <alt_up_pixel_buffer_dma_clear_screen+0x14>
	else
		addr = pixel_buffer->buffer_start_address;
100065c0:	20c00b17 	ldw	r3,44(r4)
	limit_x = pixel_buffer->x_resolution;
100065c4:	20800f17 	ldw	r2,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
100065c8:	21800e17 	ldw	r6,56(r4)
100065cc:	01400084 	movi	r5,2
100065d0:	1085883a 	add	r2,r2,r2
100065d4:	31400126 	beq	r6,r5,100065dc <alt_up_pixel_buffer_dma_clear_screen+0x2c>
		limit_x = limit_x << 1;
	} else {
		limit_x = limit_x << 2;
100065d8:	1085883a 	add	r2,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
100065dc:	21800d17 	ldw	r6,52(r4)
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		limit_x = limit_x << 1;
	} else {
		limit_x = limit_x << 2;
	}	
	limit_y = pixel_buffer->y_resolution;
100065e0:	21401017 	ldw	r5,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
100065e4:	30000e1e 	bne	r6,zero,10006620 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
100065e8:	21c01317 	ldw	r7,76(r4)
100065ec:	01000044 	movi	r4,1
100065f0:	21ce983a 	sll	r7,r4,r7
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
100065f4:	31400926 	beq	r6,r5,1000661c <alt_up_pixel_buffer_dma_clear_screen+0x6c>
100065f8:	1809883a 	mov	r4,r3
		{
			for (x = 0; x < limit_x; x = x + 4)
100065fc:	20d1c83a 	sub	r8,r4,r3
10006600:	4080032e 	bgeu	r8,r2,10006610 <alt_up_pixel_buffer_dma_clear_screen+0x60>
			{
				IOWR_32DIRECT(addr, x, 0);
10006604:	20000035 	stwio	zero,0(r4)
10006608:	21000104 	addi	r4,r4,4
1000660c:	003ffb06 	br	100065fc <alt_up_pixel_buffer_dma_clear_screen+0x4c>
			}
			addr = addr + (1 << offset_y);
10006610:	19c7883a 	add	r3,r3,r7
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
10006614:	31800044 	addi	r6,r6,1
10006618:	003ff606 	br	100065f4 <alt_up_pixel_buffer_dma_clear_screen+0x44>
1000661c:	f800283a 	ret
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
10006620:	1145383a 	mul	r2,r2,r5

		for (x = 0; x < limit_y; x = x + 4)
10006624:	1809883a 	mov	r4,r3
10006628:	20cbc83a 	sub	r5,r4,r3
1000662c:	2880032e 	bgeu	r5,r2,1000663c <alt_up_pixel_buffer_dma_clear_screen+0x8c>
		{
			IOWR_32DIRECT(addr, x, 0);
10006630:	20000035 	stwio	zero,0(r4)
10006634:	21000104 	addi	r4,r4,4
10006638:	003ffb06 	br	10006628 <alt_up_pixel_buffer_dma_clear_screen+0x78>
1000663c:	f800283a 	ret

10006640 <alt_up_pixel_buffer_dma_draw_box>:
	}
}

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
10006640:	d8800017 	ldw	r2,0(sp)
10006644:	db000117 	ldw	r12,4(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
10006648:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
1000664c:	2815883a 	mov	r10,r5
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
10006650:	3011883a 	mov	r8,r6
	register unsigned int b_y = y1;
10006654:	1017883a 	mov	r11,r2
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
10006658:	3940022e 	bgeu	r7,r5,10006664 <alt_up_pixel_buffer_dma_draw_box+0x24>
1000665c:	3815883a 	mov	r10,r7
10006660:	280f883a 	mov	r7,r5
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
10006664:	1180022e 	bgeu	r2,r6,10006670 <alt_up_pixel_buffer_dma_draw_box+0x30>
10006668:	1011883a 	mov	r8,r2
1000666c:	3017883a 	mov	r11,r6
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
10006670:	5240642e 	bgeu	r10,r9,10006804 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
10006674:	20801017 	ldw	r2,64(r4)
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
10006678:	4080622e 	bgeu	r8,r2,10006804 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
1000667c:	3a400136 	bltu	r7,r9,10006684 <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		r_x = limit_x - 1;
10006680:	49ffffc4 	addi	r7,r9,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
10006684:	58800136 	bltu	r11,r2,1000668c <alt_up_pixel_buffer_dma_draw_box+0x4c>
	{
		b_y = limit_y - 1;
10006688:	12ffffc4 	addi	r11,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
1000668c:	d8800217 	ldw	r2,8(sp)
10006690:	01400044 	movi	r5,1
10006694:	1140021e 	bne	r2,r5,100066a0 <alt_up_pixel_buffer_dma_draw_box+0x60>
		addr = pixel_buffer->back_buffer_start_address;
10006698:	20c00c17 	ldw	r3,48(r4)
1000669c:	00000106 	br	100066a4 <alt_up_pixel_buffer_dma_draw_box+0x64>
	else
		addr = pixel_buffer->buffer_start_address;
100066a0:	20c00b17 	ldw	r3,44(r4)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
100066a4:	20800d17 	ldw	r2,52(r4)
100066a8:	21800e17 	ldw	r6,56(r4)
100066ac:	1000291e 	bne	r2,zero,10006754 <alt_up_pixel_buffer_dma_draw_box+0x114>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
100066b0:	21001317 	ldw	r4,76(r4)
		addr = addr + (t_y << offset_y);
100066b4:	4104983a 	sll	r2,r8,r4
100066b8:	10c5883a 	add	r2,r2,r3
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
100066bc:	31400b1e 	bne	r6,r5,100066ec <alt_up_pixel_buffer_dma_draw_box+0xac>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
100066c0:	290a983a 	sll	r5,r5,r4
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
100066c4:	5a004f36 	bltu	r11,r8,10006804 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
100066c8:	5007883a 	mov	r3,r10
			{
				for (x = l_x; x <= r_x; x++)
100066cc:	38c00436 	bltu	r7,r3,100066e0 <alt_up_pixel_buffer_dma_draw_box+0xa0>
				{
					IOWR_8DIRECT(addr, x, local_color);
100066d0:	10c9883a 	add	r4,r2,r3
100066d4:	23000025 	stbio	r12,0(r4)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
100066d8:	18c00044 	addi	r3,r3,1
100066dc:	003ffb06 	br	100066cc <alt_up_pixel_buffer_dma_draw_box+0x8c>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
100066e0:	1145883a 	add	r2,r2,r5
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
100066e4:	42000044 	addi	r8,r8,1
100066e8:	003ff606 	br	100066c4 <alt_up_pixel_buffer_dma_draw_box+0x84>
100066ec:	00c00044 	movi	r3,1
100066f0:	190a983a 	sll	r5,r3,r4
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
100066f4:	00c00084 	movi	r3,2
100066f8:	30c00d1e 	bne	r6,r3,10006730 <alt_up_pixel_buffer_dma_draw_box+0xf0>
			for (y = t_y; y <= b_y; y++)
100066fc:	5a004136 	bltu	r11,r8,10006804 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
10006700:	5007883a 	mov	r3,r10
			{
				for (x = l_x; x <= r_x; x++)
10006704:	38c00536 	bltu	r7,r3,1000671c <alt_up_pixel_buffer_dma_draw_box+0xdc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
10006708:	18c9883a 	add	r4,r3,r3
1000670c:	2089883a 	add	r4,r4,r2
10006710:	2300002d 	sthio	r12,0(r4)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10006714:	18c00044 	addi	r3,r3,1
10006718:	003ffa06 	br	10006704 <alt_up_pixel_buffer_dma_draw_box+0xc4>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
1000671c:	1145883a 	add	r2,r2,r5
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
10006720:	42000044 	addi	r8,r8,1
10006724:	003ff506 	br	100066fc <alt_up_pixel_buffer_dma_draw_box+0xbc>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
10006728:	1145883a 	add	r2,r2,r5
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
1000672c:	42000044 	addi	r8,r8,1
10006730:	5a003436 	bltu	r11,r8,10006804 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
10006734:	5009883a 	mov	r4,r10
			{
				for (x = l_x; x <= r_x; x++)
10006738:	393ffb36 	bltu	r7,r4,10006728 <alt_up_pixel_buffer_dma_draw_box+0xe8>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
1000673c:	2107883a 	add	r3,r4,r4
10006740:	18c7883a 	add	r3,r3,r3
10006744:	1887883a 	add	r3,r3,r2
10006748:	1b000035 	stwio	r12,0(r3)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
1000674c:	21000044 	addi	r4,r4,1
10006750:	003ff906 	br	10006738 <alt_up_pixel_buffer_dma_draw_box+0xf8>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10006754:	31400c1e 	bne	r6,r5,10006788 <alt_up_pixel_buffer_dma_draw_box+0x148>
			addr = addr + t_y * limit_x;
10006758:	4245383a 	mul	r2,r8,r9
1000675c:	10c5883a 	add	r2,r2,r3
			for (y = t_y; y <= b_y; y++)
10006760:	5a002836 	bltu	r11,r8,10006804 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
10006764:	5007883a 	mov	r3,r10
			{
				for (x = l_x; x <= r_x; x++)
10006768:	38c00436 	bltu	r7,r3,1000677c <alt_up_pixel_buffer_dma_draw_box+0x13c>
				{
					IOWR_8DIRECT(addr, x, local_color);
1000676c:	10c9883a 	add	r4,r2,r3
10006770:	23000025 	stbio	r12,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
10006774:	18c00044 	addi	r3,r3,1
10006778:	003ffb06 	br	10006768 <alt_up_pixel_buffer_dma_draw_box+0x128>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
1000677c:	1245883a 	add	r2,r2,r9
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10006780:	42000044 	addi	r8,r8,1
10006784:	003ff606 	br	10006760 <alt_up_pixel_buffer_dma_draw_box+0x120>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10006788:	00800084 	movi	r2,2
1000678c:	4a53883a 	add	r9,r9,r9
10006790:	30800d1e 	bne	r6,r2,100067c8 <alt_up_pixel_buffer_dma_draw_box+0x188>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
10006794:	4245383a 	mul	r2,r8,r9
10006798:	10c5883a 	add	r2,r2,r3
			for (y = t_y; y <= b_y; y++)
1000679c:	5a001936 	bltu	r11,r8,10006804 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
100067a0:	5007883a 	mov	r3,r10
			{
				for (x = l_x; x <= r_x; x++)
100067a4:	38c00536 	bltu	r7,r3,100067bc <alt_up_pixel_buffer_dma_draw_box+0x17c>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
100067a8:	18c9883a 	add	r4,r3,r3
100067ac:	2089883a 	add	r4,r4,r2
100067b0:	2300002d 	sthio	r12,0(r4)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
100067b4:	18c00044 	addi	r3,r3,1
100067b8:	003ffa06 	br	100067a4 <alt_up_pixel_buffer_dma_draw_box+0x164>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
100067bc:	1245883a 	add	r2,r2,r9
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
100067c0:	42000044 	addi	r8,r8,1
100067c4:	003ff506 	br	1000679c <alt_up_pixel_buffer_dma_draw_box+0x15c>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
100067c8:	4a53883a 	add	r9,r9,r9
			addr = addr + t_y * limit_x;
100067cc:	4245383a 	mul	r2,r8,r9
100067d0:	10c5883a 	add	r2,r2,r3
			for (y = t_y; y <= b_y; y++)
100067d4:	5a000b36 	bltu	r11,r8,10006804 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
100067d8:	5009883a 	mov	r4,r10
			{
				for (x = l_x; x <= r_x; x++)
100067dc:	39000636 	bltu	r7,r4,100067f8 <alt_up_pixel_buffer_dma_draw_box+0x1b8>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
100067e0:	2107883a 	add	r3,r4,r4
100067e4:	18c7883a 	add	r3,r3,r3
100067e8:	1887883a 	add	r3,r3,r2
100067ec:	1b000035 	stwio	r12,0(r3)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
100067f0:	21000044 	addi	r4,r4,1
100067f4:	003ff906 	br	100067dc <alt_up_pixel_buffer_dma_draw_box+0x19c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
100067f8:	1245883a 	add	r2,r2,r9
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
100067fc:	42000044 	addi	r8,r8,1
10006800:	003ff406 	br	100067d4 <alt_up_pixel_buffer_dma_draw_box+0x194>
10006804:	f800283a 	ret

10006808 <alt_up_pixel_buffer_dma_draw_hline>:
	}
}

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
10006808:	da400017 	ldw	r9,0(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
1000680c:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
10006810:	2805883a 	mov	r2,r5
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
10006814:	3140022e 	bgeu	r6,r5,10006820 <alt_up_pixel_buffer_dma_draw_hline+0x18>
10006818:	3005883a 	mov	r2,r6
1000681c:	280d883a 	mov	r6,r5
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
10006820:	1200472e 	bgeu	r2,r8,10006940 <alt_up_pixel_buffer_dma_draw_hline+0x138>
10006824:	20c01017 	ldw	r3,64(r4)
10006828:	38c0452e 	bgeu	r7,r3,10006940 <alt_up_pixel_buffer_dma_draw_hline+0x138>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
1000682c:	32000136 	bltu	r6,r8,10006834 <alt_up_pixel_buffer_dma_draw_hline+0x2c>
	{
		r_x = limit_x - 1;
10006830:	41bfffc4 	addi	r6,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
10006834:	d8c00117 	ldw	r3,4(sp)
10006838:	02800044 	movi	r10,1
1000683c:	1a80021e 	bne	r3,r10,10006848 <alt_up_pixel_buffer_dma_draw_hline+0x40>
		addr = pixel_buffer->back_buffer_start_address;
10006840:	20c00c17 	ldw	r3,48(r4)
10006844:	00000106 	br	1000684c <alt_up_pixel_buffer_dma_draw_hline+0x44>
	else
		addr = pixel_buffer->buffer_start_address;
10006848:	20c00b17 	ldw	r3,44(r4)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
1000684c:	22c00d17 	ldw	r11,52(r4)
10006850:	21400e17 	ldw	r5,56(r4)
10006854:	58001b1e 	bne	r11,zero,100068c4 <alt_up_pixel_buffer_dma_draw_hline+0xbc>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
10006858:	21001317 	ldw	r4,76(r4)
1000685c:	390e983a 	sll	r7,r7,r4
10006860:	38c7883a 	add	r3,r7,r3
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10006864:	2a80061e 	bne	r5,r10,10006880 <alt_up_pixel_buffer_dma_draw_hline+0x78>
			for (x = l_x; x <= r_x; x++)
10006868:	30800436 	bltu	r6,r2,1000687c <alt_up_pixel_buffer_dma_draw_hline+0x74>
			{
				IOWR_8DIRECT(addr, x, local_color);
1000686c:	10c9883a 	add	r4,r2,r3
10006870:	22400025 	stbio	r9,0(r4)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
10006874:	10800044 	addi	r2,r2,1
10006878:	003ffb06 	br	10006868 <alt_up_pixel_buffer_dma_draw_hline+0x60>
1000687c:	f800283a 	ret
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10006880:	01000084 	movi	r4,2
10006884:	2900071e 	bne	r5,r4,100068a4 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
			for (x = l_x; x <= r_x; x++)
10006888:	30800536 	bltu	r6,r2,100068a0 <alt_up_pixel_buffer_dma_draw_hline+0x98>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
1000688c:	1089883a 	add	r4,r2,r2
10006890:	20c9883a 	add	r4,r4,r3
10006894:	2240002d 	sthio	r9,0(r4)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
10006898:	10800044 	addi	r2,r2,1
1000689c:	003ffa06 	br	10006888 <alt_up_pixel_buffer_dma_draw_hline+0x80>
100068a0:	f800283a 	ret
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
100068a4:	30800636 	bltu	r6,r2,100068c0 <alt_up_pixel_buffer_dma_draw_hline+0xb8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
100068a8:	1089883a 	add	r4,r2,r2
100068ac:	2109883a 	add	r4,r4,r4
100068b0:	20c9883a 	add	r4,r4,r3
100068b4:	22400035 	stwio	r9,0(r4)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
100068b8:	10800044 	addi	r2,r2,1
100068bc:	003ff906 	br	100068a4 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
100068c0:	f800283a 	ret
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
100068c4:	2a80081e 	bne	r5,r10,100068e8 <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			addr = addr + line_y * limit_x;
100068c8:	41cf383a 	mul	r7,r8,r7
100068cc:	38c7883a 	add	r3,r7,r3
			for (x = l_x; x <= r_x; x++)
100068d0:	30800436 	bltu	r6,r2,100068e4 <alt_up_pixel_buffer_dma_draw_hline+0xdc>
			{
				IOWR_8DIRECT(addr, x, local_color);
100068d4:	10c9883a 	add	r4,r2,r3
100068d8:	22400025 	stbio	r9,0(r4)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
100068dc:	10800044 	addi	r2,r2,1
100068e0:	003ffb06 	br	100068d0 <alt_up_pixel_buffer_dma_draw_hline+0xc8>
100068e4:	f800283a 	ret
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
100068e8:	01000084 	movi	r4,2
100068ec:	4211883a 	add	r8,r8,r8
100068f0:	2900091e 	bne	r5,r4,10006918 <alt_up_pixel_buffer_dma_draw_hline+0x110>
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
100068f4:	41cf383a 	mul	r7,r8,r7
100068f8:	38c7883a 	add	r3,r7,r3
			for (x = l_x; x <= r_x; x++)
100068fc:	30800536 	bltu	r6,r2,10006914 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
10006900:	1089883a 	add	r4,r2,r2
10006904:	20c9883a 	add	r4,r4,r3
10006908:	2240002d 	sthio	r9,0(r4)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
1000690c:	10800044 	addi	r2,r2,1
10006910:	003ffa06 	br	100068fc <alt_up_pixel_buffer_dma_draw_hline+0xf4>
10006914:	f800283a 	ret
			}
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
10006918:	4211883a 	add	r8,r8,r8
1000691c:	41cf383a 	mul	r7,r8,r7
10006920:	38c7883a 	add	r3,r7,r3
			for (x = l_x; x <= r_x; x++)
10006924:	30800636 	bltu	r6,r2,10006940 <alt_up_pixel_buffer_dma_draw_hline+0x138>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
10006928:	1089883a 	add	r4,r2,r2
1000692c:	2109883a 	add	r4,r4,r4
10006930:	20c9883a 	add	r4,r4,r3
10006934:	22400035 	stwio	r9,0(r4)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
10006938:	10800044 	addi	r2,r2,1
1000693c:	003ff906 	br	10006924 <alt_up_pixel_buffer_dma_draw_hline+0x11c>
10006940:	f800283a 	ret

10006944 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
10006944:	da800017 	ldw	r10,0(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
10006948:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
1000694c:	3011883a 	mov	r8,r6
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
10006950:	3980022e 	bgeu	r7,r6,1000695c <alt_up_pixel_buffer_dma_draw_vline+0x18>
10006954:	3811883a 	mov	r8,r7
10006958:	300f883a 	mov	r7,r6
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
1000695c:	2a404f2e 	bgeu	r5,r9,10006a9c <alt_up_pixel_buffer_dma_draw_vline+0x158>
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
10006960:	20801017 	ldw	r2,64(r4)
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
10006964:	40804d2e 	bgeu	r8,r2,10006a9c <alt_up_pixel_buffer_dma_draw_vline+0x158>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
10006968:	38800136 	bltu	r7,r2,10006970 <alt_up_pixel_buffer_dma_draw_vline+0x2c>
	{
		b_y = limit_y - 1;
1000696c:	11ffffc4 	addi	r7,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
10006970:	d8800117 	ldw	r2,4(sp)
10006974:	01800044 	movi	r6,1
10006978:	1180021e 	bne	r2,r6,10006984 <alt_up_pixel_buffer_dma_draw_vline+0x40>
		addr = pixel_buffer->back_buffer_start_address;
1000697c:	20800c17 	ldw	r2,48(r4)
10006980:	00000106 	br	10006988 <alt_up_pixel_buffer_dma_draw_vline+0x44>
	else
		addr = pixel_buffer->buffer_start_address;
10006984:	20800b17 	ldw	r2,44(r4)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
10006988:	20c00d17 	ldw	r3,52(r4)
1000698c:	22c00e17 	ldw	r11,56(r4)
10006990:	1800211e 	bne	r3,zero,10006a18 <alt_up_pixel_buffer_dma_draw_vline+0xd4>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
10006994:	21001317 	ldw	r4,76(r4)
		addr = addr + (t_y << offset_y);
10006998:	4106983a 	sll	r3,r8,r4
1000699c:	1887883a 	add	r3,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
100069a0:	5980081e 	bne	r11,r6,100069c4 <alt_up_pixel_buffer_dma_draw_vline+0x80>
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
100069a4:	310c983a 	sll	r6,r6,r4
100069a8:	28c5883a 	add	r2,r5,r3
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
100069ac:	3a000436 	bltu	r7,r8,100069c0 <alt_up_pixel_buffer_dma_draw_vline+0x7c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
100069b0:	12800025 	stbio	r10,0(r2)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
100069b4:	42000044 	addi	r8,r8,1
100069b8:	1185883a 	add	r2,r2,r6
100069bc:	003ffb06 	br	100069ac <alt_up_pixel_buffer_dma_draw_vline+0x68>
100069c0:	f800283a 	ret
100069c4:	00800044 	movi	r2,1
100069c8:	110c983a 	sll	r6,r2,r4
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
100069cc:	01000084 	movi	r4,2
100069d0:	2945883a 	add	r2,r5,r5
100069d4:	59000326 	beq	r11,r4,100069e4 <alt_up_pixel_buffer_dma_draw_vline+0xa0>
100069d8:	1085883a 	add	r2,r2,r2
100069dc:	10c5883a 	add	r2,r2,r3
100069e0:	00000706 	br	10006a00 <alt_up_pixel_buffer_dma_draw_vline+0xbc>
100069e4:	10c5883a 	add	r2,r2,r3
			for (y = t_y; y <= b_y; y++)
100069e8:	3a000436 	bltu	r7,r8,100069fc <alt_up_pixel_buffer_dma_draw_vline+0xb8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
100069ec:	1280002d 	sthio	r10,0(r2)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
100069f0:	42000044 	addi	r8,r8,1
100069f4:	1185883a 	add	r2,r2,r6
100069f8:	003ffb06 	br	100069e8 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
100069fc:	f800283a 	ret
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
10006a00:	3a000436 	bltu	r7,r8,10006a14 <alt_up_pixel_buffer_dma_draw_vline+0xd0>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
10006a04:	12800035 	stwio	r10,0(r2)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
10006a08:	42000044 	addi	r8,r8,1
10006a0c:	1185883a 	add	r2,r2,r6
10006a10:	003ffb06 	br	10006a00 <alt_up_pixel_buffer_dma_draw_vline+0xbc>
10006a14:	f800283a 	ret
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
10006a18:	5980091e 	bne	r11,r6,10006a40 <alt_up_pixel_buffer_dma_draw_vline+0xfc>
10006a1c:	4247383a 	mul	r3,r8,r9
10006a20:	194b883a 	add	r5,r3,r5
10006a24:	2885883a 	add	r2,r5,r2
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10006a28:	3a000436 	bltu	r7,r8,10006a3c <alt_up_pixel_buffer_dma_draw_vline+0xf8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
10006a2c:	12800025 	stbio	r10,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10006a30:	42000044 	addi	r8,r8,1
10006a34:	1245883a 	add	r2,r2,r9
10006a38:	003ffb06 	br	10006a28 <alt_up_pixel_buffer_dma_draw_vline+0xe4>
10006a3c:	f800283a 	ret
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
10006a40:	00c00084 	movi	r3,2
10006a44:	294b883a 	add	r5,r5,r5
10006a48:	4a53883a 	add	r9,r9,r9
10006a4c:	58c0091e 	bne	r11,r3,10006a74 <alt_up_pixel_buffer_dma_draw_vline+0x130>
10006a50:	4247383a 	mul	r3,r8,r9
10006a54:	194b883a 	add	r5,r3,r5
10006a58:	2885883a 	add	r2,r5,r2
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10006a5c:	3a000436 	bltu	r7,r8,10006a70 <alt_up_pixel_buffer_dma_draw_vline+0x12c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
10006a60:	1280002d 	sthio	r10,0(r2)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10006a64:	42000044 	addi	r8,r8,1
10006a68:	1245883a 	add	r2,r2,r9
10006a6c:	003ffb06 	br	10006a5c <alt_up_pixel_buffer_dma_draw_vline+0x118>
10006a70:	f800283a 	ret
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
10006a74:	4a53883a 	add	r9,r9,r9
10006a78:	4247383a 	mul	r3,r8,r9
10006a7c:	294b883a 	add	r5,r5,r5
10006a80:	194b883a 	add	r5,r3,r5
10006a84:	2885883a 	add	r2,r5,r2
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10006a88:	3a000436 	bltu	r7,r8,10006a9c <alt_up_pixel_buffer_dma_draw_vline+0x158>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
10006a8c:	12800035 	stwio	r10,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
10006a90:	42000044 	addi	r8,r8,1
10006a94:	1245883a 	add	r2,r2,r9
10006a98:	003ffb06 	br	10006a88 <alt_up_pixel_buffer_dma_draw_vline+0x144>
10006a9c:	f800283a 	ret

10006aa0 <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
10006aa0:	defff604 	addi	sp,sp,-40
10006aa4:	dc400315 	stw	r17,12(sp)
10006aa8:	dc000215 	stw	r16,8(sp)
10006aac:	dc400c17 	ldw	r17,48(sp)
10006ab0:	dc000b17 	ldw	r16,44(sp)
10006ab4:	dd400715 	stw	r21,28(sp)
10006ab8:	dcc00515 	stw	r19,20(sp)
10006abc:	dd400a17 	ldw	r21,40(sp)
10006ac0:	3827883a 	mov	r19,r7
10006ac4:	dd000615 	stw	r20,24(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
10006ac8:	300f883a 	mov	r7,r6
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
10006acc:	3029883a 	mov	r20,r6
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
10006ad0:	dc400115 	stw	r17,4(sp)
10006ad4:	980d883a 	mov	r6,r19
10006ad8:	dc000015 	stw	r16,0(sp)
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
10006adc:	dfc00915 	stw	ra,36(sp)
10006ae0:	dd800815 	stw	r22,32(sp)
10006ae4:	dc800415 	stw	r18,16(sp)
10006ae8:	282d883a 	mov	r22,r5
10006aec:	2025883a 	mov	r18,r4
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
10006af0:	00068080 	call	10006808 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
10006af4:	a80f883a 	mov	r7,r21
10006af8:	980d883a 	mov	r6,r19
10006afc:	b00b883a 	mov	r5,r22
10006b00:	9009883a 	mov	r4,r18
10006b04:	dc400115 	stw	r17,4(sp)
10006b08:	dc000015 	stw	r16,0(sp)
10006b0c:	00068080 	call	10006808 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
10006b10:	a80f883a 	mov	r7,r21
10006b14:	a00d883a 	mov	r6,r20
10006b18:	b00b883a 	mov	r5,r22
10006b1c:	9009883a 	mov	r4,r18
10006b20:	dc400115 	stw	r17,4(sp)
10006b24:	dc000015 	stw	r16,0(sp)
10006b28:	00069440 	call	10006944 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
10006b2c:	a80f883a 	mov	r7,r21
10006b30:	a00d883a 	mov	r6,r20
10006b34:	980b883a 	mov	r5,r19
10006b38:	9009883a 	mov	r4,r18
10006b3c:	dc400b15 	stw	r17,44(sp)
10006b40:	dc000a15 	stw	r16,40(sp)
}
10006b44:	dfc00917 	ldw	ra,36(sp)
10006b48:	dd800817 	ldw	r22,32(sp)
10006b4c:	dd400717 	ldw	r21,28(sp)
10006b50:	dd000617 	ldw	r20,24(sp)
10006b54:	dcc00517 	ldw	r19,20(sp)
10006b58:	dc800417 	ldw	r18,16(sp)
10006b5c:	dc400317 	ldw	r17,12(sp)
10006b60:	dc000217 	ldw	r16,8(sp)
10006b64:	dec00a04 	addi	sp,sp,40
void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
10006b68:	00069441 	jmpi	10006944 <alt_up_pixel_buffer_dma_draw_vline>

10006b6c <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
10006b6c:	d8c00117 	ldw	r3,4(sp)
10006b70:	d8800017 	ldw	r2,0(sp)
10006b74:	29cb383a 	mul	r5,r5,r7
	if (mode == 0)
10006b78:	1800041e 	bne	r3,zero,10006b8c <helper_plot_pixel+0x20>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
10006b7c:	298d883a 	add	r6,r5,r6
10006b80:	310d883a 	add	r6,r6,r4
10006b84:	30800025 	stbio	r2,0(r6)
10006b88:	f800283a 	ret
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
10006b8c:	298d883a 	add	r6,r5,r6
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
10006b90:	01c00044 	movi	r7,1
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
10006b94:	318d883a 	add	r6,r6,r6
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
10006b98:	19c0031e 	bne	r3,r7,10006ba8 <helper_plot_pixel+0x3c>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
10006b9c:	310d883a 	add	r6,r6,r4
10006ba0:	3080002d 	sthio	r2,0(r6)
10006ba4:	f800283a 	ret
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
10006ba8:	318d883a 	add	r6,r6,r6
10006bac:	310d883a 	add	r6,r6,r4
10006bb0:	30800035 	stwio	r2,0(r6)
10006bb4:	f800283a 	ret

10006bb8 <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
10006bb8:	defff304 	addi	sp,sp,-52
10006bbc:	d8800d17 	ldw	r2,52(sp)
10006bc0:	dcc00615 	stw	r19,24(sp)
10006bc4:	dc800515 	stw	r18,20(sp)
10006bc8:	dc400415 	stw	r17,16(sp)
10006bcc:	dfc00c15 	stw	ra,48(sp)
10006bd0:	df000b15 	stw	fp,44(sp)
10006bd4:	ddc00a15 	stw	r23,40(sp)
10006bd8:	dd800915 	stw	r22,36(sp)
10006bdc:	dd400815 	stw	r21,32(sp)
10006be0:	dd000715 	stw	r20,28(sp)
10006be4:	dc000315 	stw	r16,12(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
10006be8:	1187c83a 	sub	r3,r2,r6
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
10006bec:	2823883a 	mov	r17,r5
10006bf0:	3025883a 	mov	r18,r6
10006bf4:	3827883a 	mov	r19,r7
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
10006bf8:	1800010e 	bge	r3,zero,10006c00 <alt_up_pixel_buffer_dma_draw_line+0x48>
10006bfc:	00c7c83a 	sub	r3,zero,r3
10006c00:	9c4bc83a 	sub	r5,r19,r17
10006c04:	2800010e 	bge	r5,zero,10006c0c <alt_up_pixel_buffer_dma_draw_line+0x54>
10006c08:	014bc83a 	sub	r5,zero,r5
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
10006c0c:	25000e17 	ldw	r20,56(r4)
10006c10:	05800044 	movi	r22,1
10006c14:	a5800426 	beq	r20,r22,10006c28 <alt_up_pixel_buffer_dma_draw_line+0x70>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
10006c18:	a50000a0 	cmpeqi	r20,r20,2
10006c1c:	01800084 	movi	r6,2
10006c20:	3529c83a 	sub	r20,r6,r20
10006c24:	00000106 	br	10006c2c <alt_up_pixel_buffer_dma_draw_line+0x74>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
10006c28:	0029883a 	mov	r20,zero
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
10006c2c:	21800d17 	ldw	r6,52(r4)
10006c30:	3000041e 	bne	r6,zero,10006c44 <alt_up_pixel_buffer_dma_draw_line+0x8c>
10006c34:	21801317 	ldw	r6,76(r4)
10006c38:	350dc83a 	sub	r6,r6,r20
10006c3c:	b1ac983a 	sll	r22,r22,r6
10006c40:	00000106 	br	10006c48 <alt_up_pixel_buffer_dma_draw_line+0x90>
10006c44:	25800f17 	ldw	r22,60(r4)

	if (backbuffer == 1)
10006c48:	d9c00f17 	ldw	r7,60(sp)
10006c4c:	01800044 	movi	r6,1
10006c50:	3980021e 	bne	r7,r6,10006c5c <alt_up_pixel_buffer_dma_draw_line+0xa4>
		buffer_start = pixel_buffer->back_buffer_start_address;
10006c54:	22000c17 	ldw	r8,48(r4)
10006c58:	00000106 	br	10006c60 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	else
		buffer_start = pixel_buffer->buffer_start_address;
10006c5c:	22000b17 	ldw	r8,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
10006c60:	28c0060e 	bge	r5,r3,10006c7c <alt_up_pixel_buffer_dma_draw_line+0xc4>
10006c64:	9809883a 	mov	r4,r19
		error = x_0;
		x_0 = y_0;
		y_0 = error;
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
10006c68:	1027883a 	mov	r19,r2
		y_1 = error;
10006c6c:	2005883a 	mov	r2,r4
10006c70:	8809883a 	mov	r4,r17

	/* Preprocessing inputs */
	if (steep > 0) {
		// Swap x_0 and y_0
		error = x_0;
		x_0 = y_0;
10006c74:	9023883a 	mov	r17,r18
		y_0 = error;
10006c78:	2025883a 	mov	r18,r4
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
10006c7c:	9c40060e 	bge	r19,r17,10006c98 <alt_up_pixel_buffer_dma_draw_line+0xe0>
10006c80:	9009883a 	mov	r4,r18
		error = x_0;
		x_0 = x_1;
		x_1 = error;
		// Swap y_0 and y_1
		error = y_0;
		y_0 = y_1;
10006c84:	1025883a 	mov	r18,r2
		y_1 = error;
10006c88:	2005883a 	mov	r2,r4
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
10006c8c:	8809883a 	mov	r4,r17
10006c90:	9823883a 	mov	r17,r19
10006c94:	2027883a 	mov	r19,r4
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
10006c98:	14afc83a 	sub	r23,r2,r18
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
10006c9c:	9c79c83a 	sub	fp,r19,r17
	deltay = ABS(y_1 - y_0);
10006ca0:	b800010e 	bge	r23,zero,10006ca8 <alt_up_pixel_buffer_dma_draw_line+0xf0>
10006ca4:	05efc83a 	sub	r23,zero,r23
	error = -(deltax / 2); 
10006ca8:	e020d7fa 	srli	r16,fp,31
10006cac:	8721883a 	add	r16,r16,fp
10006cb0:	8021d07a 	srai	r16,r16,1
10006cb4:	0421c83a 	sub	r16,zero,r16
	y = y_0;
	if (y_0 < y_1)
10006cb8:	90800216 	blt	r18,r2,10006cc4 <alt_up_pixel_buffer_dma_draw_line+0x10c>
		ystep = 1;
	else
		ystep = -1;
10006cbc:	057fffc4 	movi	r21,-1
10006cc0:	00000106 	br	10006cc8 <alt_up_pixel_buffer_dma_draw_line+0x110>
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
	error = -(deltax / 2); 
	y = y_0;
	if (y_0 < y_1)
		ystep = 1;
10006cc4:	05400044 	movi	r21,1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
10006cc8:	28c0200e 	bge	r5,r3,10006d4c <alt_up_pixel_buffer_dma_draw_line+0x194>
	{
		for (x=x_0; x <= x_1; x++) {
10006ccc:	9c402016 	blt	r19,r17,10006d50 <alt_up_pixel_buffer_dma_draw_line+0x198>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
10006cd0:	d8800e17 	ldw	r2,56(sp)
10006cd4:	4009883a 	mov	r4,r8
10006cd8:	dd000115 	stw	r20,4(sp)
10006cdc:	d8800015 	stw	r2,0(sp)
10006ce0:	880f883a 	mov	r7,r17
10006ce4:	900d883a 	mov	r6,r18
10006ce8:	b00b883a 	mov	r5,r22
10006cec:	da000215 	stw	r8,8(sp)
			error = error + deltay;
10006cf0:	85e1883a 	add	r16,r16,r23
	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
10006cf4:	0006b6c0 	call	10006b6c <helper_plot_pixel>
			error = error + deltay;
			if (error > 0) {
10006cf8:	da000217 	ldw	r8,8(sp)
10006cfc:	0400020e 	bge	zero,r16,10006d08 <alt_up_pixel_buffer_dma_draw_line+0x150>
				y = y + ystep;
10006d00:	9565883a 	add	r18,r18,r21
				error = error - deltax;
10006d04:	8721c83a 	sub	r16,r16,fp

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
10006d08:	8c400044 	addi	r17,r17,1
10006d0c:	003fef06 	br	10006ccc <alt_up_pixel_buffer_dma_draw_line+0x114>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
10006d10:	d8800e17 	ldw	r2,56(sp)
10006d14:	4009883a 	mov	r4,r8
10006d18:	dd000115 	stw	r20,4(sp)
10006d1c:	d8800015 	stw	r2,0(sp)
10006d20:	900f883a 	mov	r7,r18
10006d24:	880d883a 	mov	r6,r17
10006d28:	b00b883a 	mov	r5,r22
10006d2c:	da000215 	stw	r8,8(sp)
			error = error + deltay;
10006d30:	85e1883a 	add	r16,r16,r23
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
10006d34:	0006b6c0 	call	10006b6c <helper_plot_pixel>
			error = error + deltay;
			if (error > 0) {
10006d38:	da000217 	ldw	r8,8(sp)
10006d3c:	0400020e 	bge	zero,r16,10006d48 <alt_up_pixel_buffer_dma_draw_line+0x190>
				y = y + ystep;
10006d40:	9565883a 	add	r18,r18,r21
				error = error - deltax;
10006d44:	8721c83a 	sub	r16,r16,fp
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
10006d48:	8c400044 	addi	r17,r17,1
10006d4c:	9c7ff00e 	bge	r19,r17,10006d10 <alt_up_pixel_buffer_dma_draw_line+0x158>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
10006d50:	dfc00c17 	ldw	ra,48(sp)
10006d54:	df000b17 	ldw	fp,44(sp)
10006d58:	ddc00a17 	ldw	r23,40(sp)
10006d5c:	dd800917 	ldw	r22,36(sp)
10006d60:	dd400817 	ldw	r21,32(sp)
10006d64:	dd000717 	ldw	r20,28(sp)
10006d68:	dcc00617 	ldw	r19,24(sp)
10006d6c:	dc800517 	ldw	r18,20(sp)
10006d70:	dc400417 	ldw	r17,16(sp)
10006d74:	dc000317 	ldw	r16,12(sp)
10006d78:	dec00d04 	addi	sp,sp,52
10006d7c:	f800283a 	ret

10006d80 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10006d80:	0005883a 	mov	r2,zero
10006d84:	00c40004 	movi	r3,4096
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
10006d88:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10006d8c:	10800804 	addi	r2,r2,32
10006d90:	10fffd1e 	bne	r2,r3,10006d88 <alt_dcache_flush_all+0x8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10006d94:	f800283a 	ret

10006d98 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
10006d98:	3005883a 	mov	r2,r6
10006d9c:	f800283a 	ret

10006da0 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10006da0:	20000226 	beq	r4,zero,10006dac <alt_dev_llist_insert+0xc>
10006da4:	20800217 	ldw	r2,8(r4)
10006da8:	1000101e 	bne	r2,zero,10006dec <alt_dev_llist_insert+0x4c>
10006dac:	d0a00a17 	ldw	r2,-32728(gp)
10006db0:	10000926 	beq	r2,zero,10006dd8 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10006db4:	deffff04 	addi	sp,sp,-4
10006db8:	dfc00015 	stw	ra,0(sp)
10006dbc:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
10006dc0:	00c00584 	movi	r3,22
10006dc4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
10006dc8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
10006dcc:	dfc00017 	ldw	ra,0(sp)
10006dd0:	dec00104 	addi	sp,sp,4
10006dd4:	f800283a 	ret
10006dd8:	d0a0a904 	addi	r2,gp,-32092
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
10006ddc:	00c00584 	movi	r3,22
10006de0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
10006de4:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
10006de8:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
10006dec:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10006df0:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
10006df4:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
10006df8:	28800017 	ldw	r2,0(r5)
10006dfc:	11000115 	stw	r4,4(r2)
  list->next           = entry;
10006e00:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
10006e04:	0005883a 	mov	r2,zero
10006e08:	f800283a 	ret

10006e0c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10006e0c:	defffb04 	addi	sp,sp,-20
10006e10:	dcc00315 	stw	r19,12(sp)
10006e14:	dc800215 	stw	r18,8(sp)
10006e18:	dc400115 	stw	r17,4(sp)
10006e1c:	dc000015 	stw	r16,0(sp)
10006e20:	dfc00415 	stw	ra,16(sp)
10006e24:	2027883a 	mov	r19,r4
10006e28:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
10006e2c:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
10006e30:	000578c0 	call	1000578c <strlen>
10006e34:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10006e38:	84400726 	beq	r16,r17,10006e58 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10006e3c:	81000217 	ldw	r4,8(r16)
10006e40:	900d883a 	mov	r6,r18
10006e44:	980b883a 	mov	r5,r19
10006e48:	00070340 	call	10007034 <memcmp>
10006e4c:	10000426 	beq	r2,zero,10006e60 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
10006e50:	84000017 	ldw	r16,0(r16)
10006e54:	003ff806 	br	10006e38 <alt_find_dev+0x2c>
  }
  
  /* No match found */
  
  return NULL;
10006e58:	0005883a 	mov	r2,zero
10006e5c:	00000106 	br	10006e64 <alt_find_dev+0x58>
10006e60:	8005883a 	mov	r2,r16
}
10006e64:	dfc00417 	ldw	ra,16(sp)
10006e68:	dcc00317 	ldw	r19,12(sp)
10006e6c:	dc800217 	ldw	r18,8(sp)
10006e70:	dc400117 	ldw	r17,4(sp)
10006e74:	dc000017 	ldw	r16,0(sp)
10006e78:	dec00504 	addi	sp,sp,20
10006e7c:	f800283a 	ret

10006e80 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
10006e80:	01440004 	movi	r5,4096
10006e84:	0009883a 	mov	r4,zero
10006e88:	0006f881 	jmpi	10006f88 <alt_icache_flush>

10006e8c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10006e8c:	0006f181 	jmpi	10006f18 <alt_iic_isr_register>

10006e90 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10006e90:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10006e94:	00bfff84 	movi	r2,-2
10006e98:	2084703a 	and	r2,r4,r2
10006e9c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
10006ea0:	00c00044 	movi	r3,1
10006ea4:	d0a0af17 	ldw	r2,-32068(gp)
10006ea8:	194a983a 	sll	r5,r3,r5
10006eac:	288ab03a 	or	r5,r5,r2
10006eb0:	d160af15 	stw	r5,-32068(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10006eb4:	d0a0af17 	ldw	r2,-32068(gp)
10006eb8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10006ebc:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
10006ec0:	0005883a 	mov	r2,zero
10006ec4:	f800283a 	ret

10006ec8 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10006ec8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10006ecc:	00bfff84 	movi	r2,-2
10006ed0:	2084703a 	and	r2,r4,r2
10006ed4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
10006ed8:	00ffff84 	movi	r3,-2
10006edc:	d0a0af17 	ldw	r2,-32068(gp)
10006ee0:	194a183a 	rol	r5,r3,r5
10006ee4:	288a703a 	and	r5,r5,r2
10006ee8:	d160af15 	stw	r5,-32068(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10006eec:	d0a0af17 	ldw	r2,-32068(gp)
10006ef0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10006ef4:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
10006ef8:	0005883a 	mov	r2,zero
10006efc:	f800283a 	ret

10006f00 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10006f00:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
10006f04:	00800044 	movi	r2,1
10006f08:	1144983a 	sll	r2,r2,r5
10006f0c:	10c4703a 	and	r2,r2,r3
}
10006f10:	1004c03a 	cmpne	r2,r2,zero
10006f14:	f800283a 	ret

10006f18 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
10006f18:	00c007c4 	movi	r3,31
10006f1c:	19401616 	blt	r3,r5,10006f78 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10006f20:	defffe04 	addi	sp,sp,-8
10006f24:	dfc00115 	stw	ra,4(sp)
10006f28:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10006f2c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10006f30:	00ffff84 	movi	r3,-2
10006f34:	80c6703a 	and	r3,r16,r3
10006f38:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
10006f3c:	280490fa 	slli	r2,r5,3
10006f40:	00c40774 	movhi	r3,4125
10006f44:	18e65f04 	addi	r3,r3,-26244
10006f48:	1885883a 	add	r2,r3,r2
10006f4c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
10006f50:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10006f54:	30000226 	beq	r6,zero,10006f60 <alt_iic_isr_register+0x48>
10006f58:	0006e900 	call	10006e90 <alt_ic_irq_enable>
10006f5c:	00000106 	br	10006f64 <alt_iic_isr_register+0x4c>
10006f60:	0006ec80 	call	10006ec8 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10006f64:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
10006f68:	dfc00117 	ldw	ra,4(sp)
10006f6c:	dc000017 	ldw	r16,0(sp)
10006f70:	dec00204 	addi	sp,sp,8
10006f74:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
10006f78:	00bffa84 	movi	r2,-22
10006f7c:	f800283a 	ret

10006f80 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
10006f80:	000170fa 	wrctl	ienable,zero
10006f84:	f800283a 	ret

10006f88 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
10006f88:	00840004 	movi	r2,4096
10006f8c:	1140012e 	bgeu	r2,r5,10006f94 <alt_icache_flush+0xc>
10006f90:	100b883a 	mov	r5,r2
10006f94:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10006f98:	2005883a 	mov	r2,r4
10006f9c:	1140032e 	bgeu	r2,r5,10006fac <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
10006fa0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10006fa4:	10800804 	addi	r2,r2,32
10006fa8:	003ffc06 	br	10006f9c <alt_icache_flush+0x14>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
10006fac:	210007cc 	andi	r4,r4,31
10006fb0:	20000126 	beq	r4,zero,10006fb8 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
10006fb4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
10006fb8:	0000203a 	flushp
10006fbc:	f800283a 	ret

10006fc0 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
10006fc0:	213ffe84 	addi	r4,r4,-6
10006fc4:	008003c4 	movi	r2,15
10006fc8:	11001636 	bltu	r2,r4,10007024 <alt_exception_cause_generated_bad_addr+0x64>
10006fcc:	200890ba 	slli	r4,r4,2
10006fd0:	00840034 	movhi	r2,4096
10006fd4:	109bf904 	addi	r2,r2,28644
10006fd8:	2089883a 	add	r4,r4,r2
10006fdc:	20800017 	ldw	r2,0(r4)
10006fe0:	1000683a 	jmp	r2
10006fe4:	1000702c 	andhi	zero,r2,448
10006fe8:	1000702c 	andhi	zero,r2,448
10006fec:	10007024 	muli	zero,r2,448
10006ff0:	10007024 	muli	zero,r2,448
10006ff4:	10007024 	muli	zero,r2,448
10006ff8:	1000702c 	andhi	zero,r2,448
10006ffc:	10007024 	muli	zero,r2,448
10007000:	10007024 	muli	zero,r2,448
10007004:	1000702c 	andhi	zero,r2,448
10007008:	1000702c 	andhi	zero,r2,448
1000700c:	10007024 	muli	zero,r2,448
10007010:	1000702c 	andhi	zero,r2,448
10007014:	10007024 	muli	zero,r2,448
10007018:	10007024 	muli	zero,r2,448
1000701c:	10007024 	muli	zero,r2,448
10007020:	1000702c 	andhi	zero,r2,448
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10007024:	0005883a 	mov	r2,zero
10007028:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
1000702c:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
10007030:	f800283a 	ret

10007034 <memcmp>:
10007034:	218d883a 	add	r6,r4,r6
10007038:	21800826 	beq	r4,r6,1000705c <memcmp+0x28>
1000703c:	20800003 	ldbu	r2,0(r4)
10007040:	28c00003 	ldbu	r3,0(r5)
10007044:	10c00226 	beq	r2,r3,10007050 <memcmp+0x1c>
10007048:	10c5c83a 	sub	r2,r2,r3
1000704c:	f800283a 	ret
10007050:	21000044 	addi	r4,r4,1
10007054:	29400044 	addi	r5,r5,1
10007058:	003ff706 	br	10007038 <memcmp+0x4>
1000705c:	0005883a 	mov	r2,zero
10007060:	f800283a 	ret

10007064 <strcmp>:
10007064:	20800003 	ldbu	r2,0(r4)
10007068:	10c03fcc 	andi	r3,r2,255
1000706c:	18c0201c 	xori	r3,r3,128
10007070:	18ffe004 	addi	r3,r3,-128
10007074:	18000526 	beq	r3,zero,1000708c <strcmp+0x28>
10007078:	29800007 	ldb	r6,0(r5)
1000707c:	1980031e 	bne	r3,r6,1000708c <strcmp+0x28>
10007080:	21000044 	addi	r4,r4,1
10007084:	29400044 	addi	r5,r5,1
10007088:	003ff606 	br	10007064 <strcmp>
1000708c:	28c00003 	ldbu	r3,0(r5)
10007090:	10803fcc 	andi	r2,r2,255
10007094:	10c5c83a 	sub	r2,r2,r3
10007098:	f800283a 	ret
